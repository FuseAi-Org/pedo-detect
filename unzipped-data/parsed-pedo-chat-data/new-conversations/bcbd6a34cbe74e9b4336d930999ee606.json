{
    "id": "bcbd6a34cbe74e9b4336d930999ee606",
    "messages": [
        "8c8837db54a2907cacd8633547977e33 (04:46): 69b0d3dfe919a6b860a9fac82de52a7e, eseidel: ES4 is making the trailing comma in object literals optional -- and furthermore, it's not a spec violation because the spec explicitly allows extensions to what it considers valid syntax",
        "fe70b49783daa65bcb249805fb3a2b24 (04:50): 8c8837db54a2907cacd8633547977e33: by making the optional, you mean, making it optional for implementations, or optional for code (i.e. mandatory for implementations to support)",
        "8c8837db54a2907cacd8633547977e33 (04:52): 65325d50b2e25aca54bc871b89758c9c: right now the spec grammar doesn't allow them; ES4 will allow them to be present (but have no semantic effect)",
        "65325d50b2e25aca54bc871b89758c9c (04:53): 8c8837db54a2907cacd8633547977e33: by &quot;right now&quot; you mean ES3, right?",
        "65325d50b2e25aca54bc871b89758c9c (04:53): and the ES4 grammar will allow them?",
        "8c8837db54a2907cacd8633547977e33 (04:53): 65325d50b2e25aca54bc871b89758c9c: yes",
        "8c8837db54a2907cacd8633547977e33 (04:53): yes",
        "8c8837db54a2907cacd8633547977e33 (04:53): allow in the same way that the trailing comma in an array literal is allowed to be present but otherwise has no effect (in the absence of any other trailing commas, that is)",
        "8c8837db54a2907cacd8633547977e33 (04:53): so 1 === [1,] and 2 === [1,2,]",
        "65325d50b2e25aca54bc871b89758c9c (04:54): hopes ES4 has a work-in-progress spec draft to reference soon",
        "8c8837db54a2907cacd8633547977e33 (04:54): brendan follows rather more closely than I do; I don't know the state of what's publicly published as of yet",
        "8c8837db54a2907cacd8633547977e33 (04:55): er, with .length after those examples",
        "65325d50b2e25aca54bc871b89758c9c (04:57): yeah I know how commas in array literals work",
        "65325d50b2e25aca54bc871b89758c9c (04:57): and I think everyone now implements trailing commas in object syntax too",
        "a131216c7af242e66537a58b4ca7c9f9 (04:59): i think IE still rejects object literals with trailing commas",
        "a131216c7af242e66537a58b4ca7c9f9 (05:00): but since it isn't covered by a 2004-or-earlier spec, i guess it's out for acid3",
        "a131216c7af242e66537a58b4ca7c9f9 (05:00): too bad, that one annoyed me ;)",
        "8c8837db54a2907cacd8633547977e33 (05:04): Opera threw a SyntaxError for awhile; lemme track down the blog post grumbling about it :-)",
        "8c8837db54a2907cacd8633547977e33 (05:06): http://my.opera.com/hallvors/blog/show.dml/26650",
        "8c8837db54a2907cacd8633547977e33 (05:09): 69b0d3dfe919a6b860a9fac82de52a7e: oh, on commas: another test which Firefox fails is javascript:alert(1 in [0, , 2] ? &quot;FAIL&quot; : &quot;PASS&quot;)",
        "65325d50b2e25aca54bc871b89758c9c (05:18): I bet Microsoft's JS compatibility document would be a goldmine of JS bugs in all browsers",
        "65325d50b2e25aca54bc871b89758c9c (05:18): (have they posted that publicly anywhere?)",
        "65325d50b2e25aca54bc871b89758c9c (05:19): linked here as a PDF: http://blogs.msdn.com/jscript/archive/2007/10/29/ecmascript-3-and-beyond.aspx",
        "a131216c7af242e66537a58b4ca7c9f9 (05:23): 65325d50b2e25aca54bc871b89758c9c++",
        "65325d50b2e25aca54bc871b89758c9c (05:24): I mean, they conveniently documented their bugs for the world to see",
        "65325d50b2e25aca54bc871b89758c9c (05:24): so that's handy",
        "a131216c7af242e66537a58b4ca7c9f9 (05:25): exactly",
        "1a11ef65e59a402769635562579a7df6 (05:28): 65325d50b2e25aca54bc871b89758c9c: holy crap, they've documented our bugs too!",
        "8c8837db54a2907cacd8633547977e33 (05:30): yeah, that thing was amazing",
        "8c8837db54a2907cacd8633547977e33 (05:31): also because it exactly laid out just how much IE's JS sucks :-)",
        "65325d50b2e25aca54bc871b89758c9c (05:34): in some cases I think the IE behavior should just be declared correct, but it's hard to tell which way is more of a compat issue sometimes",
        "65325d50b2e25aca54bc871b89758c9c (05:35): some of the things they label as &quot;deviations&quot; are actually technically unspecified",
        "65325d50b2e25aca54bc871b89758c9c (05:35): perhaps also vice versa",
        "65325d50b2e25aca54bc871b89758c9c (05:37): oh, I guess I missed the section break actually",
        "a131216c7af242e66537a58b4ca7c9f9 (05:42): what's the highest possible score in the current version of acid3?",
        "1adba86c435b5fe0f7ea043370b1636b (05:43): 100%",
        "1adba86c435b5fe0f7ea043370b1636b (05:43): incomplete tests are treated as passes, afaik",
        "1adba86c435b5fe0f7ea043370b1636b (05:43): non-existent, I should say",
        "a131216c7af242e66537a58b4ca7c9f9 (05:43): oh, wow, gecko and webkit have a ways to go then ;)",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:59): 8c8837db54a2907cacd8633547977e33: where in the spec does it say what should happen for that?",
        "8c8837db54a2907cacd8633547977e33 (06:00): gnarliness in 11.1.4, sec",
        "65325d50b2e25aca54bc871b89758c9c (06:06): 69b0d3dfe919a6b860a9fac82de52a7e: you should check out the Microsoft compat document I linked",
        "8c8837db54a2907cacd8633547977e33 (06:12): https://bugzilla.mozilla.org/show_bug.cgi?id=260106 while I'm tracking through to find the exact details",
        "8c8837db54a2907cacd8633547977e33 (06:14): The production Element List: ElementList , ElisionAssignment Expression is evaluated as follows:",
        "8c8837db54a2907cacd8633547977e33 (06:15): step 2 is &quot;Evaluate Elision_opt, if not present use the value zero&quot;",
        "8c8837db54a2907cacd8633547977e33 (06:15): (insert &quot;_opt &quot; after the first &quot;Elision&quot; two lines ago)",
        "8c8837db54a2907cacd8633547977e33 (06:16): and then step 6 calls [[Put]] with arguments (Result(2) + Result(5)) and Result(4)",
        "8c8837db54a2907cacd8633547977e33 (06:16): 4 calculates the element's value",
        "8c8837db54a2907cacd8633547977e33 (06:16): Result(5) is the length of the partially-constructed array",
        "8c8837db54a2907cacd8633547977e33 (06:16): Elision is evaluated as &quot;Return the numeric value 1&quot;",
        "8c8837db54a2907cacd8633547977e33 (06:17): so an elision shifts all inserted values up an index, but it doesn't result in any value being inserted at the elided index",
        "8c8837db54a2907cacd8633547977e33 (06:17): so that index/property is not present, so |index in array| should be false",
        "8c8837db54a2907cacd8633547977e33 (06:17): 69b0d3dfe919a6b860a9fac82de52a7e: ^",
        "1a11ef65e59a402769635562579a7df6 (06:31): a131216c7af242e66537a58b4ca7c9f9: the nightlies are OK at acid3",
        "1a11ef65e59a402769635562579a7df6 (06:31): a131216c7af242e66537a58b4ca7c9f9: there were like 17 fixes or something since 3.0.4",
        "1a11ef65e59a402769635562579a7df6 (06:31): a131216c7af242e66537a58b4ca7c9f9: still awful :)",
        "1a11ef65e59a402769635562579a7df6 (06:31): but better than 3.0.4",
        "1a11ef65e59a402769635562579a7df6 (06:32): 69b0d3dfe919a6b860a9fac82de52a7e: the blog comments also list more bugs :)",
        "a131216c7af242e66537a58b4ca7c9f9 (06:34): 1a11ef65e59a402769635562579a7df6: cool",
        "a131216c7af242e66537a58b4ca7c9f9 (06:37): eep, at 14%, both webkit trunk and firefox trunk hang for a bit",
        "a131216c7af242e66537a58b4ca7c9f9 (06:38): webkit trunk gets 71% and firefox trunk gets 67%. not that it means anything, since hixie is taking bug suggestions from both teams ;)",
        "a131216c7af242e66537a58b4ca7c9f9 (06:40): it triggers",
        "a131216c7af242e66537a58b4ca7c9f9 (06:40): ###!!! ASSERTION: ReplaceElementAt(negative index): 'aIndex &gt;= 0', file nsVoidArray.cpp, line 491",
        "a131216c7af242e66537a58b4ca7c9f9 (06:40): nice",
        "a131216c7af242e66537a58b4ca7c9f9 (06:40): might be https://bugzilla.mozilla.org/show_bug.cgi?id=378969",
        "a131216c7af242e66537a58b4ca7c9f9 (06:41): which appears to be a TreeWalker bug",
        "8c8837db54a2907cacd8633547977e33 (06:41): a131216c7af242e66537a58b4ca7c9f9: see the spreadsheet, known",
        "a131216c7af242e66537a58b4ca7c9f9 (06:41): the spreadsheet?",
        "8c8837db54a2907cacd8633547977e33 (06:42): a131216c7af242e66537a58b4ca7c9f9: and the &quot;hang&quot; is 69b0d3dfe919a6b860a9fac82de52a7e triggering GC",
        "8c8837db54a2907cacd8633547977e33 (06:42): bug acid3",
        "8c8837db54a2907cacd8633547977e33 (06:42): lemme add you to the editor list, actually",
        "8c8837db54a2907cacd8633547977e33 (06:48): the instability of the numbering isn't helping things all that much :-)",
        "a131216c7af242e66537a58b4ca7c9f9 (06:49): hehe",
        "a131216c7af242e66537a58b4ca7c9f9 (06:49): maybe we can convince hixie to give them names instead of numbers?",
        "8c8837db54a2907cacd8633547977e33 (06:50): it's also fun sometimes to load it and get a random debugging alert that halts the test :-)",
        "8c8837db54a2907cacd8633547977e33 (06:50): possibly",
        "8c8837db54a2907cacd8633547977e33 (06:50): although that just means it's harder to find specific tests in the source",
        "8c8837db54a2907cacd8633547977e33 (06:51): don't think there's a good solution here no matter how it's cut",
        "8c8837db54a2907cacd8633547977e33 (06:51): and this will all be immaterial when it's actually finished",
        "a131216c7af242e66537a58b4ca7c9f9 (06:52): wow, that GC thing is evil",
        "a131216c7af242e66537a58b4ca7c9f9 (06:52): var loops = (((new Date()).valueOf() - 1.07e12) / 32e9) * 0x800; // increases linearly over time",
        "8c8837db54a2907cacd8633547977e33 (06:53): oh, it's ghastly all right",
        "a131216c7af242e66537a58b4ca7c9f9 (06:53): and a kungFuDeathGrip!?!?!?",
        "8c8837db54a2907cacd8633547977e33 (06:53): on the other hand...kungFuDeathGrip!",
        "8c8837db54a2907cacd8633547977e33 (06:53): haha",
        "8c8837db54a2907cacd8633547977e33 (06:54): you can't possibly not love the name",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:00): 8c8837db54a2907cacd8633547977e33: k",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:02): a131216c7af242e66537a58b4ca7c9f9: the tests sometimes get merged, too",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:02): a131216c7af242e66537a58b4ca7c9f9: (and more rarely, split)",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:02): a131216c7af242e66537a58b4ca7c9f9: (and sometimes removed altogether)",
        "a131216c7af242e66537a58b4ca7c9f9 (07:02): k",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:03): the GC thing is pretty evil, but i like the idea of sliding a perf test for DOM manipulation into the middle of the test there :-)",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:03): safari does way better on that perf test than firefox at the moment",
        "65325d50b2e25aca54bc871b89758c9c (07:04): 8c8837db54a2907cacd8633547977e33: I think Mozilla has that name all over internally",
        "8c8837db54a2907cacd8633547977e33 (07:04): 69b0d3dfe919a6b860a9fac82de52a7e: btw, the parens around |new Date()| aren't needed, as whatever's new'd ends at the first pair of parens",
        "65325d50b2e25aca54bc871b89758c9c (07:04): (kungFuDeathGrip)",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:04): 8c8837db54a2907cacd8633547977e33: interesting",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:04): 65325d50b2e25aca54bc871b89758c9c: yeah, that's where i got the name from",
        "65325d50b2e25aca54bc871b89758c9c (07:04): we usually call variables for that same purpose &quot;protect&quot; or &quot;protector&quot; or something",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:05): kungFuDeathGrip is so much more vivid a variable name",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:05): a131216c7af242e66537a58b4ca7c9f9: any idea what test triggers the assert?",
        "8c8837db54a2907cacd8633547977e33 (07:05): 69b0d3dfe919a6b860a9fac82de52a7e: a131216c7af242e66537a58b4ca7c9f9 could tell you all about that (or maybe he should have brendan tell you, seeing as brendan spent so much quality time on such issues somewhat recently) :-)",
        "65325d50b2e25aca54bc871b89758c9c (07:05): shich part of the test is secretly a perf test?",
        "8c8837db54a2907cacd8633547977e33 (07:05): 69b0d3dfe919a6b860a9fac82de52a7e: it's the treewalker test with currentNode mutations; the assert doesn't have any bad side effects",
        "65325d50b2e25aca54bc871b89758c9c (07:05): *which",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:06): 65325d50b2e25aca54bc871b89758c9c: test 26, the part that attempts to force a GC",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:06): (and which will do more and more loops with each passing day)",
        "8c8837db54a2907cacd8633547977e33 (07:06): or at least that's which one it appears to be based on inspection+stack of the assertion",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:06): (though i really should increase the number of loops quadratically to take into account moore's law)",
        "a131216c7af242e66537a58b4ca7c9f9 (07:07): 69b0d3dfe919a6b860a9fac82de52a7e: the spreadsheet says which test it is",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:07): 8c8837db54a2907cacd8633547977e33: k",
        "65325d50b2e25aca54bc871b89758c9c (07:07): 69b0d3dfe919a6b860a9fac82de52a7e: is it because the bug it is testing for fails only when a GC happens?",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:07): a131216c7af242e66537a58b4ca7c9f9: there's a spreadsheet?",
        "65325d50b2e25aca54bc871b89758c9c (07:07): moore's law does not apply to RAM bandwidth",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:07): 65325d50b2e25aca54bc871b89758c9c: yeah",
        "a131216c7af242e66537a58b4ca7c9f9 (07:07): 69b0d3dfe919a6b860a9fac82de52a7e: http://spreadsheets.google.com/pub?key=pNgBCwWdyRTT2JeiZn4B2Yw",
        "a131216c7af242e66537a58b4ca7c9f9 (07:07): 69b0d3dfe919a6b860a9fac82de52a7e: https://bugzilla.mozilla.org/show_bug.cgi?id=acid3 links to it",
        "8c8837db54a2907cacd8633547977e33 (07:08): that bug needs another URL field",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:08): a131216c7af242e66537a58b4ca7c9f9: cool",
        "a131216c7af242e66537a58b4ca7c9f9 (07:08): 8c8837db54a2907cacd8633547977e33: hah",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:09): a131216c7af242e66537a58b4ca7c9f9: the tests from 49 to 80 massively changed numbers recently, btw",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:09): basicaly bucket 5 is empty right now",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:09): i merged what was 4 and 5 into 5",
        "a131216c7af242e66537a58b4ca7c9f9 (07:10): how do you decide how large each test should be? (wrt splitting / merging)",
        "8c8837db54a2907cacd8633547977e33 (07:11): 69b0d3dfe919a6b860a9fac82de52a7e: the earlier test numbers changed, too, probably a bit less, but I fixed them in the last hour or so :-)",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:12): a131216c7af242e66537a58b4ca7c9f9: judgement call, but basically i'd like each test to fail in at least one browser, and the more browsers fail each test the better",
        "a131216c7af242e66537a58b4ca7c9f9 (07:12): hah",
        "a131216c7af242e66537a58b4ca7c9f9 (07:12): if we fix a bug too soon, will it be removed from acid3 and replaced by something else?",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:14): you can't fix a bug too soon",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:15): however, if a test ends up not failing in any browser before the test is done, it might get replaced, if i can find something better"
    ],
    "person_ids": [
        "8c8837db54a2907cacd8633547977e33",
        "fe70b49783daa65bcb249805fb3a2b24",
        "65325d50b2e25aca54bc871b89758c9c",
        "a131216c7af242e66537a58b4ca7c9f9",
        "1a11ef65e59a402769635562579a7df6",
        "1adba86c435b5fe0f7ea043370b1636b",
        "69b0d3dfe919a6b860a9fac82de52a7e"
    ]
}