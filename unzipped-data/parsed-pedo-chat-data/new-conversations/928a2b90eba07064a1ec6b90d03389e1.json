{
    "id": "928a2b90eba07064a1ec6b90d03389e1",
    "messages": [
        "a7b7cb8f0c9e1ce09f542c9f82370a81 (05:11): majikman your code worked for me",
        "161747ec4dc9f55f1760195593742232 (05:11): tapioca is balls",
        "138cea5a2815d4b0be75153a1fcd3210 (05:11): i meant the VOIP library framework",
        "70c6ff03cbb88a833a8bdb91fec2fe46 (05:11): Wizz_Kidd: I prefer my starch with less starch",
        "138cea5a2815d4b0be75153a1fcd3210 (05:11): <a href=\"http://tapioca-voip.sourceforge.net/wiki/index.php/Tapioca\">http://tapioca-voip.sourceforge.net/wiki/index.php/Tapioca</a>",
        "138cea5a2815d4b0be75153a1fcd3210 (05:11): look at that",
        "ec8dbe031501e766f3633c8e60e041b9 (05:11): anabain: so, you have to ask yourself, what did you really intend.",
        "138cea5a2815d4b0be75153a1fcd3210 (05:11): looks like nice ass shit",
        "f5ad0ea2e47db9900a02f35304bb695d (05:12): _andy: yea, i made a stupid mistake",
        "a7b7cb8f0c9e1ce09f542c9f82370a81 (05:12): what was it?",
        "70c6ff03cbb88a833a8bdb91fec2fe46 (05:12): Wizz_Kidd: Isn't that statement a contradiction in terms?",
        "f5ad0ea2e47db9900a02f35304bb695d (05:12): but if i try to do 2147483647 + 2, i get an integer overfluw",
        "f5ad0ea2e47db9900a02f35304bb695d (05:12): overflow",
        "f5ad0ea2e47db9900a02f35304bb695d (05:12): is that normal?",
        "138cea5a2815d4b0be75153a1fcd3210 (05:12): Baughn: ?? what do you mean",
        "c396679b71d0b18e7594d75a232c6504 (05:12): twkm: I want to pass the function an array of int, but don't know how, obviously... :)",
        "3dc2182fe1bb1474cd8980d8cf814223 (05:12): majikman, I don't think so...",
        "c24781797c98640feb74dfa85104daaf (05:13): anabain: you cannot really pass an array.  When you understand why, you'll know how to pass &quot;one&quot;.",
        "ec8dbe031501e766f3633c8e60e041b9 (05:13): anabain: make an array of int.  an array of char doesn't count as being an array of int.",
        "f5ad0ea2e47db9900a02f35304bb695d (05:13): but if i do 2147483649 + 2, it doesn't overflow",
        "70c6ff03cbb88a833a8bdb91fec2fe46 (05:14): majikman: That'd be because it's already overflown",
        "f5ad0ea2e47db9900a02f35304bb695d (05:14): wth? does the system not give it an unsigned long long type if it doesn't need it when it gets initialized?",
        "f5ad0ea2e47db9900a02f35304bb695d (05:14): why would that overflow for an unsigned long long type?",
        "70c6ff03cbb88a833a8bdb91fec2fe46 (05:14): majikman: Integer constants are ints by default. Try 42LL.",
        "ab5f9b7672de26aec2fddf334ae7fa30 (05:14): majikman: Did you get The answer ?",
        "c396679b71d0b18e7594d75a232c6504 (05:14): twkm, how can I declare and initialize an array of int?",
        "f5ad0ea2e47db9900a02f35304bb695d (05:14): simbulu: what answer?",
        "f5ad0ea2e47db9900a02f35304bb695d (05:14): Baughn: whats 42LL?",
        "c24781797c98640feb74dfa85104daaf (05:14): anabain: int a[10] = { /* initializers */ }",
        "daafc12ab4fab09745f59db9596673d0 (05:14): anabain: int some[2] = {1, 2};",
        "70c6ff03cbb88a833a8bdb91fec2fe46 (05:14): majikman: A long, long constant with a value of 42",
        "c396679b71d0b18e7594d75a232c6504 (05:14): ok, thanks",
        "3dc2182fe1bb1474cd8980d8cf814223 (05:15): 2147483649L + 2",
        "138cea5a2815d4b0be75153a1fcd3210 (05:15): back to my talk tapioca taaalk",
        "a7b7cb8f0c9e1ce09f542c9f82370a81 (05:15): ull",
        "ab5f9b7672de26aec2fddf334ae7fa30 (05:15): Your printf misses what it should print.",
        "f5ad0ea2e47db9900a02f35304bb695d (05:15): simbulu: yea, i saw.... stupid mistake",
        "a7b7cb8f0c9e1ce09f542c9f82370a81 (05:15): his printf is fine",
        "a7b7cb8f0c9e1ce09f542c9f82370a81 (05:15): now",
        "ec8dbe031501e766f3633c8e60e041b9 (05:15): anabain: how did you make an array of char?  same way, but with the element type int.",
        "f5ad0ea2e47db9900a02f35304bb695d (05:15): Baughn: if i assign unsigned long long foo = 42LL; it works fine",
        "70c6ff03cbb88a833a8bdb91fec2fe46 (05:16): majikman: It would, even without the LL.",
        "70c6ff03cbb88a833a8bdb91fec2fe46 (05:16): majikman: 42 has the same function as foo/bar. I didn't mean for you to /literally/ type 42.",
        "a7b7cb8f0c9e1ce09f542c9f82370a81 (05:16): majikman its still not working with 4096 * 4096?",
        "f5ad0ea2e47db9900a02f35304bb695d (05:16): oh...",
        "c396679b71d0b18e7594d75a232c6504 (05:17): twkm, but char array is char a[]=&quot;3543&quot;, and that's not correct for int a[]=&quot;3433&quot;, no?",
        "f5ad0ea2e47db9900a02f35304bb695d (05:17): _andy: it is working now... but i can't do 2147483649 + 2",
        "c24781797c98640feb74dfa85104daaf (05:17): anabain: no, &quot;3543&quot; is a string literal.  You cannot initialize an array of int with it.",
        "daafc12ab4fab09745f59db9596673d0 (05:17): anabain: char a[] = &quot;3543&quot; is a string literal",
        "ec8dbe031501e766f3633c8e60e041b9 (05:17): anabain: a string literal is a special form of initializer, &quot;3543&quot; is the same as {'3','5','4','3',0}.",
        "c24781797c98640feb74dfa85104daaf (05:17): anabain: int n[] = { 1, 2, 3 }",
        "3dc2182fe1bb1474cd8980d8cf814223 (05:18): candide, bye",
        "9bc85d7b09f13a5b0671f704a92bf805 (05:18): See you later, Groovebot",
        "3dc2182fe1bb1474cd8980d8cf814223 (05:18): :(",
        "161747ec4dc9f55f1760195593742232 (05:18): candide: I love you",
        "c396679b71d0b18e7594d75a232c6504 (05:18): ok",
        "c24781797c98640feb74dfa85104daaf (05:19): kp: obviously he doesn't love you back.",
        "3dc2182fe1bb1474cd8980d8cf814223 (05:19): candide, aurevoir",
        "9bc85d7b09f13a5b0671f704a92bf805 (05:19): true enough, Groovebot, but let us cultivate our garden",
        "3dc2182fe1bb1474cd8980d8cf814223 (05:19): :)",
        "3dc2182fe1bb1474cd8980d8cf814223 (05:19): kp, you robosexual!",
        "161747ec4dc9f55f1760195593742232 (05:19): :O",
        "161747ec4dc9f55f1760195593742232 (05:19): what",
        "ab5f9b7672de26aec2fddf334ae7fa30 (05:19): majikman: printf(&quot;%llu\\n&quot;, bla);&quot;",
        "f5ad0ea2e47db9900a02f35304bb695d (05:20): simbulu: yes, we're past that part, thanks",
        "a7b7cb8f0c9e1ce09f542c9f82370a81 (05:20): majikman it works fine for me",
        "f5ad0ea2e47db9900a02f35304bb695d (05:20): unsigned long long foo; foo = 2147483648 + 10; printf(&quot;%llu\\n&quot;, foo); ?",
        "a7b7cb8f0c9e1ce09f542c9f82370a81 (05:20): what are you compiling with?",
        "70c6ff03cbb88a833a8bdb91fec2fe46 (05:20): candide: Love is a beautiful thing, eh?",
        "f5ad0ea2e47db9900a02f35304bb695d (05:21): i get a warning when i do that",
        "ec8dbe031501e766f3633c8e60e041b9 (05:21): bah.",
        "a7b7cb8f0c9e1ce09f542c9f82370a81 (05:21): gcc -std=gnu99",
        "ec8dbe031501e766f3633c8e60e041b9 (05:21): kick out two bots, end up with annoying bot interaction anyway.",
        "f5ad0ea2e47db9900a02f35304bb695d (05:21): oh",
        "f5ad0ea2e47db9900a02f35304bb695d (05:21): there we go",
        "f5ad0ea2e47db9900a02f35304bb695d (05:21): is there an atoi() like function that can convert strings to integers that are larger than unsinged long?",
        "f5ad0ea2e47db9900a02f35304bb695d (05:22): or do i have to make one?",
        "c24781797c98640feb74dfa85104daaf (05:22): majikman: sprintf",
        "70c6ff03cbb88a833a8bdb91fec2fe46 (05:22): majikman: strtoll, perhaps",
        "c24781797c98640feb74dfa85104daaf (05:22): Or that.",
        "f5ad0ea2e47db9900a02f35304bb695d (05:22): oh cool... didn't know those existed",
        "c396679b71d0b18e7594d75a232c6504 (05:23): twkm, how can I print a[] array of int?",
        "ec8dbe031501e766f3633c8e60e041b9 (05:23): majikman: strtoull, unless you don't use c99 in which case you don't have a type that is wider than unsigned long.",
        "a7b7cb8f0c9e1ce09f542c9f82370a81 (05:23): yea its new(7 years old)",
        "ec8dbe031501e766f3633c8e60e041b9 (05:23): anabain: iteration.",
        "daafc12ab4fab09745f59db9596673d0 (05:23): majikman: a nice book on the standard library is always a good bedtime read",
        "f5ad0ea2e47db9900a02f35304bb695d (05:23): is strtoull ansi c?",
        "c396679b71d0b18e7594d75a232c6504 (05:23): ok, twkm",
        "ec8dbe031501e766f3633c8e60e041b9 (05:23): majikman: of course.",
        "ec8dbe031501e766f3633c8e60e041b9 (05:24): majikman: the issue is ... are your implementations?",
        "f5ad0ea2e47db9900a02f35304bb695d (05:24): hrm.... the doc i'm reading doesn't have that listed",
        "a7b7cb8f0c9e1ce09f542c9f82370a81 (05:24): what doc",
        "ec8dbe031501e766f3633c8e60e041b9 (05:24): majikman: then you probably have a pre-c99 implementation so you don't have anything wider than long.",
        "a7b7cb8f0c9e1ce09f542c9f82370a81 (05:24): are you on linux?",
        "c24781797c98640feb74dfa85104daaf (05:25): (I'm wondering who doesn't have a pre-C99 implementation)",
        "f5ad0ea2e47db9900a02f35304bb695d (05:25): twkm: i'm reading something online",
        "ab5f9b7672de26aec2fddf334ae7fa30 (05:25): majikman: &quot;warning: decimal constant is so large that it is unsigned&quot;",
        "f5ad0ea2e47db9900a02f35304bb695d (05:25): <a href=\"http://www.cplusplus.com/ref/cstdlib/\">http://www.cplusplus.com/ref/cstdlib/</a>",
        "ec8dbe031501e766f3633c8e60e041b9 (05:25): majikman: then beware of it not applying to your implementations.",
        "f5ad0ea2e47db9900a02f35304bb695d (05:25): i have gcc v. 3.4.3",
        "f5ad0ea2e47db9900a02f35304bb695d (05:25): that should be fine right?",
        "a7b7cb8f0c9e1ce09f542c9f82370a81 (05:25): thats what i have",
        "ec8dbe031501e766f3633c8e60e041b9 (05:25): majikman: perhaps.  it isn't conforming though.",
        "a7b7cb8f0c9e1ce09f542c9f82370a81 (05:25): use man not cplusplus.com",
        "ec8dbe031501e766f3633c8e60e041b9 (05:26): simbulu: sounds like you (too) do not have a current implementation.  use smaller numbers.",
        "f5ad0ea2e47db9900a02f35304bb695d (05:26): i don't have that man page",
        "ab5f9b7672de26aec2fddf334ae7fa30 (05:26): twkm: 2.96 here",
        "a7b7cb8f0c9e1ce09f542c9f82370a81 (05:26): hmm",
        "ec8dbe031501e766f3633c8e60e041b9 (05:26): simbulu: 2.96 whats?",
        "ab5f9b7672de26aec2fddf334ae7fa30 (05:27): twkm: pardon - gcc-2.96",
        "ec8dbe031501e766f3633c8e60e041b9 (05:27): simbulu: anyway, if your compiler complains about the width of the constant you used then you, well, used too large a value.",
        "ab5f9b7672de26aec2fddf334ae7fa30 (05:27): twkm: sure",
        "ec8dbe031501e766f3633c8e60e041b9 (05:28): simbulu: so use a smaller value.",
        "ec8dbe031501e766f3633c8e60e041b9 (05:29): simbulu: the old standard provides that long must be at least 32 bits, and while it can be wider it might not be, so don't use values over 2 billion (and a smidge).",
        "ab5f9b7672de26aec2fddf334ae7fa30 (05:29): twkm: Well in order to follow majikman I will have to shift to a system using gcc-3.4.3+",
        "a7b7cb8f0c9e1ce09f542c9f82370a81 (05:29): ah i have gcc-3.4.4 and long long works",
        "ab5f9b7672de26aec2fddf334ae7fa30 (05:30): majikman: Would gcc-3.2.3 be ok ?",
        "0133c026baf0a830580265fdca495b03 (05:30): part",
        "0133c026baf0a830580265fdca495b03 (05:30): part",
        "0133c026baf0a830580265fdca495b03 (05:30): doh",
        "c24781797c98640feb74dfa85104daaf (05:30): xanavim: add a / to that.",
        "f5ad0ea2e47db9900a02f35304bb695d (05:30): i have no idea simbulu",
        "ab5f9b7672de26aec2fddf334ae7fa30 (05:31): majikman: ok - I will try it.",
        "d45842283050fe2e38a42a0ef49a487d (05:49): Does anyone know a good, simple testing framework for C?",
        "161747ec4dc9f55f1760195593742232 (05:50): testing... for what?",
        "c24781797c98640feb74dfa85104daaf (05:50): thinkinginbinary: a functional brain seems to be useful.",
        "d45842283050fe2e38a42a0ef49a487d (05:51): kp: Like a way to organize a set of code and assertions that tests out other parts of a program.",
        "d45842283050fe2e38a42a0ef49a487d (05:51): tp76: ?",
        "d45842283050fe2e38a42a0ef49a487d (05:51): tp76: Hey!",
        "161747ec4dc9f55f1760195593742232 (05:51): he speaks the truth",
        "d45842283050fe2e38a42a0ef49a487d (05:51): kp: :-b",
        "533799c34f6ea6006528946651dde689 (05:57): fellaz.",
        "c24781797c98640feb74dfa85104daaf (05:59): thinkinginbinary: #include &lt;assert.h&gt; then assert (condition); is common."
    ],
    "person_ids": [
        "a7b7cb8f0c9e1ce09f542c9f82370a81",
        "161747ec4dc9f55f1760195593742232",
        "138cea5a2815d4b0be75153a1fcd3210",
        "70c6ff03cbb88a833a8bdb91fec2fe46",
        "ec8dbe031501e766f3633c8e60e041b9",
        "f5ad0ea2e47db9900a02f35304bb695d",
        "c396679b71d0b18e7594d75a232c6504",
        "3dc2182fe1bb1474cd8980d8cf814223",
        "c24781797c98640feb74dfa85104daaf",
        "ab5f9b7672de26aec2fddf334ae7fa30",
        "daafc12ab4fab09745f59db9596673d0",
        "9bc85d7b09f13a5b0671f704a92bf805",
        "0133c026baf0a830580265fdca495b03",
        "d45842283050fe2e38a42a0ef49a487d",
        "533799c34f6ea6006528946651dde689"
    ]
}