{
    "id": "3b22679a7d2e5a96d453872e44a81586",
    "messages": [
        "c63a5cfce0a1819ebbe4a19e074356b6 (03:36): Hi",
        "edb259c0e0038f38bb200bc20c8cbf7e (03:36): 69b0d3dfe919a6b860a9fac82de52a7e, yeah, concept-event is the preferred way of talking about Event or something that inherits from it",
        "c63a5cfce0a1819ebbe4a19e074356b6 (03:36): in CSS2.1 spec, why A is defined like this:",
        "c63a5cfce0a1819ebbe4a19e074356b6 (03:36): A  a|\\\\0{0,4}(41|61)(\\r\\n|[ \\t\\r\\n\\f])?",
        "c63a5cfce0a1819ebbe4a19e074356b6 (03:36): while Z is defined like this:",
        "c63a5cfce0a1819ebbe4a19e074356b6 (03:36): Z  z|\\\\0{0,4}(5a|7a)(\\r\\n|[ \\t\\r\\n\\f])?|\\\\z",
        "c63a5cfce0a1819ebbe4a19e074356b6 (03:37): the difference is the last part, why '\\\\z' should be treated as Z but '\\\\a' might not be treated as A?",
        "c63a5cfce0a1819ebbe4a19e074356b6 (03:40): 124\\\\cm is a valid LENGTH token, while 124c\\\\m is not?",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:40): edb259c0e0038f38bb200bc20c8cbf7e: ah, because of the inheritance, ok",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:40): edb259c0e0038f38bb200bc20c8cbf7e: it would be helpful imho if the dom core spec said that somewhere",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:40): edb259c0e0038f38bb200bc20c8cbf7e: i thought they were different (the way &quot;text track&quot; and &quot;TextTrack&quot; are different)",
        "edb259c0e0038f38bb200bc20c8cbf7e (03:43): oh, &quot;text track&quot; being the concept and &quot;TextTrack&quot; exposing it?",
        "edb259c0e0038f38bb200bc20c8cbf7e (03:43): I guess it's pretty similar, but I'll make a clarification",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:50): gah",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:51): the semantic web guys have a way of thinking that is so utterly foreign to me it's mind blowing",
        "a9b326df4e6da61c5b6f5e1058be83a2 (04:02): 69b0d3dfe919a6b860a9fac82de52a7e: something in particular you reading at the moment?",
        "a9b326df4e6da61c5b6f5e1058be83a2 (04:02): bug report?",
        "edb259c0e0038f38bb200bc20c8cbf7e (04:03): I guess for http://html5.org/r/6707 the pedant way would currently be /event listeners/ whose /capture/ variable is false",
        "edb259c0e0038f38bb200bc20c8cbf7e (04:04): we should probably make it a &quot;capture flag&quot; given that it's a boolean, but that would actually make defining it more verbose",
        "edb259c0e0038f38bb200bc20c8cbf7e (04:04): 69b0d3dfe919a6b860a9fac82de52a7e, fwiw, &quot;DOM Range&quot; is gone and part of DOM4 now",
        "c63a5cfce0a1819ebbe4a19e074356b6 (04:06): I have done some testing and it turns out that chars from 'a' to 'f' might not be escaped with '\\' in CSS",
        "c63a5cfce0a1819ebbe4a19e074356b6 (04:06): why is it so?",
        "edb259c0e0038f38bb200bc20c8cbf7e (04:07): because \\ is also used for Unicode character escapes",
        "c63a5cfce0a1819ebbe4a19e074356b6 (04:10): is it allowed to have Unicode character escapes *anywhere* in the stylesheets?",
        "edb259c0e0038f38bb200bc20c8cbf7e (04:10): pretty much",
        "c63a5cfce0a1819ebbe4a19e074356b6 (04:10): I thought those were allowed only inside strings",
        "edb259c0e0038f38bb200bc20c8cbf7e (04:11): no CSS is crazy",
        "edb259c0e0038f38bb200bc20c8cbf7e (04:11): they did not go with simplest syntax possible",
        "c63a5cfce0a1819ebbe4a19e074356b6 (04:11): that's going to complicate tokenizer implementation :/",
        "edb259c0e0038f38bb200bc20c8cbf7e (04:11): oh yes",
        "edb259c0e0038f38bb200bc20c8cbf7e (04:11): that's why at-rules are defined as @{N}{A}{M} etc.",
        "edb259c0e0038f38bb200bc20c8cbf7e (04:12): each of those characters can be escaped",
        "edb259c0e0038f38bb200bc20c8cbf7e (04:12): why?",
        "edb259c0e0038f38bb200bc20c8cbf7e (04:12): because crazy",
        "c63a5cfce0a1819ebbe4a19e074356b6 (04:12): I think I have an idea",
        "c63a5cfce0a1819ebbe4a19e074356b6 (04:12): I will run the stylesheet through a processor that converts all escapes into regular signs before tokenization",
        "c63a5cfce0a1819ebbe4a19e074356b6 (04:13): it's also lame that comments are allowed everywhere, even between '!' and 'important'",
        "c63a5cfce0a1819ebbe4a19e074356b6 (04:13): what was the point of that?",
        "c63a5cfce0a1819ebbe4a19e074356b6 (04:14): is something like '! /* this is important flag*/ !important' really needed?",
        "edb259c0e0038f38bb200bc20c8cbf7e (04:24): even -/**/2em",
        "edb259c0e0038f38bb200bc20c8cbf7e (04:24): there is no point",
        "edb259c0e0038f38bb200bc20c8cbf7e (04:24): it's just how that tokenizer language works to some extent I believe",
        "edb259c0e0038f38bb200bc20c8cbf7e (04:25): I think we can still get away with making it much much simpler, but nobody is really interested in it I guess"
    ],
    "person_ids": [
        "c63a5cfce0a1819ebbe4a19e074356b6",
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "a9b326df4e6da61c5b6f5e1058be83a2"
    ]
}