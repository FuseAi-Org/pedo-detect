{
    "id": "1ec19a15ee7b695265aa921559704381",
    "messages": [
        "a3f19f90edf0a0893c7847d08016abe3 (02:57): are there any methods in the html5 idl that have optional arguments?",
        "a924fb58d2c25874322f4e5126f608b9 (02:57): I believe they use lots and lots of overloading instead",
        "a3f19f90edf0a0893c7847d08016abe3 (02:58): ah, right",
        "a3f19f90edf0a0893c7847d08016abe3 (02:58): can you think of one that i can search for?  (so i don't have to scour the document)",
        "ab7faae5d7b250ea8606486575f8f79c (02:58): Anything that ends with arguments which could accept 'undefined' could be counted as having optional arguments",
        "a3f19f90edf0a0893c7847d08016abe3 (02:59): although you can tell the difference between an argument being omitted and an 'undefined' value being passed as an argument",
        "a3f19f90edf0a0893c7847d08016abe3 (02:59): i was thinking just before if there are any functions that make that distinction",
        "a3f19f90edf0a0893c7847d08016abe3 (02:59): maybe Function.prototype.call?",
        "ab7faae5d7b250ea8606486575f8f79c (02:59): http://www.whatwg.org/specs/web-apps/current-work/#the-2d - drawImage has lots of overloading",
        "a3f19f90edf0a0893c7847d08016abe3 (02:59): thanks ab7faae5d7b250ea8606486575f8f79c",
        "a3f19f90edf0a0893c7847d08016abe3 (03:00): do you know if there are any overloaded functions that discriminate based on argument type, rather than argument count?",
        "ab7faae5d7b250ea8606486575f8f79c (03:01): Oh, I misremembered the too-few-arguments things - it says &quot;Unless other specified, if a method is passed fewer arguments than is defined for that method in its IDL definition, a NOT_SUPPORTED_ERR exception must be raised.&quot; (though that's not standard JS behaviour so maybe it should be changed)",
        "ab7faae5d7b250ea8606486575f8f79c (03:01): drawImage discriminates on HTMLImageElement vs HTMLCanvasElement",
        "ab7faae5d7b250ea8606486575f8f79c (03:02): createPattern too",
        "ab7faae5d7b250ea8606486575f8f79c (03:02): (I'm not familiar with any examples outside the canvas API, though)",
        "a3f19f90edf0a0893c7847d08016abe3 (03:02): (function() { return arguments.length }).call(null, undefined, undefined, undefined);  // returns 3, though i guess this is a different kind of function, more like a varargs in C",
        "a3f19f90edf0a0893c7847d08016abe3 (03:02): k, thanks",
        "139513027e8e90b5582cbc68fc733884 (03:03): ab7faae5d7b250ea8606486575f8f79c: yeah, I think the too few arguments rule is a bad one",
        "139513027e8e90b5582cbc68fc733884 (03:03): ab7faae5d7b250ea8606486575f8f79c: JS exceptions are bad sort of for the same reason as draconian parsing rules",
        "139513027e8e90b5582cbc68fc733884 (03:03): minor implementation differences turn into fatal errors in some browsers but not all",
        "a3f19f90edf0a0893c7847d08016abe3 (03:04): 139513027e8e90b5582cbc68fc733884, yeah, but only if there are implementation differences :)",
        "ab7faae5d7b250ea8606486575f8f79c (03:04): Hmm, would it be good if there was a way for the APIs to complain about errors without using exceptions, so the script could carry on regardless?",
        "139513027e8e90b5582cbc68fc733884 (03:04): a3f19f90edf0a0893c7847d08016abe3: I wish I could claim it's possible for browser vendors not to make mistakes",
        "ab7faae5d7b250ea8606486575f8f79c (03:05): because it's nice to know when you've done something wrong, so reporting errors is good",
        "a3f19f90edf0a0893c7847d08016abe3 (03:05): 139513027e8e90b5582cbc68fc733884, i know, it's the world we live in :)",
        "139513027e8e90b5582cbc68fc733884 (03:05): ab7faae5d7b250ea8606486575f8f79c: well, the other common approach is to return an error code, but multiple returns in JS are awkward",
        "139513027e8e90b5582cbc68fc733884 (03:05): ab7faae5d7b250ea8606486575f8f79c: I think logging a warning would be the best thing for browsers to do on wrong number of args (too few or too many)",
        "ab7faae5d7b250ea8606486575f8f79c (03:05): Multiple returns are easy in JS 1.7 :-)",
        "a3f19f90edf0a0893c7847d08016abe3 (03:06): 139513027e8e90b5582cbc68fc733884, but the statements following the incorrect function call are likely to rely on that statement functioning correctly",
        "139513027e8e90b5582cbc68fc733884 (03:06): probably not good to rely on random mozilla-specific extensions to JS",
        "ab7faae5d7b250ea8606486575f8f79c (03:07): (But people ignore error codes by default, so they don't seem a good way to tell authors when they've done something wrong)",
        "139513027e8e90b5582cbc68fc733884 (03:07): a3f19f90edf0a0893c7847d08016abe3: you'd be surprised",
        "a3f19f90edf0a0893c7847d08016abe3 (03:07): 139513027e8e90b5582cbc68fc733884, perhaps you write more fault tolerant scripts than i do ;)",
        "139513027e8e90b5582cbc68fc733884 (03:07): a3f19f90edf0a0893c7847d08016abe3: a lot of the time, silent failure leads to a script that is very close to working right",
        "139513027e8e90b5582cbc68fc733884 (03:07): I'm not talking about my personal code, but code that I tend to see on the web",
        "a3f19f90edf0a0893c7847d08016abe3 (03:07): aha",
        "a924fb58d2c25874322f4e5126f608b9 (03:08): It depends on the case, though",
        "139513027e8e90b5582cbc68fc733884 (03:08): a lot of pages that fail catastrophically are due to getting a JS exception in Safari and not in other browsers",
        "ab7faae5d7b250ea8606486575f8f79c (03:08): I think I remember hearing of someone having found that they could fix lots of crashes in C programs by just returning 0 for any invalid memory reads, and the programs usually carried on correctly even though the data was rubbish",
        "a924fb58d2c25874322f4e5126f608b9 (03:08): Like doing send() in XMLHttpRequest instead of send(null) is not something to fail over",
        "a3f19f90edf0a0893c7847d08016abe3 (03:08): 139513027e8e90b5582cbc68fc733884, what sort of errors are they?",
        "a3f19f90edf0a0893c7847d08016abe3 (03:08): a924fb58d2c25874322f4e5126f608b9, yeah that is pretty minor",
        "139513027e8e90b5582cbc68fc733884 (03:09): a3f19f90edf0a0893c7847d08016abe3: often methods or properties that are missing, scope differences, differences in expected parameters, etc",
        "ab7faae5d7b250ea8606486575f8f79c (03:09): (...but I don't know (and can't find) any actual details)",
        "139513027e8e90b5582cbc68fc733884 (03:09): a3f19f90edf0a0893c7847d08016abe3: a lot of the time just commenting out the offending line of JS leads to a page that mostly works",
        "a3f19f90edf0a0893c7847d08016abe3 (03:10): 139513027e8e90b5582cbc68fc733884, is there a way to get the webkit qt wrapper to use a proxy?",
        "139513027e8e90b5582cbc68fc733884 (03:11): a3f19f90edf0a0893c7847d08016abe3: I don't know much about the Qt port",
        "a3f19f90edf0a0893c7847d08016abe3 (03:11): k",
        "f47636673b14c54021a69dc06f6a19fb (03:29): is reading quickly the IRC backlog for this week-end",
        "a3f19f90edf0a0893c7847d08016abe3 (03:29): regarding interpolating colours for gradients on canvas, it currently says: &quot;Between each such stop, the colors and the alpha component must be linearly interpolated over the RGBA space without premultiplying the alpha value to find the color to use at that offset.&quot;",
        "a3f19f90edf0a0893c7847d08016abe3 (03:30): does that mean each component is separately linearly interpolated?",
        "a3f19f90edf0a0893c7847d08016abe3 (03:30): or could you use linear sRGB to do &quot;nice&quot; interpolation?",
        "139513027e8e90b5582cbc68fc733884 (03:32): shrugs",
        "ab7faae5d7b250ea8606486575f8f79c (03:34): My assumption would be that a gradient from (a,b,c,d) to (e,f,g,h) would have colour ((a+e)/2,(b+f)/2,...) at the centre, in the same colour space as all the input/output colours (via fillStyle, get/putImageData, etc)",
        "ab7faae5d7b250ea8606486575f8f79c (03:35): but the colour space is undefined (and it seems implementations use 'device RGB' rather than e.g. sRGB) so you can't really tell what it'll look like",
        "139513027e8e90b5582cbc68fc733884 (03:35): on Windows, 'device RGB' and sRGB are for pratical purposes the same thing",
        "ab7faae5d7b250ea8606486575f8f79c (03:36): in which case it doesn't matter that the linear interpolation is not exactly defined, since it relies on other things are even less defined",
        "139513027e8e90b5582cbc68fc733884 (03:36): though not on mac, since the gamma is different",
        "ab7faae5d7b250ea8606486575f8f79c (03:37): (but all those things ought to be defined eventually)",
        "a3f19f90edf0a0893c7847d08016abe3 (03:37): is not a colour boffin, but just wondered if the wording implied one way or the other",
        "a924fb58d2c25874322f4e5126f608b9 (03:37): RGB except when it's BGR...",
        "ab7faae5d7b250ea8606486575f8f79c (03:38): I'm not either, but I can't think of any other way of interpolating colours that makes sense :-)",
        "ab7faae5d7b250ea8606486575f8f79c (03:39): I suppose you could claim that since it says &quot;the colors and the alpha component must be ...&quot; rather than &quot;the color must be ...&quot;, it means to split out the four components because otherwise it'd use the simpler phrasing",
        "a3f19f90edf0a0893c7847d08016abe3 (03:40): prolly, i'm just nit picking really"
    ],
    "person_ids": [
        "a3f19f90edf0a0893c7847d08016abe3",
        "a924fb58d2c25874322f4e5126f608b9",
        "ab7faae5d7b250ea8606486575f8f79c",
        "139513027e8e90b5582cbc68fc733884",
        "f47636673b14c54021a69dc06f6a19fb"
    ]
}