{
    "id": "1878217bf7d045b4234ad6436dee948b",
    "messages": [
        "a4b2f111445d56946f87c02c5cd8b676 (00:22): Wow",
        "4813ccceec9b3ab22bfb53c930c35cd8 (00:22): yup",
        "a4b2f111445d56946f87c02c5cd8b676 (00:22): Do you love your life?",
        "4813ccceec9b3ab22bfb53c930c35cd8 (00:24): well not really love, but i like it a whole lot",
        "a4b2f111445d56946f87c02c5cd8b676 (00:26): Can I have it?",
        "4813ccceec9b3ab22bfb53c930c35cd8 (00:27): um, if you can come get it im sure we could reach some deal",
        "3d825ab736200154c06f95be2c1fdd8b (00:28): INSERT INTO seekwill SELECT life FROM blobaugh;",
        "b5c0fdca82e63caa7ecb49cb681d0ca4 (00:50): hello, is there a easy way to subsutite GROUP_CONCAT()? I dont have mysql 4.1 :(",
        "bdc75f0d65c9e4ac0f81e824c4b6f1c1 (00:52): <a href=\"http://www.xaprb.com/blog/2005/09/28/simulating-the-group-concat-function/\">http://www.xaprb.com/blog/2005/09/28/simulating-the-group-concat-function/</a>",
        "b5c0fdca82e63caa7ecb49cb681d0ca4 (00:54): i like",
        "08008d1ce321aa62c266d6920d556871 (00:55): Hello all, can someone take a look at my query and table, and please tell me why my indexes don't seem to be working:  <a href=\"http://pastebin.ca/157816\">http://pastebin.ca/157816</a>",
        "08008d1ce321aa62c266d6920d556871 (00:56): A single simple query is causing huge load on the server.  It obviously is not using the indexes, but I can't figure out why.",
        "b5c0fdca82e63caa7ecb49cb681d0ca4 (00:56): wow, just need mysql 4.1, what a pita",
        "b5c0fdca82e63caa7ecb49cb681d0ca4 (00:57): mrballcb: select * is BAD",
        "bdc75f0d65c9e4ac0f81e824c4b6f1c1 (00:57): mrballcb, I agree with that... but that's probably not the problem.  How selective are the indexes?",
        "b5c0fdca82e63caa7ecb49cb681d0ca4 (00:57): mrballcb: why do you have 3 primary keys?",
        "28b2c4b7550a5e71275a88920dbec318 (00:58): mrballcb: 4.1 or less?",
        "68ad985e21342c4d442c0320b7e6025d (00:59): is it possibe to undo a table drop?",
        "28b2c4b7550a5e71275a88920dbec318 (00:59): dts: restore from backup and apply binary log =/",
        "08008d1ce321aa62c266d6920d556871 (00:59): mysql-4.1.20-1.RHEL4.1  (on phone with wife, brb)",
        "28b2c4b7550a5e71275a88920dbec318 (00:59): mrballcb: ok, have to do a workaround",
        "bdc75f0d65c9e4ac0f81e824c4b6f1c1 (01:00): mrballcb, this will probably help: <a href=\"http://www.mysqlperformanceblog.com/2006/08/14/mysql-followup-on-union-for-query-optimization-query-profiling/\">http://www.mysqlperformanceblog.com/2006/08/14/mysql-followup-on-union-for-query-optimization-query-profiling/</a>",
        "28b2c4b7550a5e71275a88920dbec318 (01:02): mrballcb: try this:",
        "28b2c4b7550a5e71275a88920dbec318 (01:02): SELECT * FROM",
        "28b2c4b7550a5e71275a88920dbec318 (01:02): (",
        "28b2c4b7550a5e71275a88920dbec318 (01:02): SELECT * FROM albumFile WHERE status='new' LIMIT 1",
        "28b2c4b7550a5e71275a88920dbec318 (01:02): UNION",
        "28b2c4b7550a5e71275a88920dbec318 (01:02): SELECT * FROM albumFile WHERE action IS NOT NULL LIMIT 1",
        "28b2c4b7550a5e71275a88920dbec318 (01:02): ) AS tmp",
        "28b2c4b7550a5e71275a88920dbec318 (01:02): LIMIT 1",
        "b5c0fdca82e63caa7ecb49cb681d0ca4 (01:03): wow",
        "bdc75f0d65c9e4ac0f81e824c4b6f1c1 (01:03): That looks good.  BTW a large primary key on this table shouldn't be a problem since it's MyISAM",
        "9ca10a97571747c802904ac96509eaf4 (01:03): MySQL 5.0 owould eat that query for lunch",
        "82653c61d3ae4fa4bb624e7b24bfdb1a (01:04): And then have indigestion for the rest of the day.",
        "bdc75f0d65c9e4ac0f81e824c4b6f1c1 (01:04): But, the problem of index selectivity remains.",
        "28b2c4b7550a5e71275a88920dbec318 (01:04): the limit takes care of that",
        "28b2c4b7550a5e71275a88920dbec318 (01:05): or should.",
        "bdc75f0d65c9e4ac0f81e824c4b6f1c1 (01:05): It depends on how many rows it has to scan till the limit is satisfied.",
        "bdc75f0d65c9e4ac0f81e824c4b6f1c1 (01:05): If ... never mind, foot in mouth",
        "08008d1ce321aa62c266d6920d556871 (01:06): Blah, the wife likes to talk. Ok, let me try.",
        "bdc75f0d65c9e4ac0f81e824c4b6f1c1 (01:06): well.... wait.  If the table has, say, 30% rows that are status='new', and the entire first half of the table is status='somethingelse', it will scan a lot of data.",
        "bdc75f0d65c9e4ac0f81e824c4b6f1c1 (01:07): Yeah, try quick so I can stop blathering ;-)",
        "08008d1ce321aa62c266d6920d556871 (01:08): ;",
        "08008d1ce321aa62c266d6920d556871 (01:09): ;",
        "28b2c4b7550a5e71275a88920dbec318 (01:09): xaprb: good point.",
        "08008d1ce321aa62c266d6920d556871 (01:11): xaprb: It seems to be much faster.  The old query took 0.3 seconds on average to complete.  The new one typically is 0.00 or 0.01 seconds.",
        "08008d1ce321aa62c266d6920d556871 (01:12): xaprb: Is the UNION being used in the stead of OR because OR has some sort of performance inhibitor?",
        "abe59155aa41ae19e4ea964e9dd4b200 (01:12): <a href=\"http://www.bagdadsoftware.de&quot;\">http://www.bagdadsoftware.de&quot;</a>)",
        "bdc75f0d65c9e4ac0f81e824c4b6f1c1 (01:13): mrballcb: well, then that means your indexes are selective enough to be useful, or you're lucky enough to have some rows that qualify near the front of the table.",
        "bdc75f0d65c9e4ac0f81e824c4b6f1c1 (01:13): That link I sent you explains what's happening.  Basically the query optimizer isn't good enough for queries like that.",
        "08008d1ce321aa62c266d6920d556871 (01:13): ok, will delve into it.",
        "08008d1ce321aa62c266d6920d556871 (01:24): xaprb: One detail that may have helped is that only a newly inserted row gets status &quot;new&quot;.  Once the daemon (it's perl) takes action on it changing status to &quot;processing&quot;.  When finished, it changes the status to &quot;ready&quot; and then that row never changes.",
        "bdc75f0d65c9e4ac0f81e824c4b6f1c1 (01:25): mrballcb: possibly, but in that case you actually have a worst-case, *in case of a table scan*, in that it'd have to scan the whole table before finding the one row.  If you EXPLAIN  SELECT * FROM albumFile WHERE status='new' LIMIT 1 what does it tell you?",
        "08008d1ce321aa62c266d6920d556871 (01:26): |  1 | SIMPLE      | albumFile | ref  | statusIdx     | statusIdx |       2 | const |    1 | Using where |",
        "bdc75f0d65c9e4ac0f81e824c4b6f1c1 (01:26): Great, you're golden.",
        "bdc75f0d65c9e4ac0f81e824c4b6f1c1 (01:26): Your index is getting used.  No problem.",
        "08008d1ce321aa62c266d6920d556871 (01:27): Doing the regular old query, it's obvious that it's not using indexes, but it wasn't obvious until someone pointed it out to me.",
        "08008d1ce321aa62c266d6920d556871 (01:27): |  1 | SIMPLE      | albumFile | ALL  | statusIdx,actionIdx | NULL |    NULL | NULL | 211365 | Using where |",
        "bdc75f0d65c9e4ac0f81e824c4b6f1c1 (01:27): Yep :-)",
        "08008d1ce321aa62c266d6920d556871 (01:28): I saw the indexes listed under &quot;possible_keys&quot; and so assumed that meant it was using it.  Bad assumption to make.",
        "08008d1ce321aa62c266d6920d556871 (01:28): Thank you for all the guidance.",
        "bdc75f0d65c9e4ac0f81e824c4b6f1c1 (01:28): You're welcome1",
        "d232ac3a9a7e24b2ff049b1c551b4055 (03:22): Hey, is there a fairly easy way to compare the average speed of two different queries from within the mysql client?",
        "fd463e23769316e6920e155dacdff520 (03:22): Vaejor thanks worked perfect i think",
        "f79f37dd346b7b668a86233565c5a94e (03:22): It seems that each null in the field is treated as a unique piece of information(even against other nulls), so a field with a high value(or all) of nulls would report an extremely high cardinality rather than something smaller",
        "2b7835ece8f55728b40b2fa7a1c653c6 (03:23): Vaejor: NULL != NULL, so nulls are considered unique vs each other",
        "f79f37dd346b7b668a86233565c5a94e (03:24): so a table with 20K rows, if a column is allowed to be null and every row contains a null in it then it shows 20K unique items",
        "f79f37dd346b7b668a86233565c5a94e (03:25): but that seems off due due to the fact that it can be fairly well optimized.  I had a query that was choosing one index(i1) over another(i2), and when I forced i2 it ran several times faster",
        "f79f37dd346b7b668a86233565c5a94e (03:26): because pretty much all but 1 row in the table would always be null, so the true cardinality seems to be 2(or 1ish), but it was reporting (row count) cardinality",
        "fd463e23769316e6920e155dacdff520 (03:26): ok everyone is there something i need to setup so that my database can be accessed by a php app?",
        "2b7835ece8f55728b40b2fa7a1c653c6 (03:27): Vaejor: Right: null is not a lack of value, null is an unknown value. Hence, you can have multiple nulls in a unique constraint.",
        "fcd5332e6b8824195646aebb2e55053d (03:27): Hello, can anyone help me with a query im getting the error message",
        "fcd5332e6b8824195646aebb2e55053d (03:27): if ($numrows == 0)",
        "fcd5332e6b8824195646aebb2e55053d (03:27): {",
        "fcd5332e6b8824195646aebb2e55053d (03:27): mysql_query(&quot;INSERT INTO stats(ip) VALUES ('&quot;.$_SERVER[&quot;REMOTE_ADDR&quot;].&quot;')&quot;) or die ('Error, query 3 failed');",
        "fcd5332e6b8824195646aebb2e55053d (03:27): }",
        "2b7835ece8f55728b40b2fa7a1c653c6 (03:27): Well, lack of value is one way to think of it, actually.",
        "3c26b6648764f1ab4360aa71da5d760b (03:28): How do I cast a text as an int? I want to sort some records numerically that are in a text field",
        "f79f37dd346b7b668a86233565c5a94e (03:28): Yeah, I just imagine null(although being stored outside the real value and not really a value) is still a distinct piece of data",
        "bf3302d057c10c59c6d4cee9270c6892 (03:28): Woosta field+0 or so",
        "3c26b6648764f1ab4360aa71da5d760b (03:29): heh",
        "3c26b6648764f1ab4360aa71da5d760b (03:29): shoulda thunk of that",
        "f79f37dd346b7b668a86233565c5a94e (03:29): CAST( expression AS INT )",
        "f79f37dd346b7b668a86233565c5a94e (03:30): hmm, actually, whoops: CAST( expression AS UNSIGNED ) or CAST( expression AS SIGNED )",
        "f79f37dd346b7b668a86233565c5a94e (03:31): G_SabinoMullane: I noticed something that looked like they changed that functionality (of NULL != NULL) from 4.0 to 4.1/5.0, but I haven't been able to locate if this was exactly what was shifted and why it would have been done",
        "d923d906582234f7da470514434fab8b (03:32): Vaejor: What about NULL &lt;&gt; NULL changed?",
        "f79f37dd346b7b668a86233565c5a94e (03:32): In this case it definately messes with the optimizer to make it pick a smaller key with the same key prefix length that was worse off.",
        "3c26b6648764f1ab4360aa71da5d760b (03:33): Thanks Vaejor",
        "f79f37dd346b7b668a86233565c5a94e (03:33): Xgc: I just noticed while looking into this that something had been changed after 4.0ish to make NULL != NULL; I believe it may have been related to this cardinality issue I'm looking at, but I'm not positive if that was it.",
        "d923d906582234f7da470514434fab8b (03:33): Vaejor: NULL &lt;&gt; NULL is not true, NULL = NULL is not true.  That behavior hasn't changed... unless you noticed a bug somewhere along the way.",
        "9ca10a97571747c802904ac96509eaf4 (03:34): i think he is just talking in the optimizer",
        "9ca10a97571747c802904ac96509eaf4 (03:34): not the actual evaluation",
        "f79f37dd346b7b668a86233565c5a94e (03:35): I'm talking about the behaviour of the MyISAM stats collector (which affects the optimizer choices)",
        "9ca10a97571747c802904ac96509eaf4 (03:35): yes, it did change in 4.1 to 5.0, there is an option to use the old behavior",
        "f79f37dd346b7b668a86233565c5a94e (03:35): yeah, I'm just stumbling across that right now I think, bug report 12232",
        "f79f37dd346b7b668a86233565c5a94e (03:38): yep, looks like that may be it; --myisam_stats_method=nulls_equal  may fix this one(now let's hope it doesn't break too much else)",
        "9ca10a97571747c802904ac96509eaf4 (03:41): G_SabinoMullane: what brings you into this neck of the woods?  never noticed you here before =)"
    ],
    "person_ids": [
        "a4b2f111445d56946f87c02c5cd8b676",
        "4813ccceec9b3ab22bfb53c930c35cd8",
        "3d825ab736200154c06f95be2c1fdd8b",
        "b5c0fdca82e63caa7ecb49cb681d0ca4",
        "bdc75f0d65c9e4ac0f81e824c4b6f1c1",
        "08008d1ce321aa62c266d6920d556871",
        "28b2c4b7550a5e71275a88920dbec318",
        "68ad985e21342c4d442c0320b7e6025d",
        "9ca10a97571747c802904ac96509eaf4",
        "82653c61d3ae4fa4bb624e7b24bfdb1a",
        "abe59155aa41ae19e4ea964e9dd4b200",
        "d232ac3a9a7e24b2ff049b1c551b4055",
        "fd463e23769316e6920e155dacdff520",
        "f79f37dd346b7b668a86233565c5a94e",
        "2b7835ece8f55728b40b2fa7a1c653c6",
        "fcd5332e6b8824195646aebb2e55053d",
        "3c26b6648764f1ab4360aa71da5d760b",
        "bf3302d057c10c59c6d4cee9270c6892",
        "d923d906582234f7da470514434fab8b"
    ]
}