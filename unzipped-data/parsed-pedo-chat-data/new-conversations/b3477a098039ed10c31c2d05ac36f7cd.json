{
    "id": "b3477a098039ed10c31c2d05ac36f7cd",
    "messages": [
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (12:27): CSS haz a &lt;br&gt;?",
        "b0faf0091b8793353bfd62455a3bedf2 (12:27): ScribeNick: b0faf0091b8793353bfd62455a3bedf2",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (12:27): ah, had :)",
        "b0faf0091b8793353bfd62455a3bedf2 (12:27): 3f21e54c5c5ffd50fe3680acc025bb1d presents CSS variables/constants proposal",
        "3f21e54c5c5ffd50fe3680acc025bb1d (12:27): http:/ 3f21e54c5c5ffd50fe3680acc025bb1d.inkedblade.net/style/specs/constants/",
        "3f21e54c5c5ffd50fe3680acc025bb1d (12:27): s/proposal/counter-proposal/",
        "b0faf0091b8793353bfd62455a3bedf2 (12:28): the counter-proposal defines parse-time constants",
        "b0faf0091b8793353bfd62455a3bedf2 (12:30): for example, one can separate the layout from the colors across site pages e.g. a site like launchpad.net",
        "b0faf0091b8793353bfd62455a3bedf2 (12:31): 3f21e54c5c5ffd50fe3680acc025bb1d reviews implementation constraints",
        "b0faf0091b8793353bfd62455a3bedf2 (12:32): 3f21e54c5c5ffd50fe3680acc025bb1d: three type of constants: value constants, styleset constants and selector constants",
        "b0faf0091b8793353bfd62455a3bedf2 (12:32): defined with @define block",
        "b0faf0091b8793353bfd62455a3bedf2 (12:32): 3f21e54c5c5ffd50fe3680acc025bb1d reviews examples",
        "b0faf0091b8793353bfd62455a3bedf2 (12:34): 3f21e54c5c5ffd50fe3680acc025bb1d: selector constant must be a valid selector but cannot comma-separated grouping syntax since the constant may be part of a selector",
        "b0faf0091b8793353bfd62455a3bedf2 (12:35): 3f21e54c5c5ffd50fe3680acc025bb1d discusses scoping; declarations in-scope from point of declaration until overriden; not changed, just overriden",
        "b0faf0091b8793353bfd62455a3bedf2 (12:36): 3f21e54c5c5ffd50fe3680acc025bb1d: constants do not cross @import boundaries without a special @import keyword",
        "b0faf0091b8793353bfd62455a3bedf2 (12:38): discussion of scoping and asynchronous stylesheet parsing",
        "b0faf0091b8793353bfd62455a3bedf2 (12:39): @import keywords are pull, push and sync",
        "b0faf0091b8793353bfd62455a3bedf2 (12:39): 72af1cb61d47fcc5d18402bf3d1c147d: why not allow two keywords so &quot;@import push pull&quot; equivalent to &quot;@import sync&quot; ?",
        "b0faf0091b8793353bfd62455a3bedf2 (12:41): alexmog: do other languages have this ability to control scope ?",
        "b0faf0091b8793353bfd62455a3bedf2 (12:41): jdaggett_: don't compound docs have this ?",
        "b0faf0091b8793353bfd62455a3bedf2 (12:42): 3f21e54c5c5ffd50fe3680acc025bb1d: I picked a constant expansion character, no personal preference",
        "b0faf0091b8793353bfd62455a3bedf2 (12:43): 72af1cb61d47fcc5d18402bf3d1c147d: if an expanded selector constant is invalid what happens ?",
        "b0faf0091b8793353bfd62455a3bedf2 (12:43): 3f21e54c5c5ffd50fe3680acc025bb1d: if the constant hasn't been declared, it doesn't get expanded; in this case, the selector is invalid",
        "b0faf0091b8793353bfd62455a3bedf2 (12:44): jdagett: why we need selector constants ?",
        "b0faf0091b8793353bfd62455a3bedf2 (12:44): 72af1cb61d47fcc5d18402bf3d1c147d, plinss: users ask for it",
        "b0faf0091b8793353bfd62455a3bedf2 (12:44): jdaggett: use-case ?",
        "b0faf0091b8793353bfd62455a3bedf2 (12:45): 72af1cb61d47fcc5d18402bf3d1c147d, plinss, 3f21e54c5c5ffd50fe3680acc025bb1d: complex selectors e.g. styling content nested inside a cell",
        "b0faf0091b8793353bfd62455a3bedf2 (12:47): 72af1cb61d47fcc5d18402bf3d1c147d: I understand why one may prefer immutable constants to variables but these need to be accessible through CSSOM so the stylesheet can be re-serialized as it was authored",
        "b0faf0091b8793353bfd62455a3bedf2 (12:47): 72af1cb61d47fcc5d18402bf3d1c147d: you especially want to preserve the rule when the constant turns out to be invalid",
        "b0faf0091b8793353bfd62455a3bedf2 (12:48): alexmog, 3f21e54c5c5ffd50fe3680acc025bb1d, plinss: you have this problem with invalid CSS anyway",
        "3f21e54c5c5ffd50fe3680acc025bb1d (12:48): plinss: and comments, etc.",
        "b0faf0091b8793353bfd62455a3bedf2 (12:49): 72af1cb61d47fcc5d18402bf3d1c147d: in an editor manipulating stylesheets, you need to preserve the @define blocks",
        "b0faf0091b8793353bfd62455a3bedf2 (12:51): 72af1cb61d47fcc5d18402bf3d1c147d: I must be able to edit the @define rule in an editor but how do I do that if it's gone at parse time ?",
        "b0faf0091b8793353bfd62455a3bedf2 (12:54): 72af1cb61d47fcc5d18402bf3d1c147d: not sure pull/push/sync are useful",
        "b0faf0091b8793353bfd62455a3bedf2 (12:55): 104bc19e5513cba4eba2d18c7a704a01, plinss: for constants, it would make sense for the first constant definition to 'win'",
        "104bc19e5513cba4eba2d18c7a704a01 (12:56): or would at least solve the problem of (1) define constant C (2) rule using constant C (3) redefine constant C (4) use CSSOM to manipulate rule in (2) to use constant C differently",
        "72af1cb61d47fcc5d18402bf3d1c147d (12:57): howcome : don't use the $ sign because the dollar is so weak these days",
        "104bc19e5513cba4eba2d18c7a704a01 (12:57): (discusion of $ or \u201a\u00c7\u00a8 :-)",
        "b0faf0091b8793353bfd62455a3bedf2 (12:58): 3f21e54c5c5ffd50fe3680acc025bb1d: processing model is parse time, after tokenization",
        "b0faf0091b8793353bfd62455a3bedf2 (13:00): alexmog questions the priority of selector constants",
        "b0faf0091b8793353bfd62455a3bedf2 (13:01): 72af1cb61d47fcc5d18402bf3d1c147d: values is the #1 use-case but selector is also a common request",
        "b0faf0091b8793353bfd62455a3bedf2 (13:02): 72af1cb61d47fcc5d18402bf3d1c147d: making them global means you'd have to parse everything (even two passes ?)",
        "b0faf0091b8793353bfd62455a3bedf2 (13:04): 3f21e54c5c5ffd50fe3680acc025bb1d reviews name-value table handling depending on @import statement",
        "104bc19e5513cba4eba2d18c7a704a01 (13:08): It seems like this isn't significantly simpler.",
        "b0faf0091b8793353bfd62455a3bedf2 (13:08): 3f21e54c5c5ffd50fe3680acc025bb1d reviews an example in the document",
        "b0faf0091b8793353bfd62455a3bedf2 (13:10): alexmog: first one wins would make global confusing as a local definition could be ignored due to one you cannot see",
        "b0faf0091b8793353bfd62455a3bedf2 (13:10): s/global/global scope",
        "bddfdb28870c5800d938fa0993c46d65 (13:10): is reminded of Gnu make.... how many kinds of assignments can you come up with?",
        "b0faf0091b8793353bfd62455a3bedf2 (13:15): hakkon: I don't want to have things changing after parse time",
        "b0faf0091b8793353bfd62455a3bedf2 (13:15): 72af1cb61d47fcc5d18402bf3d1c147d: making it parse time only makes it unusable in an editor since I do not even know there are constants in your stylesheets",
        "b0faf0091b8793353bfd62455a3bedf2 (13:16): hakkon: you'd have to reimplement a parser",
        "bddfdb28870c5800d938fa0993c46d65 (13:19): wonders if IDEs for C also rely on the C DOM to edit C files. (Sorry, that's mean.)",
        "3f21e54c5c5ffd50fe3680acc025bb1d (13:21): background: #FFDDDD;",
        "3f21e54c5c5ffd50fe3680acc025bb1d (13:21): background: rgba(100%, 0, 0, 0.5);",
        "3f21e54c5c5ffd50fe3680acc025bb1d (13:21): background: url(image1.png), url(image2.png);",
        "3f21e54c5c5ffd50fe3680acc025bb1d (13:21): your editor will only see the middle declaration, the other two will get lost",
        "3f21e54c5c5ffd50fe3680acc025bb1d (13:22): the problem with information getting lost in the CSSOM already exists",
        "3f21e54c5c5ffd50fe3680acc025bb1d (13:22): howcome: I think it would be a reasonable extention to the CSSOM to allow access to the strings",
        "3f21e54c5c5ffd50fe3680acc025bb1d (13:22): howcome: I've got very strong feedback from my developers that they want this at parse time only",
        "b0faf0091b8793353bfd62455a3bedf2 (13:23): plinss: shouldn't a style attribute be able to refer to a constant ?",
        "3f21e54c5c5ffd50fe3680acc025bb1d (13:24): 72af1cb61d47fcc5d18402bf3d1c147d: I understand perfectly the users side of this",
        "3f21e54c5c5ffd50fe3680acc025bb1d (13:25): 72af1cb61d47fcc5d18402bf3d1c147d: but it still seems very hard for implementors",
        "b0faf0091b8793353bfd62455a3bedf2 (13:25): 3f21e54c5c5ffd50fe3680acc025bb1d: there are also use-cases that are not covered",
        "3f21e54c5c5ffd50fe3680acc025bb1d (13:26): by the variables proposal",
        "b0faf0091b8793353bfd62455a3bedf2 (13:31): 3f21e54c5c5ffd50fe3680acc025bb1d: spec is currently too technical to be presented; it needs examples and use-cases for a web author audience",
        "b0faf0091b8793353bfd62455a3bedf2 (13:32): 104bc19e5513cba4eba2d18c7a704a01: both proposals - variables and constants - seem like a lot of work",
        "b0faf0091b8793353bfd62455a3bedf2 (13:32): plinss: which one do you prefer ? opera favors a parse-time solution. would you agree ?",
        "b0faf0091b8793353bfd62455a3bedf2 (13:33): 72af1cb61d47fcc5d18402bf3d1c147d: parse-time solutions are browser-only; harmful to editing tools",
        "b0faf0091b8793353bfd62455a3bedf2 (13:33): plinss: would distinction between parse-time vs. runtime affect your decision ?",
        "b0faf0091b8793353bfd62455a3bedf2 (13:33): 104bc19e5513cba4eba2d18c7a704a01: I don't think so",
        "b0faf0091b8793353bfd62455a3bedf2 (13:33): alexmog: agree it's not parse vs. runtime but completeness of the solution.",
        "b0faf0091b8793353bfd62455a3bedf2 (13:34): alexmog: parse-time only is different from everything else we have; especially one without an object model.",
        "b0faf0091b8793353bfd62455a3bedf2 (13:35): 72af1cb61d47fcc5d18402bf3d1c147d: this is a pragmatic position : do not restrict the feature for the user, it's an implementor issue",
        "b0faf0091b8793353bfd62455a3bedf2 (13:36): 104bc19e5513cba4eba2d18c7a704a01: the relative priority of this also has to be taken into consideration; the cost is similar to cal() but I think calc is higher priority",
        "b0faf0091b8793353bfd62455a3bedf2 (13:37): howcome: this is simple. we shouldn't have an object model",
        "b0faf0091b8793353bfd62455a3bedf2 (13:37): 104bc19e5513cba4eba2d18c7a704a01: i worry about solutions of this kind since we'll have to come back and change it later",
        "72af1cb61d47fcc5d18402bf3d1c147d (13:39): STRONGLY disagrees with howcome here",
        "b0faf0091b8793353bfd62455a3bedf2 (13:39): 104bc19e5513cba4eba2d18c7a704a01 worries about loading consideration (sync cost)",
        "72af1cb61d47fcc5d18402bf3d1c147d (13:40): thinks howcome again thinks browser-only, a W3C disease that has been plaguing W3C for more than ten years",
        "b0faf0091b8793353bfd62455a3bedf2 (13:41): plinss: other feedback is that if they're defined inside an @media block they shouldn't propagate outside",
        "b0faf0091b8793353bfd62455a3bedf2 (13:41): 3f21e54c5c5ffd50fe3680acc025bb1d: but i might to have different declarations per media but the same value",
        "aaf7e3e6ef01f9f15be2bda292cac8b3 (13:43): http://www.webmonkey.com/blog/What_s_On_Your_CSS_Wishlist_",
        "aaf7e3e6ef01f9f15be2bda292cac8b3 (13:43): &lt;br type=&quot;lunch&quot;&gt;"
    ],
    "person_ids": [
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0",
        "b0faf0091b8793353bfd62455a3bedf2",
        "3f21e54c5c5ffd50fe3680acc025bb1d",
        "104bc19e5513cba4eba2d18c7a704a01",
        "72af1cb61d47fcc5d18402bf3d1c147d",
        "bddfdb28870c5800d938fa0993c46d65",
        "aaf7e3e6ef01f9f15be2bda292cac8b3"
    ]
}