{
    "id": "2eb0efdb4156a19ef7588c7d5d2675fe",
    "messages": [
        "d7304e43ecdabb4efa0636d51408ca80 (17:55): hmm opera dosent seem to handle save() and restore() when combined with scale()...well not the same as firefox or ie +excanvas",
        "ab7faae5d7b250ea8606486575f8f79c (17:56): The problem might be that it applies the transformation when you call stroke/fill, instead of applying it when you're adding points to the path",
        "ab7faae5d7b250ea8606486575f8f79c (17:56): (so if you change the transformation between constructing the path and stroking/filling then it'll break)",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:19): Where are the W3C Editor's Drafts?",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:19): They seem to be cunningly hidden.",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:19): Even the link on the HTMLWG page to the latest editor's draft links to a WD.",
        "ab7faae5d7b250ea8606486575f8f79c (18:20): http://dev.w3.org/html5/ ?",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:21): Oh, wait, I get it.",
        "ab7faae5d7b250ea8606486575f8f79c (18:21): I think the ones like http://dev.w3.org/html5/spec/ just haven't been changed back to the ED colours yet",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:21): The latest editor's drafts are actually WDs right now?",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:21): Or something.",
        "ab7faae5d7b250ea8606486575f8f79c (18:25): 88d4d34a8064a4ff39fd5e144eea7762: Yes",
        "ab7faae5d7b250ea8606486575f8f79c (18:25): They were changed in e.g. http://dev.w3.org/cvsweb/html5/spec/index.html.diff?r1=1.807&amp;r2=1.808",
        "ab7faae5d7b250ea8606486575f8f79c (18:26): (&quot;front matter updates for publication this week&quot;, 2.5 weeks ago)",
        "ab7faae5d7b250ea8606486575f8f79c (18:26): and will presumably be changed back soon",
        "8f86c83f5ef08675a18fb5952b608d6b (18:34): Philip': you know of a tutorial, of how to draw a lines with tons of squares, like you mentioned before?",
        "ab7faae5d7b250ea8606486575f8f79c (18:35): 8f86c83f5ef08675a18fb5952b608d6b: I expect there's lots of things talking about how to implement line rasterization algorithms, but it seems like a terrible idea :-)",
        "8f86c83f5ef08675a18fb5952b608d6b (18:36): Philip: it does, but i know of an app, that does it and works really well...",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:37): omg http://www.w3.org/Bugs/Public/show_bug.cgi?id=9197",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:37): evil",
        "ab7faae5d7b250ea8606486575f8f79c (18:37): Using beginPath/moveTo/lineTo is the right way to draw lines, and it should be able to do everything you need, so if your code has bugs then you just need to fix those bugs",
        "8f86c83f5ef08675a18fb5952b608d6b (18:38): ab7faae5d7b250ea8606486575f8f79c: the thing it might not be my app, it might be the OS and need to find a work around...",
        "ab7faae5d7b250ea8606486575f8f79c (18:41): That seems unlikely",
        "8f86c83f5ef08675a18fb5952b608d6b (18:41): tried everything... it just seems that my app randomly begins to connect lines and i think it has to do with &quot;context.moveTo(this.previous_x, this.previous_y);&quot;  but it need the line to work...",
        "ab7faae5d7b250ea8606486575f8f79c (18:43): It sounds like you just have a bug somewhere, but I don't know what your code is doing so I have no idea where it might be wrong",
        "8f86c83f5ef08675a18fb5952b608d6b (18:46): Philip' http://pastebin.com/uNxvLdL4",
        "ab7faae5d7b250ea8606486575f8f79c (18:51): 8f86c83f5ef08675a18fb5952b608d6b: You need to set previous_x and previous_y in mousedown, otherwise they'll be left as whatever they were in the last mousemove even if you released the mouse, I guess",
        "8f86c83f5ef08675a18fb5952b608d6b (18:54): Philip': have tried that and it still begins to screw up after awhile",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:55): Tried logging the events and the values they see for previous_x and previous_y?",
        "ab7faae5d7b250ea8606486575f8f79c (18:56): 8f86c83f5ef08675a18fb5952b608d6b: By the way, why is the drawImage line there?",
        "ab7faae5d7b250ea8606486575f8f79c (18:56): Also, why is the stroke() not at the end of mousemove?",
        "f5af272b5b04154c260eec46f4deb905 (18:58): Hixie, does microdata itemref permit referencing an id of an ancestor?",
        "f5af272b5b04154c260eec46f4deb905 (18:58): e.g. &lt;span itemscope id=a&gt;&lt;span itemprop=turtle itemscope id=b itemref=a&gt;&lt;/span&gt;&lt;/span&gt;",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:59): It might run afoul of the cycle-breaking algo, but there's no explicit restriction against such a thing.",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:59): I haven't kept up with the cycle algo, though.",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:59): foolip would have more info, I think.",
        "f5af272b5b04154c260eec46f4deb905 (18:59): 1f8387eb43f131d7c309a90a4e36b5cb - what cycle breaking algo? none specified here: http://www.w3.org/TR/microdata/#attr-itemref",
        "f5af272b5b04154c260eec46f4deb905 (19:00): it just says &quot;a list of additional elements to crawl to find the name-value pairs of the item.&quot;",
        "f5af272b5b04154c260eec46f4deb905 (19:01): which in the example above, gives you infinitely nested items, each with a turtle property whose value is the next nested item with a turtle property etc.",
        "f5af272b5b04154c260eec46f4deb905 (19:01): turtles all the way down ;)",
        "f5af272b5b04154c260eec46f4deb905 (19:01): when do you stop crawling?",
        "8f86c83f5ef08675a18fb5952b608d6b (19:01): Philip': i makes things look anti-aliasing",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:02): f5af272b5b04154c260eec46f4deb905: http://www.whatwg.org/specs/web-apps/current-work/multipage/microdata.html#associating-names-with-items",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:02): Dunno if this is the latest version of the cycle-breaker.  You'd have to ask foolip, or get Hixie.",
        "f5af272b5b04154c260eec46f4deb905 (19:03): ah - ok: If root is in memory, then the algorithm fails; abort these steps.",
        "f5af272b5b04154c260eec46f4deb905 (19:03): therefore microdata effectively makes referencing an id of an ancestor a NOP",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:04): If the ancestor is already part of the item, yes.",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:04): If it's an ancestor in the DOM, higher up than the start of the item, though, then should be okay.",
        "f5af272b5b04154c260eec46f4deb905 (19:04): sure",
        "f5af272b5b04154c260eec46f4deb905 (19:04): microformats include-pattern has the same restriction",
        "f5af272b5b04154c260eec46f4deb905 (19:05): but I didn't see it in the W3C microdata draft",
        "f5af272b5b04154c260eec46f4deb905 (19:05): so I wondered if Ian had somehow permitted itemref inclusion of ancestors",
        "f5af272b5b04154c260eec46f4deb905 (19:05): apparently not",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:05): Is that algo in the w3c draft, or are the two versions differeing significantly?",
        "8f86c83f5ef08675a18fb5952b608d6b (19:06): Philip': Maybe not, the drawImage stuff does nothing from i can see",
        "f5af272b5b04154c260eec46f4deb905 (19:07): 1f8387eb43f131d7c309a90a4e36b5cb - the w3c draft says the same: http://www.w3.org/TR/microdata/#associating-names-with-items",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:07): kk.",
        "f5af272b5b04154c260eec46f4deb905 (19:07): I just didn't find it because it doesn't reference itemref explicitly",
        "f5af272b5b04154c260eec46f4deb905 (19:07): itemref on an ancestor being a NOP is a side effect you have to figure out from the algo",
        "f5af272b5b04154c260eec46f4deb905 (19:07): rather than being explicit",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:07): Yes.",
        "f5af272b5b04154c260eec46f4deb905 (19:07): which is going to confuse authors",
        "f5af272b5b04154c260eec46f4deb905 (19:08): when they ask why doesn't this work",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:08): The simple and obvious answer would be &quot;because that would make an infinite loop, don't do that&quot;.",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:08): You don't need to point them at the algo for that.",
        "f5af272b5b04154c260eec46f4deb905 (19:10): much better to describe it up front IMHO",
        "f5af272b5b04154c260eec46f4deb905 (19:10): e.g.",
        "f5af272b5b04154c260eec46f4deb905 (19:10): http://microformats.org/wiki/include-pattern#in_general",
        "f5af272b5b04154c260eec46f4deb905 (19:10): To prevent infinite loops, if a class=&quot;include&quot; refers to itself or to an ancestor in the parse tree, then it is ignored and has no effect on the parser.",
        "8f86c83f5ef08675a18fb5952b608d6b (19:10): are there any webOS developers here?",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:11): f5af272b5b04154c260eec46f4deb905: But the situation is more subtle with microdata, because it permits reference to ancestors; it merely prevents such a reference from causing an infinite loop.",
        "f5af272b5b04154c260eec46f4deb905 (19:11): 8f86c83f5ef08675a18fb5952b608d6b try #webkit",
        "f5af272b5b04154c260eec46f4deb905 (19:12): 1f8387eb43f131d7c309a90a4e36b5cb - not true - the ancestor is already in memory from the parse in progress",
        "f5af272b5b04154c260eec46f4deb905 (19:12): thus the reference to ancestor immediately fails in step 1",
        "f5af272b5b04154c260eec46f4deb905 (19:12): assuming you're parsing microdata from the root of document downward",
        "f5af272b5b04154c260eec46f4deb905 (19:13): which all the &quot;converting to ...&quot; (insert format here) algorithms do",
        "8f86c83f5ef08675a18fb5952b608d6b (19:13): f5af272b5b04154c260eec46f4deb905: there is a webos channel, but wanted to see if someone could see the issues i see with my code... but anyways time for lunch! thanks for all the help be back later",
        "f5af272b5b04154c260eec46f4deb905 (19:13): 8f86c83f5ef08675a18fb5952b608d6b - good to know!",
        "f5af272b5b04154c260eec46f4deb905 (19:16): btw - given that itemref causes an actual crawl of the targets of the itemref it is not really a &quot;ref&quot; (like href), it is more like a &quot;src&quot; (like &lt;img src&gt;)",
        "f5af272b5b04154c260eec46f4deb905 (19:16): itemsrc would more accurately convey what itemref does",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:16): f5af272b5b04154c260eec46f4deb905: I believe that that algo starts by assuming the root is an item, that is, it has @itemscope.",
        "f5af272b5b04154c260eec46f4deb905 (19:17): 1f8387eb43f131d7c309a90a4e36b5cb - sure - but that makes no difference to the breaking of recursion",
        "f5af272b5b04154c260eec46f4deb905 (19:17): or ancestral reference",
        "f5af272b5b04154c260eec46f4deb905 (19:17): alternatively, iteminclude would also better convey what itemref does",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:18): &lt;div id=foo itemprop=foo&gt;foo &lt;div itemscope itemref=foo&gt;&lt;/div&gt;&lt;/div&gt; would affect it, wouldn't it?",
        "f5af272b5b04154c260eec46f4deb905 (19:21): 1f8387eb43f131d7c309a90a4e36b5cb - yes - not a particularly useful case though",
        "f5af272b5b04154c260eec46f4deb905 (19:21): as typically you get a need in nested objects to refer to (include) a common parent object",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:21): No, but that's the reason why Ian often forgoes prose descriptions of algos - they don't hit all cases.",
        "f5af272b5b04154c260eec46f4deb905 (19:22): sure, but then that makes it harder for authors",
        "f5af272b5b04154c260eec46f4deb905 (19:22): authors don't typically &quot;get&quot; the procedural descriptions of the algos",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:22): Indeed.",
        "f5af272b5b04154c260eec46f4deb905 (19:23): and one of the claims of microdata is that it is &quot;easier&quot; for authors",
        "f5af272b5b04154c260eec46f4deb905 (19:23): thus I would say that claim is refuted by this",
        "f5af272b5b04154c260eec46f4deb905 (19:23): 1f8387eb43f131d7c309a90a4e36b5cb - if you want to see a discussion of a real world example of nested objects referring to a parent object, /join #microformats",
        "f5af272b5b04154c260eec46f4deb905 (19:24): we're discussing hProduct + hReview there now",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:24): Oh, I don't doubt the use-case.  I use circularly-nested data structures all the time.",
        "f5af272b5b04154c260eec46f4deb905 (19:24): all the time?",
        "f5af272b5b04154c260eec46f4deb905 (19:24): or are you being facetious ;)",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:24): No, I really do use them a lot.",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:25): It's very useful to embed a reference to the parent in a child.",
        "f5af272b5b04154c260eec46f4deb905 (19:26): a reference yes. but an include no. and itemref is an include, not a reference. hence my point about terminology.",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:26): That's valid.",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:27): Then suggest some accurate prose, or suggest a change to the algo to reflect the simpler prose.",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:27): Such as disallowing all ancestor references.",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:27): goes to lunch.",
        "aa73c10362d00746b5a27ef1e170a1fa (19:28): Hey all.",
        "70bfd0ae2cfbf2da192bddd569cf6132 (19:28): I'm trying to come up with practical naming conventions for the IDs and Classnames in my layout template.",
        "70bfd0ae2cfbf2da192bddd569cf6132 (19:29): I was trying to follow the ARIA roles list to name most of my elements."
    ],
    "person_ids": [
        "d7304e43ecdabb4efa0636d51408ca80",
        "ab7faae5d7b250ea8606486575f8f79c",
        "88d4d34a8064a4ff39fd5e144eea7762",
        "8f86c83f5ef08675a18fb5952b608d6b",
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "1f8387eb43f131d7c309a90a4e36b5cb",
        "f5af272b5b04154c260eec46f4deb905",
        "aa73c10362d00746b5a27ef1e170a1fa",
        "70bfd0ae2cfbf2da192bddd569cf6132"
    ]
}