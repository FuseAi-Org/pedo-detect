{
    "id": "8f2d561473077709a11d41de62fa62e4",
    "messages": [
        "edb259c0e0038f38bb200bc20c8cbf7e (13:01): are [TreatUndefinedAs=EmptyString] or [TreatUndefinedAs=Null] actually used?",
        "8b3687499080633e1898fa1dd209ef81 (13:02): Yes",
        "8b3687499080633e1898fa1dd209ef81 (13:02): In HTML/Obsolete, IIRC",
        "8b3687499080633e1898fa1dd209ef81 (13:02): Oh",
        "8b3687499080633e1898fa1dd209ef81 (13:02): Undefined? Not sure",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:03): no hits",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:03): in HTML anyway",
        "8b3687499080633e1898fa1dd209ef81 (13:04): Mozilla does support it, IIRC",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:04): edb259c0e0038f38bb200bc20c8cbf7e: why aren't UCS2 names defined as aliases of UTF-16?",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:05): edb259c0e0038f38bb200bc20c8cbf7e: so is the plan to make BOM override HTTP so that UTF-16BE with little-endian BOM is decoded as little-endian?",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:06): edb259c0e0038f38bb200bc20c8cbf7e: fwiw, in case there are bugs in how Gecko handles BOMs in HTML, it's because I was naive enough to assume that the decoder library worked per spec",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:06): b8810fee2f4a71f849f3f7409546d1d9: are they in any browser? UTF-16 labels are not really done yet, every browser has them done differently",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:06): b8810fee2f4a71f849f3f7409546d1d9: Basically yes, BOM &quot;rules&quot;",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:07): edb259c0e0038f38bb200bc20c8cbf7e: by source inspection, it seems that Gecko supports crazy UCS2 aliases",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:07): edb259c0e0038f38bb200bc20c8cbf7e: IIRC, a legacy SonyEricsson browser did, too",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:07): not that it matters",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:08): b8810fee2f4a71f849f3f7409546d1d9: I think what put me off was that Gecko added them to BE",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:08): UTF-16 is one of those things that must have seemed great ideas before implementation experience",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:08): b8810fee2f4a71f849f3f7409546d1d9: not UTF-16",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:08): edb259c0e0038f38bb200bc20c8cbf7e: UCS2 was BE in theory, no?",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:09): oh okay",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:09): I think per http://wiki.whatwg.org/wiki/Web_Encodings only Gecko had those labels",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:09): but I'm fine with adding labels",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:10): oh no, so Opera has those labels too, but added to UTF-16",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:10): edb259c0e0038f38bb200bc20c8cbf7e: if the Web doesn't need them and smontagu agrees, I'm OK with getting rid of those labels",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:10): but I guess with UTF-16 now defaulting to LE that does not make sense",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:10): edb259c0e0038f38bb200bc20c8cbf7e: the question is whether there's legacy content",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:10): b8810fee2f4a71f849f3f7409546d1d9: IE has this &quot; iso-10646-ucs-2, ucs-2, unicode, utf-16, utf-16le&quot; as labels for utf-16",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:10): edb259c0e0038f38bb200bc20c8cbf7e: not what makes sense",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:10): agreed",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:11): edb259c0e0038f38bb200bc20c8cbf7e: so iso-10646-ucs-2 is LE in IE?",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:11): I would expect so based on that data",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:15): inspired by the thread Faruk started, a console warning about form submissions using encodings that can't represent all of Unicode has landed on mozilla-central and will be in the next Nightly build",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:15): I wonder if it has any impact on anything at all",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:15): I hope it does",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:16): and I hope people don't complain too much about Firefox whining about bad authoring practices",
        "8b3687499080633e1898fa1dd209ef81 (13:16): And that Nightly also won't support geostd8",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:16): I thought those changes were great",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:17): 8b3687499080633e1898fa1dd209ef81: is geostd8 an encoding?",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:17): was :p",
        "8b3687499080633e1898fa1dd209ef81 (13:17): Yes, something Georgian nobody supports",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:17): hooray!",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:24): I think the way the BOM stuff should work by the way is that you say &quot;decode X using label Y&quot; and that algorithm first checks if X has a BOM and then picks utf-8/utf-16/utf-16be if there is a BOM, and otherwise uses Y to pick an encoding",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:26): edb259c0e0038f38bb200bc20c8cbf7e: what's your plan for integrating format-specific internal encoding declarations to the algorithms?",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:27): well before HTML starts decoding it first does this search through a bunch of octets",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:27): and if finds a label there it can then use that",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:27): edb259c0e0038f38bb200bc20c8cbf7e: FWIW, even though I previously WONTFIXed a theory-based bug about the precedence of the BOM, I'm OK with changing the precedence now that there are examples of real pages in the wild where it matters",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:27): cool",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:35): heh, found an old page by f139aba52f9fa1394b4034a7954b2220 http://wiki.whatwg.org/wiki/Character_Encoding_Detection",
        "f139aba52f9fa1394b4034a7954b2220 (13:36): I don't remember writing that.",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:37): the Mozilla observations look weird, but I'm willing to believe the old parser did weird things",
        "f139aba52f9fa1394b4034a7954b2220 (13:37): hmm. Did it in December 2006. That's 5 years ago",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:39): http://wiki.whatwg.org/wiki/StringEncoding seems kind of nonsensical to me to expose that many encodings to script authors",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:40): especially with the addition of allowing user agents to allow arbitrary encodings",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:42): edb259c0e0038f38bb200bc20c8cbf7e: that seems bad",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:42): edb259c0e0038f38bb200bc20c8cbf7e: has it been proposed on a mailing list?",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:42): dunno, I don't remember seeing it",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:42): apart from on the wiki that is",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:43): edb259c0e0038f38bb200bc20c8cbf7e: the API design is questionable, too",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:43): it turns out that it's really hard to get the API right",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:44): iconv gets the API wrong",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:44): the Gecko-internal decoders get the API wrong",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:44): Java gets the API right",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:45): I hope the Encoding Standard gets it right, though it does not expose it to that level of detail currently",
        "8b3687499080633e1898fa1dd209ef81 (13:45): And Java gets the performance wrong? :)",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:45): so if you see a design that doesn't have the characteristics of the Java NIO API, it makes sense to suspect there's an API design error",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:45): 8b3687499080633e1898fa1dd209ef81: not that I'm aware",
        "8b3687499080633e1898fa1dd209ef81 (13:45): Then how do I get to whine about Java? :)",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:45): pointer to that API?",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:50): ICU4C seems to get the API right",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:51): edb259c0e0038f38bb200bc20c8cbf7e: http://docs.oracle.com/javase/6/docs/api/java/nio/charset/CharsetDecoder.html",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:51): edb259c0e0038f38bb200bc20c8cbf7e: the key being that it's necessary to be able to signal &quot;no more input&quot; to the decoder",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:52): iconv and Gecko fail at that",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:52): for example, if a file ends with an incomplete UTF-8 byte sequence, you don't see a REPLACEMENT CHARACTER for the trailing incomplete sequence in Firefox",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:53): ah yes",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:53): I introduced a &quot;EOF octet&quot; concept for that",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:16): though I have not made shift_jis emit an explicit U+FFFD in such cases",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:16): neither Gecko nor IE did that..."
    ],
    "person_ids": [
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "8b3687499080633e1898fa1dd209ef81",
        "b8810fee2f4a71f849f3f7409546d1d9",
        "f139aba52f9fa1394b4034a7954b2220"
    ]
}