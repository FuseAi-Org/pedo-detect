{
    "id": "ca7f940c02b768eb12772aafc45e874c",
    "messages": [
        "2360aabaa09d5610935ee7e2283f0780 (02:32): anybody know if you can remove a whole section of the DOM from the tab order?",
        "38e5971429bb0f30aa410ac1ae0bb9a9 (02:32): (166 hours ago) &lt;divya&gt; tell 2360aabaa09d5610935ee7e2283f0780 ping me when you get back",
        "2360aabaa09d5610935ee7e2283f0780 (02:32): ?tell divya tag, you're it",
        "38e5971429bb0f30aa410ac1ae0bb9a9 (02:32): 2360aabaa09d5610935ee7e2283f0780, Okay.",
        "0fe8692be7a494c6561f745b9f3b0d17 (02:37): resists urge to poke 2360aabaa09d5610935ee7e2283f0780",
        "2360aabaa09d5610935ee7e2283f0780 (02:41): do it",
        "2360aabaa09d5610935ee7e2283f0780 (02:41): DO IT",
        "2360aabaa09d5610935ee7e2283f0780 (02:42): pre-emptively pokes 0fe8692be7a494c6561f745b9f3b0d17 anyways",
        "eb4fd75d7c504913a3dfa2895fbaeb18 (02:42): has anyone found a cross domain solution for canvas.toDataURL and images?",
        "0fe8692be7a494c6561f745b9f3b0d17 (02:42): D:",
        "0fe8692be7a494c6561f745b9f3b0d17 (02:43): going on a beer run, want anything 2360aabaa09d5610935ee7e2283f0780 ?",
        "2360aabaa09d5610935ee7e2283f0780 (02:43): eb4fd75d7c504913a3dfa2895fbaeb18: proxies",
        "2360aabaa09d5610935ee7e2283f0780 (02:43): 0fe8692be7a494c6561f745b9f3b0d17: lulz, ya, but I don't in a week",
        "eb4fd75d7c504913a3dfa2895fbaeb18 (02:43): 2360aabaa09d5610935ee7e2283f0780: proxies for images?",
        "0fe8692be7a494c6561f745b9f3b0d17 (02:44): bbl",
        "2360aabaa09d5610935ee7e2283f0780 (02:44): eb4fd75d7c504913a3dfa2895fbaeb18: JSONP service that you pass a URL to and get image data back",
        "eb4fd75d7c504913a3dfa2895fbaeb18 (02:44): i have an image on a cdn i need to load into canvas...that defeats the purpose.",
        "eb4fd75d7c504913a3dfa2895fbaeb18 (02:46): 2360aabaa09d5610935ee7e2283f0780: supposedly, there are headers you can apply to an image, but it is not supported by browsers apparently.",
        "eb4fd75d7c504913a3dfa2895fbaeb18 (02:46): Access-Control-Allow-Origin: *",
        "eb4fd75d7c504913a3dfa2895fbaeb18 (02:46): Access-Control-Allow-Dredentials: true",
        "eb4fd75d7c504913a3dfa2895fbaeb18 (02:46): but i still get the security error.",
        "eb4fd75d7c504913a3dfa2895fbaeb18 (02:51): Here's a solution, get the image with xhr.",
        "eb4fd75d7c504913a3dfa2895fbaeb18 (02:51): http://jsfiddle.net/JM6rg/",
        "2360aabaa09d5610935ee7e2283f0780 (02:53): eb4fd75d7c504913a3dfa2895fbaeb18: CORS would allow you to cross-domain XHR it, yup",
        "2360aabaa09d5610935ee7e2283f0780 (02:53): eb4fd75d7c504913a3dfa2895fbaeb18: just assumed you didn't have access to that server",
        "2360aabaa09d5610935ee7e2283f0780 (02:53): eb4fd75d7c504913a3dfa2895fbaeb18: that's probably a better option",
        "eb4fd75d7c504913a3dfa2895fbaeb18 (02:55): yeah, its' too bad canvas doesn't obey those headers.",
        "2360aabaa09d5610935ee7e2283f0780 (02:55): Dredentials -&gt; Credentials?",
        "2360aabaa09d5610935ee7e2283f0780 (02:55): XHR does",
        "0de37da1d654c10aed33d7b7347b8e3b (02:58): you can grab the image with a javascript var img = new Image(); img.onload = function(){}; img.src=&quot;http://totally.crossdomain.com/request/lols&quot;",
        "eb4fd75d7c504913a3dfa2895fbaeb18 (02:59): 0de37da1d654c10aed33d7b7347b8e3b: that won't work with canvas.drawImage(img);",
        "0de37da1d654c10aed33d7b7347b8e3b (03:06): http://jsfiddle.net/mk7sg/",
        "0de37da1d654c10aed33d7b7347b8e3b (03:06): works fine?",
        "2360aabaa09d5610935ee7e2283f0780 (03:07): 0de37da1d654c10aed33d7b7347b8e3b: which browser are you using?",
        "0de37da1d654c10aed33d7b7347b8e3b (03:07): chrome",
        "0de37da1d654c10aed33d7b7347b8e3b (03:07): traditionally the most anal about XSS",
        "2360aabaa09d5610935ee7e2283f0780 (03:07): that's webkit, not just Chrome",
        "2360aabaa09d5610935ee7e2283f0780 (03:07): if you're talking about the XSS auditor",
        "2360aabaa09d5610935ee7e2283f0780 (03:08): heh, I think Chrome 13+ might've added x-domain canvas ability with CORS",
        "2360aabaa09d5610935ee7e2283f0780 (03:09): and that image has Access-Control-Allow-Origin: *",
        "0de37da1d654c10aed33d7b7347b8e3b (03:09): let's use a random other image then.",
        "2360aabaa09d5610935ee7e2283f0780 (03:10): yeah, already did",
        "2360aabaa09d5610935ee7e2283f0780 (03:10): seems to work",
        "0de37da1d654c10aed33d7b7347b8e3b (03:10): http://jsfiddle.net/mk7sg/2/ works just fine",
        "0de37da1d654c10aed33d7b7347b8e3b (03:10): it works fine in everything, the only thing you *camn",
        "0de37da1d654c10aed33d7b7347b8e3b (03:10): *can",
        "0de37da1d654c10aed33d7b7347b8e3b (03:10): jesus enter key",
        "0de37da1d654c10aed33d7b7347b8e3b (03:11): *can't* do (there we go) is access the pixel data now.",
        "0de37da1d654c10aed33d7b7347b8e3b (03:11): drawing is fine. trying to &quot;screencap&quot; this canvas will now not work.",
        "2360aabaa09d5610935ee7e2283f0780 (03:11): well, I think that's what eb4fd75d7c504913a3dfa2895fbaeb18 wants to do",
        "0fe8692be7a494c6561f745b9f3b0d17 (03:11): :D I'm beer'd",
        "2360aabaa09d5610935ee7e2283f0780 (03:14): 0de37da1d654c10aed33d7b7347b8e3b: .getImageData() and .toDataURL() don't show the output",
        "2360aabaa09d5610935ee7e2283f0780 (03:14): on my random image",
        "0de37da1d654c10aed33d7b7347b8e3b (03:16): they wouldn't - that illegal by spec.",
        "2360aabaa09d5610935ee7e2283f0780 (03:16): that's what eb4fd75d7c504913a3dfa2895fbaeb18's trying to work around",
        "0de37da1d654c10aed33d7b7347b8e3b (03:17): unless I'm missing something, didn't eb4fd75d7c504913a3dfa2895fbaeb18 want to just load an image?",
        "2360aabaa09d5610935ee7e2283f0780 (03:17): &quot;has anyone found a cross domain solution for canvas.toDataURL and images?&quot;",
        "0de37da1d654c10aed33d7b7347b8e3b (03:17): (at least from looking at the backlog, that's what I got from it)",
        "0de37da1d654c10aed33d7b7347b8e3b (03:17): I missed something.",
        "0de37da1d654c10aed33d7b7347b8e3b (03:17): eh, my answer to that is always PHP",
        "0de37da1d654c10aed33d7b7347b8e3b (03:17): passthrough a url. done.",
        "0de37da1d654c10aed33d7b7347b8e3b (03:17): least amount of headache too =)",
        "0de37da1d654c10aed33d7b7347b8e3b (03:17): (all of a single line of code)",
        "0de37da1d654c10aed33d7b7347b8e3b (03:18): &lt;?php file($_GET[&quot;url&quot;]); ?&gt; and done",
        "0de37da1d654c10aed33d7b7347b8e3b (03:18): add additional security as desired.",
        "0de37da1d654c10aed33d7b7347b8e3b (03:19): err, &quot;echo file_get_contents&quot;, not &quot;file&quot;",
        "eb4fd75d7c504913a3dfa2895fbaeb18 (03:23): 0de37da1d654c10aed33d7b7347b8e3b: i may have to go that route.",
        "eb4fd75d7c504913a3dfa2895fbaeb18 (03:23): I'm storing an image in localStorage to display it when a user goes offline.",
        "eb4fd75d7c504913a3dfa2895fbaeb18 (03:23): i can only store the base64 encoded string, and was using canvas to get that data, but it won't work from images on another server (ie: cdn).",
        "0de37da1d654c10aed33d7b7347b8e3b (03:24): ahh",
        "eb4fd75d7c504913a3dfa2895fbaeb18 (03:24): there are too many images, and they vary from user to user to put them in an appcache manifest file.",
        "0de37da1d654c10aed33d7b7347b8e3b (03:24): be insanely crafty, write the image data generation algorithm.",
        "0de37da1d654c10aed33d7b7347b8e3b (03:25): as a post script program hidden in a type3 font.",
        "0de37da1d654c10aed33d7b7347b8e3b (03:25): &gt;_&gt;",
        "2360aabaa09d5610935ee7e2283f0780 (03:28): http://jsfiddle.net/mk7sg/12/ &lt;-- with eb4fd75d7c504913a3dfa2895fbaeb18's image, with Steve Jobs --&gt; http://jsfiddle.net/mk7sg/11/, neither worked",
        "2360aabaa09d5610935ee7e2283f0780 (03:30): still not sure if Access-Control-Allow-Dredentials:true messes that up, though (the misspelling)",
        "2360aabaa09d5610935ee7e2283f0780 (03:30): I swear this landed already in Webkit/Chrome - http://code.google.com/p/chromium/issues/detail?id=82042",
        "2360aabaa09d5610935ee7e2283f0780 (03:33): http://blog.chromium.org/2011/07/using-cross-domain-images-in-webgl-and.html &lt;-- also this",
        "2360aabaa09d5610935ee7e2283f0780 (03:38): btw, SO works - http://jsfiddle.net/mk7sg/15/",
        "2360aabaa09d5610935ee7e2283f0780 (03:38): (in chrome)",
        "0de37da1d654c10aed33d7b7347b8e3b (03:50): worst landing page ever, this week.",
        "0de37da1d654c10aed33d7b7347b8e3b (03:50): http://www.greenhawk.net/",
        "2360aabaa09d5610935ee7e2283f0780 (03:54): 0de37da1d654c10aed33d7b7347b8e3b: best one this week - http://learn2drive2day.com/",
        "0de37da1d654c10aed33d7b7347b8e3b (03:55): JESUS",
        "0de37da1d654c10aed33d7b7347b8e3b (03:55): and I mean no disrespect, but... wow",
        "0de37da1d654c10aed33d7b7347b8e3b (03:55): on a sidenote, I fondly remember geocities.",
        "0de37da1d654c10aed33d7b7347b8e3b (03:56): I like the &quot;7365 visitors since April 4, 2005&quot; bit."
    ],
    "person_ids": [
        "2360aabaa09d5610935ee7e2283f0780",
        "38e5971429bb0f30aa410ac1ae0bb9a9",
        "0fe8692be7a494c6561f745b9f3b0d17",
        "eb4fd75d7c504913a3dfa2895fbaeb18",
        "0de37da1d654c10aed33d7b7347b8e3b"
    ]
}