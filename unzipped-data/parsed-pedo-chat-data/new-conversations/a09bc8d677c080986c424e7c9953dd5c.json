{
    "id": "a09bc8d677c080986c424e7c9953dd5c",
    "messages": [
        "cc097e0d7183ae8436e7df709553c8c0 (01:10): 69b0d3dfe919a6b860a9fac82de52a7e: if all html quirks that are required to be implemented in order to render the web are specced in html5 (for both quirks mode and standards mode), then html handling will only have one mode",
        "b25b6b77a0087ff8385941e5545d32ea (01:14): cc097e0d7183ae8436e7df709553c8c0: Thats depends how you define &quot;mode&quot; surely? If the spec says &quot;if the doctype is {some quirks mode doctype} do foo otherwise do bar&quot; it's two modes but one spec, no?",
        "cc097e0d7183ae8436e7df709553c8c0 (01:15): b25b6b77a0087ff8385941e5545d32ea: yes. i meant &quot;always do foo, regardless of doctype&quot;",
        "cc097e0d7183ae8436e7df709553c8c0 (01:16): which might include &lt;!--&gt; and &lt;p&gt;&lt;table&gt;",
        "b25b6b77a0087ff8385941e5545d32ea (01:16): Oh, OK. I didn't think it was possible to make the quirks/standards distinction go away and still render the web",
        "cc097e0d7183ae8436e7df709553c8c0 (01:17): not for css, no",
        "cc097e0d7183ae8436e7df709553c8c0 (01:17): for html, i hope",
        "ab7faae5d7b250ea8606486575f8f79c (01:19): Does &lt;body bgcolor=&quot;bogus&quot;&gt; count as HTML? That appears to give different DOMs in quirks vs standards, so I guess it's an HTML parsing issue",
        "cc097e0d7183ae8436e7df709553c8c0 (01:20): ab7faae5d7b250ea8606486575f8f79c: what happens in xhtml?",
        "cc097e0d7183ae8436e7df709553c8c0 (01:20): er",
        "cc097e0d7183ae8436e7df709553c8c0 (01:20): nm",
        "cc097e0d7183ae8436e7df709553c8c0 (01:21): but if it's parsing, then yes",
        "cc097e0d7183ae8436e7df709553c8c0 (01:24): if we don't want to reintroduce this quirk into standards mode, then html will need two modes",
        "ab7faae5d7b250ea8606486575f8f79c (01:25): XHTML seems to do the same as HTML-standards - getAttribute('bgcolor') in FF gives 'bogus', and in Opera gives ''",
        "cc097e0d7183ae8436e7df709553c8c0 (01:25): ok",
        "ab7faae5d7b250ea8606486575f8f79c (01:25): (whereas both give '#b00000' in quirks)",
        "cc097e0d7183ae8436e7df709553c8c0 (01:26): does any browser not do this in quirks? does any do it in standards?",
        "cc097e0d7183ae8436e7df709553c8c0 (01:27): (not asking you to do my homework, only curious if you've already tested :) )",
        "ab7faae5d7b250ea8606486575f8f79c (01:28): IE does #b00000 in both, and apparently Safari does too",
        "cc097e0d7183ae8436e7df709553c8c0 (01:28): then it wouldn't be too harmful to reintroduce the quirk in gecko and opera in standards mode also :)",
        "cc097e0d7183ae8436e7df709553c8c0 (01:30): still need to find out whether content on the web relies on this quirk, but i'm sure it does",
        "ab7faae5d7b250ea8606486575f8f79c (01:31): Okay, I suppose that's reasonable :-)",
        "ab7faae5d7b250ea8606486575f8f79c (01:33): Ooh, I didn't have access to IE when this was discussed yesterday, but now I do, and it explains my ancient confusion as to why &lt;body bgcolor=&quot;grey&quot;&gt; went green - I always assumed it was matching the best prefix (&quot;gre...&quot;), but actually it's ignoring the non-hex characters and getting #00e000",
        "cc097e0d7183ae8436e7df709553c8c0 (01:33): yep",
        "ab7faae5d7b250ea8606486575f8f79c (01:34): (Opera and FF implement the CSS3/SVG colour name &quot;grey&quot; as #808080, in both modes; IE gives green in both)",
        "cc097e0d7183ae8436e7df709553c8c0 (01:35): prepending the &quot;#&quot; seems be be parsing too",
        "ab7faae5d7b250ea8606486575f8f79c (01:36): (I would hope that not many sites depend on that behaviour - if they wanted green, they'd type in &quot;green&quot;, and if they accidentally typed in &quot;grey&quot; they'd have quickly noticed it wasn't quite the design they wanted and they should have fixed the spelling...)",
        "cc097e0d7183ae8436e7df709553c8c0 (01:37): grey == gray in other browsers",
        "62e1e89124794c1ee4b8ec5965cfb90e (01:40): silly people. it's &quot;gray&quot;",
        "cc097e0d7183ae8436e7df709553c8c0 (01:42): 62e1e89124794c1ee4b8ec5965cfb90e: i don't care about which spelling is correct, i care about knowing (and perhaps speccing) what browsers have to implement",
        "62e1e89124794c1ee4b8ec5965cfb90e (01:42): hehe :)",
        "62e1e89124794c1ee4b8ec5965cfb90e (01:42): both, to be safe",
        "cc097e0d7183ae8436e7df709553c8c0 (01:43): they're both css3 color keywords, so yeah",
        "cc097e0d7183ae8436e7df709553c8c0 (01:43): however introducing more keywords here might break stuff",
        "cc097e0d7183ae8436e7df709553c8c0 (01:43): so the list of keywords might not be the same as css3 keywords",
        "62e1e89124794c1ee4b8ec5965cfb90e (01:44): you think apps depend on &quot;grey&quot; rendering as green in IE?",
        "cc097e0d7183ae8436e7df709553c8c0 (01:44): given the other browser treat it as a keywords, no",
        "62e1e89124794c1ee4b8ec5965cfb90e (01:44): (not that it would matter anyway, because you'd have to opt in to really super extra ultra standards mode first)",
        "ab7faae5d7b250ea8606486575f8f79c (01:45): CSS3 says it got the colours from SVG, but SVG doesn't say where its list came from - does anyone know why SVG has both &quot;grey&quot; and &quot;gray&quot; variants?",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:45): they come from the x11 rgb.txt file iirc",
        "ab7faae5d7b250ea8606486575f8f79c (01:47): Hmm, my rgb.txt has at least 202 extra grey values (gray0..gray100, grey0..grey100) so it's not just copying all of those"
    ],
    "person_ids": [
        "cc097e0d7183ae8436e7df709553c8c0",
        "b25b6b77a0087ff8385941e5545d32ea",
        "ab7faae5d7b250ea8606486575f8f79c",
        "62e1e89124794c1ee4b8ec5965cfb90e",
        "69b0d3dfe919a6b860a9fac82de52a7e"
    ]
}