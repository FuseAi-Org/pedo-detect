{
    "id": "1a17cec25bf483047b677f3c6613ceb5",
    "messages": [
        "cc097e0d7183ae8436e7df709553c8c0 (00:09): 69b0d3dfe919a6b860a9fac82de52a7e: http://www.jenitennison.com/blog/node/156",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:25): Weird, www.gov.il is a website.",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:26): Which gov.il redirects to.",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:31): Not as weird as &quot;to.&quot; having an A record.",
        "3d2d57713d8842b3def3085cbd614f68 (00:43): is it possible to allow newless creation of dom object in standard?",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:44): Huh?  You make DOM objects without a new already.",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:44): document.createElement(&quot;foo&quot;);",
        "3d2d57713d8842b3def3085cbd614f68 (00:44): no",
        "3d2d57713d8842b3def3085cbd614f68 (00:44): i want {Image()}",
        "3d2d57713d8842b3def3085cbd614f68 (00:44): w/o new",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:44): ...why?",
        "3d2d57713d8842b3def3085cbd614f68 (00:45): new keyword is bit outdated.",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:45): ...why?",
        "3d2d57713d8842b3def3085cbd614f68 (00:45): just semantic",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:45): ...what?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (00:45): It completely changes the meaning\u201a\u00c4\u00b6",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:46): (I am actually quite confused here, not being facetious.)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (00:46): It's a reference to [[Construct]] and not [[Call]].",
        "3d2d57713d8842b3def3085cbd614f68 (00:46): new langs allows create object w/o &quot;new&quot;",
        "3d2d57713d8842b3def3085cbd614f68 (00:46): a11aabeeceeae6b8cb5d12ea06b56554 i know",
        "a11aabeeceeae6b8cb5d12ea06b56554 (00:46): 3d2d57713d8842b3def3085cbd614f68: But they have a difference between classes and functions mostly.",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:46): New languages arent' javascript, and don't have the mixing of functions and classes and constructors.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (00:46): 3d2d57713d8842b3def3085cbd614f68: JS doesn't have classes, so you need some different way to separate out a function call and an object constructor.",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:47): a11aabeeceeae6b8cb5d12ea06b56554: And even in the Classes proposal that tc39 accepted at the last meeting, you still new them up as normal.  (It's just syntax sugar for the existing prototype stuff.)",
        "3d2d57713d8842b3def3085cbd614f68 (00:47): a11aabeeceeae6b8cb5d12ea06b56554 imho there nothing differences between create object and cast to class",
        "cc097e0d7183ae8436e7df709553c8c0 (00:48): as it happens most (or all) dom constructors can be called as functions with the same effect",
        "a11aabeeceeae6b8cb5d12ea06b56554 (00:48): 1f8387eb43f131d7c309a90a4e36b5cb: Don't even make me think about how far behind I am on es-discuss.",
        "3d2d57713d8842b3def3085cbd614f68 (00:48): Foo(1, 2) and Foo(bar)",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:49): Anyway, 'new' does something very specific - it sets &quot;this&quot; to a clone of the prototype.  Just calling the function doesn't do that; &quot;this&quot; is set as normal.",
        "3d2d57713d8842b3def3085cbd614f68 (00:49): a11aabeeceeae6b8cb5d12ea06b56554 i can propose also Class.prototype = Class as standard :)",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:49): You can make new-less calls still construct, but you ahve to do it manually.",
        "3d2d57713d8842b3def3085cbd614f68 (00:49): 1f8387eb43f131d7c309a90a4e36b5cb i do it",
        "3d2d57713d8842b3def3085cbd614f68 (00:49): my class sugar",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:50): That's nice.  It's weird, and not idiomatic javascript to do so.  Outside of the oddness of some DOM constructors, it's not common for new-less constructors to work.",
        "b25b6b77a0087ff8385941e5545d32ea (00:51): 1f8387eb43f131d7c309a90a4e36b5cb: Well and some of the stdlib :)",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:51): Yeah, some of it.",
        "3d2d57713d8842b3def3085cbd614f68 (00:52): ok 1f8387eb43f131d7c309a90a4e36b5cb. idea to remove 'new' keyword is not still popular",
        "b25b6b77a0087ff8385941e5545d32ea (00:52): It's weird in that the syntax doesn't really support it but normal in that it happens all over the place in typical js",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:53): It's not that it's unpopular.  It's that there's no *reason* for it.  &quot;new&quot; has a purpose, and omitting it means the dev has to do more work.  It also makes the code less clear, imo, because you can no longer tell apart object construction from function calls.",
        "3d2d57713d8842b3def3085cbd614f68 (00:54): 1f8387eb43f131d7c309a90a4e36b5cb i can differ function and Class",
        "3d2d57713d8842b3def3085cbd614f68 (00:54): first letter",
        "3d2d57713d8842b3def3085cbd614f68 (00:54): lower  and upper cased",
        "b25b6b77a0087ff8385941e5545d32ea (00:54): 1f8387eb43f131d7c309a90a4e36b5cb: I'm not sure I agree with your second point",
        "06cb330920ae58e1614c9145d983b3d6 (00:55): ... i'd say that while it works great in Python, trying to turn Javascript into Python is not going to work. heh",
        "b25b6b77a0087ff8385941e5545d32ea (00:55): a = func_call() can set a to a new object if func_call returns it",
        "3d2d57713d8842b3def3085cbd614f68 (00:56): b25b6b77a0087ff8385941e5545d32ea imho 'new' keyword is just semanic",
        "3d2d57713d8842b3def3085cbd614f68 (00:56): in js - not",
        "3d2d57713d8842b3def3085cbd614f68 (00:56): ok",
        "3d2d57713d8842b3def3085cbd614f68 (00:57): not if you abstract from some lang",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:57): It's not semantic.  There is a functional difference.  I explained it.  Without &quot;new&quot;, the dev has to do additional work in their function to clone the prototype themselves.",
        "b25b6b77a0087ff8385941e5545d32ea (00:57): 3d2d57713d8842b3def3085cbd614f68: As usual when people start using the word &quot;semantic&quot; I have no idea what you mean",
        "3d2d57713d8842b3def3085cbd614f68 (00:57): 1f8387eb43f131d7c309a90a4e36b5cb in js. yes",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:58): ...yes, in js.  Because that's how &quot;this&quot; works.  If you're programming in a different language with different semantics for &quot;this&quot;, or some other concept altogether (like real classes with dedicated constructor functions), then the situation is obviously different.",
        "06cb330920ae58e1614c9145d983b3d6 (01:01): (fwiw, as far as syntax sugar goes, being able to omit &quot;new&quot; is about at the bottom of what I'd bother spending time worrying about)",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:13): &quot;Personally, i refer and work from the official specification as it stands, w3c, because i know that it is the spec which will be implemented and, while it is still in flux, it is the one i can rely on the most to be the closest to what will eventually become standard in the years to come.&quot;",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:13): lol?",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:13): orly?",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:14): It's funny when clueless people try to work up a righteous indignation.",
        "b25b6b77a0087ff8385941e5545d32ea (01:15): It's funny when non-implementors make gross assumptions about the needs of implementors",
        "b25b6b77a0087ff8385941e5545d32ea (01:16): Well I say &quot;funny&quot;",
        "b25b6b77a0087ff8385941e5545d32ea (01:16): What I actually mean is &quot;reponsible for lots of problems&quot;",
        "b25b6b77a0087ff8385941e5545d32ea (01:17): Yes, /TR/. I'm looking at you",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:25): anyone know where ms2ger is these days?",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:25): i don't remember seeing him recently",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:26): He was around earlier today.",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:28): k",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:29): ms2ger, if you read this later, see http://www.w3.org/Bugs/Public/show_bug.cgi?id=11191",
        "b25b6b77a0087ff8385941e5545d32ea (01:49): is increasingly convinced that createContextualFragment was a better design than innerHTML but a worse API",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:49): The worse API being &quot;the DOM&quot;?",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:50): b25b6b77a0087ff8385941e5545d32ea: the right design imho was E4X without comments",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:50): Yus.",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:50): but not enough other people seem to agree :-(",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:51): createContextualFragment() has the same major flaw as innerHTML (no compile-time checking)",
        "4c681049601b3c374f1d2c0077c99049 (01:51): XMLSerializer.serializeToString() in gecko predated elem.innerHTML in trident, right?",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:52): didn't innerHTML in trident predate gecko as a whole?",
        "4c681049601b3c374f1d2c0077c99049 (01:52): more generally i had a though that innerHTML was the first thing to serialize DOM into HTML but the more i think about it, i think it wasnt first",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:52): i thought innerHTML was a netscape 4.x thing from the mid 90s",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:52): maybe even 3.x",
        "6b57ea7f33069df5914663ba9e59afdf (01:53): innerHTML is IEism",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:53): ah",
        "4c681049601b3c374f1d2c0077c99049 (01:53): hm.. well i can tell you that innerHTML was ie7, so sept 97... gecko/netscape/moz didnt have it until 99",
        "4c681049601b3c374f1d2c0077c99049 (01:53): ie4*",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:53): gecko didn't exist until like 98/99",
        "4c681049601b3c374f1d2c0077c99049 (01:53): a",
        "4c681049601b3c374f1d2c0077c99049 (01:53): hah",
        "4c681049601b3c374f1d2c0077c99049 (01:55): looks like XMLSerializer and XMLHttpRequest landed simultaneously in gecko. interesting.",
        "4c681049601b3c374f1d2c0077c99049 (01:58): 69b0d3dfe919a6b860a9fac82de52a7e: whats the compile-time checking flaw about?",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:59): code like this shouldn't compile:  foo.innerHTML = '&lt;p&gt;&lt;span title=&quot;x&quot;&gt;bla&lt;/b&gt;';",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:59): Yes.",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:59): it's a syntax error, so it can trivially be caught at compile time",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:00): so it should be caught at compile time",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:00): mind you, for the same reason i'm a firm believe in strong typing, which js doesn't have either",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:00): believer, even",
        "4c681049601b3c374f1d2c0077c99049 (02:01): so if it had compile time checking it'd throw an exception indicating the input isn't good enough?",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:01): it just wouldn't compile",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:01): same as function x() { foo(} );",
        "4c681049601b3c374f1d2c0077c99049 (02:02): k",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:02): e4x works like that",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:02): var foo = &lt;x&gt;&lt;/x&gt;;",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:03): var foo = &lt;x&gt;&lt;/y&gt;; // this line makes the script not compile",
        "3d2d57713d8842b3def3085cbd614f68 (02:03): 69b0d3dfe919a6b860a9fac82de52a7e some new translangs supports embedded xml",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:03): that's what e4x is, yeah",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:03): gecko has (had?) support for it",
        "6b57ea7f33069df5914663ba9e59afdf (02:06): has",
        "3d2d57713d8842b3def3085cbd614f68 (02:08): 69b0d3dfe919a6b860a9fac82de52a7e for example https://github.com/marcuswestin/fun"
    ],
    "person_ids": [
        "cc097e0d7183ae8436e7df709553c8c0",
        "88d4d34a8064a4ff39fd5e144eea7762",
        "3d2d57713d8842b3def3085cbd614f68",
        "1f8387eb43f131d7c309a90a4e36b5cb",
        "a11aabeeceeae6b8cb5d12ea06b56554",
        "b25b6b77a0087ff8385941e5545d32ea",
        "06cb330920ae58e1614c9145d983b3d6",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "4c681049601b3c374f1d2c0077c99049",
        "6b57ea7f33069df5914663ba9e59afdf"
    ]
}