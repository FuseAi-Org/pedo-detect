{
    "id": "f53ae5a2ed845527c14083c769fda875",
    "messages": [
        "69b0d3dfe919a6b860a9fac82de52a7e (18:32): 88d4d34a8064a4ff39fd5e144eea7762: the [OverrideBuiltins] should be on the DOM Document interface",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:32): 69b0d3dfe919a6b860a9fac82de52a7e, so DOM4 should add [OverrideBuiltins] to the original interface, and you should remove it from the partial interface?",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:32): Incidentally, preliminary HTML IDL tests: http://w3c-test.org/html/tests/submission 88d4d34a8064a4ff39fd5e144eea7762/interfaces.html",
        "69b0d3dfe919a6b860a9fac82de52a7e (18:35): 88d4d34a8064a4ff39fd5e144eea7762: yeah",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:36): 69b0d3dfe919a6b860a9fac82de52a7e, except the getter is defined in HTML, and OverrideBuiltins is only allowed to appear on an interface with a getter . . .",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:36): isn't sure what the right way is to handle that",
        "e9fe2a8ed6a64844a5c024b6f688d024 (18:37): good morning, Whatwg!",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:38): 88d4d34a8064a4ff39fd5e144eea7762: the right way to handle that would be to file a bug on heycam|away :)",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:38): does so",
        "69b0d3dfe919a6b860a9fac82de52a7e (18:38): 88d4d34a8064a4ff39fd5e144eea7762: partial interfaces are just an editorial detail, Document has a getter, whether it's defined on the block with 'partial' or not",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:39): Editorially, that violates the fiction that DOM4 doesn't depend on HTML.",
        "69b0d3dfe919a6b860a9fac82de52a7e (18:40): why?",
        "69b0d3dfe919a6b860a9fac82de52a7e (18:40): oh because you need a getter",
        "69b0d3dfe919a6b860a9fac82de52a7e (18:40): hm",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:41): Right.",
        "69b0d3dfe919a6b860a9fac82de52a7e (18:41): let it be heycam's roblem :-)",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:42): I looked at CORS again today to fix various issues",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:42): it really needs to be rewritten at some point :(",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:43): the positive thing here is that I've learned something the past couple of years",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:43): so there's that",
        "69b0d3dfe919a6b860a9fac82de52a7e (18:43): edb259c0e0038f38bb200bc20c8cbf7e: we should merge things like fetch, cors, maybe mimesniff, and various others at some point, but i highly recommend waiting a few years",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:44): yeah merging fetch was coming to mind but indeed",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:44): patience",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:44): http://www.w3.org/Bugs/Public/show_bug.cgi?id=14913",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:44): 88d4d34a8064a4ff39fd5e144eea7762++",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:47): 69b0d3dfe919a6b860a9fac82de52a7e, you have partial interface URL, but I don't see any reference to the full interface.",
        "69b0d3dfe919a6b860a9fac82de52a7e (18:47): yeah",
        "69b0d3dfe919a6b860a9fac82de52a7e (18:47): it doesn't exist yet",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:48): That seems like a bit of a spec bug.",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:48): files it so he can put the bug number in his tests as a comment",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:49): 88d4d34a8064a4ff39fd5e144eea7762: http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:49): 69b0d3dfe919a6b860a9fac82de52a7e: ^^",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:49): I asked MikeSmith to define URL parsing in that spec too",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:50): LGTM, but we need a reference.  Also, that IDL itself doesn't parse, but that's a separate issue.",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:50): it's abarth's Google Docs document converted to HTML by me",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:50): I might have made some mistakes",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:50): interface [Replaceable] URL {",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:50): That looks like it's not your mistake.  :)",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:51): (easily fixable, though)",
        "69b0d3dfe919a6b860a9fac82de52a7e (18:51): ah, cool, it exists now",
        "69b0d3dfe919a6b860a9fac82de52a7e (18:52): if you've filed a bug on me to update the html spec to point to that spec, thanks",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:53): I think that spec should eventually define Syntax/Parsing/Model/API",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:53): I did, yeah.",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:53): for URLs",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:53): I didn't give the spec URL, though.",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:56): So if I'm testing that document.body is an HTMLBodyElement and document.head is an HTMLHeadElement, does it make sense to repeat all the tests for Node/Element/HTMLElement for both objects?",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:56): (for instance)",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:56): That means they'd all be run once for every interface that extends HTMLElement.",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:56): Since I'm testing one of each element type.",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:56): That seems like a lot of repetition.",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:58): It seems like it makes more sense to only do the tests for the bottommost interface if I've tested the higher ones, at least for most of the element types.",
        "b25b6b77a0087ff8385941e5545d32ea (18:59): 88d4d34a8064a4ff39fd5e144eea7762: Yeah, having huge numbers of tests that every HTML*Element is also an Element is just a waste of entropy",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:00): And that it's an HTMLElement, and a Node.",
        "b25b6b77a0087ff8385941e5545d32ea (19:00): Indeed",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:00): However, we do want to test that both Document and Text are Nodes, for instance.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:01): So I'll have to make it configurable somehow.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:02): Oh, so things like WindowBase64 are so that workers can implement them too, right?  Interesting.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:02): will have to support that",
        "69b0d3dfe919a6b860a9fac82de52a7e (19:05): 88d4d34a8064a4ff39fd5e144eea7762: re your mail about my crappy checkin comments, I've added a line to the checkin comment that lists the affected topics",
        "69b0d3dfe919a6b860a9fac82de52a7e (19:05): 88d4d34a8064a4ff39fd5e144eea7762: it won't be perfect, certainly at first where a lot of the time it'll just say &quot;Affected topics: HTML&quot;",
        "69b0d3dfe919a6b860a9fac82de52a7e (19:05): 88d4d34a8064a4ff39fd5e144eea7762: but it's a  start",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:05): 69b0d3dfe919a6b860a9fac82de52a7e, is it on the first line?  If not, it won't be visible to anyone reading commit-watchers unless they look at the actual e-mail instead of just the subject.",
        "69b0d3dfe919a6b860a9fac82de52a7e (19:06): last line. If I make it the first line it'll be the only thing in the e-mail subject.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:06): For non-editorial changes, you can usually figure out the general subject from the first line of the commit summary.",
        "69b0d3dfe919a6b860a9fac82de52a7e (19:07): yeah",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:08): As I said, it's not a big deal for me, I just glance at all of them.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:18): You know what's fun?  When my tests call alert() with no arguments because that's supposed to throw, and WebKit doesn't throw but instead alerts the empty string, interrupting the tests.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:19): . . . then it hangs.  I wonder what the last method it called was.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:21): window.open is fun too.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:22): (&quot;pop-up blocked&quot;)",
        "06cb330920ae58e1614c9145d983b3d6 (19:31): sort of need browser help to test some stuff properly...",
        "06cb330920ae58e1614c9145d983b3d6 (19:32): eg. a (restricted) api to fire keyboard/mouse input as if it was real user input, replace modal things (alert, file pickers) with a callback, that sort of thing",
        "06cb330920ae58e1614c9145d983b3d6 (19:32): i assume browsers do all that for their internal testing anyway",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:38): HTML defines interface Function?  o_O",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:38): WTF?",
        "69b0d3dfe919a6b860a9fac82de52a7e (19:45): that predates WebIDL, i think. As far as I know, though, WebIDL still doesn't provide a type equivalent to that Function interface.",
        "e9fe2a8ed6a64844a5c024b6f688d024 (19:48): heycam: what's the new way to describe [Supplemental] in WebIDL?",
        "e9fe2a8ed6a64844a5c024b6f688d024 (19:49): Window implements SupplementalInterface?",
        "69b0d3dfe919a6b860a9fac82de52a7e (19:49): e9fe2a8ed6a64844a5c024b6f688d024: depends what you want exactly",
        "69b0d3dfe919a6b860a9fac82de52a7e (19:49): e9fe2a8ed6a64844a5c024b6f688d024: what are you trying to do?",
        "e9fe2a8ed6a64844a5c024b6f688d024 (19:49): I want to add &quot;is&quot; attribute to HTMLElement",
        "69b0d3dfe919a6b860a9fac82de52a7e (19:50): then you want a partial interface",
        "e9fe2a8ed6a64844a5c024b6f688d024 (19:50): oh cool",
        "e9fe2a8ed6a64844a5c024b6f688d024 (19:50): thanks",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:59): http://www.w3.org/Bugs/Public/show_bug.cgi?id=14916"
    ],
    "person_ids": [
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "88d4d34a8064a4ff39fd5e144eea7762",
        "e9fe2a8ed6a64844a5c024b6f688d024",
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "b25b6b77a0087ff8385941e5545d32ea",
        "06cb330920ae58e1614c9145d983b3d6"
    ]
}