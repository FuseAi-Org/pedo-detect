{
    "id": "3b35d4ce5160008d0bf54726779da895",
    "messages": [
        "b8810fee2f4a71f849f3f7409546d1d9 (15:57): it's taking ages to upload my slides...",
        "a9b326df4e6da61c5b6f5e1058be83a2 (15:58): crap network",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:09): it's no longer controversial to say that XSD 1.0 sucks",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:10): now the audience laughs",
        "a9b326df4e6da61c5b6f5e1058be83a2 (16:10): b8810fee2f4a71f849f3f7409546d1d9: which session?",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:10): a9b326df4e6da61c5b6f5e1058be83a2: Mike Kay on XSD 1.1",
        "a9b326df4e6da61c5b6f5e1058be83a2 (16:11): ah",
        "edb259c0e0038f38bb200bc20c8cbf7e (16:18): cc097e0d7183ae8436e7df709553c8c0, dunno, fix mobiles? allow some other behavior?",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:22): so far it seems to me that people who don't want the PSVI should use RNG and Schematron instead of XSD 1.1",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:23): now assertions are going to be a streamability problem for XSD too",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:26): give users the rope. let them hang themselves&quot;",
        "f139aba52f9fa1394b4034a7954b2220 (16:31): cool. I've just been asked to do an interview on HTML5 for a podcast on boagworld.com",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:33): f139aba52f9fa1394b4034a7954b2220: does Opera PR allow you to talk with journalists?",
        "f139aba52f9fa1394b4034a7954b2220 (16:33): I don't know",
        "f139aba52f9fa1394b4034a7954b2220 (16:33): I will have to check",
        "f139aba52f9fa1394b4034a7954b2220 (16:33): I haven't accepted yet",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:38): quality of error messages will be a problem and a differentiating factor for impls",
        "cc097e0d7183ae8436e7df709553c8c0 (16:39): http://forums.whatwg.org/profile.php?mode=viewprofile&amp;u=285 - spam?",
        "edb259c0e0038f38bb200bc20c8cbf7e (16:40): looks like it, yes",
        "cc097e0d7183ae8436e7df709553c8c0 (16:40): he's been online on the forum every time i've checked the past few days. interesting way to spam",
        "edb259c0e0038f38bb200bc20c8cbf7e (16:41): that makes him one page away from the final link",
        "edb259c0e0038f38bb200bc20c8cbf7e (16:42): maybe he just keeps a lot of tabs open",
        "cc097e0d7183ae8436e7df709553c8c0 (16:42): indeed, and harder to spot as being a spammer",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:44): wants electricity over IP for the laptop",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:51): David Orchard is talking about extension and versioning",
        "edb259c0e0038f38bb200bc20c8cbf7e (16:53): Is he mentioning CSS and all too?",
        "edb259c0e0038f38bb200bc20c8cbf7e (16:53): is in the lobby working on his slides",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:54): edb259c0e0038f38bb200bc20c8cbf7e: not yet but he's talking about forward compat",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:56): well-defined processing model mentioned",
        "edb259c0e0038f38bb200bc20c8cbf7e (16:58): (i think the solution to extensions is to have a well-defined processing model and the solution to versioning is to not have any)",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:58): HTML5 a great example of doing forward compat",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:58): counter example XML 1.0",
        "b8810fee2f4a71f849f3f7409546d1d9 (17:01): edb259c0e0038f38bb200bc20c8cbf7e: so far this is good stuff",
        "edb259c0e0038f38bb200bc20c8cbf7e (17:02): apart from the XML Schema? :)",
        "b8810fee2f4a71f849f3f7409546d1d9 (17:02): edb259c0e0038f38bb200bc20c8cbf7e: not talking about schema yet",
        "b8810fee2f4a71f849f3f7409546d1d9 (17:08): it's interesting how Dave is formalizing what people on this channel take intuitively and tacitly into account when designing stuff",
        "edb259c0e0038f38bb200bc20c8cbf7e (17:09): that's prolly good for when we're not around anymore :)",
        "b8810fee2f4a71f849f3f7409546d1d9 (17:20): now we got to XSD sucking totally on expressing this",
        "b8810fee2f4a71f849f3f7409546d1d9 (17:22): &quot;this is pretty gory&quot;",
        "5e31c7a8c3991301307392b2039a04c7 (17:24): been off irc so long, somebody nicked my nick",
        "b8810fee2f4a71f849f3f7409546d1d9 (17:26): &quot;we don't wanna hear about SOAP, because that's evil&quot;",
        "edb259c0e0038f38bb200bc20c8cbf7e (17:27): nice",
        "a9b326df4e6da61c5b6f5e1058be83a2 (17:35): edb259c0e0038f38bb200bc20c8cbf7e: this page from 62e77edfd335dfe37696305b6109b252 :",
        "a9b326df4e6da61c5b6f5e1058be83a2 (17:35): http://ilabra.org/",
        "a9b326df4e6da61c5b6f5e1058be83a2 (17:35): see the &quot;Liliana, our new pottery artisan is originally from Argentina.&quot;",
        "a9b326df4e6da61c5b6f5e1058be83a2 (17:36): running through html5lib results in unexpected DOM",
        "a9b326df4e6da61c5b6f5e1058be83a2 (17:38): &lt;a href=&quot;href=&quot;http://www.earthnskystudio.com/Pottery.html&quot; &amp;gt;Page Title &quot;&gt;",
        "ab7faae5d7b250ea8606486575f8f79c (17:38): http://james.html5.org/cgi-bin/parsetree/parsetree.py?source=%3Ca+href%3D%22href%3D%22http%3A%2F%2Fwww.earthnskystudio.com%2FPottery.html%22+%26gt%3BPage+Title+%22%3ELiliana%2C+our+new+pottery+artisan+is+originally+from+Argentina%3C%2Fa%3E",
        "ab7faae5d7b250ea8606486575f8f79c (17:38): Why is that unexpected?",
        "ab7faae5d7b250ea8606486575f8f79c (17:39): Seems to be pretty much the same as Firefox and Opera",
        "5e31c7a8c3991301307392b2039a04c7 (17:40): wonders what b8810fee2f4a71f849f3f7409546d1d9 is watching/reading",
        "a9b326df4e6da61c5b6f5e1058be83a2 (17:40): it shouldn't result in that mess :)",
        "a9b326df4e6da61c5b6f5e1058be83a2 (17:40): it should do something nice",
        "ab7faae5d7b250ea8606486575f8f79c (17:41): IE silently removes the entire link and link text from that page",
        "ab7faae5d7b250ea8606486575f8f79c (17:41): a9b326df4e6da61c5b6f5e1058be83a2: Why shouldn't it?",
        "ab7faae5d7b250ea8606486575f8f79c (17:42): Garbage in plus processing model highly constrained by backward compatibility concerns results in garbage out :-p",
        "a9b326df4e6da61c5b6f5e1058be83a2 (17:42): hmm, well, I guess doing something with it is rather better than removing it entirely",
        "62e77edfd335dfe37696305b6109b252 (17:43): I'd had expected to at least have some valid DOM. I mean, &quot; is not really a valid attribute name, is it?",
        "cc097e0d7183ae8436e7df709553c8c0 (17:46): 62e77edfd335dfe37696305b6109b252: &lt;foo &quot;&gt; is a parse error in both text/html and xml, and trying to create an attribute '&quot;' with dom core apis will raise an exception, so yeah, it's probably not a valid attribute name",
        "cc097e0d7183ae8436e7df709553c8c0 (17:47): 62e77edfd335dfe37696305b6109b252: (although it was a valid attribute name for &lt;embed&gt; in html5 a while ago)",
        "62e77edfd335dfe37696305b6109b252 (17:51): cc097e0d7183ae8436e7df709553c8c0: well, not all DOM implementations actually check their input on object creation. So in my specific case, I happily got an invalid DOM and only discovered the issue when serializing it to XML and sending it over the wire using XMPP. One could claim that that is the DOM implementation's fault, but it would be nice if html5lib wouldn't feed it in the first place, no?",
        "edb259c0e0038f38bb200bc20c8cbf7e (17:51): 5e31c7a8c3991301307392b2039a04c7, XTech 2008, http://2008.xtech.org/public/schedule/detail/530",
        "edb259c0e0038f38bb200bc20c8cbf7e (17:51): is not there",
        "ab7faae5d7b250ea8606486575f8f79c (17:51): 62e77edfd335dfe37696305b6109b252: By &quot;valid DOM&quot;, do you mean one that can be serialised to well-formed XML?",
        "62e77edfd335dfe37696305b6109b252 (17:52): ab7faae5d7b250ea8606486575f8f79c, yeah",
        "62e77edfd335dfe37696305b6109b252 (17:52): Is that a wrong assumption?",
        "cc097e0d7183ae8436e7df709553c8c0 (17:52): 62e77edfd335dfe37696305b6109b252: the serializer needs to do checks",
        "cc097e0d7183ae8436e7df709553c8c0 (17:52): 62e77edfd335dfe37696305b6109b252: the dom allows things that are not serializable as xml",
        "cc097e0d7183ae8436e7df709553c8c0 (17:52): 62e77edfd335dfe37696305b6109b252: e.g. comment with --&gt; in data",
        "ab7faae5d7b250ea8606486575f8f79c (17:53): &lt;html&gt;&lt;foo:bar/&gt;&lt;/html&gt; too",
        "62e77edfd335dfe37696305b6109b252 (17:54): Right, so your view is that html5lib is not at fault, and I should file a bug against the DOM implementation(s)?",
        "ab7faae5d7b250ea8606486575f8f79c (17:55): The DOM implementation ought to be able to represent things that aren't XML-well-formed, because that's necessary for compatibility with HTML content",
        "edb259c0e0038f38bb200bc20c8cbf7e (17:55): Well, basically you would need to file a bug against the software that serializes a DOM to well-formed XML",
        "edb259c0e0038f38bb200bc20c8cbf7e (17:55): (but from your comments it doesn't seem you use such a serializer)",
        "edb259c0e0038f38bb200bc20c8cbf7e (17:55): isn't sure if there is one",
        "ab7faae5d7b250ea8606486575f8f79c (17:56): (and the DOM-to-XML serialiser should guarantee well-formedness for any arbitrary DOM)",
        "cc097e0d7183ae8436e7df709553c8c0 (17:56): might write such a serializer in js just for fun",
        "ab7faae5d7b250ea8606486575f8f79c (17:56): function serialiseDOMToWellFormedXML(dom) { return '&lt;x/&gt;' }",
        "edb259c0e0038f38bb200bc20c8cbf7e (17:56): (yeah, if it throws an exception it's not the software you want)",
        "edb259c0e0038f38bb200bc20c8cbf7e (17:57): (if it does that it doesn't do what it claims to do...)",
        "ab7faae5d7b250ea8606486575f8f79c (17:57): Any such serialiser is going to have to be lossy for at least some inputs",
        "ab7faae5d7b250ea8606486575f8f79c (17:57): Is there a nice way to define what lossiness is acceptable?",
        "cc097e0d7183ae8436e7df709553c8c0 (17:57): dom to xml 1.0 4th ed",
        "cc097e0d7183ae8436e7df709553c8c0 (17:58): configurable whether it should halt or alter infoset",
        "cc097e0d7183ae8436e7df709553c8c0 (17:59): what does TagSoup do?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:10): edb259c0e0038f38bb200bc20c8cbf7e: http://w3.org/mid/<email/>"
    ],
    "person_ids": [
        "b8810fee2f4a71f849f3f7409546d1d9",
        "a9b326df4e6da61c5b6f5e1058be83a2",
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "f139aba52f9fa1394b4034a7954b2220",
        "cc097e0d7183ae8436e7df709553c8c0",
        "5e31c7a8c3991301307392b2039a04c7",
        "ab7faae5d7b250ea8606486575f8f79c",
        "62e77edfd335dfe37696305b6109b252",
        "a11aabeeceeae6b8cb5d12ea06b56554"
    ]
}