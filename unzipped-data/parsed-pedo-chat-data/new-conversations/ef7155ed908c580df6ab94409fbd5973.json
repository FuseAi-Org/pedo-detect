{
    "id": "ef7155ed908c580df6ab94409fbd5973",
    "messages": [
        "ab7faae5d7b250ea8606486575f8f79c (17:59): b25b6b77a0087ff8385941e5545d32ea: With canvas tests, I want to wait for onload and then set some variables (canvas, ctx) which all the subsequent code uses",
        "ab7faae5d7b250ea8606486575f8f79c (18:00): For synchronous tests, I think I can just do &quot;test(function() { var canvas = ...; subsequent code });&quot; and that's fine",
        "ab7faae5d7b250ea8606486575f8f79c (18:00): but for async tests I don't see an easy way to do that",
        "b25b6b77a0087ff8385941e5545d32ea (18:00): ab7faae5d7b250ea8606486575f8f79c: at the moment the harness assumes that all test objects have been created before onload",
        "b25b6b77a0087ff8385941e5545d32ea (18:01): so you would have to do",
        "b25b6b77a0087ff8385941e5545d32ea (18:01): var t = async_test()",
        "b25b6b77a0087ff8385941e5545d32ea (18:01): addEventListener(&quot;load&quot;, function() {t.step(function() {/*do the setup here*/})}, false)",
        "b25b6b77a0087ff8385941e5545d32ea (18:01): or so",
        "b25b6b77a0087ff8385941e5545d32ea (18:02): Unless I am missing your point",
        "b25b6b77a0087ff8385941e5545d32ea (18:02): If you have a better way, I am open to suggestions",
        "ab7faae5d7b250ea8606486575f8f79c (18:06): Hmm, including the setup code that'd be like addEventListener(&quot;load&quot;, function() { t.step(function() { var canvas = ...; img.onload = t.step(function() { use canvas, img; t.done(); }); } }, false);, I think",
        "ab7faae5d7b250ea8606486575f8f79c (18:08): Maybe it'd be nice if I could write &quot;var t = test(function() { var canvas = ...; img.onload = t.step(function() { use canvas, img; t.done(); }); });&quot;",
        "ab7faae5d7b250ea8606486575f8f79c (18:09): Oh, actually, synchronous test doesn't wait for onload either",
        "ab7faae5d7b250ea8606486575f8f79c (18:09): I think",
        "ab7faae5d7b250ea8606486575f8f79c (18:11): so I'll have to make almost every test asynchronous (since they need to wait for images and fonts etc to load)",
        "b25b6b77a0087ff8385941e5545d32ea (18:13): Yeah, sync tests really are sync, they just run straight away",
        "b25b6b77a0087ff8385941e5545d32ea (18:16): I suppose one could have some hack like &quot;if you pass an async test a function(){} it gets run on onload, and if that test calls a step() before onload() it is an error&quot;",
        "b25b6b77a0087ff8385941e5545d32ea (18:16): s/onload/load/g",
        "b25b6b77a0087ff8385941e5545d32ea (18:16): and remove some ()",
        "b25b6b77a0087ff8385941e5545d32ea (18:20): (does that sound like it would be useful?)",
        "ab7faae5d7b250ea8606486575f8f79c (18:21): Depends on whether running after onload is far more common than the alternative, I guess",
        "ab7faae5d7b250ea8606486575f8f79c (18:22): Hmm, when I said &quot;img.onload = t.step(function() { use canvas, img; t.done(); });&quot; I think that was wrong",
        "ab7faae5d7b250ea8606486575f8f79c (18:22): and it needs &quot;img.onload = function() { t.step(function() { use canvas, img; t.done(); }); };&quot;",
        "b25b6b77a0087ff8385941e5545d32ea (18:23): Well I guess there might be a large class of tests for which some resource is needed after onload",
        "ab7faae5d7b250ea8606486575f8f79c (18:23): Could t.step return a function that can be called later to execute the test step, rather than executing it immediately?",
        "b25b6b77a0087ff8385941e5545d32ea (18:23): It could",
        "ab7faae5d7b250ea8606486575f8f79c (18:23): so that onload = t.step(function() ...) would do the right thing",
        "b25b6b77a0087ff8385941e5545d32ea (18:23): Or there could be a different method for that",
        "b25b6b77a0087ff8385941e5545d32ea (18:24): t.step_func or something",
        "ab7faae5d7b250ea8606486575f8f79c (18:24): In what cases is the current t.step useful?",
        "b25b6b77a0087ff8385941e5545d32ea (18:24): I agree it seems like an appealing design",
        "ab7faae5d7b250ea8606486575f8f79c (18:26): can't think of any cases where he'd want t.step to execute the step immediately",
        "b25b6b77a0087ff8385941e5545d32ea (18:27): I guess it is always trivial to get the other behaviour, just by doing t.step(function() {})()",
        "b25b6b77a0087ff8385941e5545d32ea (18:28): So, yes, that seems like an improvement",
        "b25b6b77a0087ff8385941e5545d32ea (18:28): I guess I should email public-html-testsuite",
        "b25b6b77a0087ff8385941e5545d32ea (18:29): Since it is a breaking change",
        "ab7faae5d7b250ea8606486575f8f79c (18:30): I suppose there's no fundamental difference, it just seems more syntactically convenient to get a test-happy wrapped function you can use in async event handlers directly",
        "ab7faae5d7b250ea8606486575f8f79c (18:32): Then I can do var t = async_test(&quot;%(name)s&quot;); on_event(window, &quot;load&quot;, t.step(function() { ...; t.done(); })); which isn't terribly verbose",
        "b25b6b77a0087ff8385941e5545d32ea (18:35): Indeed",
        "ab7faae5d7b250ea8606486575f8f79c (18:42): &quot;people who have already submitted tests&quot; - there's less than 100 tests currently using .step, and hypothetically probably at least two orders of magnitude more tests that need to be written in the future using these functions, so it doesn't seem particularly important to maintain backward compatibility yet",
        "70bfd0ae2cfbf2da192bddd569cf6132 (18:56): Anyone here good with createRange, selections, etc?",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:14): Ranges and selections confuse me.",
        "70bfd0ae2cfbf2da192bddd569cf6132 (19:20): 1f8387eb43f131d7c309a90a4e36b5cb, me too.",
        "70bfd0ae2cfbf2da192bddd569cf6132 (19:20): Yesterday I decided I wanted to write a wysiwyg.",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:20): Now you have many problems.",
        "9dfea2f9bd9114520591dceb20d528a1 (19:26): Now you have problem{2,}",
        "70bfd0ae2cfbf2da192bddd569cf6132 (19:30): I like the word &quot;issues&quot;",
        "9dfea2f9bd9114520591dceb20d528a1 (19:31): ponders the value of changing &lt;b&gt; into &lt;span&gt; with font-weight: bold;",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:32): 9dfea2f9bd9114520591dceb20d528a1: From where?",
        "9dfea2f9bd9114520591dceb20d528a1 (19:33): In this page I'm working on",
        "9dfea2f9bd9114520591dceb20d528a1 (19:34): Well, actually, I'm moving a &lt;th&gt; and &lt;td&gt; out of a table, and to preserve the visuals I need to make the part from the th bold somehow",
        "9dfea2f9bd9114520591dceb20d528a1 (19:35): Some people, when presented with this problem think &quot;I know, I'll use &lt;b&gt;&quot;. Now they have change comments.",
        "d114be1698421a7cec050e2207d29631 (19:42): doesn't understand 9dfea2f9bd9114520591dceb20d528a1's problem",
        "b8810fee2f4a71f849f3f7409546d1d9 (19:58): 1f8387eb43f131d7c309a90a4e36b5cb: waht's an effective way to report a bug like https://bugzilla.mozilla.org/show_bug.cgi?id=614864 to people responsible for Google search front end code?",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:09): b8810fee2f4a71f849f3f7409546d1d9: I don't know the proper official way.  I just use internal Buzz, and it finds its way to the right people.  ^_^",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:10): I'll push it along, and also ask for a public way to report it and get back to you.",
        "b8810fee2f4a71f849f3f7409546d1d9 (20:10): 1f8387eb43f131d7c309a90a4e36b5cb: thanks",
        "b25b6b77a0087ff8385941e5545d32ea (20:11): 65325d50b2e25aca54bc871b89758c9c: I haven't fully understood your email to public-html-testsuite, but it seems a bit like the &quot;doctor, doctor, it hurts when I do this&quot; joke",
        "65325d50b2e25aca54bc871b89758c9c (20:11): b25b6b77a0087ff8385941e5545d32ea: look at the test I cited",
        "65325d50b2e25aca54bc871b89758c9c (20:12): b25b6b77a0087ff8385941e5545d32ea: is there a way to do it &quot;right&quot;, but still report each assertion independently in the output?",
        "b25b6b77a0087ff8385941e5545d32ea (20:12): You're not supposed to create multiple independent tests where the result of one depends on dom manipulation in another",
        "65325d50b2e25aca54bc871b89758c9c (20:12): I know",
        "65325d50b2e25aca54bc871b89758c9c (20:12): that's why I assume I did it &quot;wrong&quot;",
        "65325d50b2e25aca54bc871b89758c9c (20:13): but I like the output produced by my version a lot more than what happens if I do it in the intended way",
        "b25b6b77a0087ff8385941e5545d32ea (20:13): If they are logically independent tests they should have seperate test() functions",
        "65325d50b2e25aca54bc871b89758c9c (20:13): in fact, I don't see anything wrong with the way I did it, other than grungy syntax and failing to match the intended philosophy of the test framework",
        "65325d50b2e25aca54bc871b89758c9c (20:14): what if they are dependent, but I want to report each result independently?",
        "b25b6b77a0087ff8385941e5545d32ea (20:14): &quot;don't do that&quot;",
        "b25b6b77a0087ff8385941e5545d32ea (20:14): -&gt; food",
        "b25b6b77a0087ff8385941e5545d32ea (20:14): biab",
        "65325d50b2e25aca54bc871b89758c9c (20:14): are you saying my use case is invalid?",
        "65325d50b2e25aca54bc871b89758c9c (20:15): I don't think having a single result line that says &quot;The second half of the id tests, because at this point I started doing DOM mutation&quot; would improve the quality of my tests",
        "70bfd0ae2cfbf2da192bddd569cf6132 (20:15): Heck yes, finally did it.",
        "65325d50b2e25aca54bc871b89758c9c (20:15): and even for fully independent tests, having to wrap it in test() { function() { assert_equals(... seems like needless verbiage"
    ],
    "person_ids": [
        "ab7faae5d7b250ea8606486575f8f79c",
        "b25b6b77a0087ff8385941e5545d32ea",
        "70bfd0ae2cfbf2da192bddd569cf6132",
        "1f8387eb43f131d7c309a90a4e36b5cb",
        "9dfea2f9bd9114520591dceb20d528a1",
        "d114be1698421a7cec050e2207d29631",
        "b8810fee2f4a71f849f3f7409546d1d9",
        "65325d50b2e25aca54bc871b89758c9c"
    ]
}