{
    "id": "96c44571d170ec451df32d5bfc74dd5b",
    "messages": [
        "7b55d0f261619a93f9ae615a3cb18967 (06:57): 69b0d3dfe919a6b860a9fac82de52a7e: so what the status on server sent events?",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:01): how do you mean?",
        "7b55d0f261619a93f9ae615a3cb18967 (07:01): about it being possibly removed?",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:02): it hasn't seen much implementation from other browser vendors than opera, and it's redundant with other features",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:02): so it might possibly be removed",
        "7b55d0f261619a93f9ae615a3cb18967 (07:02): which other feature makes it redundant?",
        "65325d50b2e25aca54bc871b89758c9c (07:02): we might implement it in WebKit",
        "65325d50b2e25aca54bc871b89758c9c (07:02): you could argue it is redundant with XMLHttpRequest",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:03): it's redundant with networking and with multipart xmlhttprequest",
        "65325d50b2e25aca54bc871b89758c9c (07:03): (assuming it is spec'd clearly enough that you can rely on getting multiple responses for separate data chunks)",
        "65325d50b2e25aca54bc871b89758c9c (07:03): not even multipart",
        "65325d50b2e25aca54bc871b89758c9c (07:03): people use regular-type XHR for multiple server-sent messages over one connection",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:04): true",
        "65325d50b2e25aca54bc871b89758c9c (07:04): but &lt;event-source&gt; is potentially a nice convenience",
        "7b55d0f261619a93f9ae615a3cb18967 (07:04): i have two concerns about it",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:04): yeah, the question is should the platform have conveniences? or just the core platform features that can be used to implement the conveniences?",
        "7b55d0f261619a93f9ae615a3cb18967 (07:05): i think the DOM event metaphor is really strained",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:05): if we do keep it, we'll certainly need to massively simplify it. it's way over-engineered right now.",
        "65325d50b2e25aca54bc871b89758c9c (07:05): it should have conveniences in cases where patterns are very commonly seen in library code",
        "7b55d0f261619a93f9ae615a3cb18967 (07:05): and it's impossible to implement backwardsly",
        "7b55d0f261619a93f9ae615a3cb18967 (07:05): yeah",
        "65325d50b2e25aca54bc871b89758c9c (07:05): thus the Selectors API",
        "65325d50b2e25aca54bc871b89758c9c (07:05): (and getElementsByClassName)",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:05): yep",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:06): maybe this is such a case",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:06): maybe it isn't",
        "7b55d0f261619a93f9ae615a3cb18967 (07:06): hixie: what if we a) make it for Message events only and b) add a way to implement it based on slow download requests so that it can be emulated with XHR for older browsers?",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:06): that's why it's marked as &quot;may be removed&quot;. cos it may be removed. :-)",
        "7b55d0f261619a93f9ae615a3cb18967 (07:07): so like old browsers can add application/x-dom-event-not-a-stream to their Accept headers, and it will just end the connection after every event is sent",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:07): 7b55d0f261619a93f9ae615a3cb18967: (a) is easy; but i'm not sure i follow (b). If you have a solid proposal, feel free to mail it to the list for consideration.",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:07): i wouldn't rely on Accept headers for anything",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:07): but yeah",
        "7b55d0f261619a93f9ae615a3cb18967 (07:08): why not?",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:08): that kind of stuff hasn't historically worked well",
        "7b55d0f261619a93f9ae615a3cb18967 (07:09): hm. i suppose we could do it the other way around, if it doesn't have the accept header for the event stream, the server would default to a non-streaming method",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:11): i would recommend something that doesn't in any way involve accept or content-type headers working correctly",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:12): if the web's history has taught us anything, it's that people don't understand or honour mime types.",
        "65325d50b2e25aca54bc871b89758c9c (07:12): 7b55d0f261619a93f9ae615a3cb18967: you don't have to end the connection after every event to work with XHR",
        "7b55d0f261619a93f9ae615a3cb18967 (07:12): well even if the accept wasn't formed correctly, the worst thing that would happen is that it would degrade to slower behavior",
        "65325d50b2e25aca54bc871b89758c9c (07:12): 7b55d0f261619a93f9ae615a3cb18967: I believe current-generation browsers could emulate server-sent events on top of XHR using the current HTML5 event stream format",
        "65325d50b2e25aca54bc871b89758c9c (07:13): (though I haven't actually tried it)",
        "7b55d0f261619a93f9ae615a3cb18967 (07:13): 65325d50b2e25aca54bc871b89758c9c: i've found the behavior of partial downloads kinda unpredictable though",
        "65325d50b2e25aca54bc871b89758c9c (07:13): the JS library folks are calling the persistent connection for messages from the server thing &quot;COMET&quot;",
        "65325d50b2e25aca54bc871b89758c9c (07:14): so probably a sensible thing to do would be to find what kind of API they offer as design input for a standards-track way of doing it",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:14): COMET is just one implementataion, as i understand it",
        "7b55d0f261619a93f9ae615a3cb18967 (07:14): i think it's really critical to be able you can emulate this in older browsers",
        "65325d50b2e25aca54bc871b89758c9c (07:14): I thought COMET was the concept",
        "7b55d0f261619a93f9ae615a3cb18967 (07:14): i think comet is a big idea",
        "7b55d0f261619a93f9ae615a3cb18967 (07:14): yeah",
        "65325d50b2e25aca54bc871b89758c9c (07:14): http://en.wikipedia.org/wiki/Comet_(programming)#Browser_compatibility",
        "65325d50b2e25aca54bc871b89758c9c (07:14): here's the mechanisms people have used for it",
        "65325d50b2e25aca54bc871b89758c9c (07:14): but I dunno what kind of API is offered",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:14): man people have got to stop making up new acronyms for stuff that already has names",
        "7b55d0f261619a93f9ae615a3cb18967 (07:15): i've seen many",
        "65325d50b2e25aca54bc871b89758c9c (07:15): wow, lots of info about WebKit in there",
        "65325d50b2e25aca54bc871b89758c9c (07:15): very educational",
        "7b55d0f261619a93f9ae615a3cb18967 (07:16): from my basic research, i think the most reliable implementations have used a &quot;slow download with re-download&quot; XHR or iframe method",
        "7b55d0f261619a93f9ae615a3cb18967 (07:16): the multipart thing would allow for constant connections, but only gecko really does that",
        "65325d50b2e25aca54bc871b89758c9c (07:16): streaming over a single connection works just as well",
        "65325d50b2e25aca54bc871b89758c9c (07:17): I'm not sure what is better about multipart",
        "65325d50b2e25aca54bc871b89758c9c (07:17): other than handling message boundaries inside the engine",
        "7b55d0f261619a93f9ae615a3cb18967 (07:17): i think that's the critical issue",
        "65325d50b2e25aca54bc871b89758c9c (07:17): it's not that hard to make up a protocol for message boundaries",
        "7b55d0f261619a93f9ae615a3cb18967 (07:17): i don't think any UAs really make guarantees about when they flush their buffers for XHR reads",
        "65325d50b2e25aca54bc871b89758c9c (07:18): neither WebKit nor Gecko will buffer indefinitely",
        "65325d50b2e25aca54bc871b89758c9c (07:18): I don't know about IE",
        "7b55d0f261619a93f9ae615a3cb18967 (07:18): no, but imagine a chat application",
        "65325d50b2e25aca54bc871b89758c9c (07:18): I assume the streaming XHR thing doesn't work in IE or people would use it",
        "7b55d0f261619a93f9ae615a3cb18967 (07:18): even if it's 15 seconds, that's bad",
        "7b55d0f261619a93f9ae615a3cb18967 (07:19): which is why people (meebo, for instance) use multiple requests",
        "65325d50b2e25aca54bc871b89758c9c (07:19): is it ever actually 15 seconds?",
        "65325d50b2e25aca54bc871b89758c9c (07:19): I don't actually know",
        "7b55d0f261619a93f9ae615a3cb18967 (07:19): i'm haven't benchmarked it",
        "7b55d0f261619a93f9ae615a3cb18967 (07:20): this wikipedia page seems to suggest that it never fires on webkit until at least 256 bytes are recieved",
        "65325d50b2e25aca54bc871b89758c9c (07:20): anyway it would be good for WebKit to support multipart/x-mixed-replace in XHR (I assume that is the kind people mean), but I am not entirely sure what correct behavior for that is supposed to be",
        "65325d50b2e25aca54bc871b89758c9c (07:20): I guess we'd have to reverse-engineer Gecko",
        "65325d50b2e25aca54bc871b89758c9c (07:20): 7b55d0f261619a93f9ae615a3cb18967: I don't think that is true",
        "65325d50b2e25aca54bc871b89758c9c (07:20): older versions used to require some amount of data to be sent to prime the buffer initially",
        "65325d50b2e25aca54bc871b89758c9c (07:21): I think after that (and now right away) it will fire readystate 3 without a floor on bytes received",
        "65325d50b2e25aca54bc871b89758c9c (07:21): (could be wrong, but that's my recollection)",
        "7b55d0f261619a93f9ae615a3cb18967 (07:21): ok, but it's highly possible that opera and IE don't even do that",
        "7b55d0f261619a93f9ae615a3cb18967 (07:22): and i don't think the XHR specs even specify this",
        "7b55d0f261619a93f9ae615a3cb18967 (07:22): also imagine a proxy server",
        "7b55d0f261619a93f9ae615a3cb18967 (07:22): actually, don't, that makes no sense",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:22): 58 tests done, 42 tests to go.",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:22): more than half-way there!",
        "7b55d0f261619a93f9ae615a3cb18967 (07:22): woot",
        "65325d50b2e25aca54bc871b89758c9c (07:23): XHR specs don't specify this, but they could",
        "65325d50b2e25aca54bc871b89758c9c (07:23): used to be they didn't specify anything",
        "7b55d0f261619a93f9ae615a3cb18967 (07:23): ok but that won't make IE support it",
        "7b55d0f261619a93f9ae615a3cb18967 (07:24): i really really feel being able to emulate this kind of thing on old browsers is a splendid idea",
        "65325d50b2e25aca54bc871b89758c9c (07:24): x-mixed-replace is a pretty crappy wire protocol as far as message boundaries go",
        "7b55d0f261619a93f9ae615a3cb18967 (07:24): yeah",
        "7b55d0f261619a93f9ae615a3cb18967 (07:25): plus it makes server code potentially really complicated",
        "65325d50b2e25aca54bc871b89758c9c (07:25): really? seems no worse than any other server-sent message protocol",
        "65325d50b2e25aca54bc871b89758c9c (07:26): as far as impact on most of your server code",
        "65325d50b2e25aca54bc871b89758c9c (07:26): (presumably on some level the server has an API that says &quot;post this message now&quot; or something)",
        "7b55d0f261619a93f9ae615a3cb18967 (07:27): well yeah once you abstract that away",
        "7b55d0f261619a93f9ae615a3cb18967 (07:27): but now you have to set up boundaires",
        "7b55d0f261619a93f9ae615a3cb18967 (07:28): and escape your data appropriately",
        "65325d50b2e25aca54bc871b89758c9c (07:30): is there escaping?",
        "65325d50b2e25aca54bc871b89758c9c (07:30): I think you just need to make sure to pick a boundary string that won't appear in the message",
        "65325d50b2e25aca54bc871b89758c9c (07:30): which is what sucks",
        "65325d50b2e25aca54bc871b89758c9c (07:30): if there was escaping, you could let some abstraction layer pick the boundary and do escaping",
        "7b55d0f261619a93f9ae615a3cb18967 (07:30): yeah so how do you know that before you start sending",
        "7b55d0f261619a93f9ae615a3cb18967 (07:31): i mean in this particular case, i think the fact that boundaries start with --- and the dom event stuff doesn't makes it easier",
        "65325d50b2e25aca54bc871b89758c9c (07:31): I guess you can do &quot;escaping&quot; by making sure no line ever starts with --",
        "7b55d0f261619a93f9ae615a3cb18967 (07:34): still, this doesn't help us for older UAs that don't support mixed",
        "65325d50b2e25aca54bc871b89758c9c (07:35): no new feature helps for older UAs",
        "7b55d0f261619a93f9ae615a3cb18967 (07:36): but i'm saying if we had a mode which used mulitple connections",
        "7b55d0f261619a93f9ae615a3cb18967 (07:36): that could emulate server sent events even on UAs which only support single part XHR",
        "65325d50b2e25aca54bc871b89758c9c (07:37): I think you'd be better off using the Htmlfile control in IE and streaming XHR in other browsers",
        "65325d50b2e25aca54bc871b89758c9c (07:37): if what you want to do is put a nicer API on top of existing UA functionality",
        "7b55d0f261619a93f9ae615a3cb18967 (07:38): what is the Htmlfile control?"
    ],
    "person_ids": [
        "7b55d0f261619a93f9ae615a3cb18967",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "65325d50b2e25aca54bc871b89758c9c"
    ]
}