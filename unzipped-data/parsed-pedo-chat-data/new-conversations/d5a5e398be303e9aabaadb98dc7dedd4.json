{
    "id": "d5a5e398be303e9aabaadb98dc7dedd4",
    "messages": [
        "827fac6a4d016d53b6874573cf37fc05 (23:08): Is xhr's &quot;load&quot; event fired when the request is complete and it has the response?",
        "827fac6a4d016d53b6874573cf37fc05 (23:14): Ah, yes, read the w3c spec",
        "04beac4484f6576b0da1037194f76695 (23:33): How does firefox handle small allocations to the heap?",
        "04beac4484f6576b0da1037194f76695 (23:37): Is it quiet in here, or am I having trouble?",
        "827fac6a4d016d53b6874573cf37fc05 (23:38): It is quiet",
        "04beac4484f6576b0da1037194f76695 (23:39): Thanks, Is there a document outlining Firefox memory allocation strategy?",
        "04beac4484f6576b0da1037194f76695 (23:39): I tried google firefox memory management, and couldn't find what I was looking for",
        "04beac4484f6576b0da1037194f76695 (23:42): IF a number of small allocations to the heap were done as a member in the relevant class or allocated on the stack, it might improve performance",
        "04beac4484f6576b0da1037194f76695 (23:44): ...at least that's my theory, which I could tell better if I knew how Firefox allocates memory.",
        "bbd8a1c8b716f90cfaf9493cbb3868dc (23:46): 04beac4484f6576b0da1037194f76695: i'm not sure i understand what you're asking",
        "bbd8a1c8b716f90cfaf9493cbb3868dc (23:46): 04beac4484f6576b0da1037194f76695: firefox uses jemalloc",
        "bbd8a1c8b716f90cfaf9493cbb3868dc (23:47): 04beac4484f6576b0da1037194f76695: http://mxr.mozilla.org/mozilla-central/source/memory/jemalloc/jemalloc.c#33",
        "bbd8a1c8b716f90cfaf9493cbb3868dc (23:48): 04beac4484f6576b0da1037194f76695: what's the pattern you want to transform into static(?) class member or stack allocations?",
        "04beac4484f6576b0da1037194f76695 (23:48): on linux and unix, but...",
        "04beac4484f6576b0da1037194f76695 (23:50): in nsScriptableUnicodeConverter:Finishwithlength, there's a 32 byte allocation on the heap",
        "04beac4484f6576b0da1037194f76695 (23:50): short lived",
        "04beac4484f6576b0da1037194f76695 (23:51): but potentially called many times",
        "bbd8a1c8b716f90cfaf9493cbb3868dc (23:52): http://mxr.mozilla.org/mozilla-central/source/intl/uconv/src/nsScriptableUConv.cpp#113",
        "bbd8a1c8b716f90cfaf9493cbb3868dc (23:53): are you sure it's short-lived? it looks like the pointer gets returned through the outparam &quot;_retval&quot;",
        "0b9a93bcbf56042557d5a41dd3db0243 (23:55): hello world; how is it I make a try-push trigger PGO builds again?  I tried https://hg.mozilla.org/try/rev/ead1cc859c90 but either that doesn't work or it takes more than 12h for turnaround",
        "04beac4484f6576b0da1037194f76695 (23:56): but then it gets immediately deallocated in the two routines that  call it after its contents get merged to another string",
        "bbd8a1c8b716f90cfaf9493cbb3868dc (23:57): 04beac4484f6576b0da1037194f76695: i see, that does seem silly",
        "04beac4484f6576b0da1037194f76695 (23:57): http://mxr.mozilla.org/mozilla-central/ident?i=FinishWithLength",
        "bbd8a1c8b716f90cfaf9493cbb3868dc (23:59): 04beac4484f6576b0da1037194f76695: we're generally not big on alloca(), but since this is a fixed-length buffer, it could easily be a stack buffer owned by the callers",
        "04beac4484f6576b0da1037194f76695 (23:59): I'm better at reading languages than writing in them",
        "050421e96671fe1a3d8cf2b5dbe99cb7 (00:00): 0b9a93bcbf56042557d5a41dd3db0243: dunno whether or not -extra is supposed to work, but the mozconfig try uses is in-tree, so I know adding it to browser/config/mozconfigs/win32/nightly works",
        "bbd8a1c8b716f90cfaf9493cbb3868dc (00:01): 04beac4484f6576b0da1037194f76695: can you file a bug in Core:Internationzliation ?",
        "bbd8a1c8b716f90cfaf9493cbb3868dc (00:01): 04beac4484f6576b0da1037194f76695: is this something you noticed in a perf profile?",
        "04beac4484f6576b0da1037194f76695 (00:03): No special steps other than going to bugzilla and selecting Core, then Internationalization, right?",
        "050421e96671fe1a3d8cf2b5dbe99cb7 (00:03): 0b9a93bcbf56042557d5a41dd3db0243: oh, were you expecting tbpl to say &quot;Win PGO&quot;? it won't, because the jobname doesn't come from evaluating the mozconfig, and tbpl only knows from the jobname",
        "bbd8a1c8b716f90cfaf9493cbb3868dc (00:03): 04beac4484f6576b0da1037194f76695: that's right",
        "0b9a93bcbf56042557d5a41dd3db0243 (00:03): oh, hm",
        "0b9a93bcbf56042557d5a41dd3db0243 (00:04): 050421e96671fe1a3d8cf2b5dbe99cb7: so how is it I know how the PGO builds did?  the changeset is https://tbpl.mozilla.org/?tree=Try&amp;rev=9082a83d1a50",
        "0b9a93bcbf56042557d5a41dd3db0243 (00:04): I have it on good authority that msvc's PGO optimizer was cracktastic on this code in the past, so I have reason to be extra-leery",
        "67aaafa2b86d274372d74226b40f98d5 (00:05): Do XBL key event handlers automatically do a event.preventDefault(); after executing their action?",
        "bbd8a1c8b716f90cfaf9493cbb3868dc (00:07): 04beac4484f6576b0da1037194f76695: you might be intested in following or joining the MemShrink or Snappy projects. they discuss measurement (of memory use and responsiveness), troublesome areas of code, and clever solutions :)",
        "050421e96671fe1a3d8cf2b5dbe99cb7 (00:07): edmorley: does that whatsit that prints how much memory doing PGO took only print in PGO builds, so 0b9a93bcbf56042557d5a41dd3db0243 could use that to tell him he got one?",
        "bbd8a1c8b716f90cfaf9493cbb3868dc (00:07): 04beac4484f6576b0da1037194f76695: and also the Rust language, which has some neat tricks to let programmers avoid heap allocations",
        "050421e96671fe1a3d8cf2b5dbe99cb7 (00:08): personally, I avoid ever looking at Windows build logs, they choke my connection and then my browser",
        "0b9a93bcbf56042557d5a41dd3db0243 (00:08): I'd guess that 124mins is not enough time to get a full PGO build, but that is just a guess",
        "050421e96671fe1a3d8cf2b5dbe99cb7 (00:09): seems to be a normal time for a non-PGO, yeah",
        "0b9a93bcbf56042557d5a41dd3db0243 (00:11): 050421e96671fe1a3d8cf2b5dbe99cb7: does http://pastebin.mozilla.org/1457662 look right to you, using the in-tree mozconfigs?",
        "050421e96671fe1a3d8cf2b5dbe99cb7 (00:13): 0b9a93bcbf56042557d5a41dd3db0243: yep, should work",
        "0b9a93bcbf56042557d5a41dd3db0243 (00:13): goes to push again, then",
        "050421e96671fe1a3d8cf2b5dbe99cb7 (00:13): oh, neat, I think we broke WinXP reftests while the slaves were napping",
        "0b9a93bcbf56042557d5a41dd3db0243 (00:14): hopefully I'll get PGO results sometime before Monday, and then I can push a reviewed patch at the start of the week or something",
        "050421e96671fe1a3d8cf2b5dbe99cb7 (00:16): mmm, bunch of focus, maybe that's the result of an invisible hand",
        "0b9a93bcbf56042557d5a41dd3db0243 (00:24): kicks off https://tbpl.mozilla.org/?tree=Try&amp;rev=3b0d90538d2b and hopes it triggers pgo properly",
        "b92af08a18aff623222629da14873ffd (00:34): bbd8a1c8b716f90cfaf9493cbb3868dc: yeah, those methods should be converted to use xpcom strings",
        "b92af08a18aff623222629da14873ffd (00:35): 67aaafa2b86d274372d74226b40f98d5: no, except in two magic cases",
        "67aaafa2b86d274372d74226b40f98d5 (00:36): b92af08a18aff623222629da14873ffd: Thanks. And is it possible to redirect an event which is bubbling up its chain to another element (with the bubbling continuing from there)?",
        "b92af08a18aff623222629da14873ffd (00:38): 67aaafa2b86d274372d74226b40f98d5: not directly, except in one magic case, but there's not much to stop you cancelling the event and dispatching a new event",
        "67aaafa2b86d274372d74226b40f98d5 (00:39): b92af08a18aff623222629da14873ffd: To cancel, is &quot;stopPropagation&quot; enough?",
        "b92af08a18aff623222629da14873ffd (00:40): 67aaafa2b86d274372d74226b40f98d5: that's all I know, smaug might know of something newer though"
    ],
    "person_ids": [
        "827fac6a4d016d53b6874573cf37fc05",
        "04beac4484f6576b0da1037194f76695",
        "bbd8a1c8b716f90cfaf9493cbb3868dc",
        "0b9a93bcbf56042557d5a41dd3db0243",
        "050421e96671fe1a3d8cf2b5dbe99cb7",
        "67aaafa2b86d274372d74226b40f98d5",
        "b92af08a18aff623222629da14873ffd"
    ]
}