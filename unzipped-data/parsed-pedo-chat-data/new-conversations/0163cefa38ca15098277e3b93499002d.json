{
    "id": "0163cefa38ca15098277e3b93499002d",
    "messages": [
        "4fce1874736fbc585909df87c2c02c5a (09:12): stu`: yep :)",
        "23a386f009aaaf7fb0d93f2baeb68f7f (09:15): its a small web",
        "2c87322b5de2cf57056cdfdab2914e68 (09:17): lol",
        "13d7d168f19c177db483c695588e476c (09:29): when I press o at the bottom of the screen on a file that fills the screen height, I go into insert mode, but the --INSERT-- notifier doesn't show up... anyone else see this? maybe a bug?",
        "2587e10a3d1beb13ed1ec8c1938b30a7 (09:37): does vim know how big your screen is? &quot;:set lines&quot; is correct etc?",
        "13d7d168f19c177db483c695588e476c (09:41): for clarity, a,i,A,I,O all bring up --INSERT--",
        "13d7d168f19c177db483c695588e476c (09:41): oh and s and S",
        "13d7d168f19c177db483c695588e476c (09:41): just not o",
        "13d7d168f19c177db483c695588e476c (09:42): and 'lines' appears correct, assuming it's supposed to count the last status line which doesn't show the file",
        "13d7d168f19c177db483c695588e476c (09:42): updating when I change my terminal window size",
        "23a386f009aaaf7fb0d93f2baeb68f7f (09:54): s and S too?",
        "23a386f009aaaf7fb0d93f2baeb68f7f (09:54): hmm",
        "13d7d168f19c177db483c695588e476c (09:55): this is only when at the bottom of the screen",
        "13d7d168f19c177db483c695588e476c (09:55): seems like a bug to me, as though the o is pushing the --INSERT-- off the screen",
        "13d7d168f19c177db483c695588e476c (09:56): the only related thing I can think of is that I'm using scrolloff.  but I tried dropping that,  :set so=0   -- and it still happens",
        "24340ef160b44f4e9d826263c6dd3188 (10:03): Why does &quot;gqap&quot; format the current paragraph?  Shouldn't &quot;ap&quot; be a motion command?",
        "24340ef160b44f4e9d826263c6dd3188 (10:03): I see why gq} would do it.",
        "24340ef160b44f4e9d826263c6dd3188 (10:03): But not &quot;gqap&quot;.",
        "13d7d168f19c177db483c695588e476c (10:04): means &quot;a paragraph&quot;",
        "13d7d168f19c177db483c695588e476c (10:04): &quot;daw&quot; means &quot;delete a word&quot;",
        "13d7d168f19c177db483c695588e476c (10:04): it was programmed intentionally",
        "24340ef160b44f4e9d826263c6dd3188 (10:05): OK.",
        "24340ef160b44f4e9d826263c6dd3188 (10:05): Well, I ask because it's an &quot;example&quot;.",
        "24340ef160b44f4e9d826263c6dd3188 (10:05): Thanks.",
        "13d7d168f19c177db483c695588e476c (10:05): yep",
        "13d7d168f19c177db483c695588e476c (10:08): I could use an explanation of why it's useful though",
        "24340ef160b44f4e9d826263c6dd3188 (10:09): It does seem like unnecessary duplication.",
        "13d7d168f19c177db483c695588e476c (10:10): lots of examples at :help diw",
        "13d7d168f19c177db483c695588e476c (10:11): oh right",
        "13d7d168f19c177db483c695588e476c (10:11): daw will work even if your cursor is in the middle of the word",
        "24340ef160b44f4e9d826263c6dd3188 (10:11): I was just thinking that might be the case.",
        "13d7d168f19c177db483c695588e476c (10:11): it's pretty awesome",
        "24340ef160b44f4e9d826263c6dd3188 (10:11): Kinda like vaB",
        "24340ef160b44f4e9d826263c6dd3188 (10:12): Which probably works similarly.",
        "13d7d168f19c177db483c695588e476c (10:12): uh vaB doesn't do anything for me",
        "24340ef160b44f4e9d826263c6dd3188 (10:12): You need to be in the middle of a block:  { .... }.",
        "13d7d168f19c177db483c695588e476c (10:12): oh right",
        "13d7d168f19c177db483c695588e476c (10:13): yeah that is really cool",
        "24340ef160b44f4e9d826263c6dd3188 (10:13): It's starting to make sense now.",
        "24340ef160b44f4e9d826263c6dd3188 (10:13): Funny that I've used vim for 8 years and not really explored it.",
        "13d7d168f19c177db483c695588e476c (10:13): v3aw",
        "13d7d168f19c177db483c695588e476c (10:14): it's not funny; you're just practical",
        "24340ef160b44f4e9d826263c6dd3188 (10:14): Perhaps.",
        "13d7d168f19c177db483c695588e476c (10:14): it never came up so you never learned it, as you were probably busy doing real things",
        "24340ef160b44f4e9d826263c6dd3188 (10:14): Heh, how kind!",
        "13d7d168f19c177db483c695588e476c (10:14): (where reading the vim manual is therefore not a &quot;real thing&quot;)",
        "24340ef160b44f4e9d826263c6dd3188 (10:15): But I&quot;m businer now than I've ever been in my life, at least professionally.",
        "24340ef160b44f4e9d826263c6dd3188 (10:15): Busier.",
        "13d7d168f19c177db483c695588e476c (10:15): yep, same, but there's always time for vim, esp. if you can use it on the job",
        "24340ef160b44f4e9d826263c6dd3188 (10:16): Yeah, that's really what's motivated me.",
        "13d7d168f19c177db483c695588e476c (10:16): I think there are a lot of people who have no idea you can take a block of text and operate on every line of it automatically like with :g and :s",
        "13d7d168f19c177db483c695588e476c (10:16): (not vim people I mean)",
        "24340ef160b44f4e9d826263c6dd3188 (10:16): Heh.",
        "13d7d168f19c177db483c695588e476c (10:16): just, out in the business worl",
        "13d7d168f19c177db483c695588e476c (10:16): d",
        "24340ef160b44f4e9d826263c6dd3188 (10:16): Do you know about ^F in ex-mode?",
        "13d7d168f19c177db483c695588e476c (10:16): man, I don't use Ex",
        "13d7d168f19c177db483c695588e476c (10:16): I still don't see the point",
        "24340ef160b44f4e9d826263c6dd3188 (10:17): No, I mean in colon-mode.",
        "24340ef160b44f4e9d826263c6dd3188 (10:17): Do :^F",
        "13d7d168f19c177db483c695588e476c (10:17): yeah I actually use that every day",
        "24340ef160b44f4e9d826263c6dd3188 (10:17): I just found that last week or so.",
        "24340ef160b44f4e9d826263c6dd3188 (10:17): Great!",
        "13d7d168f19c177db483c695588e476c (10:17): it annoys me that it's ^F",
        "24340ef160b44f4e9d826263c6dd3188 (10:17): Oh?",
        "13d7d168f19c177db483c695588e476c (10:17): I want ^F and ^B to move back and forth like in terminal and in emacs",
        "13d7d168f19c177db483c695588e476c (10:17): ^p and ^n go up and down commands",
        "13d7d168f19c177db483c695588e476c (10:17): but noooooo",
        "13d7d168f19c177db483c695588e476c (10:17): I still don't know what to hit for that actually.....",
        "13d7d168f19c177db483c695588e476c (10:18): aside from arrow keys",
        "24340ef160b44f4e9d826263c6dd3188 (10:18): Just hjkl",
        "13d7d168f19c177db483c695588e476c (10:18): nope",
        "13d7d168f19c177db483c695588e476c (10:18): not in :",
        "13d7d168f19c177db483c695588e476c (10:18): they just get typed",
        "24340ef160b44f4e9d826263c6dd3188 (10:18): Yes, it does work!",
        "13d7d168f19c177db483c695588e476c (10:19): ..what?",
        "24340ef160b44f4e9d826263c6dd3188 (10:19): Once you do ^F, that is.",
        "13d7d168f19c177db483c695588e476c (10:19): that's not what I'm talking about",
        "24340ef160b44f4e9d826263c6dd3188 (10:19): Oh.",
        "13d7d168f19c177db483c695588e476c (10:19): regular command line",
        "24340ef160b44f4e9d826263c6dd3188 (10:19): Right-o.",
        "13d7d168f19c177db483c695588e476c (10:20): ^p and ^n do something that fit well, and ^e also goes to end of line like it should, but ^a and ^f and ^b don't",
        "13d7d168f19c177db483c695588e476c (10:20): oddly ^b is home",
        "24340ef160b44f4e9d826263c6dd3188 (10:21): Ever tried viper-mode in emacs?",
        "13d7d168f19c177db483c695588e476c (10:21): all this blows my mind, that these different software packages have been around with conflicting interfaces for such a long time",
        "13d7d168f19c177db483c695588e476c (10:21): ^p ^n ^e ^a is all I know about emacs",
        "13d7d168f19c177db483c695588e476c (10:21): er ^f ^b",
        "13d7d168f19c177db483c695588e476c (10:22): I read a couple pages of the manual and gave up",
        "24340ef160b44f4e9d826263c6dd3188 (10:22): Viper-mode is vi-navigation with emacs when in insert mode.",
        "64cf5c7b44d962e6675459db3eb65427 (10:22): praetis, Meriwether: With &quot;set cedit=&lt;Esc&gt;&quot; you can use Escape instead of Ctrl-F so you can use normal mode keys",
        "24340ef160b44f4e9d826263c6dd3188 (10:22): I don't mind ^F that much, but thanks.",
        "13d7d168f19c177db483c695588e476c (10:22): how do we know which keys are already taken?",
        "24340ef160b44f4e9d826263c6dd3188 (10:23): Taken?",
        "13d7d168f19c177db483c695588e476c (10:23): talking to ThomasAH",
        "24340ef160b44f4e9d826263c6dd3188 (10:23): Oh.",
        "64cf5c7b44d962e6675459db3eb65427 (10:24): praetis: You want to bind things to keys that are not yet used in vi?",
        "64cf5c7b44d962e6675459db3eb65427 (10:24): (or rather vim)",
        "13d7d168f19c177db483c695588e476c (10:24): yes",
        "24340ef160b44f4e9d826263c6dd3188 (10:25): ^K and ^@",
        "24340ef160b44f4e9d826263c6dd3188 (10:25): Those are 2.",
        "64cf5c7b44d962e6675459db3eb65427 (10:25): praetis: I suggest using either function keys (F1 is already :help, but who cares) or overwrite keys you never use. I mapped :bn :bp :cn :cp to the cursor keys",
        "64cf5c7b44d962e6675459db3eb65427 (10:25): Meriwether: ^K is enter-digraph or not?",
        "64cf5c7b44d962e6675459db3eb65427 (10:25): ah, only in insert mode",
        "24340ef160b44f4e9d826263c6dd3188 (10:25): ThomasAH: Yes, sorry.",
        "24340ef160b44f4e9d826263c6dd3188 (10:25): In insert-mode.",
        "24340ef160b44f4e9d826263c6dd3188 (10:26): I use ^K to start my own cmaps.",
        "13d7d168f19c177db483c695588e476c (10:26): ThomasAH: I'd like to make ^f and ^b behave as right and left on the command line as well but I don't know how to map for the command line (Ex?)",
        "13d7d168f19c177db483c695588e476c (10:27): ThomasAH: it wasn't a concern with overwriting so much as a curiosity as to what tools we have down there",
        "64cf5c7b44d962e6675459db3eb65427 (10:28): praetis: &quot;:help mapmode&quot; explains which mapping types can be used for command line",
        "542ebcbcf6ee466a1780913e2c800716 (10:28): <a href=\"http://www.microsoft.com/windowsserver2003/\">http://www.microsoft.com/windowsserver2003/</a> &lt;- 3,400,000,000+ users can't be wrong&quot;)",
        "13d7d168f19c177db483c695588e476c (10:30): ThomasAH: are you sure?  it seems to tell me that :cmap is the command to use, but it tells me nothing about what commands I can map",
        "64cf5c7b44d962e6675459db3eb65427 (10:31): praetis: You can map every command ...",
        "13d7d168f19c177db483c695588e476c (10:31): well that does answer my left/right problem though",
        "13d7d168f19c177db483c695588e476c (10:32): even normal mode commands?",
        "13d7d168f19c177db483c695588e476c (10:32): non : commands?",
        "64cf5c7b44d962e6675459db3eb65427 (10:33): praetis: :help normal  ;-)",
        "13d7d168f19c177db483c695588e476c (10:34): oh I see, I need to make use of that cedit command to get to normal mode.",
        "13d7d168f19c177db483c695588e476c (10:34): that explains everything, thanks",
        "24340ef160b44f4e9d826263c6dd3188 (10:41): This &quot;ap&quot;, &quot;aB&quot; stuff makes a LOT more sense now.",
        "13d7d168f19c177db483c695588e476c (10:41): actually I just came up with something else.  How do you :map in command line edit mode?",
        "13d7d168f19c177db483c695588e476c (10:41): should direct that to ... ThomasAH",
        "24340ef160b44f4e9d826263c6dd3188 (10:41): E.g., &gt;ap or gUaB",
        "13d7d168f19c177db483c695588e476c (10:42): ooooh",
        "24340ef160b44f4e9d826263c6dd3188 (10:43): Thanks for the hint, praetis.",
        "13d7d168f19c177db483c695588e476c (10:43): hm?",
        "64cf5c7b44d962e6675459db3eb65427 (10:44): praetis: the command line edit mode is just like a normal vim buffer, so all normal/insert mode mappings apply",
        "13d7d168f19c177db483c695588e476c (10:44): mm, so no way to make cmdline edit mode specific mappings",
        "64cf5c7b44d962e6675459db3eb65427 (10:46): praetis: You could make small functions in which you check for buffer name",
        "13d7d168f19c177db483c695588e476c (10:46): the cmdline edit is its own buffer eh",
        "13d7d168f19c177db483c695588e476c (10:46): functions are something I could stand to get into more than ... none",
        "64cf5c7b44d962e6675459db3eb65427 (10:49): breakfast ...",
        "13d7d168f19c177db483c695588e476c (10:59): is there any way to encapsulate a mapped command so that [count] in front of it will actually work?  As is, the count seems to only apply to the first command in the mapping, or, if the mapping starts with a number, adds itself as a digit to that number"
    ],
    "person_ids": [
        "4fce1874736fbc585909df87c2c02c5a",
        "23a386f009aaaf7fb0d93f2baeb68f7f",
        "2c87322b5de2cf57056cdfdab2914e68",
        "13d7d168f19c177db483c695588e476c",
        "2587e10a3d1beb13ed1ec8c1938b30a7",
        "24340ef160b44f4e9d826263c6dd3188",
        "64cf5c7b44d962e6675459db3eb65427",
        "542ebcbcf6ee466a1780913e2c800716"
    ]
}