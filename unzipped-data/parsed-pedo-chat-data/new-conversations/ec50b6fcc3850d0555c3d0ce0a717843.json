{
    "id": "ec50b6fcc3850d0555c3d0ce0a717843",
    "messages": [
        "88d4d34a8064a4ff39fd5e144eea7762 (00:48): Is anyone working on exposing browser implementations of things like SHA1 to JS?",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:48): It's kind of annoying not to have them sometimes, and a browser implementation would be both trivial to do and ridiculously faster.",
        "ab7faae5d7b250ea8606486575f8f79c (00:49): Are JS implementations too slow to use in practice?",
        "ab7faae5d7b250ea8606486575f8f79c (00:50): (Certainly they're slower than C++, but that's not the same thing)",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:51): They're plenty fast for a lot of things.  I use an md5 lib for non-secure hashing.",
        "06cb330920ae58e1614c9145d983b3d6 (00:52): ab7faae5d7b250ea8606486575f8f79c: there was a thread about that at one point--it's definitely too slow for some use cases, like verifying/syncing bulk data for games",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:56): ab7faae5d7b250ea8606486575f8f79c, I'm at least as concerned with convenience as speed.",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:56): This is something where everyone has access to interoperable implementations anyway, it's just a matter of hooking them up.",
        "14697826c0d43ad5e94df7b27a1038d0 (01:00): any gtk experts out there mind helping me with a (probably simple) issue with GNUmakefile.list.am ?",
        "ab7faae5d7b250ea8606486575f8f79c (01:01): 88d4d34a8064a4ff39fd5e144eea7762: Surely the most convenient thing would be a .js file you can drop it and that will work with perfect compatibility on all browsers with no effort",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:01): ab7faae5d7b250ea8606486575f8f79c, a) the long run counts too, b) I don't personally care about old browsers.",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:01): The specific use-case I was thinking of only needs to run in Aurora and Chrome dev.",
        "06cb330920ae58e1614c9145d983b3d6 (01:02): being able to have an async API for it would be nice, though that's an easy worker use case anyway",
        "353fa4cc248867e98de9cab7d122c320 (01:05): crypto APIs should provide stuff like SHA1",
        "353fa4cc248867e98de9cab7d122c320 (01:05): because authors shouldn't have to roll their own crypto. there are a ton of ways to do it wrong",
        "353fa4cc248867e98de9cab7d122c320 (01:05): but what's the source data that you are trying to SHA1? something like a blob, or a data structure in JS?",
        "06cb330920ae58e1614c9145d983b3d6 (01:08): i've wanted to get a hash of a file selected in a file input, to ask the server if it's already there; that case would want a blob, at least",
        "353fa4cc248867e98de9cab7d122c320 (01:08): yeah i think there should be a way to say &quot;gimme a sha1 of this (file or blob)&quot; that doesn't require reading the entire thing into JS memory",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:09): 353fa4cc248867e98de9cab7d122c320, a password, in my case.",
        "06cb330920ae58e1614c9145d983b3d6 (01:09): well you definitely want an incremental API, so you can hash data of arbitrary size",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:09): But it would be cool to be able to do files or blobs.",
        "06cb330920ae58e1614c9145d983b3d6 (01:09): eg. the usual init/update/digest API",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:09): First you want a basic API that just provides someObject.sha1().  That will cover a lot of use-cases already.",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:10): But yeah, an incremental one would be handy too, why not.",
        "353fa4cc248867e98de9cab7d122c320 (01:10): adam barth and some folks at mozilla have been looking at crypto 62c428533830d84fd8bc77bf402512fcis",
        "06cb330920ae58e1614c9145d983b3d6 (01:10): i'd start with the core API: digest.update/digest from blobs, and then see what can't be done with that",
        "06cb330920ae58e1614c9145d983b3d6 (01:11): i wouldn't start with the more limited 62c428533830d84fd8bc77bf402512fci, since you might not need that at all once you have the lower-level one",
        "06cb330920ae58e1614c9145d983b3d6 (01:11): eg. if you want to hash a password, use BlobBuilder + that API",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:12): So you have to use how many lines instead of one?",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:13): There's no reason not to expose a convenience API for the very common case where you want to hash something that you already have fully in memory.",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:13): PHP *only* exposes such a function, and I bet some of the JS libraries that implement hash functions also do.",
        "06cb330920ae58e1614c9145d983b3d6 (01:13): shrug, 5-6? i don't think code golfing the narrow &quot;get a hash of a JS string&quot; use case is a good reason to have more APIs",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:13): I think this is a case where adding a shortcut API for the common case is a no-brainer.",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:14): In my experience scripting, it's vastly more common to want to hash something small than something big.",
        "06cb330920ae58e1614c9145d983b3d6 (01:14): add the core 62c428533830d84fd8bc77bf402512fci, play around with it for a while, then decide if you really need shortcut bloat",
        "06cb330920ae58e1614c9145d983b3d6 (01:14): (also, see how the core 62c428533830d84fd8bc77bf402512fci wrangles out, to see what the shortcut 62c428533830d84fd8bc77bf402512fci would look like)",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:16): It should look like someObject.sha1(s).",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:16): That's what other languages expose.  I know PHP does off the top of my head.  C libraries like OpenSSL also expose such a shortcut, SHA1() in the one I used.",
        "ab7faae5d7b250ea8606486575f8f79c (01:16): How do you hash a string of 16-bit units?",
        "06cb330920ae58e1614c9145d983b3d6 (01:16): i'd have a core API as eg: hash = new SHA1(); hash.update(blob); /* maybe allow hash.update(string); */ hash.digest();",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:17): Python seems not to have shortcuts.",
        "06cb330920ae58e1614c9145d983b3d6 (01:17): (where hash.update(string) is the shortcut API--definitely don't need a whole separate entry point)",
        "06cb330920ae58e1614c9145d983b3d6 (01:17): python's hashlib works very well",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:17): ab7faae5d7b250ea8606486575f8f79c, . . . hmm.  Well, btoa() treats it as an array of bytes, and throws if any code unit is &gt; 0x00ff.",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:18): That's an awkward point, though.",
        "06cb330920ae58e1614c9145d983b3d6 (01:18): if there's a string shortcut, i'd think the only useful thing to do would be to convert to UTF-8",
        "06cb330920ae58e1614c9145d983b3d6 (01:18): since that's usually what you want",
        "ab7faae5d7b250ea8606486575f8f79c (01:18): someObject.sha1(&quot;\\ud800&quot;); // ???",
        "ab7faae5d7b250ea8606486575f8f79c (01:18): or anything else you can't represent in UTF-8",
        "06cb330920ae58e1614c9145d983b3d6 (01:19): why can't you represent that in utf-8?",
        "06cb330920ae58e1614c9145d983b3d6 (01:19): roundtrips fine in python",
        "06cb330920ae58e1614c9145d983b3d6 (01:21): oh, python is probably storing strings as UCS-4, where that's not an incomplete codepoint",
        "ab7faae5d7b250ea8606486575f8f79c (01:22): http://unicode.org/faq/utf_bom.html#utf8-5",
        "ab7faae5d7b250ea8606486575f8f79c (01:24): The UTF-16 incompleteness matters less than that you can't represent U+D800 as a legal UTF-8 sequence",
        "06cb330920ae58e1614c9145d983b3d6 (01:24): if it's actually a complete surrogate pair then it should be converted, of course; if it's a mismatched surrogate arguably it should either just convert it (so it roundtrips) or throw",
        "06cb330920ae58e1614c9145d983b3d6 (01:24): (IMO, throwing to try to be as anal as unicode would like the world to be would probably be more trouble than it's worth)",
        "ab7faae5d7b250ea8606486575f8f79c (01:24): If this is meant to be used for comparing against hashes computed by servers, it seems like it ought to do as little magic as possible, else people will get confused by why hashes don't match and it will be impossible to debug",
        "06cb330920ae58e1614c9145d983b3d6 (01:25): that raises a question, though: what about BlobBuilder 62c428533830d84fd8bc77bf402512fcpend? that says &quot;writing it as UTF-8&quot; without further elaboration",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:25): The way btoa() works is at least not terribly hard to understand.",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:25): Although it's a bit tricky to figure out how to convert a UTF-16 string to a form it will accept.",
        "06cb330920ae58e1614c9145d983b3d6 (01:25): or rather, it raises the same question",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:26): Has anyone ever pointed out that JavaScript strings are atrocities?",
        "06cb330920ae58e1614c9145d983b3d6 (01:26): i'm not sure anyone has failed to point that out :P",
        "06cb330920ae58e1614c9145d983b3d6 (01:26): ab7faae5d7b250ea8606486575f8f79c: it's not obvious which behavior is less &quot;magic&quot;, though",
        "ab7faae5d7b250ea8606486575f8f79c (01:26): All strings are atrocities",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:27): Sigh.  Why does introducing trivial APIs always have to involve getting bogged down in details?",
        "06cb330920ae58e1614c9145d983b3d6 (01:27): yeah, my python is built with UCS-4 strings, so it's not a very good comparison",
        "06cb330920ae58e1614c9145d983b3d6 (01:28): 88d4d34a8064a4ff39fd5e144eea7762: well, this seems like a detail that already has to be worked out; BlobBuilder opened the door here",
        "06cb330920ae58e1614c9145d983b3d6 (01:28): presumably whatever that does, this API would follow suit",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:28): 88d4d34a8064a4ff39fd5e144eea7762: your definition of &quot;trivial&quot; is just wrong for the web ;-)",
        "06cb330920ae58e1614c9145d983b3d6 (01:29): anyone want to raise the question for BlobBuilder on webapps? otherwise i'll try to get to writing a mail at some point",
        "06cb330920ae58e1614c9145d983b3d6 (01:30): (mental note: don't volunteer to do something when asking if anyone else wants to do it, it's counter to the goal of not having to do it)",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:35): 69b0d3dfe919a6b860a9fac82de52a7e, seems so.",
        "06cb330920ae58e1614c9145d983b3d6 (01:42): why do lots of people @google always say &quot;comments inline&quot; on mailing lists, i'd expect people employed by google to know that's redundant, heh",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:43): it's not just google, it seems to be anyone who uses a mail client that doesn't do threading right. Outlook, GMail, IBM's thing, etc",
        "06cb330920ae58e1614c9145d983b3d6 (01:43): gmail's threading is reasonable",
        "06cb330920ae58e1614c9145d983b3d6 (01:44): not as good as mutt's, but well, nothing is",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:44): gmail encourages top-posting",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:44): and doesn't do threading at all",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:44): it does conversation concatenation",
        "06cb330920ae58e1614c9145d983b3d6 (01:44): well yes, due to putting space at the top of the mail, but i'd expect people at google to know the bogusness of that :P",
        "06cb330920ae58e1614c9145d983b3d6 (01:45): (minus whatever crackbox on the gmail team implemented that)",
        "06cb330920ae58e1614c9145d983b3d6 (01:45): (yeah I know regular users don't &quot;get&quot; inline responses, i can still grumble)",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:47): what drives me even more crazy is people who don't trim their quotes",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:47): which top-posters never do",
        "06cb330920ae58e1614c9145d983b3d6 (01:47): gmail encourages that, since it hides quotes",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:47): so i end up having to waste hours of my life deleting quotes when replying to e-mails in my batch e-mails",
        "62c428533830d84fd8bc77bf402512fc (01:55): how about overquoting in Bugzilla? :)",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:57): yeah that drives me batty too",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:57): why do people do it?",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:57): i mean, seriosuly",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:57): it takes like 2 seconds to delete context one isn't replying to",
        "ab7faae5d7b250ea8606486575f8f79c (01:58): IRC seems to have a good solution to the problem of overquoting - if you quote many lines then you'll get kicked for flooding",
        "1f8387eb43f131d7c309a90a4e36b5cb (02:15): If I got kicked for writing long emails, I'd have a problem.",
        "ab7faae5d7b250ea8606486575f8f79c (02:16): Think of the problems that readers would be saved from, though"
    ],
    "person_ids": [
        "88d4d34a8064a4ff39fd5e144eea7762",
        "ab7faae5d7b250ea8606486575f8f79c",
        "1f8387eb43f131d7c309a90a4e36b5cb",
        "06cb330920ae58e1614c9145d983b3d6",
        "14697826c0d43ad5e94df7b27a1038d0",
        "353fa4cc248867e98de9cab7d122c320",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "62c428533830d84fd8bc77bf402512fc"
    ]
}