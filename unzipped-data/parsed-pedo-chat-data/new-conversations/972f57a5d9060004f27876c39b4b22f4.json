{
    "id": "972f57a5d9060004f27876c39b4b22f4",
    "messages": [
        "a9b326df4e6da61c5b6f5e1058be83a2 (12:52): I assume from b8810fee2f4a71f849f3f7409546d1d9 's latest tweet that he must be working on a sanitzer",
        "a9b326df4e6da61c5b6f5e1058be83a2 (12:56): ah sweet, I got another patch landed in V8 source",
        "a9b326df4e6da61c5b6f5e1058be83a2 (12:56): http://code.google.com/p/v8/source/detail?r=5893",
        "b8810fee2f4a71f849f3f7409546d1d9 (12:59): a9b326df4e6da61c5b6f5e1058be83a2: just planning at this point",
        "a9b326df4e6da61c5b6f5e1058be83a2 (13:00): ok",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:00): a9b326df4e6da61c5b6f5e1058be83a2: since the sanitizer isn't targeted to Firefox 4, all Firefox 4 blockers get service first",
        "a9b326df4e6da61c5b6f5e1058be83a2 (13:00): yeah, I can imagine",
        "b25b6b77a0087ff8385941e5545d32ea (13:01): b8810fee2f4a71f849f3f7409546d1d9: Have you looked at what the html5lib sanitizer does? It has some (crazy, regexp based) CSS filtering",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:01): b25b6b77a0087ff8385941e5545d32ea: I haven't",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:01): I was planning on providing an interface for pluggable CSS sanitizers",
        "b25b6b77a0087ff8385941e5545d32ea (13:01): Which you need in order to remove scripts",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:01): so that the Gecko version could use the existing Gecko CSS sanitizer and the Java version could use something else",
        "b25b6b77a0087ff8385941e5545d32ea (13:02): At least if you target browsers that can run scripts from CSS",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:02): yeah, using a CSS sanitizer is part of the requirements",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:03): at some point, I think I will need to learn which SVG attributes are defined in terms of CSS in such a way that they can carry dangerous payloads",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:08): b25b6b77a0087ff8385941e5545d32ea: whoa. html5lib is much more liberal with allowed protocols than I had expected",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:09): otoh, there are fewer acceptable CSS properties than I expected",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:09): also, Semantics MathML isn't allowed",
        "b25b6b77a0087ff8385941e5545d32ea (13:09): b8810fee2f4a71f849f3f7409546d1d9: (I have not been much involved with this part of the library)",
        "b25b6b77a0087ff8385941e5545d32ea (13:10): In particular the list of allowed stuff mainly came from Sam and Jacques",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:10): hmm. so it sanitizer between the tokenizer and the tree builder",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:10): instead of sanitizing after the tree builder when it's known if something is an HTML, SVG or MathML element",
        "b25b6b77a0087ff8385941e5545d32ea (13:10): I think it predates foreignContent",
        "b25b6b77a0087ff8385941e5545d32ea (13:11): |Foreign Content&quot;",
        "b25b6b77a0087ff8385941e5545d32ea (13:11): s/|/&quot;/",
        "b25b6b77a0087ff8385941e5545d32ea (13:14): (that is, althought there is support for SVG elements, that was based on Sam's experimental liberal XHTML parser. Although presumably that assigned namespaceness in treebuilder too)",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:17): for blog comments and such, it might be useful to have a feature for normalizing all the &quot;semantic&quot; aliases of &lt;i&gt; to &lt;i&gt; for simpler styling",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:25): hmm. does http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#determining-the-character-encoding ever care about /mode/ being &quot;charset&quot;?",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:26): it seems to me it only cares about it being &quot;pragma&quot; vs not",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:28): oh. it does care",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:29): so &lt;meta charset=&quot;UTF-8&quot; content=&quot;text/html; charset=UTF-8&quot;&gt; doesn't sniff to UTF-8",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:29): but &lt;meta content=&quot;text/html; charset=UTF-8&quot; charset=&quot;UTF-8&quot;&gt; does",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:29): looks like spec bug to me...",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:30): I hate it when I find spec bugs when I just want to implement and be done",
        "cc097e0d7183ae8436e7df709553c8c0 (13:37): b8810fee2f4a71f849f3f7409546d1d9: how does it not sniff to utf-8? &quot;If the attribute's name is &quot;charset&quot;: If charset is still set to null, let charset be the encoding corresponding to the attribute's value, and set mode to &quot;charset&quot;.&quot;",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:40): cc097e0d7183ae8436e7df709553c8c0: the content attribute sets mode again, this time to pragma",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:40): cc097e0d7183ae8436e7df709553c8c0: when content=&quot;&quot; comes after charset=&quot;&quot;",
        "cc097e0d7183ae8436e7df709553c8c0 (13:41): b8810fee2f4a71f849f3f7409546d1d9: oh, i missed step 9",
        "cc097e0d7183ae8436e7df709553c8c0 (13:42): b8810fee2f4a71f849f3f7409546d1d9: yeah, spec bug",
        "b25b6b77a0087ff8385941e5545d32ea (13:42): wonders is document.written meta charset has an effect",
        "b25b6b77a0087ff8385941e5545d32ea (13:42): *if",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:43): b25b6b77a0087ff8385941e5545d32ea: In Gecko, it doesn't",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:43): b25b6b77a0087ff8385941e5545d32ea: but Hixie WONTFIXed the spec bug: http://www.w3.org/Bugs/Public/show_bug.cgi?id=10803",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:43): I didn't change Gecko according to WONTFIXing",
        "b25b6b77a0087ff8385941e5545d32ea (13:43): Ah. I had a feeling it was something like that",
        "b25b6b77a0087ff8385941e5545d32ea (13:43): Any idea what webkit or IE do?",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:44): b25b6b77a0087ff8385941e5545d32ea: testing other browsers and reopening certain bugs is on my todo list",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:50): whoa. the &quot;in head&quot; handling of the charset attribute seems bogus as far as the UTF-16 part goes",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:50): sigh.",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:51): the difference between the spec and Gecko is larger than I thought",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:52): oh. UTF-16 gets handled later"
    ],
    "person_ids": [
        "a9b326df4e6da61c5b6f5e1058be83a2",
        "b8810fee2f4a71f849f3f7409546d1d9",
        "b25b6b77a0087ff8385941e5545d32ea",
        "cc097e0d7183ae8436e7df709553c8c0"
    ]
}