{
    "id": "446a62313e1445cbf11daaf436d62d66",
    "messages": [
        "ab7faae5d7b250ea8606486575f8f79c (00:36): I wish I could use apostrophes in the comments in my canvas tests, without having to write them in pairs to avoid totally breaking Vim's YAML syntax highlighting",
        "ab7faae5d7b250ea8606486575f8f79c (00:57): spends a while adding descriptions to his test cases, then realises he's still only up to line 498 in the 7211-line source file and gives up",
        "ab7faae5d7b250ea8606486575f8f79c (01:02): hsivonen: Why does http://html5.validator.nu/?doc=http%3A%2F%2Fmxr.mozilla.org%2Fmozilla%2Fsource%2Fcontent%2Fcanvas%2Ftest%2Ftest_2d.composite.image.copy.html%3Fforce%3D1&amp;showsource=yes complain?",
        "ab7faae5d7b250ea8606486575f8f79c (01:02): with &lt;body&gt;&lt;canvas&gt;&lt;p&gt;",
        "ab7faae5d7b250ea8606486575f8f79c (01:02): when &lt;body&gt;&lt;p&gt; is (I think) allowed, and &lt;canvas&gt; is transparent",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:03): ah good, &lt;canvas&gt; allows block-level content now?",
        "ab7faae5d7b250ea8606486575f8f79c (01:27): 69b0d3dfe919a6b860a9fac82de52a7e: &quot;The strokeRect() method must draw stroke the specified rectangle's path&quot; - s/draw stroke/something/",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:40): &quot;The strokeRect() method must something the specified rectangle's path&quot; ? :-)",
        "ab7faae5d7b250ea8606486575f8f79c (01:40): Argh, my automatic spec-annotating script can't handle &quot;B?\u00a9zier&quot;",
        "ab7faae5d7b250ea8606486575f8f79c (01:41): 69b0d3dfe919a6b860a9fac82de52a7e: Sounds good to me!",
        "ab7faae5d7b250ea8606486575f8f79c (01:45): Hmm, can I complain that Opera's ImageData.data isn't a JS array?",
        "ab7faae5d7b250ea8606486575f8f79c (01:45): at least to the extent that ImageData.data.join(',') doesn't work",
        "ab7faae5d7b250ea8606486575f8f79c (01:46): (where &quot;complain&quot; means &quot;add a test case for&quot;, preferably with some kind of justification from specifications, except I can't see anything saying what IDL &quot;int[]&quot; means...)",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:50): ab7faae5d7b250ea8606486575f8f79c: i'm waiting for dom bindings for js spec before really going there",
        "ab7faae5d7b250ea8606486575f8f79c (01:51): &quot;The current path, shadow attributes, global alpha, clipping path, and global composition operator must not affect the getImageData() and putImageData() methods.&quot; - should that mention the CTM too?",
        "ab7faae5d7b250ea8606486575f8f79c (01:52): 69b0d3dfe919a6b860a9fac82de52a7e: Okay",
        "ab7faae5d7b250ea8606486575f8f79c (01:52): will add a test anyway, because it causes interoperability problems in practice",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:52): i thought i'd mentioned CTM with imagedata already",
        "ab7faae5d7b250ea8606486575f8f79c (01:52): I can't see it mentioned anywhere",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:53): seems not indeed",
        "ab7faae5d7b250ea8606486575f8f79c (02:02): 69b0d3dfe919a6b860a9fac82de52a7e: &quot;The ImageData object's width is greater than zero.&quot; (and subsequent lines) is wrong, since it's talking about an object that's explicitly not an ImageData",
        "ab7faae5d7b250ea8606486575f8f79c (02:14): 69b0d3dfe919a6b860a9fac82de52a7e: What happens with NaN in ImageData.data? (It's not below 0, or above 255, and it can't be rounded to the nearest integer)",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:20): ab7faae5d7b250ea8606486575f8f79c: i'm about to go offline for a few days, can you mail the last two lines you wrote to the list/me?",
        "ab7faae5d7b250ea8606486575f8f79c (02:20): 69b0d3dfe919a6b860a9fac82de52a7e: Okay, will do",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:20): (well, not completely offline, but likely not working on the spec)",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:20): thanks dude",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:21): your help is, as ever, highly appreciated",
        "ab7faae5d7b250ea8606486575f8f79c (02:25): Hmm, is NaN a Number?",
        "5b552cf83fdc83a306a8381401827812 (02:26): in ES sense, yes",
        "ab7faae5d7b250ea8606486575f8f79c (02:26): Ah, thanks",
        "65325d50b2e25aca54bc871b89758c9c (02:26): it's not an instance of the Number builtin class, but it is an intance of the Number value type",
        "ab7faae5d7b250ea8606486575f8f79c (02:26): (That is mildly confusing...)",
        "65325d50b2e25aca54bc871b89758c9c (02:26): (to be exactingly clear)",
        "ab7faae5d7b250ea8606486575f8f79c (02:26): Oh",
        "65325d50b2e25aca54bc871b89758c9c (02:26): what, that Not a Number is a Number?",
        "ab7faae5d7b250ea8606486575f8f79c (02:27): Yes",
        "ab7faae5d7b250ea8606486575f8f79c (02:27): I'm mostly just wondering if &quot;a data attribute whose value is an enumerable list of values that are either JS Numbers or the JS value undefined.&quot; is allowed to contain NaN",
        "ab7faae5d7b250ea8606486575f8f79c (02:27): so it sounds like it probably is",
        "5b552cf83fdc83a306a8381401827812 (02:27): I don't remember, is the Number constructor object a Number? :-)",
        "65325d50b2e25aca54bc871b89758c9c (02:27): in ECMA-262 terms, it's a 4.3.20 Number Type",
        "65325d50b2e25aca54bc871b89758c9c (02:28): not a 4.3.21 Number Object",
        "ab7faae5d7b250ea8606486575f8f79c (02:28): (or at least it's close enough to be worth being explicit about how it's handled)",
        "65325d50b2e25aca54bc871b89758c9c (02:28): sorry, I meant it's a 4.3.19 Number Value (NaN that is)",
        "65325d50b2e25aca54bc871b89758c9c (02:28): NaN is a JS Number, yeah, in that sense",
        "5b552cf83fdc83a306a8381401827812 (02:28): you could use 4.3.20 and 4.3.23 too ;-)",
        "ab7faae5d7b250ea8606486575f8f79c (02:28): Is e.g. 7 the same 4.3.19 Number Value too?",
        "65325d50b2e25aca54bc871b89758c9c (02:28): to be anal it could distinguish Number Type and Number Object",
        "65325d50b2e25aca54bc871b89758c9c (02:29): ab7faae5d7b250ea8606486575f8f79c: yes",
        "ab7faae5d7b250ea8606486575f8f79c (02:29): Okay",
        "65325d50b2e25aca54bc871b89758c9c (02:29): the Number Object type only comes into play when you call methods on a number or explicitly invoke the Number constructor to make a wrapper object",
        "65325d50b2e25aca54bc871b89758c9c (02:29): primitive types in ECMAScript (Number, String, Boolean) have corresponding wrapper object types",
        "ab7faae5d7b250ea8606486575f8f79c (02:29): That makes sense",
        "65325d50b2e25aca54bc871b89758c9c (02:30): which are sometimes created automatically",
        "5b552cf83fdc83a306a8381401827812 (02:30): 65325d50b2e25aca54bc871b89758c9c: oh, I need to show you the nasty String.prototype.toString testcase I showed ggaren",
        "ab7faae5d7b250ea8606486575f8f79c (02:30): Similar to Java, I guess?",
        "65325d50b2e25aca54bc871b89758c9c (02:30): ab7faae5d7b250ea8606486575f8f79c: yes, but worse",
        "5b552cf83fdc83a306a8381401827812 (02:34): 65325d50b2e25aca54bc871b89758c9c: http://rafb.net/p/jLOXKL92.html (speaking of worse)",
        "ab7faae5d7b250ea8606486575f8f79c (02:36): Hmm, Opera 9.5 has gone from 93% down to 81% on the ImageData tests"
    ],
    "person_ids": [
        "ab7faae5d7b250ea8606486575f8f79c",
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "5b552cf83fdc83a306a8381401827812",
        "65325d50b2e25aca54bc871b89758c9c"
    ]
}