{
    "id": "f30c12e492e82041fda3a633d00be8fa",
    "messages": [
        "b093faff3e45655cabe9180161303382 (02:37): howcome this doesn't compile? m_result-&gt;at(1).append(text.simplified()); the fault: error: passing `const QString' as `this' argument of `QString&amp; QString::append(const QString&amp;)' discards qualifiers",
        "2ca2955dd74a7c1353609e3dc9afc5bd (02:41): m_result-&gt;at(1) is const",
        "2ca2955dd74a7c1353609e3dc9afc5bd (02:41): So you can't .append to it.",
        "cdf4ad80dc66a41f951abab3fde0d774 (02:41): aikie: Do you want to return the appended string or do you want to assign it to m_result[1]?",
        "cdf4ad80dc66a41f951abab3fde0d774 (02:42): aikie: If you're doing &quot;QString b = m_result...append(...);&quot; then you can just replace the .append with +",
        "cdf4ad80dc66a41f951abab3fde0d774 (02:42): aikie: If you want to assign the value back to m_result, use m_result[1] instead of m_result.at(1)",
        "7e188fb508ed3ace53860904c30fa7d8 (02:51): TheAsh !!!",
        "e4861610d329149fea4f7bfe65b0ab4f (03:02): Can anyone hear me?",
        "caacdffd7a4aa3937fabe8e185e5165e (03:05): QMario: yap",
        "caacdffd7a4aa3937fabe8e185e5165e (03:06): scanf analog in qt?",
        "e4861610d329149fea4f7bfe65b0ab4f (03:06): JtRip, okay, thank you.",
        "cdf4ad80dc66a41f951abab3fde0d774 (03:17): scanf? Um... not to my knowledge but you can accomplish a similar feat using QTextStream, I think.",
        "d4b6b9097955642b63cbb1fa452b849c (03:40): What is the QPalette::ColorRole responsible for the color of the border added to widgets such as QLineEdit's which have focus?",
        "d4b6b9097955642b63cbb1fa452b849c (03:40): I've tried every role in the list at <a href=\"http://doc.trolltech.com/4.0/qpalette.html#ColorRole-enum\">http://doc.trolltech.com/4.0/qpalette.html#ColorRole-enum</a>, and the color of that border is not changing.",
        "cdf4ad80dc66a41f951abab3fde0d774 (03:42): Um... that's actually a separate QFocusRect widget, I think.",
        "cdf4ad80dc66a41f951abab3fde0d774 (03:42): You'd have to modify the application palette and not the widget palette, if I'm not mistaken.",
        "cdf4ad80dc66a41f951abab3fde0d774 (03:43): Er, no, it's not QFocusRect...",
        "cdf4ad80dc66a41f951abab3fde0d774 (03:43): I can't remember the name of it but it's not actually part of the widget itself if I remember right.",
        "7780ad7003f15ffc3b31177513eac4f9 (03:44): good to play in designer for things like this",
        "7780ad7003f15ffc3b31177513eac4f9 (03:44): you see results right away with no need for recompile",
        "cdf4ad80dc66a41f951abab3fde0d774 (03:44): I could be entirely wrong.",
        "d4b6b9097955642b63cbb1fa452b849c (03:45): The problem here being I'm getting it set to an incorrect color when I set the palette of a parent widget (QGroupBox), and want to set that color back to black.",
        "cdf4ad80dc66a41f951abab3fde0d774 (03:45): Okay, it's not a separate widget, but it's a separate QStyle option...",
        "d4b6b9097955642b63cbb1fa452b849c (03:45): without messing with styles.",
        "d4b6b9097955642b63cbb1fa452b849c (03:45): I would have assumed it was the Foreground setting, as that was what I changed on the parent QGroupBox...",
        "7780ad7003f15ffc3b31177513eac4f9 (03:47): s3m4 how's the c++ going",
        "cf12ef782eddcd3a70ba21b0745e9ead (04:00): nuge: havent had time the last 3 days (sat/sun/mon) ... was cramming for mid semester",
        "cf12ef782eddcd3a70ba21b0745e9ead (04:01): mind you ... 3 days isn't realy crammng ... more line neatly placing",
        "cf12ef782eddcd3a70ba21b0745e9ead (04:01): hehe",
        "cf12ef782eddcd3a70ba21b0745e9ead (04:02): nuge: dont you have &lt;tab&gt; autocomplete?",
        "7780ad7003f15ffc3b31177513eac4f9 (04:05): ya i do, but i don't use it",
        "7780ad7003f15ffc3b31177513eac4f9 (04:05): i don't think nicks should be longer than 4 characters",
        "7780ad7003f15ffc3b31177513eac4f9 (04:05): :P",
        "cf12ef782eddcd3a70ba21b0745e9ead (04:05): 'ts or-wite ... ive added 's3m4' to my list of special words to look for",
        "cf12ef782eddcd3a70ba21b0745e9ead (04:06): and sema too",
        "b093faff3e45655cabe9180161303382 (04:10): howcome this doesn't work, I'm trying to add some text to the second element of a stringlist: m_result[1].append(text);",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:11): Hmm, that SHOULD work...",
        "b093faff3e45655cabe9180161303382 (04:12): it segfaults",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:12): Segfaults? Are you sure there are at least two items in the list?",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:12): (Remember that index 1 is the second item, the first is index 0)",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:12): (Wait, you knew that.)",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:13): My second thought is something like &quot;m_result[1] = m_result.at(1) + text;&quot;",
        "b093faff3e45655cabe9180161303382 (04:13): sorry it doesn't segfault, it just doesn't work",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:13): Oh, okay.",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:13): Second thought still stands.",
        "b093faff3e45655cabe9180161303382 (04:14): error: no match for 'operator=' in '*(((LedCommand*)this)-&gt;LedCommand::m_result + 8u) = operator+(const QString&amp;, const QString&amp;)(((const QString&amp;)((const QStri",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:16): Oho",
        "7780ad7003f15ffc3b31177513eac4f9 (04:17): erm wow",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:17): Fascinating; it's treating m_result[1] as actual indexing into an array and not handling operator[]",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:17): Are you sure m_result is a QStringList?",
        "7780ad7003f15ffc3b31177513eac4f9 (04:17): i'm sorry.. .but why would you ever have to cast 'this' ?",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:17): nuge: That's compiler output; it's surely implicit",
        "7780ad7003f15ffc3b31177513eac4f9 (04:17): oh sorry.. thought it was code :P",
        "b093faff3e45655cabe9180161303382 (04:18): m_result=new QStringList(); is in the constructor",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:18): AHA",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:18): It's QStringList*",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:18): Bad hacker ;)",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:18): QStringList is a value class; there's no need for pointers",
        "1753f2fb147247a0ee3be694a7677da3 (04:18): brawr!",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:19): &quot;QStringList m_result;&quot; in the .h file is all that's necessary -- no initialization in the ctor is required.",
        "7780ad7003f15ffc3b31177513eac4f9 (04:22): another bug bites the dust",
        "7780ad7003f15ffc3b31177513eac4f9 (04:22): courtesy of ahigerd",
        "7780ad7003f15ffc3b31177513eac4f9 (04:22): or as i like to call him: ahig.",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:22): &gt;.&gt;",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:22): No.",
        "7780ad7003f15ffc3b31177513eac4f9 (04:22): gerd?",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:22): Considering that almost assuredly means you're mispronouncing my name.",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:23): Long I.",
        "7780ad7003f15ffc3b31177513eac4f9 (04:23): i never say your name out loud (even in my dreams)",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:23): Heh. You dream about me? ;)",
        "7780ad7003f15ffc3b31177513eac4f9 (04:23): i only write your name.. so it's not a problem.",
        "7780ad7003f15ffc3b31177513eac4f9 (04:46): feel free to shorten my nick btw",
        "cdf4ad80dc66a41f951abab3fde0d774 (04:50): Sup, n?",
        "7780ad7003f15ffc3b31177513eac4f9 (05:00): i was hoping for 'nug'",
        "cdf4ad80dc66a41f951abab3fde0d774 (05:01): No way, that'd make you, like, half a nugget. Nobody wants half a chicken nugget.",
        "7780ad7003f15ffc3b31177513eac4f9 (05:15): your way of thinking amazes me :&gt;",
        "cdf4ad80dc66a41f951abab3fde0d774 (05:16): Is that a good thing?",
        "caacdffd7a4aa3937fabe8e185e5165e (05:16): how to customize QTreeWidget sort?",
        "7780ad7003f15ffc3b31177513eac4f9 (05:16): neither good nor bad",
        "7780ad7003f15ffc3b31177513eac4f9 (05:17): override QTreeWidget::sort() ?",
        "cf12ef782eddcd3a70ba21b0745e9ead (05:17): nuge: just for my curriosity .... aikie was suppose to do ... m_result[1]-&gt;append(text); ???",
        "7780ad7003f15ffc3b31177513eac4f9 (05:17): er.. sortItems?",
        "7780ad7003f15ffc3b31177513eac4f9 (05:17): s3m4ph0r3: i wasn't following that.. ahigerd knows",
        "cf12ef782eddcd3a70ba21b0745e9ead (05:17): ahigerd: ?",
        "7780ad7003f15ffc3b31177513eac4f9 (05:18): i wonder if you subclassing would work, might be easier to use a qtreeview",
        "cdf4ad80dc66a41f951abab3fde0d774 (05:18): s3m4ph0r3: He came back later trying that and said it wasn't working.",
        "cdf4ad80dc66a41f951abab3fde0d774 (05:19): JtRip: QTreeWidget has fixed sorting code -- it sorts by string comparison on Qt::DisplayRole",
        "cdf4ad80dc66a41f951abab3fde0d774 (05:20): JtRip: If you want to change the sort behavior, you'll have to use QTreeView and reimplement QAbstractItemModel::sort()",
        "cdf4ad80dc66a41f951abab3fde0d774 (05:20): JtRip: QStandardItemView feels much like QTreeWidget so it won't really be too hard",
        "caacdffd7a4aa3937fabe8e185e5165e (05:21): hm, tnx ahigerd",
        "cdf4ad80dc66a41f951abab3fde0d774 (05:22): Er, QStandardItemModel",
        "caacdffd7a4aa3937fabe8e185e5165e (05:39): is there a function to convert sizes, for example size(type::kb, 1024) returns &quot;1 KB&quot;?",
        "cdf4ad80dc66a41f951abab3fde0d774 (05:40): Nope",
        "cf12ef782eddcd3a70ba21b0745e9ead (05:42): ahigerd: you work for TT or something/",
        "cf12ef782eddcd3a70ba21b0745e9ead (05:42): ?",
        "cdf4ad80dc66a41f951abab3fde0d774 (05:42): Nah",
        "cf12ef782eddcd3a70ba21b0745e9ead (05:44): is there a public extention library to Qt ?",
        "cf12ef782eddcd3a70ba21b0745e9ead (05:45): Qt++ :-)",
        "cdf4ad80dc66a41f951abab3fde0d774 (05:45): Uh... no. ^^() Why would you want one, and what would it be?",
        "cdf4ad80dc66a41f951abab3fde0d774 (05:45): Actually, no, I take it back. There is one.",
        "cdf4ad80dc66a41f951abab3fde0d774 (05:45): It's called KDE. :P",
        "cf12ef782eddcd3a70ba21b0745e9ead (05:45): ahigerd: i knew somone would say that",
        "cdf4ad80dc66a41f951abab3fde0d774 (05:46): Well, that's because it is.",
        "cf12ef782eddcd3a70ba21b0745e9ead (05:46): ahigerd: correct me if im wrong ... but I doubt kde would port to win32",
        "cf12ef782eddcd3a70ba21b0745e9ead (05:46): (easily)",
        "cdf4ad80dc66a41f951abab3fde0d774 (05:46): They're working on it for KDE4.",
        "cf12ef782eddcd3a70ba21b0745e9ead (05:47): ahigerd: you a kde dever ?",
        "cdf4ad80dc66a41f951abab3fde0d774 (05:47): Meanwhile, there IS a version of KDE3 for Windows via the KDE-Cygwin project.",
        "cdf4ad80dc66a41f951abab3fde0d774 (05:47): Nope.",
        "cf12ef782eddcd3a70ba21b0745e9ead (05:47): hehe",
        "cdf4ad80dc66a41f951abab3fde0d774 (05:47): Just an independent freelance.",
        "cdf4ad80dc66a41f951abab3fde0d774 (05:47): Qt4/X11, primarily, though I do quite a bit with Qt4/Mac."
    ],
    "person_ids": [
        "b093faff3e45655cabe9180161303382",
        "2ca2955dd74a7c1353609e3dc9afc5bd",
        "cdf4ad80dc66a41f951abab3fde0d774",
        "7e188fb508ed3ace53860904c30fa7d8",
        "e4861610d329149fea4f7bfe65b0ab4f",
        "caacdffd7a4aa3937fabe8e185e5165e",
        "d4b6b9097955642b63cbb1fa452b849c",
        "7780ad7003f15ffc3b31177513eac4f9",
        "cf12ef782eddcd3a70ba21b0745e9ead",
        "1753f2fb147247a0ee3be694a7677da3"
    ]
}