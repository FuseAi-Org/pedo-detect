{
    "id": "e55f3356b1cf42add605f4f3c8c54f63",
    "messages": [
        "39e87fcec0084c7fe5aef7d6d3069727 (12:29): hi all",
        "2820b732cb02fdef0de63a6a6966cd1e (12:31): In which order should I show my stack at the screen?",
        "2820b732cb02fdef0de63a6a6966cd1e (12:32): hello?",
        "497c67278cddefd86347b11f349a1d24 (12:39): XNgDX: the way you like it",
        "497c67278cddefd86347b11f349a1d24 (12:39): XNgDX: there is not really a standard way of printing stacks. make sure you don't confuse people though",
        "71998f0f9c7768a65851d0d3c7533dd6 (12:41): XNgDX: top down?",
        "f652393ba27c800cea6368a5c2c4d2d4 (12:57): why doesnt this incriment by two?         while (i = 0; i &lt; 10; i + 2);",
        "71998f0f9c7768a65851d0d3c7533dd6 (12:57): + is not an assignment operator.",
        "71998f0f9c7768a65851d0d3c7533dd6 (12:57): x = 2;  y = x + 2;  /* What is the value of x now? */",
        "f652393ba27c800cea6368a5c2c4d2d4 (12:57): 2?",
        "16792d15bb74f08e6c86e54246cc65e3 (12:58): the side effect of i + 2 is not used",
        "f652393ba27c800cea6368a5c2c4d2d4 (12:58): so what should it be?",
        "b2d6697a61a786707103fc558844fc73 (12:58): there is no side-effect of i + 2",
        "75d3cbc71afc0e4be3dd44cd9891e9d9 (12:59): the value is maybe something like -1283748 ;)",
        "f652393ba27c800cea6368a5c2c4d2d4 (12:59): im lost",
        "71998f0f9c7768a65851d0d3c7533dd6 (12:59): i = i + 2",
        "16792d15bb74f08e6c86e54246cc65e3 (12:59): p0t: i = i + 2 or i += 2",
        "f652393ba27c800cea6368a5c2c4d2d4 (12:59): ohh",
        "71998f0f9c7768a65851d0d3c7533dd6 (12:59): Also, the while statement only wants a single condition expression.",
        "f652393ba27c800cea6368a5c2c4d2d4 (12:59): while (i = 0; i &lt; 10; i = i + 2);  ?",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:00): No.",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:00): yea i know that",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:00): for (i = 0; i &lt; 10; i += 2) body;",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:00): p0t: If you mean 'for' then say 'for' not 'while'.  :P",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:00): ok",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:00): why did you add &quot;body&quot;?",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:01): p0t: Why did you elide it?",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:01): idk what it is",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:01): p0t: Then don't put a semicolon there.",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:02): A semicolon is a valid statement and a valid loop body.",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:02): for (i=0; i&lt;10; i++); puts(&quot;This line is printed only once&quot;);",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:07): prec, i think i do need while.. <a href=\"http://rafb.net/paste/results/ZZ4aDs34.html\">http://rafb.net/paste/results/ZZ4aDs34.html</a>",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:07): im trying to make a loop",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:08): p0t: That is illegal.",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:08): ok why",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:08): The while statement only wants a single condition expression.",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:08): The while statement does not accept three semicolon-separated expressions -- you're thinking of the for statement.",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:09): ok so i should just swith it with &quot;for&quot;",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:09): C has three looping statements.",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:10): well if i swith it to for this is what i get",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:10): # ./ex3",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:10): 10im done!",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:10): p0t: Right.",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:10): i want it to count by two",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:11): p0t: Then stop using an empty loop body.",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:11): ahh",
        "bab2c2c624e52ac50c7b4747cef6c49c (13:11): Hello.  I have a couple quick questions about: <a href=\"http://xchat.org/docs/plugin20.html\">http://xchat.org/docs/plugin20.html</a>",
        "bab2c2c624e52ac50c7b4747cef6c49c (13:12): 1) Why doesn't linux need the  plugin.def  file?  what am I missing here?",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:12): prec, actually i dont understand",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:12): what do you mean empty? isnt the body printf (&quot;%d&quot;, i); ?",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:13): p0t: No, it isn't.  The body of your loop is the ; at the end of line 5.",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:13): RadSurfer: It's a Windows linker input file for building DLLs.",
        "bab2c2c624e52ac50c7b4747cef6c49c (13:14): How is it that linux isn't concerned about what is exported or not? (thats what I'm really asking)",
        "161747ec4dc9f55f1760195593742232 (13:14): it is",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:14): RadSurfer: It exports all functions which have external linkage.",
        "161747ec4dc9f55f1760195593742232 (13:14): it isn't handled in a .def file",
        "161747ec4dc9f55f1760195593742232 (13:14): for linux",
        "bab2c2c624e52ac50c7b4747cef6c49c (13:14): &quot;all&quot;  is that efficient ?",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:14): for (i = 0; i &lt; 10; i += 2) body;  prec, that is your example",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:14): p0t: Right.",
        "161747ec4dc9f55f1760195593742232 (13:14): why not? there is no other way to do it",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:14): at least i have something right",
        "161747ec4dc9f55f1760195593742232 (13:14): it's only a function symbol and an address",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:15): RadSurfer: It's usually correct -- one should only access the API anyway.",
        "bab2c2c624e52ac50c7b4747cef6c49c (13:15): but if win32 specifies it.  Why the different approach.",
        "161747ec4dc9f55f1760195593742232 (13:15): because it's a completely different linking system",
        "bab2c2c624e52ac50c7b4747cef6c49c (13:15): It compiles; so I won't worry :-)",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:15): RadSurfer: Different strokes for different OSes.",
        "161747ec4dc9f55f1760195593742232 (13:15): PE's dynamic linking and loading varies greatly from that of ELF",
        "161747ec4dc9f55f1760195593742232 (13:16): DLLs aren't technically even dynamically loaded",
        "161747ec4dc9f55f1760195593742232 (13:16): and they aren't remappable anyway",
        "161747ec4dc9f55f1760195593742232 (13:16): ELF libraries are",
        "bab2c2c624e52ac50c7b4747cef6c49c (13:16): Ok. right.",
        "110b7271a8ded2bc0764898de97d07d7 (13:16): If you want to know more... <a href=\"http://www.iecc.com/linker/\">http://www.iecc.com/linker/</a>",
        "bab2c2c624e52ac50c7b4747cef6c49c (13:16): Now to create a super-awesome new Xchat plugin for FC... hehe",
        "bab2c2c624e52ac50c7b4747cef6c49c (13:17): thanks",
        "161747ec4dc9f55f1760195593742232 (13:17): Warning: filesize(): Stat failed for /var/www/iecc/linker/linker00fig.html (errno=2 - No such file or directory) in /home/johnl/book/linker/index.phtml on line 43",
        "161747ec4dc9f55f1760195593742232 (13:17): oo, that's naughty",
        "161747ec4dc9f55f1760195593742232 (13:17): ;p",
        "161747ec4dc9f55f1760195593742232 (13:17): 'night",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:17): prec, im lost dude",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:17): p0t: In your paste, you have a semicolon at the end of line 5.  See it?",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:18): yes",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:18): for (i = 0; i &lt; 10; i += 2) /* do nothing */;",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:18): p0t: That is the loop you have.",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:18): p0t: The block starting on line 6 and ending on line 8 is completely outside the loop.",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:19): oh",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:19): for (i = 0; i &lt; 10; i += 2) { printf(&quot;%d\\n&quot;, i); }  /* This is what you want. */",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:20): ok i got it",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:20): sweet",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:20): Or, skip the {} if you like.",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:20): in understand",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:20): I*",
        "f652393ba27c800cea6368a5c2c4d2d4 (13:20): prec, thanks",
        "2b68e113fe325b4692b749d7bf4f1af7 (13:28): anyone know why stdint.h would not be on my unix machine?",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:28): jonx: Do you have a C99 implementation?",
        "2b68e113fe325b4692b749d7bf4f1af7 (13:29): it should bew",
        "2b68e113fe325b4692b749d7bf4f1af7 (13:29): s/bew/be",
        "110b7271a8ded2bc0764898de97d07d7 (13:30): Maybe you didn't install the headers.",
        "2b68e113fe325b4692b749d7bf4f1af7 (13:32): what is stdint usually used for?",
        "110b7271a8ded2bc0764898de97d07d7 (13:33): It defines some exact/minimal integer types, e.g. int32_t",
        "110b7271a8ded2bc0764898de97d07d7 (13:34): It's been part of POSIX for a while before it got into C99",
        "6ecc2cbd8ba582fe8847cd33a20772d5 (13:34): g'day all",
        "2b68e113fe325b4692b749d7bf4f1af7 (13:35): hmm",
        "6ecc2cbd8ba582fe8847cd33a20772d5 (13:36): what's the point of declaring error types as an enumeration? I mean, I can print out the &quot;error-number&quot; if one happens, but with about 100 different errors, I can't find back to the &quot;what does number 97 means&quot;?...so the enum has no use?...",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:37): const char *messages[] = { [ENONE] = &quot;No error&quot;, [EFOO] = &quot;Foo!&quot;, etc... };  C99 has a nice solution.",
        "6ecc2cbd8ba582fe8847cd33a20772d5 (13:38): prec: unfortunately I'm working with some third-party code I can't change :) they made som enum { error1 = 0, error2, error3...}",
        "dbd38b3cd52fc8e7dfe669cfed9b2eb5 (13:38): if I have a char* somearray, and I go somearray++ all thats happening is somearray is pointing to the next element in somearray[]?",
        "6ecc2cbd8ba582fe8847cd33a20772d5 (13:38): prec: when I now receive the integer number 3...can I somehow find back to the &quot;error3&quot; ?...",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:39): detectiveinspekt: char *foo;  foo is not an array, it is a pointer.",
        "f3b046b9359272a9e83623ed92f2164a (13:39): char *foo = &quot;bla&quot;; foo has storage duration automatic.. isn't it? so it should not be accessed after the scope is left?",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:39): inzanez: Search the source.",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:39): hnaz_: right.",
        "f3b046b9359272a9e83623ed92f2164a (13:39): ahh, thanks prec",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:39): hnaz_: Although the string literal has static storage duration.",
        "f3b046b9359272a9e83623ed92f2164a (13:39): lemme check this",
        "70c6ff03cbb88a833a8bdb91fec2fe46 (13:40): hnaz_: The pointer has automatic storage; the string does not",
        "6ecc2cbd8ba582fe8847cd33a20772d5 (13:40): prec: hm, I have the source, but looking up a number like 97 in a enum with more then 150 elements is...not funny?...",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:40): inzanez: No, it isn't.",
        "70c6ff03cbb88a833a8bdb91fec2fe46 (13:40): hnaz_: However, since pointers are values, they can be copies. In any case it only matters for pointers to automatic data.",
        "f3b046b9359272a9e83623ed92f2164a (13:40): hm static means &gt;through the whole program execution&lt;",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:41): detectiveinspekt: int a[] = {1,2,3,4}; int *p = &amp;a[0];  p++;  /* p now points to 2 */",
        "dbd38b3cd52fc8e7dfe669cfed9b2eb5 (13:41): yea thats what I thought",
        "f3b046b9359272a9e83623ed92f2164a (13:41): Baughn: hm so char *f = &quot;b&quot;; means, b is saved at the memory space where f points to",
        "f3b046b9359272a9e83623ed92f2164a (13:41): Baughn: ... and does not get lost after the scope?",
        "70c6ff03cbb88a833a8bdb91fec2fe46 (13:42): hnaz_: Well, {'b', 0}, but yes",
        "70c6ff03cbb88a833a8bdb91fec2fe46 (13:42): hnaz_: The pointer gets lost. The char array does not.",
        "dbd38b3cd52fc8e7dfe669cfed9b2eb5 (13:42): thanks",
        "71998f0f9c7768a65851d0d3c7533dd6 (13:42): hnaz_: No, f is assigned the address of the string literal object.",
        "f3b046b9359272a9e83623ed92f2164a (13:42): Baughn: weird. so if i pass the pointer to another function [and therefore copy the address] it doesnt matter anyway if the pointer is automatic",
        "70c6ff03cbb88a833a8bdb91fec2fe46 (13:43): hnaz_: That is correct. It is also true for /all/ objects, not just pointers.",
        "f3b046b9359272a9e83623ed92f2164a (13:43): prec: yeah, we could always optimize this.. i'm no native english man ;)",
        "70c6ff03cbb88a833a8bdb91fec2fe46 (13:43): hnaz_: Note, however, that arrays are not objects by that definition.",
        "f3b046b9359272a9e83623ed92f2164a (13:43): Baughn: sure. arguments will be copied if not passed by reference",
        "70c6ff03cbb88a833a8bdb91fec2fe46 (13:43): hnaz_: There is no &quot;pass by reference&quot;. All arguments are coppied, period.",
        "f3b046b9359272a9e83623ed92f2164a (13:44): hmm",
        "f3b046b9359272a9e83623ed92f2164a (13:44): if i pass pointers, the address will be copied?",
        "f3b046b9359272a9e83623ed92f2164a (13:44): (but still copied)",
        "70c6ff03cbb88a833a8bdb91fec2fe46 (13:44): The pointer gets copied.",
        "f3b046b9359272a9e83623ed92f2164a (13:44): yeah well.. since pointers hold addresses",
        "70c6ff03cbb88a833a8bdb91fec2fe46 (13:44): Pointer objects have pointer values. There are no addresses, despite the naming of the unary &amp; operator."
    ],
    "person_ids": [
        "39e87fcec0084c7fe5aef7d6d3069727",
        "2820b732cb02fdef0de63a6a6966cd1e",
        "497c67278cddefd86347b11f349a1d24",
        "71998f0f9c7768a65851d0d3c7533dd6",
        "f652393ba27c800cea6368a5c2c4d2d4",
        "16792d15bb74f08e6c86e54246cc65e3",
        "b2d6697a61a786707103fc558844fc73",
        "75d3cbc71afc0e4be3dd44cd9891e9d9",
        "bab2c2c624e52ac50c7b4747cef6c49c",
        "161747ec4dc9f55f1760195593742232",
        "110b7271a8ded2bc0764898de97d07d7",
        "2b68e113fe325b4692b749d7bf4f1af7",
        "6ecc2cbd8ba582fe8847cd33a20772d5",
        "dbd38b3cd52fc8e7dfe669cfed9b2eb5",
        "f3b046b9359272a9e83623ed92f2164a",
        "70c6ff03cbb88a833a8bdb91fec2fe46"
    ]
}