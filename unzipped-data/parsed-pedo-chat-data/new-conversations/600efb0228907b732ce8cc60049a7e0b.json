{
    "id": "600efb0228907b732ce8cc60049a7e0b",
    "messages": [
        "69b0d3dfe919a6b860a9fac82de52a7e (04:00): AlexNRoss: nofollow doesn't actually mean &quot;don't follow the link&quot;, it means &quot;don't give this link any credibility&quot;",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:00): AlexNRoss: i can't find anything that suggests &quot;dofollow&quot; would do anything useful",
        "7f9405da4034bf43083e64b57302a8e6 (04:08): nofollow is a pretty bad choice for that kind of attribute value",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:09): no argument from me there",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:09): a3f19f90edf0a0893c7847d08016abe3: btw i really think we should reconsider this foo? syntax in WebIDL",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:10): a3f19f90edf0a0893c7847d08016abe3: having to put question marks in every IDL block is going to take me weeks",
        "c9717c9ac669d070e4a2f1f807bd856b (04:10): 69b0d3dfe919a6b860a9fac82de52a7e, To answer eightfold's question, is a:visited:after { content: &quot;(you've been here before)&quot;; } valid? I do not see anything in the spec saying pseudo-elements can work with pseudo-classes.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:10): a3f19f90edf0a0893c7847d08016abe3: can't we do it the other way around? have an exclamation mark for the opposite case?",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:10): c9717c9ac669d070e4a2f1f807bd856b: which spec?",
        "7f9405da4034bf43083e64b57302a8e6 (04:10): c9717c9ac669d070e4a2f1f807bd856b, history sniffing, do you know it? i believe this will not work.",
        "c9717c9ac669d070e4a2f1f807bd856b (04:11): 69b0d3dfe919a6b860a9fac82de52a7e, http://www.w3.org/TR/CSS2/",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:11): good lord",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:11): CSS2 is over 13 years obsolete",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:11): don't look at that",
        "7f9405da4034bf43083e64b57302a8e6 (04:11): c9717c9ac669d070e4a2f1f807bd856b, i had that same trick (with a check mark :after :visited links) ruined by the history sniffing countermeasures.",
        "a3f19f90edf0a0893c7847d08016abe3 (04:11): 69b0d3dfe919a6b860a9fac82de52a7e, weeks? of course it is possible to do it the other way around for types that previously had &quot;null&quot; as part of them. I chose this way to avoid having both &quot;?&quot; and &quot;!&quot;.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:11): c9717c9ac669d070e4a2f1f807bd856b: :hover::after { content: '&lt;has hover!' } should work fine",
        "a3f19f90edf0a0893c7847d08016abe3 (04:11): 69b0d3dfe919a6b860a9fac82de52a7e, let me take a look at the html spec and determine how many &quot;?&quot;s would really be needed",
        "7f9405da4034bf43083e64b57302a8e6 (04:11): c9717c9ac669d070e4a2f1f807bd856b, i believe :visited changes can only affect color.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:12): c9717c9ac669d070e4a2f1f807bd856b: with :link it's a bit more dodgy because of the history thing as 7f9405da4034bf43083e64b57302a8e6 says",
        "7f9405da4034bf43083e64b57302a8e6 (04:12): but i am too lazy looking it up. have to work on a minecraft clone.",
        "7f9405da4034bf43083e64b57302a8e6 (04:12): :3",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:12): c9717c9ac669d070e4a2f1f807bd856b: but anyway, http://dev.w3.org/csswg/selectors3/ is where you want to go for selectors",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:12): a3f19f90edf0a0893c7847d08016abe3: i think i would want it everywhere",
        "7f9405da4034bf43083e64b57302a8e6 (04:13): c9717c9ac669d070e4a2f1f807bd856b, oh well. read this &lt;http:/ 104bc19e5513cba4eba2d18c7a704a01.org/mozilla/visited-privacy&gt;",
        "a3f19f90edf0a0893c7847d08016abe3 (04:13): 69b0d3dfe919a6b860a9fac82de52a7e, there are really no cases where you want to throw if null is passed as an argument where an object is expected?",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:13): a3f19f90edf0a0893c7847d08016abe3: since that's what was assumed until now, so all the prose assumes null is always allowed",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:13): a3f19f90edf0a0893c7847d08016abe3: i'm sure there's lots of cases. but they already throw.",
        "a3f19f90edf0a0893c7847d08016abe3 (04:13): 69b0d3dfe919a6b860a9fac82de52a7e, I see",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:13): i could see slowly one-by-one moving them to using IDL instead of prose to require it",
        "a3f19f90edf0a0893c7847d08016abe3 (04:14): which you could do with &quot;!&quot;...",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:14): right",
        "a3f19f90edf0a0893c7847d08016abe3 (04:14): ok, I'll think it over :)",
        "104bc19e5513cba4eba2d18c7a704a01 (04:14): 69b0d3dfe919a6b860a9fac82de52a7e, follow the CSS2 link, it's updated",
        "a3f19f90edf0a0893c7847d08016abe3 (04:15): 69b0d3dfe919a6b860a9fac82de52a7e, do you mind to file a bug on it?",
        "7f9405da4034bf43083e64b57302a8e6 (04:15): hey, 104bc19e5513cba4eba2d18c7a704a01, nice job ruining our :visited selector ;D",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:15): 104bc19e5513cba4eba2d18c7a704a01: the css2 link should point to http://www.w3.org/Style/Group/css2-src/cover.html :-P",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:15): a3f19f90edf0a0893c7847d08016abe3: sure",
        "a3f19f90edf0a0893c7847d08016abe3 (04:15): thanks",
        "c9717c9ac669d070e4a2f1f807bd856b (04:16): 69b0d3dfe919a6b860a9fac82de52a7e, http://dev.w3.org/csswg/selectors3/#gen-content refers to the CSS 2.1 spec so it does not necessarily clarify that ::before or :after can be applied to pseudo-classes.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:17): a3f19f90edf0a0893c7847d08016abe3: reopened http://www.w3.org/Bugs/Public/show_bug.cgi?id=10640",
        "a3f19f90edf0a0893c7847d08016abe3 (04:18): k",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:18): a3f19f90edf0a0893c7847d08016abe3: if you do want to give me a diff (against the .../source file) then i probably wouldn't complain either",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:18): a3f19f90edf0a0893c7847d08016abe3: (per your comment in there)",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:18): a3f19f90edf0a0893c7847d08016abe3: you're one of hte few people i'd trust to not screw something like that up :-)",
        "a3f19f90edf0a0893c7847d08016abe3 (04:18): :)",
        "a3f19f90edf0a0893c7847d08016abe3 (04:19): if even with prose changes most types still get a &quot;?&quot;, then changing to &quot;!&quot; would be better",
        "c9717c9ac669d070e4a2f1f807bd856b (04:19): Nor do I see where it says a pseudo-element can be applied to a pseudo-class in http://dev.w3.org/csswg/selectors3/#pseudo-elements",
        "a3f19f90edf0a0893c7847d08016abe3 (04:19): so I will check that first",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:19): there's 183 idl blocks in the spec",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:20): c9717c9ac669d070e4a2f1f807bd856b: it's not applied to a pseudo-class",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:20): c9717c9ac669d070e4a2f1f807bd856b: every selector can have one pseudo-element",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:20): c9717c9ac669d070e4a2f1f807bd856b: and any number of combinators, pseudo-classes, normal classes, ids, attribute selectors, etc",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:20): c9717c9ac669d070e4a2f1f807bd856b: (and one type selector per &quot;chain&quot;)",
        "c9717c9ac669d070e4a2f1f807bd856b (04:20): OK, that clears it up. Thanks 69b0d3dfe919a6b860a9fac82de52a7e.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:21): np",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:21): too bad we can't style with xpath",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:21): shudders",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:22): think about it. absolutely position -&gt; not in the flow -&gt; i have to give the container some extra class/id just to give it dimensions",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:22): with xpath that would go away",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:23): but i guess that would be too expensive to parse",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:23): how would you do it with xpath?",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:23): ancestor axis",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:24): oh well we can add that to selectors too",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:24): that's not an xpath vs selectors thing",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:24): selectors has intentionally avoided having such a feature because it's a perf nightmare",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:24): i thought things are only supposed to go downwards/forwards in CSS",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:24): right, i'm just saying that if that's what you're missing, it'd be easier to add it to selectors than replace selectors with xpath",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:25): yeah, but that's just one example. i might want to do something with previous siblings instead... sibling axis",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:25): my :matches(...#...) proposal handles all of that",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:25): m'kay",
        "1f8387eb43f131d7c309a90a4e36b5cb (04:26): 5cfdf2d621b2a11df72a2e70bd2ff1a0: Both of those are perfectly compatible with CSS, we've just avoided them for performance reasons, like 69b0d3dfe919a6b860a9fac82de52a7e said.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:26): a:matches(#+b) matches an a followed by a b sibling",
        "1f8387eb43f131d7c309a90a4e36b5cb (04:26): The downwards/forwards restriction means you can match selectors against an element *while* parsing a document, using only the information you've already parsed.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:26): a:matches(#&gt;b) matches an a followed by a b child",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:26): also, someone slap google for putting w3schools ontop of the results for anything web standard related",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:26): their site is horrible",
        "06cb330920ae58e1614c9145d983b3d6 (04:27): at least google finally added an &quot;ignore this site forever&quot; thing, heh",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:27): 5cfdf2d621b2a11df72a2e70bd2ff1a0: when you get a result, click it, hit back, then hit &quot;block this site&quot;",
        "06cb330920ae58e1614c9145d983b3d6 (04:27): been wanting that for years",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:27): mhm... but then i have to allow cookies for google",
        "06cb330920ae58e1614c9145d983b3d6 (04:27): (now if only they'd stop fuzzing searches to death so i have to +prefix +every +word +of +every +search +to +make +it +not +add +typos +for +me)",
        "1f8387eb43f131d7c309a90a4e36b5cb (04:27): Google is your friend.  Do what Google says.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:27): you really should log in to google anyway, it makes your results way better",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:28): (disclaimer, tab and i work for google)",
        "c9717c9ac669d070e4a2f1f807bd856b (04:28): Google tricks me into searching while logged in due to their universal log-in.",
        "c9717c9ac669d070e4a2f1f807bd856b (04:29): :)",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:34): 69b0d3dfe919a6b860a9fac82de52a7e, so... i could use that to select the previous sibling of a specific type too?",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:35): ah, yeah. neat",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:35): &lt 1f8387eb43f131d7c309a90a4e36b5cb&gt; The downwards/forwards restriction means you can match selectors against an element *while* parsing a document, using only the information you've already parsed. &lt;- just like C was designed to for a single-pass compiler. and we're all using multi-pass ones today ;)",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:36): imo the runtime complexity class is more important than having to wait for the document to finish to load for (some) selectors.",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:37): but it doesn't look like one can construct NP-hard statements with that ^^",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:37): it's not so much to allow single-pass (you already can't do that with e.g. :last-child)",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:38): it's to allow you to style the document without having to do a full crawl of the entire document for each element",
        "1f8387eb43f131d7c309a90a4e36b5cb (04:38): 5cfdf2d621b2a11df72a2e70bd2ff1a0: That's why there isn't any inherent restriction against that sort of thing.  It's just not possible with currently-defined syntax, is all.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:38): consider *:matches(.foo) { }, for example, which would match any element if the document had a class=foo element in it",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:38): for every element, you'd have to walk the entire document (modulo caching)",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:39): well, but that is traversing the entire document once",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:39): you could try to evaluate all those conditions at once",
        "1f8387eb43f131d7c309a90a4e36b5cb (04:40): Which isn't really a problem once the entire document is present, but it means that you can't determine if that selector matches until the entire document loads.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:40): or :matches(.foo .bar ~ .baz #) which for every element would require crawling huge parts of the dom and would be very difficult to cache efficiently",
        "1f8387eb43f131d7c309a90a4e36b5cb (04:40): .. 69b0d3dfe919a6b860a9fac82de52a7e, that's equivalent to just omitting :matches().",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:40): 1f8387eb43f131d7c309a90a4e36b5cb, that should be acceptable i think. fancy javascript stuff doesn't load either until the dom is there",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:40): 1f8387eb43f131d7c309a90a4e36b5cb: that's not such a big problem, document load is just like dynamic changes to the dom",
        "1f8387eb43f131d7c309a90a4e36b5cb (04:40): 5cfdf2d621b2a11df72a2e70bd2ff1a0: It's not acceptable.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:41): er, i had my example backwards",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:41): i meant :matches(# .foo ~ .bar .baz)",
        "1f8387eb43f131d7c309a90a4e36b5cb (04:41): 5cfdf2d621b2a11df72a2e70bd2ff1a0: You want to be able to display a page *as* it loads.",
        "1f8387eb43f131d7c309a90a4e36b5cb (04:41): And preferably as complete as possible, to minimize visual jank.",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:41): so just display it based on the the forward-evaluateable rules",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:42): you already have to do that, think of nth-last-child",
        "1f8387eb43f131d7c309a90a4e36b5cb (04:42): Those are *very* rarely used.",
        "1f8387eb43f131d7c309a90a4e36b5cb (04:42): And they do indeed slow the document down when you use them.",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:42): should do that on a separate thread",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:42): they don't slow the document down anywhere near as much as :matches() would :-)",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:42): snapshot the graph and do some traversing to match the selectors",
        "1f8387eb43f131d7c309a90a4e36b5cb (04:43): Doesn't help.  You're still doing multiple layouts over the same tree.  Once a new selector is found to match, you have to throw away most of your progress over the subtree and start again.",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:43): of course nobody designed/implemented dom with multithreading in mind :/",
        "1f8387eb43f131d7c309a90a4e36b5cb (04:43): Because one value changing can percolate down via inheritance, etc.",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:43): 1f8387eb43f131d7c309a90a4e36b5cb... same when JS does dynamic stuff on dom ready",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:44): simple sites won't need it and complex sites will already be... complex",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:44): but yes, it'll certainly not work well with naive implementations",
        "1f8387eb43f131d7c309a90a4e36b5cb (04:45): The problem is that people don't think of CSS as complex.  We'd prefer that the performance impact be small before adding them.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:45): bbl",
        "1f8387eb43f131d7c309a90a4e36b5cb (04:45): s/naive/all current/",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:48): the loops that this combined with calc() might create are far more interesting",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:48): mh, nvm",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (04:49): it would just override it"
    ],
    "person_ids": [
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "7f9405da4034bf43083e64b57302a8e6",
        "c9717c9ac669d070e4a2f1f807bd856b",
        "a3f19f90edf0a0893c7847d08016abe3",
        "104bc19e5513cba4eba2d18c7a704a01",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0",
        "1f8387eb43f131d7c309a90a4e36b5cb",
        "06cb330920ae58e1614c9145d983b3d6"
    ]
}