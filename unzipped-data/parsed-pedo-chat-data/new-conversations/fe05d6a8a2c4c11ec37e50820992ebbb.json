{
    "id": "fe05d6a8a2c4c11ec37e50820992ebbb",
    "messages": [
        "b8810fee2f4a71f849f3f7409546d1d9 (15:09): aargh. what's wrong with validator.nu *now*?",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:14): looks like a network problem",
        "c53ce266132145423a95034f111ad7dd (15:35): b8810fee2f4a71f849f3f7409546d1d9: Fixed already? Works fine here/now",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:35): c53ce266132145423a95034f111ad7dd: does validator.nu work or only html5.validator.nu?",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:36): c53ce266132145423a95034f111ad7dd: the latter is unaffected iff you happen to have CSS and JS cached already",
        "c53ce266132145423a95034f111ad7dd (15:36): b8810fee2f4a71f849f3f7409546d1d9: both worked just a minute ago, but now only html5.validator.nu seems to work",
        "c53ce266132145423a95034f111ad7dd (15:37): b8810fee2f4a71f849f3f7409546d1d9: does validator.nu have a cache manifest?",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:37): c53ce266132145423a95034f111ad7dd: no",
        "c53ce266132145423a95034f111ad7dd (15:38): must've been some weird browser caching then",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:39): I guess I should make html5.validator.nu load CSS and JS from itself instead of loading them from the server that runs about.validator.nu and validator.nu",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:44): hmm. maybe bugzilla.validator.nu has a bad robots.txt after reinstall and a crawler is indexing it",
        "1f43d3d4c6d96c26d6777518d49160dd (15:59): What's the best way to express a boolean property using html5 microdata?",
        "edb259c0e0038f38bb200bc20c8cbf7e (16:00): there's no design patterns afaik",
        "edb259c0e0038f38bb200bc20c8cbf7e (16:00): HTML5 itself uses presence/absence of attributes for booleans",
        "1f43d3d4c6d96c26d6777518d49160dd (16:00): edb259c0e0038f38bb200bc20c8cbf7e: So perhaps I should mint a data- attribute to indicate my boolean property?",
        "1f43d3d4c6d96c26d6777518d49160dd (16:01): Something like &lt;div itemscope data-foo&gt; ?",
        "f139aba52f9fa1394b4034a7954b2220 (16:01): 1f43d3d4c6d96c26d6777518d49160dd, depends what you're trying to use it for",
        "edb259c0e0038f38bb200bc20c8cbf7e (16:01): data- != microdata",
        "1f43d3d4c6d96c26d6777518d49160dd (16:02): I'm using metadata to construct a table of contents",
        "1f43d3d4c6d96c26d6777518d49160dd (16:02): Where each item is an article",
        "f139aba52f9fa1394b4034a7954b2220 (16:02): microdata is useful when you want to share data with 3rd parties via a shared vocabulary. data-* is useful if you just want extra metadata for your own scripts to use internally on the page.",
        "1f43d3d4c6d96c26d6777518d49160dd (16:02): And I need the ability to set a boolean flag or two on the articles",
        "1f43d3d4c6d96c26d6777518d49160dd (16:03): Microdata also seems to be useful when the content is the data as well, no?",
        "1f43d3d4c6d96c26d6777518d49160dd (16:03): Like an article's title",
        "f139aba52f9fa1394b4034a7954b2220 (16:05): yes, it can be, depending on what use cases and problems your trying to solve.",
        "1f43d3d4c6d96c26d6777518d49160dd (16:05): From what I've played around with it seemed that &lt;h2 itemprop=&quot;title&quot;&gt;Article Title&lt;/h2&gt; was a better choice than &lt;div data-title=&quot;...&quot;&gt;&lt;h2&gt;....",
        "f139aba52f9fa1394b4034a7954b2220 (16:05): you could just use class=&quot;title&quot;",
        "1f43d3d4c6d96c26d6777518d49160dd (16:06): True, although I was concerned with name conflicts",
        "1f43d3d4c6d96c26d6777518d49160dd (16:06): goal is also to eventually be able to use native document.getItems",
        "f139aba52f9fa1394b4034a7954b2220 (16:07): that's not a goal, that's a specific solution for achieving some other goal.",
        "f139aba52f9fa1394b4034a7954b2220 (16:09): you could just as easily use document.querySelectorAll(&quot;[data-title]&quot;); or .querySelectorAll(&quot;.title&quot;);",
        "1f43d3d4c6d96c26d6777518d49160dd (16:10): slightly more complicated since there is a bit of structure. each article has a title, author, etc",
        "1f43d3d4c6d96c26d6777518d49160dd (16:10): but yes, since doc.getItems doesn't exist, I've been implementing it manually",
        "f139aba52f9fa1394b4034a7954b2220 (16:11): ok, so then you have a requriement for obtaining easily scriptable and structured data from your page?",
        "1f43d3d4c6d96c26d6777518d49160dd (16:13): yes. balancing performance with ease of authoring",
        "ab7faae5d7b250ea8606486575f8f79c (16:15): sees PNaCl, and wonders what the &quot;native&quot; in its name means",
        "ab7faae5d7b250ea8606486575f8f79c (16:16): since it's no longer got native machine code (except to the extent that e.g. JavaScript does, via JITs), and you can't use native APIs or anything like that",
        "ab7faae5d7b250ea8606486575f8f79c (16:17): Seems the main thing it adds that's fundamentally impossible with JS is shared-memory concurrency, which everyone nowadays hates",
        "c53ce266132145423a95034f111ad7dd (16:20): Weird, document.images is 70% slower than getElementsByTagName('img') in Chrome. In every other browser the images collection is faster.",
        "936e36f7a71852e10a649295a6a9729f (16:20): mentions something about RDFa Core 1.1 and that kind of data..",
        "c53ce266132145423a95034f111ad7dd (16:21): Well, /s/Chrome/WebKit/",
        "a11aabeeceeae6b8cb5d12ea06b56554 (16:23): So, hmm\u201a\u00c4\u00b6 fun doing analyis of Sputnik failures. The two engines that have actually tried to impl ES5 have 74 and 75 failures, but only 50 of those are shared between the two",
        "a11aabeeceeae6b8cb5d12ea06b56554 (16:23): Of those 50 failure, there are seven of those that both SpiderMonkey and V8 pass."
    ],
    "person_ids": [
        "b8810fee2f4a71f849f3f7409546d1d9",
        "c53ce266132145423a95034f111ad7dd",
        "1f43d3d4c6d96c26d6777518d49160dd",
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "f139aba52f9fa1394b4034a7954b2220",
        "ab7faae5d7b250ea8606486575f8f79c",
        "936e36f7a71852e10a649295a6a9729f",
        "a11aabeeceeae6b8cb5d12ea06b56554"
    ]
}