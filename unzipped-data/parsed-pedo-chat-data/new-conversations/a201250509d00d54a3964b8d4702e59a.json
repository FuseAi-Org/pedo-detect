{
    "id": "a201250509d00d54a3964b8d4702e59a",
    "messages": [
        "2ad7ac17dee6aea547eb096eb60df726 (21:38): is there a way to have multiple tokens in an @itemtype? @itemprop seems to allow it, @itemtype doesn't it seems...",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:56): 2ad7ac17dee6aea547eb096eb60df726: what would it mean?",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:56): 2ad7ac17dee6aea547eb096eb60df726: or rather, how would you know which vocabulary's terms you were using?",
        "61831986744b882b4371990cc1863b19 (22:13): ok, i have a bunch of IndexedDB properties that are defined &quot;readonly&quot; per their WebIDL",
        "61831986744b882b4371990cc1863b19 (22:13): what should happen when I try to set those properties from JavaScript?",
        "cc097e0d7183ae8436e7df709553c8c0 (22:13): 61831986744b882b4371990cc1863b19: my favorite",
        "61831986744b882b4371990cc1863b19 (22:13): &quot;An object that implements the interface on which a read only attribute is defined will not allow assignment to that attribute. It is language binding specific whether assignment is simply disallowed by the language, ignored or an exception is thrown.&quot;",
        "8b3687499080633e1898fa1dd209ef81 (22:13): Fail silently, and throw in strict mode",
        "cc097e0d7183ae8436e7df709553c8c0 (22:13): what 8b3687499080633e1898fa1dd209ef81 said",
        "61831986744b882b4371990cc1863b19 (22:13): which browsers support strict mode?",
        "8b3687499080633e1898fa1dd209ef81 (22:13): Fx",
        "8b3687499080633e1898fa1dd209ef81 (22:14): Chrome too, I think?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:14): Chrome doesn't",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:14): WebKit nightlies do",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:14): IE10 Preview does",
        "61831986744b882b4371990cc1863b19 (22:15): wow, chrome is behind IE in something?",
        "61831986744b882b4371990cc1863b19 (22:15): we live in interesting times",
        "61831986744b882b4371990cc1863b19 (22:15): i have a webkit nightly",
        "61831986744b882b4371990cc1863b19 (22:15): how would I check for strict mode?",
        "8b3687499080633e1898fa1dd209ef81 (22:16): &lt;script&gt;&quot;use strict&quot;; try { global = &quot;&quot; } catch(e) { // In strict mode }&lt;/script&gt;",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:16): or function is_strict() { return !this; }",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:16): Uh, with &quot;use strict&quot;;",
        "8b3687499080633e1898fa1dd209ef81 (22:17): never understood that",
        "cc097e0d7183ae8436e7df709553c8c0 (22:17): http://software.hixie.ch/utilities/js/live-dom-viewer/saved/1024",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:17): 8b3687499080633e1898fa1dd209ef81: calling a function as foo() passes the global object as the this argument in non-strict, and null in strict mode.",
        "8b3687499080633e1898fa1dd209ef81 (22:18): So, Chrome fails your test and passes mine, apparently",
        "cc097e0d7183ae8436e7df709553c8c0 (22:19): you mean chrome has a half implementation of a feature? how surprising",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:19): facepalms",
        "8b3687499080633e1898fa1dd209ef81 (22:19): Also, passe cc097e0d7183ae8436e7df709553c8c0's",
        "8b3687499080633e1898fa1dd209ef81 (22:19): +s",
        "8b3687499080633e1898fa1dd209ef81 (22:21): Speaking of strict mode, should &quot;onload = function() {..}&quot; be allowed?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:21): 8b3687499080633e1898fa1dd209ef81: onload should already be defined, so it's not a new variable reference.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:22): 8b3687499080633e1898fa1dd209ef81: (i.e., &quot;onload&quot; is already a defined variable)",
        "cc097e0d7183ae8436e7df709553c8c0 (22:22): another editor will save websockets",
        "8b3687499080633e1898fa1dd209ef81 (22:22): Then I seem to recall Chrome being wrong",
        "cc097e0d7183ae8436e7df709553c8c0 (22:23): a11aabeeceeae6b8cb5d12ea06b56554: onload is a property, not a variable, right?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:23): cc097e0d7183ae8436e7df709553c8c0: It's a property on the global object",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:24): cc097e0d7183ae8436e7df709553c8c0: variables just define properties on the global object in the global scope",
        "2ad7ac17dee6aea547eb096eb60df726 (22:27): 69b0d3dfe919a6b860a9fac82de52a7e: imagine I want to say that a item is both an Article and a NewsArticle (using schema.org as example here)",
        "171db427cee236fc04af9e5de94e7c39 (22:29): 61831986744b882b4371990cc1863b19: We're implementing Strict, we just haven't gotten it quite shippable yet.",
        "61831986744b882b4371990cc1863b19 (22:30): yeah, that's fine",
        "61831986744b882b4371990cc1863b19 (22:31): i'll make do with non-strict mode",
        "61831986744b882b4371990cc1863b19 (22:31): so the proper behavior in non-strict mode is to fail silently when setting a readonly property?",
        "cc097e0d7183ae8436e7df709553c8c0 (22:31): TabAtkins: i hope the impl is complete when it ships",
        "8b3687499080633e1898fa1dd209ef81 (22:32): Yes",
        "61831986744b882b4371990cc1863b19 (22:32): ok, i can test that",
        "61831986744b882b4371990cc1863b19 (22:32): thanks",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:32): readonly? That *so* ES3. [[Writable]]: false.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:32): :P",
        "8b3687499080633e1898fa1dd209ef81 (22:33): It's rather WebIDL ;)",
        "cc097e0d7183ae8436e7df709553c8c0 (22:33): 8b3687499080633e1898fa1dd209ef81: webidl doesn't have readonly properties!",
        "8b3687499080633e1898fa1dd209ef81 (22:33): It has attributes",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:34): WebIDL doesn't define how to fail when setting it, though. That depends upon the language binding, which defines it by reference to ECMA262.",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:57): 2ad7ac17dee6aea547eb096eb60df726: aren't all NewsArticles Articles?",
        "2ad7ac17dee6aea547eb096eb60df726 (22:57): 69b0d3dfe919a6b860a9fac82de52a7e: yes, in this case it's true, but imagine they were not",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:58): can you give an example that actually represents the case you're thinking of? :-)",
        "2ad7ac17dee6aea547eb096eb60df726 (22:58): or imagine a consumer expect Article, and the page uses NewsArticle",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:58): fix the consumer. or the page.",
        "2ad7ac17dee6aea547eb096eb60df726 (22:58): and the consumer is not smart enough to infer that they are the same type",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:59): it's not a matter of being smart, it's a matter of how the vocabularies are defined",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:59): if NewsArticle says that it's an Article, it's an Article",
        "2ad7ac17dee6aea547eb096eb60df726 (22:59): ok, maybe a different example where you would want to use totally different vocabularies",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:59): and the consumer should implement the spec",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:59): can you give a concrete example? it's hard to argue hypotheticals",
        "2ad7ac17dee6aea547eb096eb60df726 (22:59): 69b0d3dfe919a6b860a9fac82de52a7e: where would it say that NewsArticle is also Article?",
        "2ad7ac17dee6aea547eb096eb60df726 (22:59): in the vocabulary?",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:59): in the spec for NewsArticle",
        "2ad7ac17dee6aea547eb096eb60df726 (22:59): oh, it's possible to model such relationships?",
        "2ad7ac17dee6aea547eb096eb60df726 (23:00): note that I would not want to hard code this logic in my app, but rather use what ever hierarchy is defined in the vocab",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:00): You just write, in the spec, &quot;User agents must treat all items that are NewsArticles as also being Articles&quot;",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:00): or whatever it is you want to say",
        "2ad7ac17dee6aea547eb096eb60df726 (23:01): 69b0d3dfe919a6b860a9fac82de52a7e: ok, but I write this in HTML, how do I write this in a format that my app can understand",
        "2ad7ac17dee6aea547eb096eb60df726 (23:02): ok, here is an example taken from the spec for @itemprop: &lt;h1 itemprop=&quot;name http://example.com/fn&quot;&gt;Hedral&lt;/h1&gt;",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:02): how do you mean?",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:02): what's your app?",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:02): i'm confused",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:03): the app has to implement these vocabularies, right? so wherever you implement the vocabulary, you make it support the spec that defines the vocab",
        "2ad7ac17dee6aea547eb096eb60df726 (23:03): could I write &lt;h1 itemprop=&quot;http://vocab.org/TypeA h ttp://example.com/SomeTypeB&quot;&gt;",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:03): not per the current spec, no",
        "2ad7ac17dee6aea547eb096eb60df726 (23:03): sorry let me rewrite the ex.",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:03): but i don't know why you would want to do that",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:03): or what it would mean",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:03): (processing-wise)",
        "2ad7ac17dee6aea547eb096eb60df726 (23:03): &lt;div itemtype=&quot;http://vocab.org/TypeA http://example.com/SomeTypeB&quot;&gt;",
        "2ad7ac17dee6aea547eb096eb60df726 (23:04): (ignore the hierarchy thing for a min ;) )",
        "2ad7ac17dee6aea547eb096eb60df726 (23:04): only look at the last example",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:04): ok",
        "2ad7ac17dee6aea547eb096eb60df726 (23:05): I defined two type, e.g. this could be for two different vocabulary, schema.org and Facebook for the second",
        "2ad7ac17dee6aea547eb096eb60df726 (23:05): does that make more sense",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:05): what doesn't make sense is why you would make one item be two things",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:05): it would be like having one element be both a &lt;p&gt; and an &lt;ol&gt;",
        "2ad7ac17dee6aea547eb096eb60df726 (23:06): well, because Facebook and schema.org will not expect/understand the same types",
        "2ad7ac17dee6aea547eb096eb60df726 (23:06): they each expect to find their own type",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:06): so have two items",
        "2ad7ac17dee6aea547eb096eb60df726 (23:06): otherwise they ignore you",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:06): if you make them the same item, how would you know what the properties meant?",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:06): say you had:",
        "2ad7ac17dee6aea547eb096eb60df726 (23:06): but I do not want to repeat HTML content!",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:07): &lt;div itemscope itemtype=&quot;http://example.com/school http://example.com/socioeconomic&quot;&gt; &lt;span itemprop=class&gt;A&lt;/span&gt; &lt;/div&gt;",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:07): and suppose the http://example.com/school vocabulary defines itemprop=class as defining the name of a classroom",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:07): and http://example.com/socioeconomic defines itemprop=class as defining the name of a socioeconomic level (poor, rich, etc)",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:07): what does the page mean?",
        "2ad7ac17dee6aea547eb096eb60df726 (23:09): well, you would not use that ambigious token in itemprop, but the full URLs instead",
        "2ad7ac17dee6aea547eb096eb60df726 (23:10): note you would be dealing with two different domain names",
        "2ad7ac17dee6aea547eb096eb60df726 (23:11): let me wip up the complete example",
        "2ad7ac17dee6aea547eb096eb60df726 (23:12): let's use this one:",
        "2ad7ac17dee6aea547eb096eb60df726 (23:12): &lt;div itemscope itemtype=&quot;http://schema.org/School http://facebook.com/School&quot;&gt;",
        "2ad7ac17dee6aea547eb096eb60df726 (23:12): &lt;span itemprop=&quot;http://schema.org/classname http://facebook.com/class&quot;&gt;A&lt;/span&gt;",
        "2ad7ac17dee6aea547eb096eb60df726 (23:12): &lt;/div&gt;",
        "2ad7ac17dee6aea547eb096eb60df726 (23:13): 69b0d3dfe919a6b860a9fac82de52a7e: now, @itemprop is valid I believe, but is @itemtype valid like that?",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:13): you're not answering the question... what if the two vocabularies both defined &quot;class&quot;, and you use it? you can't just say &quot;don't do that&quot;. We have to define what it means if someone does it anyway.",
        "2ad7ac17dee6aea547eb096eb60df726 (23:13): I agree, so the @itemtype is limited to one for avoiding that problem, right?",
        "2ad7ac17dee6aea547eb096eb60df726 (23:13): one token",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:17): yes",
        "2ad7ac17dee6aea547eb096eb60df726 (23:20): thanks 69b0d3dfe919a6b860a9fac82de52a7e, that's what I wanted to know - sorry for the somewhat lengthy/confusing questions :)",
        "cc097e0d7183ae8436e7df709553c8c0 (23:20): anyone know how filesaver is supposed to work? surely the user has to choose a folder at some point? http://forums.whatwg.org/bb3/viewtopic.php?f=3&amp;t=4650",
        "cc097e0d7183ae8436e7df709553c8c0 (23:23): 2ad7ac17dee6aea547eb096eb60df726: you can do http://foolip.org/microdatajs/live/?html=%3Cdiv%20itemscope%20itemtype%3D%22http%3A%2F%2Fschema.org%2FSchool%22%20itemref%3Da%3E%3C%2Fdiv%3E%0A%3Cdiv%20itemscope%20itemtype%3D%22http%3A%2F%2Ffacebook.com%2FSchool%22%20itemref%3Da%3E%3C%2Fdiv%3E%0A%3Cspan%20id%3Da%20itemprop%3D%22http%3A%2F%2Fschema.org%2Fclassname%20http%3A%2F%2Ffacebook.com%2Fclass%22%3EA%3C%2Fspan%3E",
        "2ad7ac17dee6aea547eb096eb60df726 (23:24): cc097e0d7183ae8436e7df709553c8c0: oh, thanks! looks like complicated markup though, but I guess that's the only way",
        "cc097e0d7183ae8436e7df709553c8c0 (23:25): though i guess the vocabularies wouldn't allow itemprops from other vocabularies like that",
        "2ad7ac17dee6aea547eb096eb60df726 (23:25): cc097e0d7183ae8436e7df709553c8c0: why not?",
        "2ad7ac17dee6aea547eb096eb60df726 (23:25): are they required to exist at all anyway?",
        "cc097e0d7183ae8436e7df709553c8c0 (23:26): well they could allow it, but i think in general vocabularies would ban anything &quot;unknown&quot;",
        "2ad7ac17dee6aea547eb096eb60df726 (23:26): afaik, you could even make up your own property names",
        "2ad7ac17dee6aea547eb096eb60df726 (23:26): cc097e0d7183ae8436e7df709553c8c0: interesting, but the document would still validate at the HTML5 level right?",
        "cc097e0d7183ae8436e7df709553c8c0 (23:26): yeah",
        "2ad7ac17dee6aea547eb096eb60df726 (23:27): it's just if whatever application checks that all property name exist and refuse to work if it does not find the property in the vocab",
        "2ad7ac17dee6aea547eb096eb60df726 (23:27): but there is no built validation like that",
        "2ad7ac17dee6aea547eb096eb60df726 (23:27): in HTML5 microdata parsing",
        "cc097e0d7183ae8436e7df709553c8c0 (23:29): foolip: feature request: save feature for short urls :)",
        "2ad7ac17dee6aea547eb096eb60df726 (23:29): lol"
    ],
    "person_ids": [
        "2ad7ac17dee6aea547eb096eb60df726",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "61831986744b882b4371990cc1863b19",
        "cc097e0d7183ae8436e7df709553c8c0",
        "8b3687499080633e1898fa1dd209ef81",
        "a11aabeeceeae6b8cb5d12ea06b56554",
        "171db427cee236fc04af9e5de94e7c39"
    ]
}