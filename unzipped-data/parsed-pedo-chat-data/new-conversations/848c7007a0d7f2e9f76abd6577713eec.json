{
    "id": "848c7007a0d7f2e9f76abd6577713eec",
    "messages": [
        "65325d50b2e25aca54bc871b89758c9c (21:50): 69b0d3dfe919a6b860a9fac82de52a7e: I'm not sure tests 26 and 27 are a good idea, since it is an obscure case and the obvious ways preserving connected ancestors as well as descendants across GC would likely hurt DOM performance",
        "65325d50b2e25aca54bc871b89758c9c (21:50): (I guess we can see if it does for real though)",
        "65325d50b2e25aca54bc871b89758c9c (21:55): the expected behavior also could cause web apps to unintentionally hold down larger chunks of memory than they might expect (XHR, grab a single node without removing it, now you have extended the lifetime of the whole result document)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:56): edb259c0e0038f38bb200bc20c8cbf7e pig",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:57): can't type",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:57): that was meant to be: /msg edb259c0e0038f38bb200bc20c8cbf7e ping",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:07): 65325d50b2e25aca54bc871b89758c9c: i disagree, iv'e run into this kind of thing before, as have others, and i think it's clear that the DOM requires browsers to not be GCing accessible stuff",
        "65325d50b2e25aca54bc871b89758c9c (22:09): 69b0d3dfe919a6b860a9fac82de52a7e: I'm not sure it's particularly clear that the DOM requires anything on this",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:10): i think you'd be hard-pressed to argue that the DOM allows you to just start setting parentNode to null whimsically",
        "65325d50b2e25aca54bc871b89758c9c (22:11): I don't think it's clear that it doesn't require it either - just not sure &quot;clear&quot; is a word that applies",
        "65325d50b2e25aca54bc871b89758c9c (22:11): it doesn't say anything about what operations not mentioned by the DOM spec may mutate the DOM",
        "65325d50b2e25aca54bc871b89758c9c (22:12): it's clearly not &quot;none&quot;, since other specs require various things to mutate the DOM",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:12): so you're saying that if IE started moving nodes around randomly in the DOM, it would be conforming?",
        "65325d50b2e25aca54bc871b89758c9c (22:12): I can see how a sensible person might not think &quot;allocating memory&quot; shouldn't be one of those operations",
        "65325d50b2e25aca54bc871b89758c9c (22:12): well, it would be a perverse interpretation of the spec",
        "65325d50b2e25aca54bc871b89758c9c (22:13): but I don't think the spec is &quot;clear&quot; on this",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:13): there is no normative prose anywhere that allows the parentNode to change, as far as i can tell",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:13): in this spec or any other",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:14): and since parentNode is defined as returning the parent, and appendChild is defined as setting the parent, i don't see how you can have an interpretation that allows the parent to change",
        "65325d50b2e25aca54bc871b89758c9c (22:14): you mean, &quot;as a result of garbage collection&quot;, or no prose allows the parentNode to change ever?",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:14): i meant as a result of the browser randomly deciding to do it (e.g. as part of GC)",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:15): if there was some text that could define _when_ exactly the parent would be lost, then ok",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:15): but there isn't, and browsers are losing the parent in different ways because of it",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:16): this is an interoperability nightmare that should be fixed by not dropping parts of the DOM on the floor",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:16): it's not like you're actually saving memory intentionally on real sites because of this",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:16): bbiab",
        "65325d50b2e25aca54bc871b89758c9c (22:16): it's true that no normative prose explicitly allows that, but nor does it explicitly forbid it",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:16): b8810fee2f4a71f849f3f7409546d1d9, actually, we have magic behavior that approaches Gecko, just not for all public identifiers that Gecko recognizes, such as MathML",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:16): 65325d50b2e25aca54bc871b89758c9c: yes it does! it says it should return the parent, and the parent was set by appendChild",
        "65325d50b2e25aca54bc871b89758c9c (22:17): 69b0d3dfe919a6b860a9fac82de52a7e: but clearly there's things not in the DOM Core spec which would require you to change the parent",
        "65325d50b2e25aca54bc871b89758c9c (22:17): even things that do not result from any DOM call (like parsing a document)",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:17): 65325d50b2e25aca54bc871b89758c9c: and none of those things are happening here",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:18): 65325d50b2e25aca54bc871b89758c9c: indeed _nothing_ is happening here, it's one piece of script",
        "65325d50b2e25aca54bc871b89758c9c (22:18): if script is executing then obviously something is happening",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:19): 65325d50b2e25aca54bc871b89758c9c: i mrsn nothing is happening to the DOM, between the setting and the checking",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:19): 65325d50b2e25aca54bc871b89758c9c: specs cannot say what must not happen, there's an infinite list of things that would have to be listed",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:20): 65325d50b2e25aca54bc871b89758c9c: &quot;browsers must not set attributes for no reason. browsers must not change the values of attributes for no reason. browsers must not...&quot;",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:20): 65325d50b2e25aca54bc871b89758c9c: if you go down this line of argument, then almost any bug can be explained as &quot;well the spec doesn't say it _shouldn't_ happen on the 3rd of september at 2pm...&quot;",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:21): really must go, will be back shortly",
        "65325d50b2e25aca54bc871b89758c9c (22:22): I'm not sure if there's a justification in the text of DOM Core why html parsing can mutate the DOM but garbage collection (or occurence of a random date) is not, but I admit I can't think of how you would write it to make that clear",
        "65325d50b2e25aca54bc871b89758c9c (22:24): it can't just be &quot;another standard says so&quot; because I don't think the fact that insertAdjacentHTML mutates the DOM would be considered nonconforming to the DOM spec",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:25): HTML parsing defines what DOM mutations are to be performed",
        "65325d50b2e25aca54bc871b89758c9c (22:25): but it does indeed seem lame to assume that therefore anything is permitted",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:25): which is slightly different I'd say",
        "65325d50b2e25aca54bc871b89758c9c (22:26): well, I could write a document saying what DOM mutations may or may not be performed when garbage collecting, but I don't think that should retroactively change the meaning of DOM Core",
        "65325d50b2e25aca54bc871b89758c9c (22:27): and no spec defines what DOM mutations are to be performed when calling insertAdjacentHTML",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:27): no spec defines insertAdjacentHTML",
        "65325d50b2e25aca54bc871b89758c9c (22:28): that is true",
        "042dd99eb0ff8653814e445ca0093427 (22:29): defining side effects that can happen during GC is nasty, because GC is very non-deterministic",
        "65325d50b2e25aca54bc871b89758c9c (22:29): there is a spec that defines ECMAScript garbage collection, namely ECMA-262",
        "65325d50b2e25aca54bc871b89758c9c (22:31): but it's probably super vague about participation of host objects in GC",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:32): in the name of interop it's probably good that Acid3 includes things that really annoy each of the browser vendors",
        "65325d50b2e25aca54bc871b89758c9c (22:32): the logical model is that child references are strong references and parent references are weak references",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:32): the 0 bytes in the DOM issue bites us",
        "042dd99eb0ff8653814e445ca0093427 (22:33): surely by now all browser vendors are too jaded to be annoyed by anything",
        "65325d50b2e25aca54bc871b89758c9c (22:33): yeah",
        "042dd99eb0ff8653814e445ca0093427 (22:35): 65325d50b2e25aca54bc871b89758c9c: weak references suck too. especially when they're not explicit",
        "65325d50b2e25aca54bc871b89758c9c (22:35): actually I think it would be easy to make the specific acid3 test for this pass, the hard case would be preserving pieces of the DOM that have never been referenced from JS",
        "042dd99eb0ff8653814e445ca0093427 (22:36): if (elem.parentNode) { elem.parentNode.setAttribute(...) }",
        "042dd99eb0ff8653814e445ca0093427 (22:36): sure hope you didn't GC in there!",
        "042dd99eb0ff8653814e445ca0093427 (22:37): at least with explicit weak refs like in Java, I have to declare the weak ref and then do a .get() to get the real reference, so I know something's up",
        "65325d50b2e25aca54bc871b89758c9c (22:38): I'm not saying it's great behavior, it just happens to be what we lovingly reverse-engineered from Mozilla as best we could",
        "042dd99eb0ff8653814e445ca0093427 (22:39): oh, I didn't know there was a compatibility argument",
        "65325d50b2e25aca54bc871b89758c9c (22:40): I'm not sure compatibility cares that much one way or the other",
        "042dd99eb0ff8653814e445ca0093427 (22:40): so why'd you reverse engineer it?",
        "65325d50b2e25aca54bc871b89758c9c (22:40): (about preserving parents in detached DOM fragments)",
        "65325d50b2e25aca54bc871b89758c9c (22:40): there was some site that required specific things about preserving DOM wrappers for descendants of detached DOM subtrees years ago",
        "65325d50b2e25aca54bc871b89758c9c (22:41): (actually worse than a site, I think it was an &quot;enterprise&quot; app's html interface)",
        "b8810fee2f4a71f849f3f7409546d1d9 (22:41): doesn't the Web JS concurrency model guarantee that if you walk down the tree, you can walk back up in the same method without someone else mutating the tree in ways that make weak refs collectable?",
        "65325d50b2e25aca54bc871b89758c9c (22:41): so we tested what other browsers did for parents or siblings of detached trees across GC",
        "65325d50b2e25aca54bc871b89758c9c (22:42): b8810fee2f4a71f849f3f7409546d1d9: if what you're getting at is that 042dd99eb0ff8653814e445ca0093427's example can't possibly fail if &quot;eleme&quot; is in the document tree then I think you are right",
        "042dd99eb0ff8653814e445ca0093427 (22:43): yeah",
        "042dd99eb0ff8653814e445ca0093427 (22:43): but if it isn't...",
        "b8810fee2f4a71f849f3f7409546d1d9 (22:43): 65325d50b2e25aca54bc871b89758c9c: I meant 042dd99eb0ff8653814e445ca0093427's case, yes",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:43): one thing to consider is that any argument that could be made to say test 23 is invalid could also be used to make test 99 invalid",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:44): er, s/23/26/",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:44): and i really don't think you want test 99 to be invalid",
        "65325d50b2e25aca54bc871b89758c9c (22:44): if elem is not in the document tree then indeed weird things could happen in very speculative theory, but in fact won't, since there's nothing to trigger a GC at times that no temporary expression holds a reference",
        "b8810fee2f4a71f849f3f7409546d1d9 (22:44): I still don't understand when parentNode is a weak ref to something for which there isn't a reciprocal hard ref",
        "b8810fee2f4a71f849f3f7409546d1d9 (22:44): isn't parentNode nulled automatically if you detach a node from the tree?",
        "65325d50b2e25aca54bc871b89758c9c (22:45): if you removeChild, yes, it is nulled",
        "65325d50b2e25aca54bc871b89758c9c (22:46): the case where it is effectively a weak ref in WebKit (and was in Gecko and IE at least last time I tested) is if you have node A containing node B in document D, then you remove node A from the document, keep a reference to node B, and drop all your references to node A",
        "b8810fee2f4a71f849f3f7409546d1d9 (22:47): hmm. interesting case",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:47): the gc bg fails in gecko differently than webkit",
        "042dd99eb0ff8653814e445ca0093427 (22:47): FWIW it still is weak in Gecko, we fail testcase 26, but we have enough infrastructure to fix it pretty easily post-FF3",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:47): in one the ndoes have to still be in the doc, in the other the nodes have to be outside of the dic",
        "65325d50b2e25aca54bc871b89758c9c (22:47): 69b0d3dfe919a6b860a9fac82de52a7e: test 99 is comedy gold",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:48): indeed",
        "b8810fee2f4a71f849f3f7409546d1d9 (22:48): I don't recall seeing any weak refs in Java DOM impls, but then weak refs wasn't what I was paying attention to",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:48): b8810fee2f4a71f849f3f7409546d1d9: you have to have weak refs if you're using ref counting, otherwise you'll never reach zero",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:48): b8810fee2f4a71f849f3f7409546d1d9: not so much an issue with other GC schemes",
        "042dd99eb0ff8653814e445ca0093427 (22:49): you wouldn't expect to, Java has a real collector so cyclic structures were never a problem",
        "65325d50b2e25aca54bc871b89758c9c (22:49): Java DOM impls probably have strong refs both ways because Java DOMs would be written in pure Java",
        "b8810fee2f4a71f849f3f7409546d1d9 (22:49): ah right.",
        "042dd99eb0ff8653814e445ca0093427 (22:50): 65325d50b2e25aca54bc871b89758c9c: &quot;if elem is not in the document tree then indeed weird things could happen in very speculative theory, but in fact won't&quot; ... I'm not sure about that. I can easily imagine running unrelated windows in different threads sharing a common JS heap",
        "042dd99eb0ff8653814e445ca0093427 (22:51): or the Gears thread stuff",
        "65325d50b2e25aca54bc871b89758c9c (22:53): 042dd99eb0ff8653814e445ca0093427: that's the kind of stuff that I considered to be in the &quot;speculative theory&quot; category (though Gears might potentially be less speculative)",
        "042dd99eb0ff8653814e445ca0093427 (23:02): ok",
        "042dd99eb0ff8653814e445ca0093427 (23:03): we can differ on how far-fetched it is",
        "042dd99eb0ff8653814e445ca0093427 (23:05): I think the only thing preventing that case from occurring in Gecko + Gears today is where we place our GC safe points",
        "042dd99eb0ff8653814e445ca0093427 (23:05): so I don't see it as all that far-fetched",
        "042dd99eb0ff8653814e445ca0093427 (23:10): anyway, if that doesn't bother you, there's still the problem that inserting almost any code between the test of parentNode and the use of parentNode could allocate and trigger GC itself",
        "a131216c7af242e66537a58b4ca7c9f9 (23:17): 69b0d3dfe919a6b860a9fac82de52a7e: does safari 3 fail acid3's text-shadow by having the shadow too close to the text?",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:17): what maks you ask that?",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:17): makes",
        "a131216c7af242e66537a58b4ca7c9f9 (23:17): its shadow is close to the text &quot;Acid3&quot; than in the reference",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:18): not on my machine...",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:18): but yes, if it is not pixel perfect, then it has failed",
        "a131216c7af242e66537a58b4ca7c9f9 (23:18): ok",
        "edb259c0e0038f38bb200bc20c8cbf7e (23:22): are you testing for multiple shadows?",
        "edb259c0e0038f38bb200bc20c8cbf7e (23:22): that will make Safari fail",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:22): no, just the one",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:22): multiple shadows are out in css3, iirc",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:23): ok i found a way to make the shift-click thing work in 3/4 browsers, up from 2/4",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:23): still doesn't work in opera though",
        "edb259c0e0038f38bb200bc20c8cbf7e (23:23): they're not out",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:23): i thought they were out?",
        "edb259c0e0038f38bb200bc20c8cbf7e (23:23): afaict they're not",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:23): huh",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:23): oh well",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:23): they should be :-",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:23): )",
        "edb259c0e0038f38bb200bc20c8cbf7e (23:24): if you use document.close() it might start working in Opera",
        "edb259c0e0038f38bb200bc20c8cbf7e (23:24): i haven't actually tested that myself though",
        "edb259c0e0038f38bb200bc20c8cbf7e (23:25): oh, you do that now",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:25): well if you work out something that will make it work in opera, let me know",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:25): in the meantime, i'm out of here",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:25): later",
        "edb259c0e0038f38bb200bc20c8cbf7e (23:25): use &lt;pre&gt;",
        "edb259c0e0038f38bb200bc20c8cbf7e (23:26): thought that requires some additional effort to escape the rest"
    ],
    "person_ids": [
        "65325d50b2e25aca54bc871b89758c9c",
        "a11aabeeceeae6b8cb5d12ea06b56554",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "042dd99eb0ff8653814e445ca0093427",
        "b8810fee2f4a71f849f3f7409546d1d9",
        "a131216c7af242e66537a58b4ca7c9f9"
    ]
}