{
    "id": "58c6875cce40b09cc0071553a9da8d85",
    "messages": [
        "353fa4cc248867e98de9cab7d122c320 (00:45): doesn't work for me either",
        "8c8837db54a2907cacd8633547977e33 (00:56): heh, that almost makes me wonder if it only works from MIT (W3C being there)",
        "8c8837db54a2907cacd8633547977e33 (00:57): nope, works from a dreamhost server",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:00): w3c regularly automatically block google",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:00): maybe they did the same to mozilla this time for some reason",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:01): (it's part of their rather over-zealous DOS protections)",
        "353fa4cc248867e98de9cab7d122c320 (01:03): how do i firewalled NAT?",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:18): 8c8837db54a2907cacd8633547977e33, I think what happens is that people use XML-processing programs that automatically request DTDs when processing XML files.  They don't notice the four billion network requests to W3C's servers that happen every time they run through their database of XHTML files or whatever.  So the W3C detects this and blocks such sites at the firewall automatically.",
        "8c8837db54a2907cacd8633547977e33 (01:19): &quot;hoisted by their own petard&quot;, as it were",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:39): if you go to a page that serves a 500 but declares a manifest, we cache it",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:39): the next time you go there, you see the cached copy, and we try to update it",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:40): but we find it's 500, so we don't update its entry in the cache (we update the rest of the cache)",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:40): this continues forever, with you seeing the first 500 rather than any later updates, until it either becomes 200, 404, or 410, or the manifest becomes 410",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:40): now the question is:",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:41): if it's a 200 page with no-store, instead of a 500 page:",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:41): should we do the same thing?",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:46): i guess i'll treat it like a 410/404",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:47): which is kinda weird already",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:55): 69b0d3dfe919a6b860a9fac82de52a7e, wait, so there's a whole section that normatively explains authoring conformance requirements for the HTML syntax, but conformance checker requirements are totally different?  What happens if there are contradictions?  Conformance checkers are required to report things that aren't authoring conformance errors, or are required not to report things that are?",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:55): (Are there known contradictions?)",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:56): there had better not be contradictions",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:56): technically i suppose i could have the spec not require that validators use the parser spec",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:56): at the time i wrote that they should use it, i hadn't written the other section, and we already had validators",
        "811d869beb2463e4828deccf1287ac15 (02:02): Speaking of validators.... I wish that W3C Jigsaw (CSS) Validator would recognise browser-specific entities such as -moz-* and -webkit-* and -ms-* and -khtml-*",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:02): &quot;Recognize&quot; in what fashion?",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:02): Claim that vendor-specific, nonstandard extensions are valid?",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:02): Or give a more informative error message, or what?",
        "811d869beb2463e4828deccf1287ac15 (02:02): In the sense that it won't give an error.",
        "e0e94c127f39e71c3edbff2f5da3d744 (02:02): 811d869beb2463e4828deccf1287ac15: there is an option to allow them, now",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:02): That wouldn't make much sense, since CSS says they're invalid.",
        "811d869beb2463e4828deccf1287ac15 (02:02): paul: Oh? Where's that?",
        "e0e94c127f39e71c3edbff2f5da3d744 (02:03): Vendor Extensions: Warnings",
        "e0e94c127f39e71c3edbff2f5da3d744 (02:03): http://paulirish.com/i/5e71.png",
        "811d869beb2463e4828deccf1287ac15 (02:04): paul: That still doesn't help.",
        "e0e94c127f39e71c3edbff2f5da3d744 (02:04): why not",
        "811d869beb2463e4828deccf1287ac15 (02:04): http://jigsaw.w3.org/css-validator/validator?uri=http%3A%2F%2F76.11.58.232%2Fcss%2Fscreen.css&amp;profile=css3&amp;usermedium=all&amp;warning=1&amp;vextwarning=true&amp;lang=en",
        "e0e94c127f39e71c3edbff2f5da3d744 (02:05): looks right to me. it doesnt recognize vendor prefixed gradient syntax",
        "e0e94c127f39e71c3edbff2f5da3d744 (02:05): and the others are marked as warnings",
        "811d869beb2463e4828deccf1287ac15 (02:06): It's still irritable.",
        "e0e94c127f39e71c3edbff2f5da3d744 (02:08): i will not disagree.",
        "e0e94c127f39e71c3edbff2f5da3d744 (02:08): 811d869beb2463e4828deccf1287ac15: the css validator team is looking for help maintaing the codebase to keep up with these changes, if you're interested",
        "811d869beb2463e4828deccf1287ac15 (02:09): Sure. It is something I strive to do; keeping up to the latest in web initiatives and standardizations created by the browsers.",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:10): 811d869beb2463e4828deccf1287ac15: it's supposed to be irritable. The whole point of vendor prefixes is to irritate authors so that they won't use them except when experimenting to give feedback to the working group and browser vendors.",
        "e0e94c127f39e71c3edbff2f5da3d744 (02:10): 811d869beb2463e4828deccf1287ac15: http://lists.w3.org/Archives/Public/www-validator-css/ shoot a message onto this list and ask if anything could be done and how you could help",
        "06cb330920ae58e1614c9145d983b3d6 (02:23): 69b0d3dfe919a6b860a9fac82de52a7e: that's ... just silly, heh",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:23): what's silly?",
        "06cb330920ae58e1614c9145d983b3d6 (02:24): annoying people isn't going to stop them from using the APIs; it'll just annoy them",
        "811d869beb2463e4828deccf1287ac15 (02:24): paul: I just e-mailed.",
        "e0e94c127f39e71c3edbff2f5da3d744 (02:24): :)",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:24): 06cb330920ae58e1614c9145d983b3d6: how can we stop them from using the apis?",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:24): It's already annoying enough that you have to write the same markup four times to get it to work in all browsers.",
        "06cb330920ae58e1614c9145d983b3d6 (02:24): i've always seen the api prefixes as just to localize any dependancies on early behavior to that prefix and that vendor, so they don't have to affect the final API",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:24): No more annoyance than that is necessary.  :)",
        "06cb330920ae58e1614c9145d983b3d6 (02:24): ... you can't, of course",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:24): 69b0d3dfe919a6b860a9fac82de52a7e, if you want to stop them from using the APIs, then don't implement them.",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:24): Easy.",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:24): 88d4d34a8064a4ff39fd5e144eea7762: we need to implement them to get implementation experience",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:24): Then don't enable them.",
        "06cb330920ae58e1614c9145d983b3d6 (02:24): i was annoyed when WebKit prefixed (iirc) the URL interface when it was previously unprefixed, but the only affect was to make me grumble for a minute and then update my code",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:25): Now, if you want *authoring* experience too, well, you want people using them.",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:25): 88d4d34a8064a4ff39fd5e144eea7762: we need to enable them to get authoring experience",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:25): Okay, so then you do want people using them.",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:25): Presumably on production sites, so they get real-world experience.",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:25): to a small extent",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:25): To a large extent, because no matter what, only a tiny percentage of authors will provide any feedback.",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:25): but they're still proprietary technologies, so we don't want them used like regular features",
        "06cb330920ae58e1614c9145d983b3d6 (02:25): (as an addendum to the above--another point being as a clear declaration to authors that the API is unstable)",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:25): anyway i'm not sure what we're arguing ehre :-)",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:26): Anything that works will be used like a regular feature.",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:26): If it doesn't work, it won't be used and you won't get authoring feedback.",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:26): Take your pick.",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:26): i'm happy with the current situation",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:26): In practice authors use them and it works out fine, as long as the prefix gets dropped reasonably soon.",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:27): (you know, unlike border-radius)",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:27): border-radius is mainly funny because it's taken so long that the trend for rounded corners has kinda passed already :-)",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (02:27): sometimes it would be nice if feature-detection would be easier. e.g. if i have to apply some custome javascript magic for &lt;meter&gt; elements or if the browser already styles it for me. things like that",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:28): yeah that's a harder problem without js",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (02:28): need js to style the meter element atm. since i can't use attr() inside calc()",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (02:29): the progress bar look has to depend on the min/max/value attributes after all",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:30): if you have js it's pretty easy to just stick a class on the elements that need styling",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (02:30): yeah",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (02:30): but you need to figure out if the browser doesn't do it already for you",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (02:31): or think of input[type=number] ... do i add a spinner manually or does the browser already provide one?",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (02:33): modernizr helps with most things though",
        "a3f19f90edf0a0893c7847d08016abe3 (02:42): 8c8837db54a2907cacd8633547977e33, I'm told the w3.org/Bugs/ access is fixed now",
        "a3f19f90edf0a0893c7847d08016abe3 (02:42): 8c8837db54a2907cacd8633547977e33, something to do with their preparations for world ipv6 day -- from the mozilla network is was connecting via ipv6",
        "8c8837db54a2907cacd8633547977e33 (02:43): heh",
        "8c8837db54a2907cacd8633547977e33 (02:44): is not quite certain that making a spec change that suddenly declares common wordpress templates not-valid is a good idea, but meh",
        "8c8837db54a2907cacd8633547977e33 (02:44): I can probably update my templates in about five minutes to remove it, if I feel motivated",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:50): Aren't lots of the common Wordpress templates invalid anyway?",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:51): a3f19f90edf0a0893c7847d08016abe3: oh that makes sense, google's network is also ipv6",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (02:52): still 11 minutes to v6 day",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:53): oh wow that's today?",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:53): i had no idea",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:53): watches the process argument between 65325d50b2e25aca54bc871b89758c9c and Roy T. Fielding with interest",
        "88d4d34a8064a4ff39fd5e144eea7762 (02:53): Aw, I'm going to miss the start of IPv6 day by a matter of minutes.  Oh well, no helping it.",
        "65325d50b2e25aca54bc871b89758c9c (02:54): 88d4d34a8064a4ff39fd5e144eea7762: I'm gonna have to duck out cause I can only spend so much time in email during WWDC",
        "8c8837db54a2907cacd8633547977e33 (02:55): 88d4d34a8064a4ff39fd5e144eea7762: plausible",
        "8c8837db54a2907cacd8633547977e33 (02:56): knows he's barely touched his as far as validity's concerned in ages",
        "8c8837db54a2907cacd8633547977e33 (02:56): had to fiddle with a [caption] shortcode I implemented to wrap up figure/figcaption, but I was well aware I was on the bleeding edge doing that",
        "8c8837db54a2907cacd8633547977e33 (02:56): which was figure/legend when I first wrote it"
    ],
    "person_ids": [
        "353fa4cc248867e98de9cab7d122c320",
        "8c8837db54a2907cacd8633547977e33",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "88d4d34a8064a4ff39fd5e144eea7762",
        "811d869beb2463e4828deccf1287ac15",
        "e0e94c127f39e71c3edbff2f5da3d744",
        "06cb330920ae58e1614c9145d983b3d6",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0",
        "a3f19f90edf0a0893c7847d08016abe3",
        "65325d50b2e25aca54bc871b89758c9c"
    ]
}