{
    "id": "06b7286f2eeecfbc9b9494607b99b892",
    "messages": [
        "88d4d34a8064a4ff39fd5e144eea7762 (20:27): notes that Gecko and WebKit accept {delete: 1} as a valid object initializer, but IE and Opera throw a syntax error",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:28): I'm pretty sure ES5 supports Gecko and WebKit.",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:28): Actually, almost totally sure.",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:29): No, wait, my bad, IE supports it.",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:30): Only Opera doesn't.",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:31): Opera also seems to not like x.delete.",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:33): would file a bug at this point if he were able to track its progress, since it seems like something that would be relatively likely to get fixed soon if reported, but . . .",
        "ab7faae5d7b250ea8606486575f8f79c (20:37): 88d4d34a8064a4ff39fd5e144eea7762: The likelihood of it getting fixed is probably independent of your ability to track its progress, if it's something simple like that, and merely satiating your personal curiosity over progress seems less important than leading the web to its full potential by getting such bugs fixed",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:39): ab7faae5d7b250ea8606486575f8f79c, getting such a bug fixed is a sufficiently small contribution toward leading the web to its full potential that I have no qualms about not doing it if I don't have a more personal stake in the matter.  Particularly since a) I would have to interrupt work I'm being paid for on an hourly basis to file the bug; and b) I mentioned it in a channel where lots of Opera employees hang out, and they would in fact be able to file it on paid ti",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:39): me.",
        "65325d50b2e25aca54bc871b89758c9c (20:42): 88d4d34a8064a4ff39fd5e144eea7762: ES5 has the concept of contextual keywords",
        "65325d50b2e25aca54bc871b89758c9c (20:43): 88d4d34a8064a4ff39fd5e144eea7762: ones that are not treated as keywords when they appear in a position like a property name in an object initializer",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:43): 65325d50b2e25aca54bc871b89758c9c, really?  Where does it say that?  As far as I can see, it's more like *nothing* is a keyword when used as a property name in an object initializer, because it's an IdentifierName instead of an Identifier.",
        "65325d50b2e25aca54bc871b89758c9c (20:43): that might be true",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:44): Actually, if I read the spec correctly, {null: &quot;a&quot;} is the same as {&quot;null&quot;: &quot;a&quot;}.  Which is slightly confusing.",
        "65325d50b2e25aca54bc871b89758c9c (20:44): has no idea",
        "65325d50b2e25aca54bc871b89758c9c (20:44): why is that confuing?",
        "65325d50b2e25aca54bc871b89758c9c (20:44): property names are always strings, so obj[null] is by definition the same as obj[&quot;null&quot;]",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:44): Because I'd expect that {null: &quot;a&quot;} means &quot;use the special value null as a key&quot;, not &quot;use the string 'null' as a key and just don't bother with the quotes&quot;.",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:44): Oh, I see.",
        "65325d50b2e25aca54bc871b89758c9c (20:45): it would only be confusing maybe if there was a keyword that has a different value than its own stringification",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:45): So it's like PHP, foo[1] is the same as foo[&quot;1&quot;].",
        "65325d50b2e25aca54bc871b89758c9c (20:45): yes",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:45): That's not confusing, then, no.",
        "65325d50b2e25aca54bc871b89758c9c (20:45): though of course implementations optimize the heck out of numeric property names, at least for arrays",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:45): Well, that's not like PHP, then.  ;)",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:46): has not noticed anything optimized the heck out of in PHP",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:46): Tim Starling is MediaWiki's resident PHP performance guru, and he tells everyone not to use objects, strings, numbers, arrays, or booleans, because all of them are horribly inefficient.",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:47): Instead, we should use MySQL result resources, because those are actually efficient.",
        "06cb330920ae58e1614c9145d983b3d6 (20:47): (i just threw up a little in my mouth)",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:47): (this is taken slightly out of context and may be overgeneralized compared to his original statement)",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:47): (but MediaWiki does try to use MySQL result resources whenever possible instead of converting them to arrays, because they use ridiculously less memory than any built-in type)",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:48): (e.g., we have Title objects to represent page titles, and instead of keeping arrays of Titles, we have a TitleArray class which just keeps a MySQL result resource you feed it and generates the Title objects on the fly as you request them)",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:48): (I think I remember hearing that minimum size of an array in PHP is something like 80 bytes per item)",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:49): gets curious, tests",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:51): http://pastebin.com/2WwB83k2",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:52): This outputs 103.5 on my 32-bit desktop, and 199 on my 64-bit server.",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:53): That's the number of megabytes PHP uses when I create a million-element array whose keys are the integers from 0 to 999999 and whose values are all 0.",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:53): tries something like that in JS",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:55): A similar-ish test in Chrome suggests around 4.5 MB, although it's not really an apples-to-apples comparison.",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:55): But 4.5 MB is only slightly more than you'd get in C, so pretty good.",
        "88d4d34a8064a4ff39fd5e144eea7762 (20:55): gets back to work",
        "b73ab97a354550d76926831c98bffaf5 (21:15): http://d-cent.org/fsw2011/"
    ],
    "person_ids": [
        "88d4d34a8064a4ff39fd5e144eea7762",
        "ab7faae5d7b250ea8606486575f8f79c",
        "65325d50b2e25aca54bc871b89758c9c",
        "06cb330920ae58e1614c9145d983b3d6",
        "b73ab97a354550d76926831c98bffaf5"
    ]
}