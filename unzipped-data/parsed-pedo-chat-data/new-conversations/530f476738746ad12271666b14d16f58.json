{
    "id": "530f476738746ad12271666b14d16f58",
    "messages": [
        "1a11ef65e59a402769635562579a7df6 (07:37): 69b0d3dfe919a6b860a9fac82de52a7e: oh good.  well, I just sent an email about it :)",
        "1a11ef65e59a402769635562579a7df6 (07:37): 69b0d3dfe919a6b860a9fac82de52a7e: said email contained a list of all WebKit bugs re: Acid3",
        "1a11ef65e59a402769635562579a7df6 (07:37): which I imagine you will find interesting :)",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:37): cool",
        "1a11ef65e59a402769635562579a7df6 (07:38): goes to look at why the latest Acid3 file causes webkit to fail completely",
        "1a11ef65e59a402769635562579a7df6 (07:38): ah, it's fixed again, good",
        "1a11ef65e59a402769635562579a7df6 (07:38): except now we're 88% instead of 91% :(",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:40): teehee",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:40): do you know of any bugs in safari or mozilla that i should test?",
        "1a11ef65e59a402769635562579a7df6 (07:41): well, XHTML support is riddled w/ bugs :)",
        "1a11ef65e59a402769635562579a7df6 (07:41): embedding bugs are a big deal for me",
        "1a11ef65e59a402769635562579a7df6 (07:41): 69b0d3dfe919a6b860a9fac82de52a7e: I really think the test could benefit from using something like these: http://trac.webkit.org/projects/webkit/browser/trunk/LayoutTests/fast/js/resources/js-test-pre.js",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:41): i mean DOM or JS things",
        "1a11ef65e59a402769635562579a7df6 (07:41): for making it easier to debug",
        "1a11ef65e59a402769635562579a7df6 (07:42): 69b0d3dfe919a6b860a9fac82de52a7e: I'll think about it next time I'm sorting through old bugs",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:42): you mean reporting something more than the test number?",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:42): i'm not sure exactly what one would need to report",
        "1a11ef65e59a402769635562579a7df6 (07:42): 69b0d3dfe919a6b860a9fac82de52a7e: breaking the ifs down into single tests",
        "1a11ef65e59a402769635562579a7df6 (07:43): instead of if (foo || bar || baz) fail!",
        "1a11ef65e59a402769635562579a7df6 (07:43): it could be",
        "1a11ef65e59a402769635562579a7df6 (07:43): assert(!foo);",
        "1a11ef65e59a402769635562579a7df6 (07:43): assert(!bar)",
        "1a11ef65e59a402769635562579a7df6 (07:43): etc",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:43): and have assert thrown an exception or something?",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:43): i could i guess",
        "1a11ef65e59a402769635562579a7df6 (07:43): sure",
        "1a11ef65e59a402769635562579a7df6 (07:43): and then the wrapper could catch it",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:43): seems tdious",
        "1a11ef65e59a402769635562579a7df6 (07:43): it would certainly make debugging easier. to have things be single-line.  but maybe it's not worth it",
        "1a11ef65e59a402769635562579a7df6 (07:44): it could throw an exception containing the assertion text.",
        "1a11ef65e59a402769635562579a7df6 (07:44): which would allow you to report things better",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:44): then only the first bit that fails would be run",
        "1a11ef65e59a402769635562579a7df6 (07:44): but again, maybe not worth it",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:44): but i guess that's ok",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:45): (of each test)",
        "1a11ef65e59a402769635562579a7df6 (07:45): well, you obviously have lots of time to play with differnet methods for differnet tests",
        "1a11ef65e59a402769635562579a7df6 (07:46): perhaps you'll find one you like better than the current",
        "1a11ef65e59a402769635562579a7df6 (07:46): from a debugging standpoint, watching for when &quot;ok&quot; turns false, and then checking each part of an if () clause can be a bit tedius",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:46): true",
        "1a11ef65e59a402769635562579a7df6 (07:46): goes back to debugging the latest build",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:49): how do i distinguish a DOMException object from a string thrown by 'throw' in a spec-compliant way that works in IE?",
        "1a11ef65e59a402769635562579a7df6 (07:50): 69b0d3dfe919a6b860a9fac82de52a7e: ha!  it looks like test 56 is impossible to pass.  You never set ok to true! :)",
        "1a11ef65e59a402769635562579a7df6 (07:51): assumes he meant to initialize ok to true",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:51): fixed",
        "1a11ef65e59a402769635562579a7df6 (07:51): 69b0d3dfe919a6b860a9fac82de52a7e++ # for testing reserved words!",
        "1a11ef65e59a402769635562579a7df6 (07:51): 69b0d3dfe919a6b860a9fac82de52a7e: that was one thing I *really* wanted to see moz fix",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:52): any others?",
        "1a11ef65e59a402769635562579a7df6 (07:52): or rather.. to see all browsers agree on",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:52): i have no idea how to handle this exception thing",
        "1a11ef65e59a402769635562579a7df6 (07:52): 69b0d3dfe919a6b860a9fac82de52a7e: can't you grab the prototype off of an object in IE?",
        "1a11ef65e59a402769635562579a7df6 (07:52): 69b0d3dfe919a6b860a9fac82de52a7e: or maybe .toNumber() the exception?",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:53): is there a spec that guarantees either of those do anything sane for DOMException? (specifically, a spec that was in CR or better in 2004)",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:54): i'll just throw an object with a 'message' property",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:54): that works everywhere",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:55): i'm amused that test 85 is the only test ie can pass",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:55): i'm not especially targetting IE either",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:55): i'm really only worrying about mozilla and safari bugs, by and large",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:56): (except for things other people have told me to test)",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:56): (like ie's attribute mess)",
        "1a11ef65e59a402769635562579a7df6 (07:56): 69b0d3dfe919a6b860a9fac82de52a7e: it woudl appear that the 30s are misnumbered in comment",
        "1a11ef65e59a402769635562579a7df6 (07:56): it says we fail &quot;39&quot; but according to the comments there is no 39 :)",
        "1a11ef65e59a402769635562579a7df6 (07:57): goes to look at the DOMException spec",
        "1a11ef65e59a402769635562579a7df6 (07:58): what the hell is an &quot;exception&quot; instead of an &quot;interface&quot; in idl",
        "69b0d3dfe919a6b860a9fac82de52a7e (07:59): how is there no 39",
        "1a11ef65e59a402769635562579a7df6 (08:00): reads http://www.w3.org/TR/DOM-Bindings/#idl-exceptions",
        "1a11ef65e59a402769635562579a7df6 (08:01): 69b0d3dfe919a6b860a9fac82de52a7e: so is e.code accessible within IE?",
        "65325d50b2e25aca54bc871b89758c9c (08:02): 69b0d3dfe919a6b860a9fac82de52a7e: maybe not the difference you noticed, but there are some intended behavior differences for eval code, for example &quot;var&quot; declarations create bindings that are *not* DontDelete under eval",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:02): 1a11ef65e59a402769635562579a7df6: that's one of the things i test i believe",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:02): 65325d50b2e25aca54bc871b89758c9c: ah",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:02): 65325d50b2e25aca54bc871b89758c9c: is that in the spec?",
        "1a11ef65e59a402769635562579a7df6 (08:03): 69b0d3dfe919a6b860a9fac82de52a7e: you were just asking for ways to identify DOMExceptions, I had assumed you were looking to replace the e.HIERARCHY_.... check",
        "1a11ef65e59a402769635562579a7df6 (08:03): which fails in Safari and seems to disagree w/ the spec",
        "65325d50b2e25aca54bc871b89758c9c (08:03): 69b0d3dfe919a6b860a9fac82de52a7e: some differences are spec'd here: http://bclary.com/2004/11/07/#a-10.2.2",
        "1a11ef65e59a402769635562579a7df6 (08:04): interesting.  IE always makes .constructor DontEnum",
        "1a11ef65e59a402769635562579a7df6 (08:05): even if it might be",
        "65325d50b2e25aca54bc871b89758c9c (08:05): 69b0d3dfe919a6b860a9fac82de52a7e: ah, in fact that section includes the difference I mentioned",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:05): 1a11ef65e59a402769635562579a7df6: no, i was looking for ways to change the framework to handle custom exceptions. i cheated instead.",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:05): 65325d50b2e25aca54bc871b89758c9c: cool",
        "1a11ef65e59a402769635562579a7df6 (08:05): 69b0d3dfe919a6b860a9fac82de52a7e: I wonder if you can grab at e.constructor and check to see if it's a DOMException that way... I'm not actually sure what e.constructor will get you, 65325d50b2e25aca54bc871b89758c9c would probably know",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:06): i can only rely on things that either work 100% reliably from DOM Level 0, or things that were in specs at CR or later in 2004",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:06): DOM Bindings wasn't even close to either",
        "1a11ef65e59a402769635562579a7df6 (08:07): november 2000: http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187 ?",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:07): 1a11ef65e59a402769635562579a7df6: where's the &quot;.constructor&quot; part of that?",
        "1a11ef65e59a402769635562579a7df6 (08:07): I was thinking .constructor was on Object",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:08): exceptions aren't necessarily Objects",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:08): they're host objects",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:08): which basically (as of 2004) had no defined behaviour",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:08): insofar as .constructor goes",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:08): as far as i can tell",
        "1a11ef65e59a402769635562579a7df6 (08:08): wonders what an exception can be if not an &quot;Object&quot; in JS.  I guess it could be another primitive type...",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:09): host objects don't have to be any primitive type as i understand it",
        "1a11ef65e59a402769635562579a7df6 (08:17): Er r or Obj e c t s",
        "1a11ef65e59a402769635562579a7df6 (08:17): I nst ances of Er r or obj ect s ar e t hr own as except i ons when r unt i me er r or s occur . The Er r or obj ect s may al so",
        "1a11ef65e59a402769635562579a7df6 (08:17): ser ve as base obj ect s f or user - def i ned except i on cl asses.",
        "1a11ef65e59a402769635562579a7df6 (08:18): 69b0d3dfe919a6b860a9fac82de52a7e: according to ECMA e.constructor.prototype.name == &quot;Error&quot; for all runtime exceptions",
        "1a11ef65e59a402769635562579a7df6 (08:19): 69b0d3dfe919a6b860a9fac82de52a7e: assuming I'm reading 15.11 correctly",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:19): sure, but user-thrown exceptions and DOM-thrown exceptions aren't runtime exceptions",
        "1a11ef65e59a402769635562579a7df6 (08:19): correct, they are not required to be based from Error",
        "1a11ef65e59a402769635562579a7df6 (08:19): 69b0d3dfe919a6b860a9fac82de52a7e: user exceptions at least",
        "1a11ef65e59a402769635562579a7df6 (08:19): 69b0d3dfe919a6b860a9fac82de52a7e: I'm not sure about DOM exceptions",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:19): DOM exceptions are effectively user-defined",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:19): or rather, host-defined",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:19): (which is even less useful to us)",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:19): dom bindings addresses all this, luckily",
        "1a11ef65e59a402769635562579a7df6 (08:21): well, throw can throw any arbitrary value, so that's no hel",
        "1a11ef65e59a402769635562579a7df6 (08:21): p",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:22): yeah, i just settled on throwing a { message: &quot;&quot; } object",
        "1a11ef65e59a402769635562579a7df6 (08:22): nice new error messages!",
        "1a11ef65e59a402769635562579a7df6 (08:22): I just reloaded and saw them",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:22): i'm up to test 36",
        "1a11ef65e59a402769635562579a7df6 (08:23): bah.  once again you check e.NAMESPACE_ERR  which isn't supported by any spec I've seen",
        "1a11ef65e59a402769635562579a7df6 (08:24): bitches instead of fixing the &quot;bug&quot;",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:24): DOM2 Core, appendix E",
        "1a11ef65e59a402769635562579a7df6 (08:26): nice new tests, btw.",
        "1a11ef65e59a402769635562579a7df6 (08:27): 69b0d3dfe919a6b860a9fac82de52a7e: sure, and javascript:alert(DOMException.HIERARCHY_REQUEST_ERR) is valid in Safari",
        "1a11ef65e59a402769635562579a7df6 (08:27): 69b0d3dfe919a6b860a9fac82de52a7e: but just because it's a property on the constructor funtion doesn't mean it's a property on the prototype",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:28): do you agree that instances of Node have the node type constants on their objects?",
        "1a11ef65e59a402769635562579a7df6 (08:29): sure.  it's defined for any object conforming to the Node interface: http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1950641247",
        "1a11ef65e59a402769635562579a7df6 (08:29): http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-17189187 DOMException seems to have no such requirement",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:29): the text defining that  for JSis exactly the same as the text defining the constants should be on all exception objects",
        "1a11ef65e59a402769635562579a7df6 (08:30): I don't follow",
        "1a11ef65e59a402769635562579a7df6 (08:30): Foo.bar != (new Foo).bar",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:30): the only reason Node objects have those constants is the text in appendix E that says that Node.ELEMENT_NODE on the &quot;Prototype Object Node&quot; is present",
        "1a11ef65e59a402769635562579a7df6 (08:31): (the easy solution is obviously for us to implement these constants as part of the DOMException interface), I'm just not sure I understand how that's implied form the spec yet",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:31): which is the same text as the text that says that DOMException.INDEX_SIZE_ERR on the &quot;Prototype Object DOMException&quot; is present",
        "1a11ef65e59a402769635562579a7df6 (08:31): ah...",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:31): so either the constants should be present in both cases, or in neither cae",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:32): case",
        "1a11ef65e59a402769635562579a7df6 (08:32): Prototype Object DOMException",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:32): now i agree that the text in the spec sucks, which is why we need the DOM Bindigns spec",
        "1a11ef65e59a402769635562579a7df6 (08:32): I can see how that could be used to mean that the prototype for the object DOMException shoudl have those constants",
        "1a11ef65e59a402769635562579a7df6 (08:32): ok, I'll concede Prototype Object DOMException saves your case",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:32): but i can't see any way to interpret that spec which leads to exceptions being different from nodes in this regard",
        "1a11ef65e59a402769635562579a7df6 (08:33): 69b0d3dfe919a6b860a9fac82de52a7e: well, ignoring appendix E, I think my point is valid",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:33): appendix E is the only reason we have anything in JS at all",
        "1a11ef65e59a402769635562579a7df6 (08:33): 69b0d3dfe919a6b860a9fac82de52a7e: the rest of the spec clearly demands that (new Node).ELEMENT_NODE be valid.",
        "1a11ef65e59a402769635562579a7df6 (08:33): and demands that HIERARCHY_REQUEST_ERR be defined",
        "1a11ef65e59a402769635562579a7df6 (08:33): but makes no such demand on (new DOMException).HIERARCHY_REQUEST_ERR",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:33): i disagree; i don't see anything that says how to interpret that idl other than appendix E",
        "1a11ef65e59a402769635562579a7df6 (08:34): shrugs",
        "1a11ef65e59a402769635562579a7df6 (08:34): goes to prepare the fix",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:35): hehe",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:35): i've done half the tests with error messages",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:35): i'll do the other half in a bit",
        "1a11ef65e59a402769635562579a7df6 (08:36): enjoys having such a formidable spec opponent. :)",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:36): :-)",
        "1a11ef65e59a402769635562579a7df6 (08:39): sighs.  DOMException.idl appears non-autogenerated :("
    ],
    "person_ids": [
        "1a11ef65e59a402769635562579a7df6",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "65325d50b2e25aca54bc871b89758c9c"
    ]
}