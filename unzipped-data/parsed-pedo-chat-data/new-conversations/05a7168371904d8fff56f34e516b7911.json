{
    "id": "05a7168371904d8fff56f34e516b7911",
    "messages": [
        "69b0d3dfe919a6b860a9fac82de52a7e (22:09): 1adba86c435b5fe0f7ea043370b1636b: it's what browsers do, iirc",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:09): (from memory, could be wrong)",
        "1adba86c435b5fe0f7ea043370b1636b (22:10): 69b0d3dfe919a6b860a9fac82de52a7e: firefox doesn't",
        "1adba86c435b5fe0f7ea043370b1636b (22:10): (that's why I'm asking - wondering if there's reason for me to implement that)",
        "1adba86c435b5fe0f7ea043370b1636b (22:11): maybe I can find a chromium bug about it",
        "1adba86c435b5fe0f7ea043370b1636b (22:12): http://www.chromium.org/developers/design-documents/chromium-search-provider-js-support mentions the restriction but doesn't mention reasoning",
        "a9b326df4e6da61c5b6f5e1058be83a2 (22:23): lord help us",
        "8b3687499080633e1898fa1dd209ef81 (22:23): ... the CSSWG is approaching",
        "a9b326df4e6da61c5b6f5e1058be83a2 (22:24): a sign of the End Times",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:48): 1adba86c435b5fe0f7ea043370b1636b: firefox didn't seem to implement the api very thoroughly so iirc i paid more attention to the other uas (IE, mainly)",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:48): 1adba86c435b5fe0f7ea043370b1636b: but it may also just have been something that seemed like a good idea at the time",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:48): 1adba86c435b5fe0f7ea043370b1636b: let me look closer",
        "1adba86c435b5fe0f7ea043370b1636b (22:48): we implement if fully, though IsSearchProviderInstaller is just a stub",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:48): 1adba86c435b5fe0f7ea043370b1636b: pretty sure the origin check in step 4 there is an IE thing",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:49): stub != fully :-P",
        "1adba86c435b5fe0f7ea043370b1636b (22:49): ok ok :)",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:50): i can't think of a security reason for not adding search engines from other sites off hand",
        "1adba86c435b5fe0f7ea043370b1636b (22:50): is &quot;scriptURL&quot; in http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-external-addsearchprovider point 2 a typo?",
        "1adba86c435b5fe0f7ea043370b1636b (22:50): seems like it should be either &quot;url&quot; or &quot;engineURL&quot;",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:50): especially since the opensearch file contains the &quot;real&quot; search URL and opensearch lets you specify any random url",
        "1adba86c435b5fe0f7ea043370b1636b (22:51): (to match non-normative box above, or interface definition)",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:51): yeah step 2 is bogus",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:51): let me fix this",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:51): i'll fix step 2 and remove the check in step 4",
        "1adba86c435b5fe0f7ea043370b1636b (22:51): ok",
        "1adba86c435b5fe0f7ea043370b1636b (22:51): that was easy!",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:51): :-)",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:52): i happened to not be editing anything else at the time :-)",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:52): usually when i'm like &quot;file a bug&quot; it's because i'm in the middle of some other edit",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:53): ok checked in",
        "1adba86c435b5fe0f7ea043370b1636b (22:54): thanks!",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:54): np",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:54): ok let's see if i can finish off the websocket feedback",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:07): I just found a case where execCommand() produces a non-serializable DOM in every browser in exactly the same way: formatBlock with argument &lt;p&gt; on &lt;xmp&gt;foo&lt;/xmp&gt;.  Produces &lt;xmp&gt;&lt;p&gt;foo&lt;/p&gt;&lt;/xmp&gt; in every browser.",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:07): And in my algorithm, except I'm about to fix my algorithm.  :)",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:07): Oh, wait.",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:07): Firefox fails differently: &lt;p&gt;&lt;xmp&gt;foo&lt;/xmp&gt;&lt;/p&gt;.",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:07): Oh well.",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:09): discovers a bug in Firefox's innerHTML serialization algorithm too: &lt;xmp&gt;&lt;&lt;/xmp&gt; serializes to &lt;xmp&gt;&amp;lt;&lt;/xmp&gt;, so if you repeatedly serialize and unserialize you add arbitrarily many &amp;amp;'s",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (23:10): &lt; is not valid between tags",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (23:10): it always has to be escaped",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:11): 5cfdf2d621b2a11df72a2e70bd2ff1a0, well, it's not *valid*, but in &lt;xmp&gt; it works.",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:11): It's valid inside &lt;script&gt; or &lt;style&gt;.",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (23:11): that's CDATA",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:11): &lt;xmp&gt; behaves the same way as those.",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:11): &quot;CDATA&quot; is not a term used by the HTML5 standard.",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:11): But &lt;xmp&gt; parses the same as &lt;script&gt; or whatnot, its contents are made into one big text node until you hit a &lt;/xmp&gt;.",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (23:11): xmp is html5?",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (23:11): i don't think so",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:12): It's not valid, no, but the parsing behavior for it is defined.",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:12): It's a legacy HTML feature that all browsers support.",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:12): &lt;plaintext&gt; too, although that's more useless.",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (23:12): my point is that argueing with the HTML5-parser for non-html5 data doesn't make sense",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:13): Just because it's not conforming doesn't mean it doesn't have to be supported.",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (23:13): since the parser specifically states *where* to switch its parsing mode, e.g. for script tags",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:13): Also for xmp tags.",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:13): Anyway, this is beside the point, it's a browser bug no matter what.",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (23:14): can't find a single mention of &quot;xmp&quot; in the html5 spec",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (23:15): oh, there",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:15): http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#parsing-main-inbody",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:15): Try it yourself, it works in all browsers.",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0 (23:16): &quot;Follow the generic raw text element parsing algorithm.&quot; mhh, i see",
        "b25b6b77a0087ff8385941e5545d32ea (23:39): BTW I would particually like feedback from webkit people on http://lists.w3.org/Archives/Public/public-html-testsuite/2011May/0007.html",
        "b25b6b77a0087ff8385941e5545d32ea (23:40): (well I want feedback from everyone, but Mozilla people already looked and asking Microsoft people on #whatwg seems like the definition of pointless)"
    ],
    "person_ids": [
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "1adba86c435b5fe0f7ea043370b1636b",
        "a9b326df4e6da61c5b6f5e1058be83a2",
        "8b3687499080633e1898fa1dd209ef81",
        "88d4d34a8064a4ff39fd5e144eea7762",
        "5cfdf2d621b2a11df72a2e70bd2ff1a0",
        "b25b6b77a0087ff8385941e5545d32ea"
    ]
}