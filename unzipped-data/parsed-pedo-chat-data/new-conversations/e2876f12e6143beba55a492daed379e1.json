{
    "id": "e2876f12e6143beba55a492daed379e1",
    "messages": [
        "eca88ce0deea1275223afe139b2595e2 (20:59): Sighhh... the Python implementation has 80 fails on the test-suite. As I get closer and close to full implementation, bad test cases are really going to waste my time :-(",
        "eca88ce0deea1275223afe139b2595e2 (21:12): Why doesn't this work? python test_parser.py TestCase.test_tests7_7_simpletree",
        "ab7faae5d7b250ea8606486575f8f79c (21:19): eca88ce0deea1275223afe139b2595e2: Feel free to fix bugs in the Python implementation ;-)",
        "eca88ce0deea1275223afe139b2595e2 (21:21): Yeah, but I have to triage each failure and figure out exactly what's going on before making a call",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:22): eca88ce0deea1275223afe139b2595e2: the tests should be mostly correct per spec except the table taint thing",
        "eca88ce0deea1275223afe139b2595e2 (21:22): Ok.",
        "eca88ce0deea1275223afe139b2595e2 (21:22): Is there any way to make test_parser.py run a single test?",
        "eca88ce0deea1275223afe139b2595e2 (21:22): The obvious command is failing for me",
        "ab7faae5d7b250ea8606486575f8f79c (21:22): You could delete all the other tests, and then run it",
        "ab7faae5d7b250ea8606486575f8f79c (21:22): doesn't know of any other mechanism for that",
        "eca88ce0deea1275223afe139b2595e2 (21:23): That's... not sustainable",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:23): I nkwo nothing about the Python harness",
        "eca88ce0deea1275223afe139b2595e2 (21:23): kk",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:23): I make my Java harness run a single-test file first and I copy and paste the test of interest there",
        "eca88ce0deea1275223afe139b2595e2 (21:23): So... what is the implementation that's closest to being correct?",
        "ab7faae5d7b250ea8606486575f8f79c (21:24): We did have excellent interoperability between HTML5 parsers some time last year",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:24): eca88ce0deea1275223afe139b2595e2: I haven't evaluated wakaba's perl impl., but I believe the V.nu impl. is closer to spec than html5lib at the moment",
        "ab7faae5d7b250ea8606486575f8f79c (21:24): so I blame Hixie for making them all break",
        "eca88ce0deea1275223afe139b2595e2 (21:24): Ok, so I should probably grab a copy of that.",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:24): eca88ce0deea1275223afe139b2595e2: the main failure in the V.nu parser isn't visible in non-browser environments",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:25): I've been postponing fixes until I can figure out this Tp thing.",
        "eca88ce0deea1275223afe139b2595e2 (21:25): not visible in non-browser environments?",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:26): eca88ce0deea1275223afe139b2595e2: not visible in environment where scripts can't run interleaved with the parser",
        "eca88ce0deea1275223afe139b2595e2 (21:26): Sorry, it's unclear to me what &quot;visibility&quot; means",
        "eca88ce0deea1275223afe139b2595e2 (21:27): Hmm... what should JAVA_HOME be?",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:27): eca88ce0deea1275223afe139b2595e2: the spec violation isn't detectable without a script running during the parse",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:28): eca88ce0deea1275223afe139b2595e2: on Mac, /Library/Java/Home",
        "eca88ce0deea1275223afe139b2595e2 (21:28): Ouch.",
        "eca88ce0deea1275223afe139b2595e2 (21:28): (I'm on Intrepid)",
        "eca88ce0deea1275223afe139b2595e2 (21:28): So... you need a JavaScript parser",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:28): eca88ce0deea1275223afe139b2595e2: locate javac",
        "eca88ce0deea1275223afe139b2595e2 (21:28): That's batty",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:28): then remove the bin/javac part",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:28): and put the prefix in JAVA_HOME",
        "eca88ce0deea1275223afe139b2595e2 (21:29): Looks like I don't have javac installed",
        "eca88ce0deea1275223afe139b2595e2 (21:29): Do you recommend openjdk or Sun's jdk?",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:29): openjdk",
        "eca88ce0deea1275223afe139b2595e2 (21:29): So... does Java have any embedded JavaScript engines?",
        "eca88ce0deea1275223afe139b2595e2 (21:30): And how are you going to deal with malicious input?",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:30): eca88ce0deea1275223afe139b2595e2: Java does, but I haven't integrated the parser with it",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:30): eca88ce0deea1275223afe139b2595e2: so it doesn't count as a bug in the Java version currently but it counts as a bug in the C++ version",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:31): (the bug being that the parser still clones formatting element nodes instead of creating new ones)",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:31): eca88ce0deea1275223afe139b2595e2: /usr/lib/jvm/java-6-openjdk on Ubuntu",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:32): eca88ce0deea1275223afe139b2595e2: if you only want the parser instead of the whole validator, it should build if you stick the dependency jars and the sources to Eclipse's default builder",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:32): (or to vanilla javac)",
        "eca88ce0deea1275223afe139b2595e2 (21:33): I need the tree-building and test-suite, but I don't mind if I build the whole thing",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:33): ok",
        "eca88ce0deea1275223afe139b2595e2 (21:33): In the meaantime, what's the 2nd closest to compliant implementation?",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:34): I don't know",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:35): /htmlparser/test-src/nu/validator/htmlparser/test/TokenizerTester.java and /htmlparser/test-src/nu/validator/htmlparser/test/TreeTester.java are the test harnesses",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:35): they take file paths to html5lib-format test data files as arguments",
        "eca88ce0deea1275223afe139b2595e2 (21:35): Great",
        "eca88ce0deea1275223afe139b2595e2 (21:35): Oh no! build fail",
        "eca88ce0deea1275223afe139b2595e2 (21:36): &quot;java.lang.ClassCastException: org.xml.sax.InputSource cannot be cast to nu.validator.xml.TypedInputSource&quot;",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:36): eca88ce0deea1275223afe139b2595e2: that's not a build fail. that's a run fail",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:36): eca88ce0deea1275223afe139b2595e2: something went wrong with the schema setup",
        "eca88ce0deea1275223afe139b2595e2 (21:36): well, it happened while I was running build.py!",
        "eca88ce0deea1275223afe139b2595e2 (21:36): Shall I blow away my copy and try it again?",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:36): eca88ce0deea1275223afe139b2595e2: you can ignore that and look at the parser.",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:36): it has been built by the time that error can happen",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:37): eca88ce0deea1275223afe139b2595e2: build.py is also used for running the validator",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:37): 'all' builds it and then starts the whole thing",
        "eca88ce0deea1275223afe139b2595e2 (21:39): I fail at running Java",
        "eca88ce0deea1275223afe139b2595e2 (21:39): Do I just `java htmlparser/test-src/nu/validator/htmlparser/test/TokenizerTester.java`?",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:39): eca88ce0deea1275223afe139b2595e2: no. I'll look up the incantations",
        "eca88ce0deea1275223afe139b2595e2 (21:39): heh",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:40): argh. build.py doesn't build the test harnesses",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:41): hmm. I don't even remember how to do this without Eclipse with two java source dirs...",
        "eca88ce0deea1275223afe139b2595e2 (21:41): I'm trying python build.py test",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:41): different 'test'",
        "eca88ce0deea1275223afe139b2595e2 (21:41): Ok.",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:42): I guess it's easiest to build the tests and the parser separately",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:42): so under your checkout dir you now have jars/",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:42): and there you have htmlparser.jar",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:43): you need to cd to htmlparser/test-src/",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:43): and run",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:46): scratch run",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:47): you need to create a target dir, say classes as sibling to test-src",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:47): then, in test-src, run",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:47): javac -cp .:../../jars/htmlparser.jar:../../dependencies/jsontools-core-1.5.jar:../../dependencies/antlr.jar -d ../classes/ nu/validator/htmlparser/test/TreeTester.java nu/validator/htmlparser/test/TokenizerTester.java",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:47): javac is such a pain",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:47): after which you can do",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:48): java -cp .:../../jars/htmlparser.jar:../../dependencies/jsontools-core-1.5.jar:../../dependencies/antlr.jar:../classes/ nu.validator.htmlparser.test.TreeTester html5lib source files",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:48): s/source files/test files/",
        "eca88ce0deea1275223afe139b2595e2 (21:52): ../classes/nu/validator/htmlparser/test doesn't seem to exist?",
        "eca88ce0deea1275223afe139b2595e2 (21:52): Also, classes already exists as a sibling to test-src",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:53): eca88ce0deea1275223afe139b2595e2: ../classes/nu/validator/htmlparser/test should have emerged as a result of the javac... command above",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:54): eca88ce0deea1275223afe139b2595e2: did you copy and paste from above or retype?",
        "eca88ce0deea1275223afe139b2595e2 (21:55): With the first command I get: &quot;javac: directory not found: ../classes/nu/validator/htmlparser/test/TreeTester.java&quot;",
        "eca88ce0deea1275223afe139b2595e2 (21:55): Copypasta",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:56): eca88ce0deea1275223afe139b2595e2: there should be a space after ../classes/",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:56): I'm guessing your terminal line wrapped just there?",
        "eca88ce0deea1275223afe139b2595e2 (21:56): Yep",
        "eca88ce0deea1275223afe139b2595e2 (21:57): Now I get a number of &quot;cannot find symbol&quot; errors",
        "eca88ce0deea1275223afe139b2595e2 (21:57): Which implies that the dependencies weren't setup properly",
        "eca88ce0deea1275223afe139b2595e2 (21:58): Namely, these packages don't exist: &quot;com.ibm.icu.text.UnicodeSet&quot; etc",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:58): hmm. I wonder why I didn't get that",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:58): to remedy",
        "b8810fee2f4a71f849f3f7409546d1d9 (21:59): add ../../dependencies/icu4j-4_0.jar to the -cp stuff separated with colon from the other paths",
        "eca88ce0deea1275223afe139b2595e2 (22:01): Second command, I get: FileNotFoundException: html5lib (No such file or directory)",
        "b8810fee2f4a71f849f3f7409546d1d9 (22:02): eca88ce0deea1275223afe139b2595e2: replace &quot;html5lib  source files",
        "b8810fee2f4a71f849f3f7409546d1d9 (22:02): &quot; with the paths of the actual html5lib tree test files",
        "eca88ce0deea1275223afe139b2595e2 (22:02): haha, ok",
        "eca88ce0deea1275223afe139b2595e2 (22:03): Awesome",
        "eca88ce0deea1275223afe139b2595e2 (22:03): We have lift-off",
        "b8810fee2f4a71f849f3f7409546d1d9 (22:03): great",
        "eca88ce0deea1275223afe139b2595e2 (22:07): Ok, one fail in tests1.dat, which is from the fact that I just changed that",
        "eca88ce0deea1275223afe139b2595e2 (22:07): Which makes me even more skeptical that my change was actually correct",
        "b8810fee2f4a71f849f3f7409546d1d9 (22:08): was it on the topic of frameset-ok or something else?",
        "eca88ce0deea1275223afe139b2595e2 (22:09): Yep",
        "b8810fee2f4a71f849f3f7409546d1d9 (22:09): eca88ce0deea1275223afe139b2595e2: could be bug in V.nu parser",
        "b8810fee2f4a71f849f3f7409546d1d9 (22:10): eca88ce0deea1275223afe139b2595e2: I didn't implement frameset-ok as a flag but as a mode",
        "eca88ce0deea1275223afe139b2595e2 (22:10): Hmm... yeah, that'd probalby do it",
        "b8810fee2f4a71f849f3f7409546d1d9 (22:10): I may have goofed in my tranformation of the algorithm",
        "eca88ce0deea1275223afe139b2595e2 (22:10): *probably",
        "eca88ce0deea1275223afe139b2595e2 (22:10): Because frameset-ok doesn't really make sense as a mode",
        "b8810fee2f4a71f849f3f7409546d1d9 (22:11): oh?",
        "eca88ce0deea1275223afe139b2595e2 (22:11): I mean, there are a lot of places it can get set",
        "eca88ce0deea1275223afe139b2595e2 (22:12): And you can very easily go back to a previous mode, but have the frameset ok be the only thing that's different",
        "eca88ce0deea1275223afe139b2595e2 (22:12): It's not obvious to me, without recopying all of the modes, how a mode frameset-ok would work",
        "b8810fee2f4a71f849f3f7409546d1d9 (22:13): eca88ce0deea1275223afe139b2595e2: except for frameset itself, it either just forwards to 'in body' or sets the mode to 'in body' and then moves on to 'in body'",
        "b8810fee2f4a71f849f3f7409546d1d9 (22:14): It's past 22:00 here. I should head home.",
        "eca88ce0deea1275223afe139b2595e2 (22:16): cya",
        "b8810fee2f4a71f849f3f7409546d1d9 (22:16): later"
    ],
    "person_ids": [
        "eca88ce0deea1275223afe139b2595e2",
        "ab7faae5d7b250ea8606486575f8f79c",
        "b8810fee2f4a71f849f3f7409546d1d9"
    ]
}