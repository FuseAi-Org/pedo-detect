{
    "id": "879ba93a145fe844d08f4152cbbaeb10",
    "messages": [
        "70ded237df42895847b593f8f3ea65f3 (02:03): can someone explain why s.strip doesnt work and s.strip() does?  do we always need the () in py?",
        "b16f5860985e69f2a0819f51e77d82e1 (02:04): hey there...how would I kill the script. I am looking for like a die statement or what not",
        "d5938dbcd81ab0dc7529fe844e12afb7 (02:04): greets people",
        "b542515dc18b237b986ec76d2e49ee71 (02:05): so i was all like, index = open(&quot;index&quot;, &quot;rw&quot;)",
        "ffb8c62f79541fe7f9973a62423f5c23 (02:05): eetfunk: s.strip returns the method descriptor object for &quot;strip&quot;.  s.strip() returns the results of executing s.strip",
        "b542515dc18b237b986ec76d2e49ee71 (02:05): and then i was like, index.write(&quot;6&quot;)",
        "70ded237df42895847b593f8f3ea65f3 (02:05): deximer: what does a method descriptor object do?",
        "b542515dc18b237b986ec76d2e49ee71 (02:05): and it was all like, IOError: [Errno 9] Bad file descriptor",
        "b542515dc18b237b986ec76d2e49ee71 (02:06): and i was all like, index.read()",
        "89cc9a7e0210039958feedf07e97745e (02:06): jirwin: sys.exit()",
        "b16f5860985e69f2a0819f51e77d82e1 (02:06): thanks :)",
        "b542515dc18b237b986ec76d2e49ee71 (02:06): and that worked",
        "b542515dc18b237b986ec76d2e49ee71 (02:06): why doesn't open(foo, &quot;rw&quot;) work?",
        "b542515dc18b237b986ec76d2e49ee71 (02:06): is it supposed to be possible to use one open() call to open a file for reading and writing?",
        "89cc9a7e0210039958feedf07e97745e (02:07): i don't generally do it",
        "ffb8c62f79541fe7f9973a62423f5c23 (02:07): eetfunk: it wraps a function and attaches it to an object, i.e. it creates a method",
        "b542515dc18b237b986ec76d2e49ee71 (02:07): or are you supposed to have to be like indexr = open(&quot;index&quot;, &quot;r&quot;) and indexw = open(&quot;index&quot;, &quot;w&quot;) ?",
        "89cc9a7e0210039958feedf07e97745e (02:07): in theory i should imagine it is possible, but you'd have to be very careful about it",
        "4c0c1d3d8ba815641ce1621584193537 (02:07): eigenlambda yes, but there's not such mode as &quot;rw&quot;",
        "89cc9a7e0210039958feedf07e97745e (02:07): eigenlambda: if you open a file with &quot;w&quot; it'll probably truncate it",
        "ffb8c62f79541fe7f9973a62423f5c23 (02:07): eetfunk: Python does this behind the seens when you create a class",
        "6161f28d02cd6f98a9e5a6f67a1a008e (02:07): Use &quot;a&quot;",
        "6161f28d02cd6f98a9e5a6f67a1a008e (02:07): Or &quot;w+&quot; maybe.",
        "70ded237df42895847b593f8f3ea65f3 (02:07): deximer: ok.  so there's no real use for that in my code I guess?  ie: i don't really need to know whats under the hood?",
        "89cc9a7e0210039958feedf07e97745e (02:08): w+ sounds right",
        "ffb8c62f79541fe7f9973a62423f5c23 (02:08): eetfunk: Not unless you need it :)",
        "70ded237df42895847b593f8f3ea65f3 (02:08): good. thanks!",
        "70ded237df42895847b593f8f3ea65f3 (02:08): (still a n00b, but your help really helps!)",
        "4c0c1d3d8ba815641ce1621584193537 (02:09): eetfunk as for what s.strip, it is the strip method bound to s. You can pick it up, move it somewhere else, run it later, dress it up, whatever.",
        "70ded237df42895847b593f8f3ea65f3 (02:09): Zalamander: ok i get it.",
        "b542515dc18b237b986ec76d2e49ee71 (02:10): w+ doesn't read",
        "89cc9a7e0210039958feedf07e97745e (02:10): doesn't it?",
        "4c0c1d3d8ba815641ce1621584193537 (02:10): it doesn't?",
        "ca35121935742dca8ea7e571cb0fbc7b (02:10): Hi!",
        "ca35121935742dca8ea7e571cb0fbc7b (02:11): What is the right way to dispatch a call to a super class?",
        "89cc9a7e0210039958feedf07e97745e (02:11): super",
        "4c0c1d3d8ba815641ce1621584193537 (02:11): that's the builtin function super()",
        "ca35121935742dca8ea7e571cb0fbc7b (02:11): E.g. in __init__(self):   super(thisclassname, self).__init__(stuff)?",
        "89cc9a7e0210039958feedf07e97745e (02:11): super(self, CurrentClass).methodName()",
        "4c0c1d3d8ba815641ce1621584193537 (02:11): actually a type",
        "89cc9a7e0210039958feedf07e97745e (02:11): that's the chap",
        "b542515dc18b237b986ec76d2e49ee71 (02:11): i was all like 'echo 5 &gt; index' in the shell",
        "b542515dc18b237b986ec76d2e49ee71 (02:12): then i fired up a python interpreter and was all like index = open(&quot;index&quot;, &quot;w+&quot;)",
        "b542515dc18b237b986ec76d2e49ee71 (02:12): and index.read()",
        "ca35121935742dca8ea7e571cb0fbc7b (02:12): Zalamander: should I call __init__ from __init__?",
        "bbfe187fc48d9171af3b60d269c8b407 (02:12): how do I transform a datetime object to unix mtime?",
        "b542515dc18b237b986ec76d2e49ee71 (02:12): and it said ''",
        "f7551900b33180d964c315501279b946 (02:12): Darten: what you had looks right",
        "4c0c1d3d8ba815641ce1621584193537 (02:12): Darten generally, yes you should call the Superclass's __init__ in the subclass __init__",
        "ca35121935742dca8ea7e571cb0fbc7b (02:12): polpak: thanks.",
        "b542515dc18b237b986ec76d2e49ee71 (02:12): so, it didn't block my read, but it didn't actually read the file",
        "b542515dc18b237b986ec76d2e49ee71 (02:13): is that because you need to write before w+ can read?",
        "70ded237df42895847b593f8f3ea65f3 (02:13): i think there's a way for python to parse my code to make sure it is valid, am I right?",
        "f7551900b33180d964c315501279b946 (02:13): Darten: you should be derived from object so as to use new style objects though",
        "4c0c1d3d8ba815641ce1621584193537 (02:13): Darten if you don't do any extra processing in your __init__ though, you can just leave it out entirely",
        "89cc9a7e0210039958feedf07e97745e (02:13): eigenlambda: try r+",
        "89cc9a7e0210039958feedf07e97745e (02:13): w+ truncates the file, apparently",
        "ca35121935742dca8ea7e571cb0fbc7b (02:14): polpak, Zalamander: what is the reason to have an old-style class at all!?",
        "609252e8595f84db3ab53f287c7d4dea (02:14): Darten: backwards compatibility for one",
        "f7551900b33180d964c315501279b946 (02:14): Darten: backward compatibility",
        "4c0c1d3d8ba815641ce1621584193537 (02:14): Darten backwards compatibility",
        "8391c0fcd91e6c59e6bbbd9942a49dfb (02:14): er...backwards compatibility!",
        "609252e8595f84db3ab53f287c7d4dea (02:14): :)",
        "f7551900b33180d964c315501279b946 (02:14): Darten: later versions all objects will by default be new style",
        "ca35121935742dca8ea7e571cb0fbc7b (02:15): all: so, programming-wise I should always stick to new-style and forget about old-style. Reads: I have to derive from something, always, right?",
        "8391c0fcd91e6c59e6bbbd9942a49dfb (02:15): if i have defined the variable poot as: poot = '12345'   shouldn't this work:  urlretreive(&quot;<a href=\"http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=&quot;poot\">http://www.pythonchallenge.com/pc/def/linkedlist.php?nothing=&quot;poot</a>, '/home/sam/Desktop/url/'poot'.txt')",
        "b542515dc18b237b986ec76d2e49ee71 (02:15): r+ works",
        "b542515dc18b237b986ec76d2e49ee71 (02:15): lol r+ appends instead of replacing",
        "8391c0fcd91e6c59e6bbbd9942a49dfb (02:15): unless you know you're writing the program for a system running an old interpreter",
        "4c0c1d3d8ba815641ce1621584193537 (02:15): Darten basically, yes.",
        "b542515dc18b237b986ec76d2e49ee71 (02:16): hm.  i think i will use two syscalls.  i am using python anyway, so it hardly matters.",
        "b542515dc18b237b986ec76d2e49ee71 (02:16): thanks guys",
        "52222b0825f80044dd9d6c4a2971f954 (02:17): What does &lt; &gt; do in Python?",
        "ca35121935742dca8ea7e571cb0fbc7b (02:17): new question: I generate a lot of objects, where I need an attribute, that possible never gets used. - I want to dispatch the complicated attribute generation. - Should I use __getattr__ (I would like to) or is __getattribute__ a must (&quot;the clean way&quot;)??",
        "609252e8595f84db3ab53f287c7d4dea (02:17): metaperl: same as !=",
        "52222b0825f80044dd9d6c4a2971f954 (02:17): oh hanks maru",
        "609252e8595f84db3ab53f287c7d4dea (02:18): metaperl: looks like it will disappear in python 3 anyway :)",
        "f7551900b33180d964c315501279b946 (02:18): Darten: I'm not sure I understand the question",
        "52222b0825f80044dd9d6c4a2971f954 (02:19): maru: that's why I was asking. Bary Warsaw's Requiem for an Operator",
        "ca35121935742dca8ea7e571cb0fbc7b (02:19): polpak: Maybe, but mostly not, I need attribute a from class c (c.a)...",
        "ca35121935742dca8ea7e571cb0fbc7b (02:19): polpak: and I want to generate a on demand.",
        "ca35121935742dca8ea7e571cb0fbc7b (02:19): polpak: I thought on using __getattr__().",
        "ca35121935742dca8ea7e571cb0fbc7b (02:20): polpak: the question: it this assumption correct, or there a cleaner way to do it!? (-:",
        "f7551900b33180d964c315501279b946 (02:20): Darten: does it change dynamically?",
        "ca35121935742dca8ea7e571cb0fbc7b (02:20): polpak: no, I would assign it to c once calculated in __getattr__().",
        "f7551900b33180d964c315501279b946 (02:21): Darten: i.e. is it a calculated value, or will things be manually setting it",
        "e8cb5d78731d0b117f529734f7c2d6a4 (02:21): lazy evaluation...",
        "70ded237df42895847b593f8f3ea65f3 (02:21): I need to fetch the content (html) of a url.  Which module should I look into?",
        "ca35121935742dca8ea7e571cb0fbc7b (02:21): polpak: sorry, I would assign it to &quot;self&quot;, of course.",
        "e8cb5d78731d0b117f529734f7c2d6a4 (02:21): is it possible in pytyhon?",
        "f7551900b33180d964c315501279b946 (02:22): Darten: you could use a property for it",
        "ca35121935742dca8ea7e571cb0fbc7b (02:22): polpak: what is a property!?",
        "f7551900b33180d964c315501279b946 (02:22): Darten: see the builtin function property()",
        "6161f28d02cd6f98a9e5a6f67a1a008e (02:23): eetfunk: check out urllib2",
        "70ded237df42895847b593f8f3ea65f3 (02:23): AStorm: thanks bro! :)",
        "ca35121935742dca8ea7e571cb0fbc7b (02:24): polpak, all: Thanks!",
        "8391c0fcd91e6c59e6bbbd9942a49dfb (02:30): how do i specify only a numeral with regular expressions?",
        "8391c0fcd91e6c59e6bbbd9942a49dfb (02:30): [0-]?",
        "8391c0fcd91e6c59e6bbbd9942a49dfb (02:30): [0-9]?",
        "2bdd04d0ec117ac0f48fb417f4542ad8 (02:30): \\d or [0-9]"
    ],
    "person_ids": [
        "70ded237df42895847b593f8f3ea65f3",
        "b16f5860985e69f2a0819f51e77d82e1",
        "d5938dbcd81ab0dc7529fe844e12afb7",
        "b542515dc18b237b986ec76d2e49ee71",
        "ffb8c62f79541fe7f9973a62423f5c23",
        "89cc9a7e0210039958feedf07e97745e",
        "4c0c1d3d8ba815641ce1621584193537",
        "6161f28d02cd6f98a9e5a6f67a1a008e",
        "ca35121935742dca8ea7e571cb0fbc7b",
        "bbfe187fc48d9171af3b60d269c8b407",
        "f7551900b33180d964c315501279b946",
        "609252e8595f84db3ab53f287c7d4dea",
        "8391c0fcd91e6c59e6bbbd9942a49dfb",
        "52222b0825f80044dd9d6c4a2971f954",
        "e8cb5d78731d0b117f529734f7c2d6a4",
        "2bdd04d0ec117ac0f48fb417f4542ad8"
    ]
}