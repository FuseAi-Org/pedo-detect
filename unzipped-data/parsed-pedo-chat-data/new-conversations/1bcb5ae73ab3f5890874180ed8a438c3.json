{
    "id": "1bcb5ae73ab3f5890874180ed8a438c3",
    "messages": [
        "0a39f78bcb297ab0ebe8a29c28bfed89 (12:09): planet: Auckland Web Meetup 2009 &lt;http://weblogs.mozillazine.org/roc/archives/2009/09/auckland_web_me_2.html&gt;",
        "0a39f78bcb297ab0ebe8a29c28bfed89 (12:11): bugmail: [Bug 7679] New: editorial: &quot;The following content attributes must not be specified&quot; applies to authors but is hidden behind class=impl. It would be helpful if each state listed the attributes that are allowed to be specified for that state. &lt;http://lists.w3.org/Archives/Public/public-html-bugzilla/2009Sep/0461.html&gt;",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:28): there surely is some spec somewhere that defines how to parse mime types",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:29): mimesniff defers to HTTP, but HTTP says nothing useful, it only gives authoring conformance criteria",
        "338c23e8eafc19ec9236404deac0bef4 (12:33): are you saying that parsing can't be derived from the ABNF?",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:38): what is the mime type when the input is &quot;text/ plain &quot; ?",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:38): and where is that defined?",
        "338c23e8eafc19ec9236404deac0bef4 (12:42): The type is &quot;text&quot; and the subtype is &quot;plain&quot;",
        "338c23e8eafc19ec9236404deac0bef4 (12:42): The trailing whitespace is LWS",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:44): where does it actually say how you derive the type and subtype from the string? I see grammar tokens &quot;type&quot; and &quot;subtype&quot; but nothing that says that they have any relationship to the actual type and subtype.",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:45): what's the mime type if the input is &quot;text//plain&quot;?",
        "338c23e8eafc19ec9236404deac0bef4 (12:46): media-type     = type &quot;/&quot; subtype *( &quot;;&quot; parameter )",
        "338c23e8eafc19ec9236404deac0bef4 (12:46): I think that's as clear as it can be",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:46): those tokens are opaque identifiers",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:46): the above is exactly equivalent to:",
        "338c23e8eafc19ec9236404deac0bef4 (12:46): and &quot;text//plain&quot; doesn't partse according to the ABNF, so it's invalid",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:46): xxxxxxxxxx     = aaaa &quot;/&quot; bbbbbbb *( &quot;;&quot; ccccccccc )",
        "338c23e8eafc19ec9236404deac0bef4 (12:47): Yes, but only if you behave as a spez nazi (tm mplilgrim I think)",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:47): how do we know that hte &quot;aaaa&quot; and &quot;bbbbbbb&quot; parts have the semantics of &quot;type&quot; and &quot;subtype&quot;?",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:47): ah so you're saying http doesn't actually define this and we have to guess",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:47): ok",
        "338c23e8eafc19ec9236404deac0bef4 (12:47): we know by using our brain",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:47): i agree that we can make educated guesses",
        "338c23e8eafc19ec9236404deac0bef4 (12:47): this has nothing to do with guessing",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:47): i'm just looking for an actual definition",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:48): also, i understand &quot;text//plain&quot; is invalid. i'm asking how to parse it, not how to validate it.",
        "338c23e8eafc19ec9236404deac0bef4 (12:48): it has to do woth not insulting the reader by repeating obvious information",
        "338c23e8eafc19ec9236404deac0bef4 (12:48): it's a parse error",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:49): yes i know it's a parse error",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:49): that doesn't answer the question of how you parse it",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:49): what's the type and subtype?",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:49): is the type &quot;text&quot; and the subtype &quot;/plain&quot;?",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:49): and where does the spec define this?",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:50): btw, being precise isn't insulting the reader",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:50): it's respecting the reader",
        "3f2e2531201cfbf853f16f668132eaf2 (12:52): &quot;Linear white space (LWS) MUST NOT be used between the type and subtype, nor between an attribute and its value.&quot; - sounds like &quot;text/ plain&quot; is invalid; does that mean it can't be parsed into a type and subtype?",
        "338c23e8eafc19ec9236404deac0bef4 (12:52): The spec doesn't specify what to do with invalid input. That's it.",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:52): it's clearly invalid, yes",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:52): ah, ok",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:53): i guess i'll have to define it in html5 then",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:53): sigh",
        "338c23e8eafc19ec9236404deac0bef4 (12:54): yes, go ahead, waste mor time, and write another 50 line algorithm",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:55): defining how things work to get interoperability is not a waste of time",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:55): the waste of time is specs that leave this stuff undefined",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:59): (i am still sometimes surprised as to how few specs define enough to actually result in truly interoperable behaviour, given how common it is for people to screw things up at all levels)",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:59): (especially given the security implications of UAs doing their own thing each time)",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:10): wow, i can't find a single user agent that interprets MIME types according to the way 338c23e8eafc19ec9236404deac0bef4 said the spec implied they should be parsed",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:11): so far tried wget, safari, chrome, opera, firefox, and IE8",
        "338c23e8eafc19ec9236404deac0bef4 (13:11): please be more specific.",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:11): are there any other user agents that support text/html?",
        "0a39f78bcb297ab0ebe8a29c28bfed89 (13:11): changes: hixie: Make it clear that spaces around the value of type='' on &lt;script&gt; are stripped first, and that the types are compared literally. (whatwg r3909) &lt;http://lists.w3.org/Archives/Public/public-html-diffs/2009Sep/0161.html&gt;",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:11): i.e. that process text/html differently than other content?",
        "338c23e8eafc19ec9236404deac0bef4 (13:12): Please be more specific in how they behave other than &quot;Julian said&quot;",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:13): that treat text/html like text/ html",
        "338c23e8eafc19ec9236404deac0bef4 (13:13): if your point is that they accept invalid input: this is not news",
        "338c23e8eafc19ec9236404deac0bef4 (13:13): and I didn't say it's illegal to do so",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:13): no, i'm testing valid input",
        "338c23e8eafc19ec9236404deac0bef4 (13:13): So, please be more specific",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:14): so far no tool i have tested has treated &quot;Content-Type: text/ html&quot; as equivalent to &quot;Content-Type: text/html&quot;",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:14): they all treat the former as an unknown type",
        "338c23e8eafc19ec9236404deac0bef4 (13:14): why should it",
        "338c23e8eafc19ec9236404deac0bef4 (13:14): yes, and that that's good; the former is invalid",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:14): you just said it was valid",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:14): or rather",
        "338c23e8eafc19ec9236404deac0bef4 (13:14): no I didn't",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:14): you just said the spec said it parsed as type=text, subtype=html",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:15): which surely is the same with or without the space",
        "338c23e8eafc19ec9236404deac0bef4 (13:15): No, I didn't",
        "338c23e8eafc19ec9236404deac0bef4 (13:15): It appears you are confused about what I said; maybe that's my fault.",
        "338c23e8eafc19ec9236404deac0bef4 (13:15): The ABNF is clear about it, and that was my point",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:15): you said that the ABNF said how to parse, right?",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:15): and the ABNF says that that parses as type=text, subtype=html",
        "338c23e8eafc19ec9236404deac0bef4 (13:16): No, it doesn't",
        "338c23e8eafc19ec9236404deac0bef4 (13:16): The ABNF does not allow whitespace there",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:16): the spec says that there is implied *LWS between all words",
        "338c23e8eafc19ec9236404deac0bef4 (13:17): I see I misread your example. I saw &quot;text/plain &quot;, but it was &quot;text/ plain &quot;.",
        "338c23e8eafc19ec9236404deac0bef4 (13:17): So no, that is invalid input",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:18): ok see this is why we need a spec that actually says what it means and says how to parse things so we don't have to try to guess",
        "338c23e8eafc19ec9236404deac0bef4 (13:18): &quot;The type, subtype, and parameter attribute names are case-insensitive. Parameter values might or might not be case-sensitive, depending on the semantics of the parameter name. Linear white space (LWS) MUST NOT be used between the type and subtype, nor between an attribute and its value. The presence or absence of a parameter might be significant to the processing of a media-type, depending...",
        "338c23e8eafc19ec9236404deac0bef4 (13:18): ...on its definition within the media type registry.&quot;",
        "338c23e8eafc19ec9236404deac0bef4 (13:18): So it says that.",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:18): so you're saying that that sentence means the grammar is to be treated differently?",
        "338c23e8eafc19ec9236404deac0bef4 (13:19): &quot;Except where noted otherwise, linear white space (LWS) can be included between any two adjacent words (token or quoted-string), and between adjacent words and separators, without changing the interpretation of a field.&quot;",
        "338c23e8eafc19ec9236404deac0bef4 (13:19): It's all there.",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:19): oh the authoring-level criteria there is what they meant by that?",
        "338c23e8eafc19ec9236404deac0bef4 (13:20): And yes, the way the ABNF work depends on out-of-band informaion. This is something we are fixing in httpbis.",
        "338c23e8eafc19ec9236404deac0bef4 (13:20): These are not &quot;authoring-level criteria&quot;. It's regular spec text.",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:20): could you please make it so (a) we don't have to read between the lines to work out how to parse things and (b) you define how to parse everything, valid or invalid?",
        "338c23e8eafc19ec9236404deac0bef4 (13:20): I think you are confusing yourself with that distinction you made up some time ago.",
        "338c23e8eafc19ec9236404deac0bef4 (13:21): (a) you don't need to read between the lines, just switch on common sense",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:21): and i think you're making things worse by refusing to acknowledge the necessity of that deistinction",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:22): distinction, even",
        "338c23e8eafc19ec9236404deac0bef4 (13:22): (b) the WG discussed this multiple times, and there's no consensus for doing so",
        "338c23e8eafc19ec9236404deac0bef4 (13:22): (need to run now)",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:22): &quot;switch on common sense&quot; is &quot;read between the lines&quot; in the spec world",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:24): because different people have different ideas of what is common sense",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:25): for example, i think it's common sense that a format needs to apply Postel's law, instead of pushing that responsibility to user agents, where differences causes security bugs"
    ],
    "person_ids": [
        "0a39f78bcb297ab0ebe8a29c28bfed89",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "338c23e8eafc19ec9236404deac0bef4",
        "3f2e2531201cfbf853f16f668132eaf2"
    ]
}