{
    "id": "c326b708c69923cc033dc9f83ecbe971",
    "messages": [
        "b844a0a98f81c321afe1d38ae37f3c28 (17:10): channel #whatwg",
        "25812bf456959aa5f28dc570f341a3ba (17:10): is 'WHATWG (HTML5) -- http://www.whatwg.org/ -- Logs: http://krijnhoetmer.nl/irc-logs/ -- Please leave your sense of logic at the door, thanks!'",
        "5d5b78699e57104f2fa03bbdf7b9197b (17:10): by annevk3 on Wed Sep 09 23:23:54",
        "ab7faae5d7b250ea8606486575f8f79c (17:10): 058f354e300cae2f9755165ed8d5131c: http://code.google.com/chrome/chromeframe/ says it's open-source and they wouldn't lie to us",
        "058f354e300cae2f9755165ed8d5131c (17:10): no, they wouldn't, of course",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:11): (I was really somewhat including the whole open-source ideology in the term &quot;open-source&quot;, not just the OSI definition.)",
        "058f354e300cae2f9755165ed8d5131c (17:11): btw, Chrome isn't open source, Chromium is",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:12): Yes, yes, Chrome is only 99% open-source, I know.",
        "ab7faae5d7b250ea8606486575f8f79c (17:12): 058f354e300cae2f9755165ed8d5131c: http://src.chromium.org/svn/trunk/src/chrome_frame/",
        "ab7faae5d7b250ea8606486575f8f79c (17:18): http://src.chromium.org/svn/trunk/src/chrome_frame/utils.cc",
        "b8810fee2f4a71f849f3f7409546d1d9 (17:19): wonders how HTMLScanner deals with &lt;script&gt; and conditional comments",
        "ab7faae5d7b250ea8606486575f8f79c (17:20): Looks like it just tokenizes and looks for &lt;meta&gt; tags before &lt;body&gt; tags",
        "b8810fee2f4a71f849f3f7409546d1d9 (17:20): it would be &quot;fun&quot; for the flowchart if those are handled differently from how IE itself handles X-UA-Compatible",
        "b8810fee2f4a71f849f3f7409546d1d9 (17:20): is HTMLScanner an approximative hack or a real tokenizer?",
        "ab7faae5d7b250ea8606486575f8f79c (17:21): It's a hack",
        "b8810fee2f4a71f849f3f7409546d1d9 (17:21): &quot;fun&quot;",
        "ab7faae5d7b250ea8606486575f8f79c (17:21): http://src.chromium.org/svn/trunk/src/chrome_frame/html_utils.cc",
        "ab7faae5d7b250ea8606486575f8f79c (17:22): Looks like it's basically splitting strings on spaces and '=' and '/', if I'm not mistaken",
        "ab7faae5d7b250ea8606486575f8f79c (17:22): (which I quite possibly am)",
        "ab7faae5d7b250ea8606486575f8f79c (17:22): when searching for attribute names",
        "ab7faae5d7b250ea8606486575f8f79c (17:23): so presumably it's going to fail on unquoted content=chrome=1",
        "b8810fee2f4a71f849f3f7409546d1d9 (17:23): has anyone on this channel happened to analyze how CNN video pages like http://www.cnn.com/video/#/video/offbeat/2009/09/23/wilhelm.ks.50.states.90.secs.kwch put the text in the layout?",
        "ab7faae5d7b250ea8606486575f8f79c (17:24): Oh, also it's going to fail on &lt;meta http-equiv=&quot;&amp;#x78;-ua-compatible&quot; content=&quot;chrome=1&quot;&gt; because it does string checks for x-ua-compatible first, I think",
        "cc097e0d7183ae8436e7df709553c8c0 (17:25): that's ok because charset meta detection fails for that, too",
        "ab7faae5d7b250ea8606486575f8f79c (17:25): And once it's found the x-ua-compatible content attribute value, it does a case-insensitive check for the substring &quot;chrome=&quot;",
        "cc097e0d7183ae8436e7df709553c8c0 (17:26): ascii case-insensitive?",
        "ab7faae5d7b250ea8606486575f8f79c (17:27): I think so",
        "ab7faae5d7b250ea8606486575f8f79c (17:27): but it's whatever Win32 StrStrI does",
        "ab7faae5d7b250ea8606486575f8f79c (17:28): There's also a registry setting which can give a list of &quot;opt-in&quot; URLs to always be rendered with Chrome",
        "ab7faae5d7b250ea8606486575f8f79c (17:28): doesn't know who does the opting in, but assumes it's Google",
        "cc097e0d7183ae8436e7df709553c8c0 (17:30): why does a runtime error in a worker fire a ErrorEvent while a runtime error in &lt;script&gt; invokes the onerror function with three arguments?",
        "ab7faae5d7b250ea8606486575f8f79c (17:30): Also, the MIME type isn't (as stated) application/chromeframe, it's application/chromepage",
        "b8810fee2f4a71f849f3f7409546d1d9 (17:31): w00t! I get text on CNN again.",
        "6d05f0c2942adc25946a4b02b37ffa00 (17:31): cc097e0d7183ae8436e7df709553c8c0, I believe because implementors didn't want the complexity",
        "b8810fee2f4a71f849f3f7409546d1d9 (17:32): woohoo! Live DOM works again too",
        "6d05f0c2942adc25946a4b02b37ffa00 (17:32): cc097e0d7183ae8436e7df709553c8c0, I'd complain :)",
        "b8810fee2f4a71f849f3f7409546d1d9 (17:32): ab7faae5d7b250ea8606486575f8f79c: documentation FTW! Like MSDN :-)",
        "ab7faae5d7b250ea8606486575f8f79c (17:34): b8810fee2f4a71f849f3f7409546d1d9: Documentation? What documentation?",
        "ab7faae5d7b250ea8606486575f8f79c (17:34): Newsgroup postings are all we get :-)",
        "ab7faae5d7b250ea8606486575f8f79c (17:35): At least Microsoft does actually write technical documentation",
        "cc097e0d7183ae8436e7df709553c8c0 (17:42): 6d05f0c2942adc25946a4b02b37ffa00: hmm, actually, workers says to &quot;report the error&quot;, which invokes the function with three arguments",
        "cc097e0d7183ae8436e7df709553c8c0 (17:43): 6d05f0c2942adc25946a4b02b37ffa00: but then also fires an event if the error was &quot;not handled&quot;",
        "cc097e0d7183ae8436e7df709553c8c0 (17:44): which seems broken",
        "cc097e0d7183ae8436e7df709553c8c0 (17:45): unless i'm missing something",
        "0a8cf71fd58b16e482517f936c971d3a (17:49): thinks &quot;Bloody hell&quot; if Hixie is the only author of whole canvas element.",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:49): 0a8cf71fd58b16e482517f936c971d3a, he's the only author of the entire HTML5 spec, more or less.",
        "ab7faae5d7b250ea8606486575f8f79c (17:50): You can blame him for everything",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:50): That's the awesome part about a single-editor spec, you always know who to blame.",
        "b8810fee2f4a71f849f3f7409546d1d9 (17:51): 0a8cf71fd58b16e482517f936c971d3a: he has authored the spec text but he didn't design canvas",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:51): It's so hard to hold effective grudges against a whole Working Group or whatever for not reaching consensus to implement your pet change.",
        "0a8cf71fd58b16e482517f936c971d3a (17:51): Hehehe",
        "0a8cf71fd58b16e482517f936c971d3a (17:52): b8810fee2f4a71f849f3f7409546d1d9: aha, looks pretty complex...",
        "0a8cf71fd58b16e482517f936c971d3a (17:53): Is HTML5 the only canvas api documentation so far?",
        "0a8cf71fd58b16e482517f936c971d3a (17:54): (HTML5 spec I meant)",
        "ab7faae5d7b250ea8606486575f8f79c (17:54): Apple and Mozilla have documentation, and there's various tutorials and things out there",
        "b8810fee2f4a71f849f3f7409546d1d9 (17:54): 0a8cf71fd58b16e482517f936c971d3a: Apple had docs when they did the first iteration of canvas",
        "cc097e0d7183ae8436e7df709553c8c0 (17:55): i think opera has some canvas tutorials",
        "0a8cf71fd58b16e482517f936c971d3a (17:56): I'm following this one https://developer.mozilla.org/en/Canvas_tutorial but feel like I don't have legs and arms without having some sort of nice, organised and searchable documentation :)",
        "cc097e0d7183ae8436e7df709553c8c0 (17:56): e.g. http://dev.opera.com/articles/view/html-5-canvas-the-basics/",
        "cc097e0d7183ae8436e7df709553c8c0 (17:56): 0a8cf71fd58b16e482517f936c971d3a: there's a cheat sheet which might be helpful",
        "0a8cf71fd58b16e482517f936c971d3a (17:57): cc097e0d7183ae8436e7df709553c8c0: cool, you mean on the opera tut site?",
        "cc097e0d7183ae8436e7df709553c8c0 (17:57): no here http://blog.nihilogic.dk/2009/02/html5-canvas-cheat-sheet.html",
        "0a8cf71fd58b16e482517f936c971d3a (17:58): cc097e0d7183ae8436e7df709553c8c0: ok, thx",
        "a11aabeeceeae6b8cb5d12ea06b56554 (17:59): cc097e0d7183ae8436e7df709553c8c0: I can. I won't, at the moment. :P",
        "cc097e0d7183ae8436e7df709553c8c0 (17:59): a11aabeeceeae6b8cb5d12ea06b56554: ok",
        "cc097e0d7183ae8436e7df709553c8c0 (18:00): a11aabeeceeae6b8cb5d12ea06b56554: any progress on web dom core?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:00): cc097e0d7183ae8436e7df709553c8c0: I've done no web stuff this month",
        "cc097e0d7183ae8436e7df709553c8c0 (18:00): ok",
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:01): Heck, I've not been at a computer that much this month",
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:01): (And no, I'm not writing web dom core tests on paper :P)",
        "6d05f0c2942adc25946a4b02b37ffa00 (18:01): a11aabeeceeae6b8cb5d12ea06b56554, when are you back?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:01): 6d05f0c2942adc25946a4b02b37ffa00: Oct 5th",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:01): a11aabeeceeae6b8cb5d12ea06b56554: do you own Web DOM Core now?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:02): b8810fee2f4a71f849f3f7409546d1d9: I hope I haven't quite made that mistake yet.",
        "6d05f0c2942adc25946a4b02b37ffa00 (18:02): a11aabeeceeae6b8cb5d12ea06b56554, ah, I'll likely be around then",
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:02): 6d05f0c2942adc25946a4b02b37ffa00: in se?",
        "6d05f0c2942adc25946a4b02b37ffa00 (18:02): ja",
        "b25b6b77a0087ff8385941e5545d32ea (18:10): Is it me or are Google unusually bad at publishing accurate technical information",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:29): Ooh, only a single spam made it through the filters last night.  Those &quot;you've won 1M british pounds&quot; things are annoyingly good at getting through gmail's filters.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:30): wonders what the best uni he could get into is\u201a\u00c4\u00b6",
        "cc097e0d7183ae8436e7df709553c8c0 (18:30): hmm, seems i was confusing the WorkerGlobalScope's onerror with the Worker's onerror",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:32): I can again say that document.write() is an insane amount of work on top of the parser code",
        "cc097e0d7183ae8436e7df709553c8c0 (18:32): still, having different code in self.onerror and dedicatedworker.onerror seems a bit weird",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:32): I now have a setup going where the network stream and document.writes and parsed using separate parser core instances that sync their internal state appropriately",
        "b25b6b77a0087ff8385941e5545d32ea (18:32): a11aabeeceeae6b8cb5d12ea06b56554: Depends if you mean |break in at night&quot; or not",
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:33): b25b6b77a0087ff8385941e5545d32ea: not :P",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:33): I guess I should now try edge cases...",
        "b25b6b77a0087ff8385941e5545d32ea (18:33): Well I don't recommend breaking in during the day",
        "b25b6b77a0087ff8385941e5545d32ea (18:33): Although possibly if you just walk in and pretend to be a student no one will notice",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:33): s/and parsed/are parsed/",
        "b25b6b77a0087ff8385941e5545d32ea (18:33): Especially if you go to lectures but not any at 9am",
        "b25b6b77a0087ff8385941e5545d32ea (18:34): And turn up late",
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:34): Obviously the solution is to have done better last year\u201a\u00c4\u00b6",
        "b25b6b77a0087ff8385941e5545d32ea (18:35): And not to ask questions in IRC channels with unhelpful people in",
        "cc097e0d7183ae8436e7df709553c8c0 (18:36): b25b6b77a0087ff8385941e5545d32ea: don't end a sentence with a preposition",
        "7cbd522d7fcf593a1e60d52c789b6a7b (18:36): cc097e0d7183ae8436e7df709553c8c0: why wouldn't he want to?",
        "7cbd522d7fcf593a1e60d52c789b6a7b (18:37): kids",
        "cc097e0d7183ae8436e7df709553c8c0 (18:37): b25b6b77a0087ff8385941e5545d32ea: btw i fixed assertThrows",
        "b25b6b77a0087ff8385941e5545d32ea (18:38): cc097e0d7183ae8436e7df709553c8c0: Nice.",
        "b25b6b77a0087ff8385941e5545d32ea (18:38): hasn't looked yet",
        "6d05f0c2942adc25946a4b02b37ffa00 (18:41): b8810fee2f4a71f849f3f7409546d1d9, this really gives a perf benefit?",
        "6d05f0c2942adc25946a4b02b37ffa00 (18:41): would think the bottleneck is not parsing",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:41): 6d05f0c2942adc25946a4b02b37ffa00: dunno yet",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:42): this will have sucked pretty big time if it won't",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:42): but clearly the people who suggested parsing SVG islands as XML haven't tried doing this",
        "6d05f0c2942adc25946a4b02b37ffa00 (18:42): parsing is so fast compared to layout and scripting...",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:43): 6d05f0c2942adc25946a4b02b37ffa00: the idea is to also speculate and start GETs early",
        "6d05f0c2942adc25946a4b02b37ffa00 (18:43): b8810fee2f4a71f849f3f7409546d1d9, heh, I never really took that seriously as I was pretty sure it wouldn't work",
        "b25b6b77a0087ff8385941e5545d32ea (18:43): 6d05f0c2942adc25946a4b02b37ffa00: Maybe if you have megabytes of SVG inline then parsing will become slow",
        "cc097e0d7183ae8436e7df709553c8c0 (18:44): slower than megabytes of HTML?",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:45): I expect the main benefit to come from being able to parse the tail of the document while the main thread waits for an external script to load",
        "cc097e0d7183ae8436e7df709553c8c0 (18:45): i guess fixing up attributes is a bit of an overhead with svg",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:45): but I don't have that part yet",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:45): cc097e0d7183ae8436e7df709553c8c0: the attribute fixup takes no time",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:45): cc097e0d7183ae8436e7df709553c8c0: it's been paid in RAM footprint",
        "cc097e0d7183ae8436e7df709553c8c0 (18:46): b8810fee2f4a71f849f3f7409546d1d9: ok, cool",
        "b25b6b77a0087ff8385941e5545d32ea (18:46): cc097e0d7183ae8436e7df709553c8c0: I guess misnested formatting elements are the only really slow thing",
        "b25b6b77a0087ff8385941e5545d32ea (18:46): and they're in HTML",
        "1107551f52ede4a0957665904c8241b4 (18:48): Hi, question: Is there currently any way of detecting the support of DataTransfer.files in the browser?",
        "cc097e0d7183ae8436e7df709553c8c0 (18:49): 1107551f52ede4a0957665904c8241b4: sure, just check that .files is not undefined",
        "1107551f52ede4a0957665904c8241b4 (18:50): cc097e0d7183ae8436e7df709553c8c0: to clarify, I mean onload. so that I can provide interface A if available, otherwise interface B.",
        "1107551f52ede4a0957665904c8241b4 (18:50): dataTransfer.files comes with the event only as far as I know?",
        "cc097e0d7183ae8436e7df709553c8c0 (18:52): hmm yeah",
        "1107551f52ede4a0957665904c8241b4 (18:53): I'm testing dnd from the desktop &amp; uploading via xhr2 and I'd like to provide the interface if the browser supports it, but I can see no way of detecting that without vendor/version sniffing...",
        "cc097e0d7183ae8436e7df709553c8c0 (18:54): i thought maybe you could check the prototype of DataTransfer, but firefox throws",
        "cc097e0d7183ae8436e7df709553c8c0 (18:54): and DataTransfer is undefined in webkit",
        "cc097e0d7183ae8436e7df709553c8c0 (18:54): or maybe i have an old webkit",
        "cc097e0d7183ae8436e7df709553c8c0 (18:55): why does firefox throw? security reasons?",
        "cc097e0d7183ae8436e7df709553c8c0 (18:56): it also throws for Event.prototype",
        "cc097e0d7183ae8436e7df709553c8c0 (18:58): Event.prototype doesn't throw in webkit, though",
        "cc097e0d7183ae8436e7df709553c8c0 (18:59): 1107551f52ede4a0957665904c8241b4: in theory you could check DataTransfer.prototype.files",
        "b25b6b77a0087ff8385941e5545d32ea (19:01): cc097e0d7183ae8436e7df709553c8c0: Have you checked it actually defines the properties on the prototype object rather than somewhere odd",
        "ab7faae5d7b250ea8606486575f8f79c (19:01): b8810fee2f4a71f849f3f7409546d1d9: You should have written the parser and browser in Haskell, so you can simply fork the state before speculatively parsing and throw it all away if a script does something funny",
        "cc097e0d7183ae8436e7df709553c8c0 (19:01): b25b6b77a0087ff8385941e5545d32ea: how would i check that?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:02): Is it Thursday or Friday today?",
        "ab7faae5d7b250ea8606486575f8f79c (19:03): a11aabeeceeae6b8cb5d12ea06b56554: Yes",
        "058f354e300cae2f9755165ed8d5131c (19:03): depends on your local time I guess",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:03): Which day of the week is it currently in UTC+1?",
        "cc097e0d7183ae8436e7df709553c8c0 (19:03): http://isitfriday.biz/",
        "ab7faae5d7b250ea8606486575f8f79c (19:03): a11aabeeceeae6b8cb5d12ea06b56554: Thursday",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:04): cc097e0d7183ae8436e7df709553c8c0, ab7faae5d7b250ea8606486575f8f79c Thank you.",
        "ab7faae5d7b250ea8606486575f8f79c (19:04): Glad to be of assistance",
        "b25b6b77a0087ff8385941e5545d32ea (19:07): cc097e0d7183ae8436e7df709553c8c0: Seems to be some security reasons, yes",
        "1107551f52ede4a0957665904c8241b4 (19:10): cc097e0d7183ae8436e7df709553c8c0: sorry you lost me a bit there. Are you &amp; b25b6b77a0087ff8385941e5545d32ea saying it's due to security reasons that the browser won't reveal if it supports DataTransfer.files before the event?",
        "b25b6b77a0087ff8385941e5545d32ea (19:19): 1107551f52ede4a0957665904c8241b4: Doing &quot;files&quot; in DataTransfer.prototype works",
        "b25b6b77a0087ff8385941e5545d32ea (19:19): (was it obvious which bit of that was code?)",
        "b25b6b77a0087ff8385941e5545d32ea (19:20): if(&quot;files&quot; in DataTransfer.prototype) {/*there is a files property*/}",
        "b25b6b77a0087ff8385941e5545d32ea (19:21): What doesn't work is tro try doing if(DataTransfer.prototype.files !== undefined){}",
        "1107551f52ede4a0957665904c8241b4 (19:22): b25b6b77a0087ff8385941e5545d32ea: got it. I was trying typeof and getting nothing back."
    ],
    "person_ids": [
        "b844a0a98f81c321afe1d38ae37f3c28",
        "25812bf456959aa5f28dc570f341a3ba",
        "5d5b78699e57104f2fa03bbdf7b9197b",
        "ab7faae5d7b250ea8606486575f8f79c",
        "058f354e300cae2f9755165ed8d5131c",
        "88d4d34a8064a4ff39fd5e144eea7762",
        "b8810fee2f4a71f849f3f7409546d1d9",
        "cc097e0d7183ae8436e7df709553c8c0",
        "6d05f0c2942adc25946a4b02b37ffa00",
        "0a8cf71fd58b16e482517f936c971d3a",
        "a11aabeeceeae6b8cb5d12ea06b56554",
        "b25b6b77a0087ff8385941e5545d32ea",
        "1f8387eb43f131d7c309a90a4e36b5cb",
        "7cbd522d7fcf593a1e60d52c789b6a7b",
        "1107551f52ede4a0957665904c8241b4"
    ]
}