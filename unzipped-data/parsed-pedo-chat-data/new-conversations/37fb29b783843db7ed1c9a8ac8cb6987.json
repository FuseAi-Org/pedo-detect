{
    "id": "37fb29b783843db7ed1c9a8ac8cb6987",
    "messages": [
        "6d05f0c2942adc25946a4b02b37ffa00 (09:53): f139aba52f9fa1394b4034a7954b2220, it's called when you do this for the first time",
        "6d05f0c2942adc25946a4b02b37ffa00 (09:54): f139aba52f9fa1394b4034a7954b2220, so you can have a standalone function that is just for generating all the tables that are needed for your app",
        "6d05f0c2942adc25946a4b02b37ffa00 (09:54): f139aba52f9fa1394b4034a7954b2220, compare with the installation steps of e.g. WordPress",
        "86123bebfedc05009c27d1ac8f8c7411 (10:09): gsnedders|work: pm?",
        "f139aba52f9fa1394b4034a7954b2220 (10:10): 6d05f0c2942adc25946a4b02b37ffa00, perhaps I'm misunderstanding how it's supposed to work, but I think that would mean when you open the database, you have to wait for the callback to be invoked before doing anything with the database, but since it only gets invoked when the database is first created, how are you supposed to know when it's ready to be used?",
        "f139aba52f9fa1394b4034a7954b2220 (10:11): well, you get the database returned from the method, but before running any additional transactions, you still need to check whether or not it was created for the first time",
        "f139aba52f9fa1394b4034a7954b2220 (10:12): and if it was, you have to wait for the callback to be executed, where you can set up the tables required.",
        "f139aba52f9fa1394b4034a7954b2220 (10:14): basically, what I'm saying, is it sucks to have a semi-asynchronous/semi-synchrounous API like this with which you have no idea whether it will need to be run synchrounously or asynchronously when you open it :-(",
        "6d05f0c2942adc25946a4b02b37ffa00 (10:21): f139aba52f9fa1394b4034a7954b2220, no, that callback is invoked first",
        "6d05f0c2942adc25946a4b02b37ffa00 (10:21): f139aba52f9fa1394b4034a7954b2220, all other transactions will be queued behind it",
        "f139aba52f9fa1394b4034a7954b2220 (10:24): oh, right. I guess that's ok. It still sucks having so many damn callbacks in this api",
        "65325d50b2e25aca54bc871b89758c9c (10:28): b8810fee2f4a71f849f3f7409546d1d9: are you around?",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:30): 65325d50b2e25aca54bc871b89758c9c: Yes",
        "65325d50b2e25aca54bc871b89758c9c (10:30): b8810fee2f4a71f849f3f7409546d1d9: could you comment on the proposal from Jonathan Robie in &lt;http://www.w3.org/Bugs/Public/show_bug.cgi?id=7059&gt;, in light of his clarifications?",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:30): 65325d50b2e25aca54bc871b89758c9c: OK.",
        "65325d50b2e25aca54bc871b89758c9c (10:31): b8810fee2f4a71f849f3f7409546d1d9: the XQuery/XSL folks want to talk about this at TPAC, I am hoping we can get it resolved before then",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:32): 65325d50b2e25aca54bc871b89758c9c: I'm OK with the change if you guys change WebKit, too. :-)",
        "65325d50b2e25aca54bc871b89758c9c (10:33): b8810fee2f4a71f849f3f7409546d1d9: I don't know the history of why we decided to do it this way",
        "65325d50b2e25aca54bc871b89758c9c (10:33): (i.e. whether actual sites broke or if it was just for logical reasons)",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:33): 65325d50b2e25aca54bc871b89758c9c: IIRC, ap said it was just in case. (Not his exact words.)",
        "65325d50b2e25aca54bc871b89758c9c (10:33): I was gonna say, he's the one who would know",
        "65325d50b2e25aca54bc871b89758c9c (10:36): b8810fee2f4a71f849f3f7409546d1d9: I can't tell if Jonathan's proposed wording is for XPath or HTML5",
        "6d05f0c2942adc25946a4b02b37ffa00 (10:36): what's he's proposing, how does that effect XSLT applied to HTML?",
        "65325d50b2e25aca54bc871b89758c9c (10:36): b8810fee2f4a71f849f3f7409546d1d9: (or for whatever spec or specs define document.evaluate or XSLTProcessor",
        "6d05f0c2942adc25946a4b02b37ffa00 (10:36): s/effect/affect/",
        "65325d50b2e25aca54bc871b89758c9c (10:37): 6d05f0c2942adc25946a4b02b37ffa00: seems like no effect, since it's scoped to document.evaluate as written",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:37): 6d05f0c2942adc25946a4b02b37ffa00: it doesn't affect XSLT applied to an HTML DOM compared to current HTML 5 spec text unless the tree also has no-namespace nodes introduced with createElementNS or by importing from an XML tree",
        "65325d50b2e25aca54bc871b89758c9c (10:38): b8810fee2f4a71f849f3f7409546d1d9: did you find actual compat issues when you changed this in Gecko, or just broken test cases?",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:38): 65325d50b2e25aca54bc871b89758c9c: it needs to apply to *any* DOM API that causes XPath to be evaluated against an HTML DOM",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:38): 65325d50b2e25aca54bc871b89758c9c: including whatever the API is for invoking XSLT from JS",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:39): 65325d50b2e25aca54bc871b89758c9c: making no-namespace name expressions match http://www.w3.org/1999/xhtml nodes in HTML trees is needed for compat.",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:39): 65325d50b2e25aca54bc871b89758c9c: making no-namespace name expressions also match no-namespace element nodes is in Gecko solely for uniformness with the WebKit behavior",
        "6d05f0c2942adc25946a4b02b37ffa00 (10:40): sorry, phrased my question wrong, I was wondering whether that'd be a problem",
        "65325d50b2e25aca54bc871b89758c9c (10:40): b8810fee2f4a71f849f3f7409546d1d9: I see, so the WebKit change you are talking about is to *not* match no-namespace element nodes in HTML trees?",
        "65325d50b2e25aca54bc871b89758c9c (10:40): b8810fee2f4a71f849f3f7409546d1d9: I don't see a problem with doing that",
        "65325d50b2e25aca54bc871b89758c9c (10:40): b8810fee2f4a71f849f3f7409546d1d9: I misunderstood what you meant at first",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:41): 65325d50b2e25aca54bc871b89758c9c: yes",
        "65325d50b2e25aca54bc871b89758c9c (10:42): we'd just have to tweak our isHTMLElement/isHTMLDocument special case slightly",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:46): 65325d50b2e25aca54bc871b89758c9c: commented",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:46): on the bug that is",
        "65325d50b2e25aca54bc871b89758c9c (10:46): b8810fee2f4a71f849f3f7409546d1d9: thanks!",
        "b8810fee2f4a71f849f3f7409546d1d9 (11:07): I like the new meta@scheme example",
        "f139aba52f9fa1394b4034a7954b2220 (11:10): b8810fee2f4a71f849f3f7409546d1d9, which example are you referring to?",
        "b8810fee2f4a71f849f3f7409546d1d9 (11:11): f139aba52f9fa1394b4034a7954b2220: the one with ORLY"
    ],
    "person_ids": [
        "6d05f0c2942adc25946a4b02b37ffa00",
        "86123bebfedc05009c27d1ac8f8c7411",
        "f139aba52f9fa1394b4034a7954b2220",
        "65325d50b2e25aca54bc871b89758c9c",
        "b8810fee2f4a71f849f3f7409546d1d9"
    ]
}