{
    "id": "bedfd464f38cbf8013097c765b4dc847",
    "messages": [
        "cc097e0d7183ae8436e7df709553c8c0 (22:27): is unsure how to implement the escaping with javascript",
        "a924fb58d2c25874322f4e5126f608b9 (22:28): What kind of escaping?",
        "cc097e0d7183ae8436e7df709553c8c0 (22:29): in sdf",
        "cc097e0d7183ae8436e7df709553c8c0 (22:29): http://simon.html5.org/specs/sdf",
        "cc097e0d7183ae8436e7df709553c8c0 (22:29): see the last example at the bottom",
        "a924fb58d2c25874322f4e5126f608b9 (22:33): Newlines are serialized as actual newlines?",
        "cc097e0d7183ae8436e7df709553c8c0 (22:34): LFs, yes",
        "a924fb58d2c25874322f4e5126f608b9 (22:35): Isn't that likely to cause trouble outside browsers?",
        "cc097e0d7183ae8436e7df709553c8c0 (22:35): why?",
        "a924fb58d2c25874322f4e5126f608b9 (22:36): Could be misinterpreted as a line separator?",
        "f139aba52f9fa1394b4034a7954b2220 (22:37): cc097e0d7183ae8436e7df709553c8c0, see http://lachy.id.au/dev/mozilla/sidebar/Unicode/character-tools.html",
        "f139aba52f9fa1394b4034a7954b2220 (22:38): that has the code to deal with parsing \\uXXXX",
        "cc097e0d7183ae8436e7df709553c8c0 (22:38): a924fb58d2c25874322f4e5126f608b9: you mean you would parse line for line instead of character by character?",
        "cc097e0d7183ae8436e7df709553c8c0 (22:38): f139aba52f9fa1394b4034a7954b2220: thanks",
        "a924fb58d2c25874322f4e5126f608b9 (22:39): I just know I've used text editors that do weird stuff when faced with both CR and LF mixed",
        "f139aba52f9fa1394b4034a7954b2220 (22:39): String.fromCharCode(codepoint) where code point is XXXX",
        "cc097e0d7183ae8436e7df709553c8c0 (22:40): f139aba52f9fa1394b4034a7954b2220: but will that work correctly with surrogate pairs?",
        "f139aba52f9fa1394b4034a7954b2220 (22:40): you have to do each one separately, JS can't deal with astral characters",
        "cc097e0d7183ae8436e7df709553c8c0 (22:40): a924fb58d2c25874322f4e5126f608b9: but this format will only have LFs",
        "a924fb58d2c25874322f4e5126f608b9 (22:41): Oh! I missed that",
        "cc097e0d7183ae8436e7df709553c8c0 (22:41): f139aba52f9fa1394b4034a7954b2220: oh. well then that makes it simpler",
        "f139aba52f9fa1394b4034a7954b2220 (22:41): cc097e0d7183ae8436e7df709553c8c0, you should probably make that clearer about LFs, even though that's actually specified in HTML5",
        "a924fb58d2c25874322f4e5126f608b9 (22:41): What's the reason for not escaping them inside strings, though?",
        "a924fb58d2c25874322f4e5126f608b9 (22:42): It makes the code more complex, after all",
        "cc097e0d7183ae8436e7df709553c8c0 (22:42): f139aba52f9fa1394b4034a7954b2220: html5?",
        "f139aba52f9fa1394b4034a7954b2220 (22:42): doesn't HTML5 specify how to serialise a DOM",
        "cc097e0d7183ae8436e7df709553c8c0 (22:43): umm. to html and xml using innerHTML",
        "f139aba52f9fa1394b4034a7954b2220 (22:43): well, actually, it defines that CR and CRLF wil be replaced with LF in the input stream, so CRs won't appear in the output",
        "f139aba52f9fa1394b4034a7954b2220 (22:43): unless they're added later",
        "cc097e0d7183ae8436e7df709553c8c0 (22:43): f139aba52f9fa1394b4034a7954b2220: right, but the dom can have CRs",
        "cc097e0d7183ae8436e7df709553c8c0 (22:44): f139aba52f9fa1394b4034a7954b2220: CRs have to be escaped in sdf",
        "f139aba52f9fa1394b4034a7954b2220 (22:44): why?",
        "cc097e0d7183ae8436e7df709553c8c0 (22:44): to avoid ending up with a mix of CRs and LFs",
        "cc097e0d7183ae8436e7df709553c8c0 (22:45): some text editors will be smart and make sure the file has consistent line endings",
        "cc097e0d7183ae8436e7df709553c8c0 (22:46): a924fb58d2c25874322f4e5126f608b9: i'm not sure what is more complex by having LFs in strings",
        "a924fb58d2c25874322f4e5126f608b9 (22:47): You need an additional check if ( c == 0x000A ) { emit LF }",
        "f139aba52f9fa1394b4034a7954b2220 (22:47): cc097e0d7183ae8436e7df709553c8c0, this works http://html5.lachy.id.au/output?data=%3Cscript%3E%0D%0Avar+c1+%3D+parseInt%28%22D801%22%2C+16%29%3B%0D%0Avar+c2+%3D+parseInt%28%22DC7E%22%2C+16%29%3B%0D%0Avar+chars+%3D+String.fromCharCode%28c1%29+%2B+String.fromCharCode%28c2%29%3B%0D%0A%0D%0Adocument.write%28chars%29%3B%0D%0A%3C%2Fscript%3E&amp;type=text%2Fhtml%3B+charset%3DUTF-8",
        "ab7faae5d7b250ea8606486575f8f79c (22:47): LFs in strings would mean you couldn't use a text editor to indent a chunk of SDF",
        "cc097e0d7183ae8436e7df709553c8c0 (22:48): ab7faae5d7b250ea8606486575f8f79c: why not?",
        "a924fb58d2c25874322f4e5126f608b9 (22:48): And from the syntax, it seems like SDF strings are intended to be JS-parseable, which the LFs break",
        "f139aba52f9fa1394b4034a7954b2220 (22:48): cc097e0d7183ae8436e7df709553c8c0, because you'd introduce extra spaces into the string",
        "ab7faae5d7b250ea8606486575f8f79c (22:48): Because the editor would add indentation at the start of each line, and if the start of a line is the inside of a string, then you'd be modifying the inside of the string unintentionally",
        "cc097e0d7183ae8436e7df709553c8c0 (22:49): good points",
        "cc097e0d7183ae8436e7df709553c8c0 (22:49): takes out the LF special case",
        "f139aba52f9fa1394b4034a7954b2220 (22:49): cc097e0d7183ae8436e7df709553c8c0, maybe allow \\n and \\r to occur within strings",
        "cc097e0d7183ae8436e7df709553c8c0 (22:50): maybe. if i do then i could also allow the other shorthands",
        "f139aba52f9fa1394b4034a7954b2220 (22:50): like \\t?",
        "cc097e0d7183ae8436e7df709553c8c0 (22:51): yeah, and \\f",
        "f139aba52f9fa1394b4034a7954b2220 (22:51): oh right",
        "f139aba52f9fa1394b4034a7954b2220 (22:51): yeah, those are compatible with various libraries and programming languages, so that shouldn't add too much complexity",
        "ab7faae5d7b250ea8606486575f8f79c (22:52): Can you just define it to be a JSON string?",
        "a924fb58d2c25874322f4e5126f608b9 (22:52): That's pretty much what it is",
        "cc097e0d7183ae8436e7df709553c8c0 (22:52): well then :)",
        "a924fb58d2c25874322f4e5126f608b9 (22:52): http://pastebot.nd.edu/3535",
        "cc097e0d7183ae8436e7df709553c8c0 (22:53): i guess i could simplify my parser after these changes",
        "a924fb58d2c25874322f4e5126f608b9 (22:55): One concern about the current form is that it uses a lot of bytes for non-printables inside the ascii range, but that's hardly a big deal",
        "cc097e0d7183ae8436e7df709553c8c0 (22:58): puts sdf in version control",
        "b8810fee2f4a71f849f3f7409546d1d9 (23:00): hmm. I wonder if a reply from me is expected to John Foliot's public-html follow-up to my message",
        "cc097e0d7183ae8436e7df709553c8c0 (23:06): ok, changed string to JSON string",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:09): any italians able to translate this for us? :-) http://scaccoalweb.vnunet.it/2007/09/html-5-ritorno-.html",
        "cc097e0d7183ae8436e7df709553c8c0 (23:09): google translate seems to work :)",
        "f139aba52f9fa1394b4034a7954b2220 (23:09): 69b0d3dfe919a6b860a9fac82de52a7e http://translate.google.com/translate?u=http%3A%2F%2Fscaccoalweb.vnunet.it%2F2007%2F09%2Fhtml-5-ritorno-.html",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:10): wow, a translation service that works? *skeptical*",
        "cc097e0d7183ae8436e7df709553c8c0 (23:11): points to http:/ b8810fee2f4a71f849f3f7409546d1d9.iki.fi/test/translate.html",
        "cc097e0d7183ae8436e7df709553c8c0 (23:14): i use that bookmarklet a lot :)",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:14): :-)",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:14): it doesn't work on my portal",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:14): i guess encodeURIComponent() doesn't work on IDN uris"
    ],
    "person_ids": [
        "cc097e0d7183ae8436e7df709553c8c0",
        "a924fb58d2c25874322f4e5126f608b9",
        "f139aba52f9fa1394b4034a7954b2220",
        "ab7faae5d7b250ea8606486575f8f79c",
        "b8810fee2f4a71f849f3f7409546d1d9",
        "69b0d3dfe919a6b860a9fac82de52a7e"
    ]
}