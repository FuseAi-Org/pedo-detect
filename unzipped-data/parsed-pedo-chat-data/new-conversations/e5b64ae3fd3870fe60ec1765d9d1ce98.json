{
    "id": "e5b64ae3fd3870fe60ec1765d9d1ce98",
    "messages": [
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:11): I'm failing badly at getting charsUntil any quicker",
        "ab7faae5d7b250ea8606486575f8f79c (18:15): Which part of charsUntil is slow?",
        "ab7faae5d7b250ea8606486575f8f79c (18:16): like, is it doing lots of complex calculation itself, or is it just spending its time pulling characters out of Python data structures?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:17): ab7faae5d7b250ea8606486575f8f79c: As far as I can see, the former",
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:17): well, it's hard to say :P",
        "ab7faae5d7b250ea8606486575f8f79c (18:19): Try removing all the functionality from the function and see how that affects performance :-)",
        "ab7faae5d7b250ea8606486575f8f79c (18:20): and if it's still just as slow, then it must be the interface with surrounding code that's slow, in which case I guess you can't do much to optimise that function by itself",
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:21): ab7faae5d7b250ea8606486575f8f79c: There isn't really much functionality to remove, without completely affecting what the function has to do. Removing some of the stuff would make it far quicker as it was operating on less data. :P",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:22): just rewriting it in C would help",
        "ab7faae5d7b250ea8606486575f8f79c (18:23): You could remove all the stuff that implements the &quot;until&quot; thing, and run it with test data that doesn't depend on the &quot;until&quot; thing working, and see how much effect that has",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:23): and then we need it to ship with python by default",
        "ab7faae5d7b250ea8606486575f8f79c (18:39): Seems like charsUntil can be made ~30% faster just by using a list instead of a deque",
        "ab7faae5d7b250ea8606486575f8f79c (18:39): (and storing the string reversed, so all the operations happen on the tail of the list)",
        "ab7faae5d7b250ea8606486575f8f79c (18:40): (except for readChunk but that can be made to only be called when the list is nearly empty, I think)",
        "ab7faae5d7b250ea8606486575f8f79c (18:45): (Also it could maybe be made much faster by storing a list of strings, instead of a list of characters)",
        "ab7faae5d7b250ea8606486575f8f79c (18:45): might look at that later tonight",
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:46): ab7faae5d7b250ea8606486575f8f79c: How would that allow you to make it quicker, thoguh",
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:46): *though",
        "f139aba52f9fa1394b4034a7954b2220 (18:46): oh crap! I just lost a whole heap of slides cause Keynote died :-(",
        "f139aba52f9fa1394b4034a7954b2220 (18:46): I",
        "f139aba52f9fa1394b4034a7954b2220 (18:46): I'll have to remake them now :-(",
        "ab7faae5d7b250ea8606486575f8f79c (18:46): a11aabeeceeae6b8cb5d12ea06b56554: Which &quot;that&quot; do you mean?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:46): ab7faae5d7b250ea8606486575f8f79c: str not char",
        "ab7faae5d7b250ea8606486575f8f79c (18:46): f139aba52f9fa1394b4034a7954b2220: Doesn't all office software have autosave?",
        "ab7faae5d7b250ea8606486575f8f79c (18:46): a11aabeeceeae6b8cb5d12ea06b56554: It'd let you run regexps",
        "ab7faae5d7b250ea8606486575f8f79c (18:47): and depending on how Python stores lists, it might be hugely more memory-efficient (hence cache-efficient and everything)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:47): ab7faae5d7b250ea8606486575f8f79c: http://code.google.com/p/html5lib/issues/detail?id=69",
        "ab7faae5d7b250ea8606486575f8f79c (18:48): wishes Opera didn't insist on opening patch files with &quot;less&quot;",
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:48): ab7faae5d7b250ea8606486575f8f79c: What if it opened it with &quot;more&quot;?",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:48): f139aba52f9fa1394b4034a7954b2220: no Time Machine?",
        "ab7faae5d7b250ea8606486575f8f79c (18:48): a11aabeeceeae6b8cb5d12ea06b56554: It'd let you run regexps without wasting loads of time calling 'join'",
        "ab7faae5d7b250ea8606486575f8f79c (18:49): (and without wasting memory etc)",
        "b07211a0c7cb119232799d2119cea90f (18:49): are strings immutable in python?",
        "a924fb58d2c25874322f4e5126f608b9 (18:49): ab7faae5d7b250ea8606486575f8f79c: Maybe you shouldn't set it to use less then :)",
        "ab7faae5d7b250ea8606486575f8f79c (18:50): a924fb58d2c25874322f4e5126f608b9: I never did, since that'd be stupid :-)",
        "ab7faae5d7b250ea8606486575f8f79c (18:50): b07211a0c7cb119232799d2119cea90f: Yes",
        "f139aba52f9fa1394b4034a7954b2220 (18:50): b8810fee2f4a71f849f3f7409546d1d9, no. The weird thing is I thought I had saved it regularly, but I lost everything since last night",
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:50): ab7faae5d7b250ea8606486575f8f79c: It probably means changing a heckuva lot though",
        "f139aba52f9fa1394b4034a7954b2220 (18:50): ab7faae5d7b250ea8606486575f8f79c, obviously keynote doesn't, though I wish it would",
        "ab7faae5d7b250ea8606486575f8f79c (18:51): a11aabeeceeae6b8cb5d12ea06b56554: I can't see any references other than a dozen mentions of self.queue in inputstream.py, and it should be feasible to optimise things somewhat without changing its interface",
        "f139aba52f9fa1394b4034a7954b2220 (18:54): at least this time I can remake it faster since I don't have to make decisions again, just remember what I had done, and I still have all the images",
        "edb259c0e0038f38bb200bc20c8cbf7e (19:17): a11aabeeceeae6b8cb5d12ea06b56554, the real solution here is a port of b8810fee2f4a71f849f3f7409546d1d9's parser to C++ and make a Python binding for that and get it shipped with Python 2.x",
        "edb259c0e0038f38bb200bc20c8cbf7e (19:18): a11aabeeceeae6b8cb5d12ea06b56554, though maybe that's too complex for now",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:18): edb259c0e0038f38bb200bc20c8cbf7e: Yeah, sure. That gets a quick parser. But how about when you want to iterate over every element in HTML 5? libxml (and lxml therefore too) is the only thing reasonably quick currently",
        "edb259c0e0038f38bb200bc20c8cbf7e (19:33): http://www.w3.org/Submission/2008/01/",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:39): HTTP is really odd.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:40): I find it very interesting that IIS (or HTTP.sys, really) is so much stricter than Apache",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:41): Even at a basic level, Apache accepts &quot;HTTP / 1.1&quot;  while IIS sends 400",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:42): it is, arguably, allowed by RFC2616",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:42): implied lws sux.",
        "a924fb58d2c25874322f4e5126f608b9 (19:47): edb259c0e0038f38bb200bc20c8cbf7e: So they want to push a patented algorithm into web fonts, or?",
        "edb259c0e0038f38bb200bc20c8cbf7e (19:49): beats me",
        "edb259c0e0038f38bb200bc20c8cbf7e (19:49): with the recent advanced of Opera and Safari, and soon Mozilla, I think EOT is pretty much dead",
        "edb259c0e0038f38bb200bc20c8cbf7e (19:49): advancements*",
        "b07211a0c7cb119232799d2119cea90f (19:50): except for people who care about IE",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:54): reports a bug on CFNetwork",
        "f139aba52f9fa1394b4034a7954b2220 (19:59): any suggestions for what I should put on the slide about &lt;video&gt;?  We're probably going to show an actual demo video in a browser for this as well",
        "ab7faae5d7b250ea8606486575f8f79c (19:59): discovers that the bottleneck in his code is &quot;for i in range(self.chunkOffset, len(self.chunk)):&quot;, so he rewrites it as an ugly &quot;i = ...; while i &lt; ...; ...; i += 1&quot; and cuts 40% off his execution time",
        "ab7faae5d7b250ea8606486575f8f79c (20:00): (I would have thought Python wouldn't be so incredibly dumb as to fail to optimise that very common case)",
        "a924fb58d2c25874322f4e5126f608b9 (20:01): Nobody uses indexes anymore, ab7faae5d7b250ea8606486575f8f79c. It's all lists. ;)",
        "ab7faae5d7b250ea8606486575f8f79c (20:01): The whole point of this code is that lists are slow and I want to avoid them :-p",
        "f139aba52f9fa1394b4034a7954b2220 (20:01): ab7faae5d7b250ea8606486575f8f79c, do you have any other cool &lt;canvas&gt; demos we could show off in our presentation?",
        "fd9ef1223e855714294498ebfde79f98 (20:02): ab7faae5d7b250ea8606486575f8f79c: xrange is your friend",
        "f139aba52f9fa1394b4034a7954b2220 (20:02): I might just use your game at canvex.lazyilluminati.com",
        "ab7faae5d7b250ea8606486575f8f79c (20:03): fd9ef1223e855714294498ebfde79f98: Aha, thanks, that's not noticeably slower than the manual loop, which is nice :-)",
        "ab7faae5d7b250ea8606486575f8f79c (20:03): (though it'd still be nicer if Python did that optimisation automatically)",
        "ab7faae5d7b250ea8606486575f8f79c (20:04): f139aba52f9fa1394b4034a7954b2220: Canvex is about the only significant &lt;canvas&gt; thing I've done",
        "f139aba52f9fa1394b4034a7954b2220 (20:04): ab7faae5d7b250ea8606486575f8f79c, ok.",
        "ab7faae5d7b250ea8606486575f8f79c (20:04): f139aba52f9fa1394b4034a7954b2220: There's http://www.p01.org/releases/DHTML_contests/files/20lines_twinkle/ which might be interesting",
        "f139aba52f9fa1394b4034a7954b2220 (20:04): ab7faae5d7b250ea8606486575f8f79c, could you zip up all the files for me so I can easily download and use it offline?",
        "edb259c0e0038f38bb200bc20c8cbf7e (20:04): f139aba52f9fa1394b4034a7954b2220, ask p01, he made that",
        "ab7faae5d7b250ea8606486575f8f79c (20:05): f139aba52f9fa1394b4034a7954b2220: Also http://glimr.rubyforge.org/cake/canvas.html with various stuff",
        "ab7faae5d7b250ea8606486575f8f79c (20:05): f139aba52f9fa1394b4034a7954b2220: What edb259c0e0038f38bb200bc20c8cbf7e said :-)",
        "f139aba52f9fa1394b4034a7954b2220 (20:06): edb259c0e0038f38bb200bc20c8cbf7e, yeah, I will. But was asking ab7faae5d7b250ea8606486575f8f79c for his canvex game",
        "ab7faae5d7b250ea8606486575f8f79c (20:06): f139aba52f9fa1394b4034a7954b2220: Oh, I misinterpreted you in the same way",
        "ab7faae5d7b250ea8606486575f8f79c (20:08): f139aba52f9fa1394b4034a7954b2220: http://canvex.lazyilluminati.com/83/83.zip is an almost recent copy of hopefully all the necessary files",
        "ab7faae5d7b250ea8606486575f8f79c (20:08): (I think it's just missing the Safari logo in the outdoors bit, because the game didn't work in Safari back then)",
        "f139aba52f9fa1394b4034a7954b2220 (20:11): ab7faae5d7b250ea8606486575f8f79c, it's reporting a well formedness error in ./textures/misc/ui_bottom.svgz",
        "ab7faae5d7b250ea8606486575f8f79c (20:11): f139aba52f9fa1394b4034a7954b2220: That's because Firefox is stupid, I think",
        "ab7faae5d7b250ea8606486575f8f79c (20:12): Either run it on a local web server, or modify play.xhtml to refer to .svg instead of .svgz",
        "ab7faae5d7b250ea8606486575f8f79c (20:12): ...and if the .zip doesn't include .svg files then gzip -d the .svgz ones",
        "f139aba52f9fa1394b4034a7954b2220 (20:12): what's the .svgz file?",
        "ab7faae5d7b250ea8606486575f8f79c (20:12): gzip-compressed SVG",
        "f139aba52f9fa1394b4034a7954b2220 (20:12): ok, I can run it from a webserver",
        "ab7faae5d7b250ea8606486575f8f79c (20:13): Might need to make sure the web server is configured to send the right content-type/encoding for .svgz - I'm not sure if they do it by default",
        "ab7faae5d7b250ea8606486575f8f79c (20:14): (The problem with using file:/// is that Firefox guesses the content-type but not -encoding for .svgz files, so it tries parsing the compressed data as XML)",
        "f139aba52f9fa1394b4034a7954b2220 (20:14): what's the apache directive for setting the content-encoding?",
        "f139aba52f9fa1394b4034a7954b2220 (20:16): ab7faae5d7b250ea8606486575f8f79c, what's the purpose of the graph I get when I press Cmd+T, and why have you overridden my Open New Tab command?",
        "ab7faae5d7b250ea8606486575f8f79c (20:16): AddEncoding gzip .svgz",
        "ab7faae5d7b250ea8606486575f8f79c (20:16): f139aba52f9fa1394b4034a7954b2220: It shows the framerate, and I overrode your new tab command because I'm cruel and unthoughtful"
    ],
    "person_ids": [
        "a11aabeeceeae6b8cb5d12ea06b56554",
        "ab7faae5d7b250ea8606486575f8f79c",
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "f139aba52f9fa1394b4034a7954b2220",
        "b8810fee2f4a71f849f3f7409546d1d9",
        "b07211a0c7cb119232799d2119cea90f",
        "a924fb58d2c25874322f4e5126f608b9",
        "fd9ef1223e855714294498ebfde79f98"
    ]
}