{
    "id": "9ac8e9580f8786c9273489268235263f",
    "messages": [
        "a3f19f90edf0a0893c7847d08016abe3 (09:14): 69b0d3dfe919a6b860a9fac82de52a7e, ping?",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:15): here",
        "a3f19f90edf0a0893c7847d08016abe3 (09:16): so i'm thinking about your [XXX]es that are meant to be like &quot;partial&quot; interfaces",
        "a3f19f90edf0a0893c7847d08016abe3 (09:16): and i see that they all only have attributes on them, no operations",
        "a3f19f90edf0a0893c7847d08016abe3 (09:17): so that means what you really want is to avoid having a new object in the prototype chain for objects implementing these interfaces",
        "a3f19f90edf0a0893c7847d08016abe3 (09:17): e.g. you don't want a new, empty prototype object in the chain that corresponds to the interface with the applets attribute on it",
        "a3f19f90edf0a0893c7847d08016abe3 (09:18): but, i don't think &quot;extending&quot; the interfaces, at the IDL level, is the right thing to do",
        "a3f19f90edf0a0893c7847d08016abe3 (09:18): you just want to control the JS aspects of it",
        "a3f19f90edf0a0893c7847d08016abe3 (09:18): so e.g. if these extended interfaces did have operations, then they would go on to the HTMLDocument prototype object (in this case)",
        "a3f19f90edf0a0893c7847d08016abe3 (09:21): well actually i see you have two kinds of XXXes now",
        "a3f19f90edf0a0893c7847d08016abe3 (09:21): on WindowModal, where you separate it because sometimes you want this interface to be implemented and sometimes not, but if it is, then there's no extra object in the prototype chain for WindowModal",
        "a3f19f90edf0a0893c7847d08016abe3 (09:22): and for the things in the Obsolete section, where they're separate just so you don't see them in the earlier sections",
        "a3f19f90edf0a0893c7847d08016abe3 (09:22): but they are actually part of the same interface",
        "a3f19f90edf0a0893c7847d08016abe3 (09:24): ok maybe i'm talking myself into allowing &quot;partial&quot; interface definitions",
        "a3f19f90edf0a0893c7847d08016abe3 (09:24): for that second case",
        "a3f19f90edf0a0893c7847d08016abe3 (09:24): even though it's only because of how you want to organise the spec",
        "a3f19f90edf0a0893c7847d08016abe3 (09:24): but for the WindowModal case i think your XXX does need to be something like NoPrototypeObject",
        "a3f19f90edf0a0893c7847d08016abe3 (09:27): maybe partial should also exist to support adding new constants from different specs, like DOMException codes",
        "a3f19f90edf0a0893c7847d08016abe3 (09:30): also, i'm thinking of moving a bunch of things from extended attributes into the &quot;proper&quot; syntax",
        "a3f19f90edf0a0893c7847d08016abe3 (09:30): like optional arguments, variadic operations",
        "a3f19f90edf0a0893c7847d08016abe3 (09:31): i'm gonna give up pretending web idl is a superset of omg idl",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:34): (still here, hold on)",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:35): a3f19f90edf0a0893c7847d08016abe3: basically my desire is to not have the spec separation affect the prototype chain",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:36): a3f19f90edf0a0893c7847d08016abe3: so we should be able to take, e.g., HTMLDocument, or Window, and split it amongst multiple specs and have zero effect on implementation requirements",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:36): a3f19f90edf0a0893c7847d08016abe3: basically i'm trying to avoid the problem b8810fee2f4a71f849f3f7409546d1d9 mentions regularly where you end up splitting the tech into silos per wg",
        "a3f19f90edf0a0893c7847d08016abe3 (09:38): so, having a [NoPrototypeObject] could do that",
        "a3f19f90edf0a0893c7847d08016abe3 (09:38): especially if the interface only has attributes, since they never go in prototype objects",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:38): they'll have methods sometimes",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:38): i'm surprised that they don't already",
        "a3f19f90edf0a0893c7847d08016abe3 (09:39): maybe something like [AugmentPrototype=Window] instead",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:39): yes",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:39): that would work",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:39): and then the &quot;actual&quot; interface name wouldn't matter?",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:40): i.e. it'd be an editorial concern only?",
        "a3f19f90edf0a0893c7847d08016abe3 (09:40): yes, except for other language bindings",
        "a3f19f90edf0a0893c7847d08016abe3 (09:40): which don't have prototypes",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:40): well for bindings that have classes i'd want the same thing",
        "a3f19f90edf0a0893c7847d08016abe3 (09:40): they'd be proper, separate interfaces still",
        "a3f19f90edf0a0893c7847d08016abe3 (09:40): yeah?",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:40): the idea is for there to be zero differences",
        "a3f19f90edf0a0893c7847d08016abe3 (09:40): how should it matter?",
        "a3f19f90edf0a0893c7847d08016abe3 (09:40): if you say &quot;all HTMLDocument objects also implement HTMLDocumentObselete&quot;",
        "a3f19f90edf0a0893c7847d08016abe3 (09:41): oh casting would matter",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:41): don't you have to explicitly cast from one to the other?",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:41): right",
        "a3f19f90edf0a0893c7847d08016abe3 (09:41): i mean, you'd need to cast",
        "a3f19f90edf0a0893c7847d08016abe3 (09:41): hmm",
        "a3f19f90edf0a0893c7847d08016abe3 (09:41): so it sounds like you exactly want a &quot;partial&quot; modifier on interface",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:42): the point is we should be able to take HTML5, 10 years from now, when it's all perfectly implemented (hah), and make 15 specs out of it and be able to release that as an Edited Recommendation that has zero changes required to any test suites in any languages",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:42): with all the same code working unchanged",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:42): that's basically what i'm doing, btw -- taking DOM2 HTML, and splitting it into the &quot;obsolete&quot; and &quot;today&quot; sections in html5",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:43): 10 years after DOM2 HTML was published",
        "a3f19f90edf0a0893c7847d08016abe3 (09:44): ok i'm gonna go for a &quot;partial&quot; keyword then, see how it goes",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:44): cool",
        "a3f19f90edf0a0893c7847d08016abe3 (09:44): partial interface HTMLDocument : ... { /* now stuff */ };   partial interface HTMLDocument { /* old stuff */ };",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:45): do i put it on all interfaces?",
        "a3f19f90edf0a0893c7847d08016abe3 (09:45): hmm",
        "a3f19f90edf0a0893c7847d08016abe3 (09:45): you want any interface to be extendable?",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:45): i'm sure there will be specs that add to Window if there aren't already",
        "a3f19f90edf0a0893c7847d08016abe3 (09:45): right",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:45): and it would have been nice to be able to add to HTMLElement instead of having the side interfaces, for some cases",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:46): but i dunno",
        "a3f19f90edf0a0893c7847d08016abe3 (09:46): yeah i'm not sure",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:46): i mean, if we have to have it to extend, you're basically saying it's the opposite of &quot;final&quot;",
        "a3f19f90edf0a0893c7847d08016abe3 (09:46): well, not really",
        "a3f19f90edf0a0893c7847d08016abe3 (09:46): you can extend with &quot;:&quot;",
        "a3f19f90edf0a0893c7847d08016abe3 (09:46): but it's a different kind of extending",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:46): yeah",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:47): &quot;:&quot; and also with &quot;side&quot; interfaces",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:47): like how EventTarget is on all Nodes",
        "a3f19f90edf0a0893c7847d08016abe3 (09:47): right",
        "a3f19f90edf0a0893c7847d08016abe3 (09:47): depends on how you want the prototype chain to look",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:47): but for some cases like Window that seems... wrong",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:47): yeah",
        "a3f19f90edf0a0893c7847d08016abe3 (09:47): yeah Window is a bit special in that regard, in that you think of it as just a pool of properties that you add to",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:47): i guess in practice people would just say that the interface they want to extend had &quot;partial&quot; on it",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:47): even if it didn't",
        "a3f19f90edf0a0893c7847d08016abe3 (09:48): heh perhaps",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:48): so in practice even if you say we have to put it on both, it won't matter",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:48): it's just nice to annotate one of them (the &quot;not primary&quot; one, there's usually a clear one that is the &quot;primary&quot; one) as being an extention of another",
        "a3f19f90edf0a0893c7847d08016abe3 (09:50): it's kinda weird for languages like java to have an interface whose definition changes depending on which specs you decide to implement",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:51): why?",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:51): how is that different from when you decide how much of one spec to implement?",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:51): it's not like spec boundaries reflect actual implementation boundaries, like, ever",
        "a3f19f90edf0a0893c7847d08016abe3 (09:52): it's different if you want to use two libraries together, say",
        "a3f19f90edf0a0893c7847d08016abe3 (09:52): let's say a spec first defines interface A",
        "a3f19f90edf0a0893c7847d08016abe3 (09:52): and a later spec defines an extension to A",
        "a3f19f90edf0a0893c7847d08016abe3 (09:52): and both of these specs used this &quot;partial&quot; keyword to allow this",
        "a3f19f90edf0a0893c7847d08016abe3 (09:53): one library was compiled with the first A, and another library was compiled with the extended A",
        "a3f19f90edf0a0893c7847d08016abe3 (09:53): now both libraries have different A.class files",
        "a3f19f90edf0a0893c7847d08016abe3 (09:53): whichever one the class loader finds first is the one that will be usable",
        "a3f19f90edf0a0893c7847d08016abe3 (09:53): you need to be sure to get the extended one loaded first somehow",
        "a3f19f90edf0a0893c7847d08016abe3 (09:54): but then it's impossible if there were two extensions to A, and each library chose the different extended one",
        "a3f19f90edf0a0893c7847d08016abe3 (09:54): you couldn't get both libraries working together in the one program",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:56): what about if you use two libraries, and they both implement a part of the same spec?",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:56): same problem",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:56): literally the same problem, because the next day that spec might be split into two",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:57): and the day after that the specs might be merged together again",
        "a3f19f90edf0a0893c7847d08016abe3 (09:57): you could at least have the same all-in-one interface implemented by both libraries, but some of those methods just throw a NotImplementedException or something",
        "a3f19f90edf0a0893c7847d08016abe3 (09:57): in fact you would need to, to get it to compile",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:58): i guess in java maybe. in javascript we encourage implementations that don't support something to not expose it, so that you can test to see if it exists",
        "a3f19f90edf0a0893c7847d08016abe3 (09:58): yes",
        "a3f19f90edf0a0893c7847d08016abe3 (09:59): it's a benefit of not having to implement a whole interface i suppose",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:59): well it's a benefit of easy reification",
        "a3f19f90edf0a0893c7847d08016abe3 (10:00): benefit of duck typing (sorta)?",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:01): vaguely",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:01): not exclusively though",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:01): it's a benefit of late binding and easy reification",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:02): sorry, not reification, reflection",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:02): late binding and reflection",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:02): because you can compile code that uses something without it needing to be supported, and then you can test to see if that code would work, and if it doesn't, you can skip it",
        "a3f19f90edf0a0893c7847d08016abe3 (10:05): so for something like WindowTimers, would you want to do that with partial instead?",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:09): yeah",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:09): actually no",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:09): well",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:09): gah, i dunno",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:10): WindowTimers is also implemented by the WorkerUtils object",
        "a3f19f90edf0a0893c7847d08016abe3 (10:10): ah",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:10): but i'd want it to appear on the prototype of WorkerUtils (which itself should just appear on the prototype of two other interfaces), and i'd want it to appear as if it was part of Window also",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:10): and it's specced in the same spec as Window but not the same spec as WorkerUtils",
        "a3f19f90edf0a0893c7847d08016abe3 (10:11): do any of these use &quot;:&quot;?",
        "a3f19f90edf0a0893c7847d08016abe3 (10:11): or is it [ImplementedOn]",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:12): none of these use :",
        "a3f19f90edf0a0893c7847d08016abe3 (10:12): btw i think i like the &quot;Node implements EventTarget;&quot; kind of syntax",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:12): oh actually that's a lie",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:12): the WorkerUtils thing is implemented on interfaces that do use inheritance",
        "a3f19f90edf0a0893c7847d08016abe3 (10:13): [AugmentPrototype] Window implements WindowTimers;",
        "a3f19f90edf0a0893c7847d08016abe3 (10:13): or if you're doing something with &quot;:&quot;",
        "a3f19f90edf0a0893c7847d08016abe3 (10:14): interface ExtendedWindow : [AugmentPrototype] Window ...",
        "a3f19f90edf0a0893c7847d08016abe3 (10:14): but have Java interfaces change depending on which specs you choose to implement seems bad to me",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:15): well i don't really mind how you end up doing things for java really",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:15): i'm mildly professionally interested in how what you do ends up for C++, because of Native Client's use of WebIDL",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:15): but really my interest lies in JS",
        "a3f19f90edf0a0893c7847d08016abe3 (10:17): having c++ classes with different members seems as bad as with java",
        "a3f19f90edf0a0893c7847d08016abe3 (10:17): mixin abstract classes (just like different java interfaces) seems ok though",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:20): raises eyebrows at www-tag",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:23): s/www-tag/www-archive-",
        "a3f19f90edf0a0893c7847d08016abe3 (10:28): 69b0d3dfe919a6b860a9fac82de52a7e, i'll think about partial/[AugmentPrototype] a bit more, gotta head home now"
    ],
    "person_ids": [
        "a3f19f90edf0a0893c7847d08016abe3",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "b8810fee2f4a71f849f3f7409546d1d9"
    ]
}