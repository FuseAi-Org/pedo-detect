{
    "id": "ce0fcf892c483558086b067b6bc00390",
    "messages": [
        "b25b6b77a0087ff8385941e5545d32ea (13:29): Argh. I really wish javascript had named parameters",
        "9dfea2f9bd9114520591dceb20d528a1 (13:30): Named parameters?",
        "b25b6b77a0087ff8385941e5545d32ea (13:30): like foo(bar=baz)",
        "b25b6b77a0087ff8385941e5545d32ea (13:30): named arguments maybe",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:30): b25b6b77a0087ff8385941e5545d32ea: should be easy enough to pass an object with all the named stuff inside",
        "b25b6b77a0087ff8385941e5545d32ea (13:30): b8810fee2f4a71f849f3f7409546d1d9: Yeah, that is one possibility",
        "b25b6b77a0087ff8385941e5545d32ea (13:31): In fact I am already using that possibility",
        "b25b6b77a0087ff8385941e5545d32ea (13:31): But...",
        "9dfea2f9bd9114520591dceb20d528a1 (13:31): Or toString the function reference and extract the parameter names, then create an array with the right order and apply",
        "9dfea2f9bd9114520591dceb20d528a1 (13:31): :D",
        "b25b6b77a0087ff8385941e5545d32ea (13:31): Anyway, back in the land of the sane...",
        "b25b6b77a0087ff8385941e5545d32ea (13:31): I have a pair of functions",
        "b25b6b77a0087ff8385941e5545d32ea (13:32): Well a function and a method",
        "b25b6b77a0087ff8385941e5545d32ea (13:32): the function looks like test(func, name, properties)",
        "b25b6b77a0087ff8385941e5545d32ea (13:33): the methos looks like test.step(func)",
        "b25b6b77a0087ff8385941e5545d32ea (13:33): I have now realised I should make it possible to change the this object that is used to call func",
        "b25b6b77a0087ff8385941e5545d32ea (13:33): so I can have the caller pass in a this object",
        "b25b6b77a0087ff8385941e5545d32ea (13:34): for Test.step that is fine: test.step(func, this_obj)",
        "b25b6b77a0087ff8385941e5545d32ea (13:34): but what to do for test()?",
        "b25b6b77a0087ff8385941e5545d32ea (13:34): The logical place to put the parameter would be second test(func, this_obj, name, properties)",
        "b25b6b77a0087ff8385941e5545d32ea (13:35): But the common case is to use the global scope",
        "b25b6b77a0087ff8385941e5545d32ea (13:35): so you would always have to pass undefined",
        "b25b6b77a0087ff8385941e5545d32ea (13:36): Which would be bad",
        "b25b6b77a0087ff8385941e5545d32ea (13:36): Putting it after name would give a weird order and mean you had to pass undefined if you want to set properties",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:37): can't you check whether it is the global scope within test?",
        "b25b6b77a0087ff8385941e5545d32ea (13:37): Whether what is the global scope?",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:38): this?",
        "ab7faae5d7b250ea8606486575f8f79c (13:38): Do test(func, name, properties) and test_with_this(func, this_obj, name, properties)",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:38): is there a scenario where you need test rather than test_async btw with this working?",
        "b25b6b77a0087ff8385941e5545d32ea (13:39): edb259c0e0038f38bb200bc20c8cbf7e: test() is just for covenience because it causes the test to be run immediately",
        "b25b6b77a0087ff8385941e5545d32ea (13:39): seems useful",
        "b25b6b77a0087ff8385941e5545d32ea (13:39): ab7faae5d7b250ea8606486575f8f79c: Ugly but workable",
        "b25b6b77a0087ff8385941e5545d32ea (13:39): I could typecheck the second parameter of course",
        "b25b6b77a0087ff8385941e5545d32ea (13:39): That would be the jQuery way",
        "b25b6b77a0087ff8385941e5545d32ea (13:39): But...",
        "ab7faae5d7b250ea8606486575f8f79c (13:40): Or this_obj.apply(func, ...) (or whatever the syntax is) to use the normal language facilities for changing this",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:40): b25b6b77a0087ff8385941e5545d32ea, it's useful, but do you need &quot;this&quot; working when test is used?",
        "ab7faae5d7b250ea8606486575f8f79c (13:40): s/func/test/",
        "b25b6b77a0087ff8385941e5545d32ea (13:40): edb259c0e0038f38bb200bc20c8cbf7e: I thought you were the one with the use case :)",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:40): b25b6b77a0087ff8385941e5545d32ea, my use case is only for test_async",
        "b25b6b77a0087ff8385941e5545d32ea (13:41): edb259c0e0038f38bb200bc20c8cbf7e: Seems odd to let it work in one case but not the other",
        "b25b6b77a0087ff8385941e5545d32ea (13:41): But maybe that is actually good to enfore",
        "b25b6b77a0087ff8385941e5545d32ea (13:41): *enforce",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:41): testing &quot;this&quot; is always needed in a callback... never really needed it elsewhere in usual tests",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:42): i mean, I can't remember having used it in some kind of sync variant",
        "b25b6b77a0087ff8385941e5545d32ea (13:42): OK I will take the simple solution of not solving the problem and calling it a feature",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:42): also, couldn't I use",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:43): test.step(function(this) { ... }) ?",
        "b25b6b77a0087ff8385941e5545d32ea (13:43): Yeah you could",
        "b25b6b77a0087ff8385941e5545d32ea (13:44): It feels nicer to optionally run the function in the expected scope though",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:44): actually, how would I then access it?",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:44): yeah, if you can do that and tell me how to make it work",
        "b25b6b77a0087ff8385941e5545d32ea (13:44): It's all fine",
        "b25b6b77a0087ff8385941e5545d32ea (13:44): notices he allowed extra arguments to step() get passed to the function",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:44): so you solve it on your side?",
        "b25b6b77a0087ff8385941e5545d32ea (13:45): That seems unnecessary...",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:45): so what do I do?",
        "b25b6b77a0087ff8385941e5545d32ea (13:45): edb259c0e0038f38bb200bc20c8cbf7e: Do test.step(function(){}, this)",
        "1f58faf0d058f303f30239a369808167 (13:45): fresh redesign of Zappos http://www.zappos.com/ by HappyCog http://happycog.com/create/zappos/",
        "1f58faf0d058f303f30239a369808167 (13:45): http://validator.w3.org/check?uri=http%3A%2F%2Fwww.zappos.com%2F&amp;charset=%28detect+automatically%29&amp;doctype=Inline&amp;group=0",
        "1f58faf0d058f303f30239a369808167 (13:45): using html5 doctype, but already invalid.",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:46): b25b6b77a0087ff8385941e5545d32ea, and then the bit between {} can use this without problems?",
        "b25b6b77a0087ff8385941e5545d32ea (13:46): Yeah, I think so",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:48): so I have test.step(function() { assert_equals(&quot;data&quot;, e.data); this.close() }, this)",
        "b25b6b77a0087ff8385941e5545d32ea (13:51): Yes",
        "b25b6b77a0087ff8385941e5545d32ea (13:51): Although the step is run synchronously",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:51): and if the listener is inlined it is fine right?",
        "b25b6b77a0087ff8385941e5545d32ea (13:51): so you can just close after the test.step rather than in the test function",
        "b25b6b77a0087ff8385941e5545d32ea (13:52): listener?",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:53): test.step(function() { obj.onmessage = function() { test.step(function() {}) } }) or some such",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:54): and a test.done() after the second test.step()",
        "b25b6b77a0087ff8385941e5545d32ea (13:54): Yeah that should be fine I think",
        "b25b6b77a0087ff8385941e5545d32ea (13:54): Hard to read all on one line in irc",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:54): lots of braces",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:54): hard to type too",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:55): all on one line",
        "edb259c0e0038f38bb200bc20c8cbf7e (13:56): b25b6b77a0087ff8385941e5545d32ea, I need assert_error() or some such for something that should not be reached",
        "b25b6b77a0087ff8385941e5545d32ea (13:57): edb259c0e0038f38bb200bc20c8cbf7e: Yeah, known bug. Will work on it next"
    ],
    "person_ids": [
        "b25b6b77a0087ff8385941e5545d32ea",
        "9dfea2f9bd9114520591dceb20d528a1",
        "b8810fee2f4a71f849f3f7409546d1d9",
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "ab7faae5d7b250ea8606486575f8f79c",
        "1f58faf0d058f303f30239a369808167"
    ]
}