{
    "id": "d2c843ac264792c88052cdd96c733dbd",
    "messages": [
        "ab7faae5d7b250ea8606486575f8f79c (20:31): http://canvex.lazyilluminati.com/misc/shadow/shadowdemo.png / http://canvex.lazyilluminati.com/misc/shadow/shadowdemo.html - did I forget any interesting cases to test?",
        "cc097e0d7183ae8436e7df709553c8c0 (20:47): http://simon.html5.org/test/html/serializing/002.xht",
        "cc097e0d7183ae8436e7df709553c8c0 (20:47): phew!",
        "cc097e0d7183ae8436e7df709553c8c0 (20:48): i really had to jump through hoops to test getting innerHTML (in both html and xml)",
        "cc097e0d7183ae8436e7df709553c8c0 (20:50): i had to come up with a custom format to express dom trees: http://simon.html5.org/specs/sdf",
        "cc097e0d7183ae8436e7df709553c8c0 (20:50): write a parser for that format in javascript",
        "cc097e0d7183ae8436e7df709553c8c0 (20:52): then write the actual tests in that format, and the expected html string (or exception) and expected exception for xml (if any)",
        "cc097e0d7183ae8436e7df709553c8c0 (20:53): for html, i parse the custom format and build a tree, then serialize it using innerHTML and compare the string with the expected html (or check if an exception was raised)",
        "cc097e0d7183ae8436e7df709553c8c0 (20:54): for xml, i parse the custom format and build a tree, then serialize it using innerHTML, then parse that with an XML parser, then compare the result with the original tree using a function that compares all characteristics of each node *except* namespace declarations and namespace prefixes",
        "ab7faae5d7b250ea8606486575f8f79c (20:56): cc097e0d7183ae8436e7df709553c8c0: http://simon.html5.org/specs/sdf - &quot;It has tree strings ...&quot;",
        "ab7faae5d7b250ea8606486575f8f79c (20:57): and &quot;respecively&quot;",
        "ab7faae5d7b250ea8606486575f8f79c (20:58): &quot;U+00A0 LINE FEED&quot;",
        "cc097e0d7183ae8436e7df709553c8c0 (20:59): fixed, thanks",
        "a924fb58d2c25874322f4e5126f608b9 (21:02): wonders why anyone would consider [[:digit:]] an improvement over [0-9]",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:03): in case the range changes",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:04): like &quot;PI&quot; is better than 3.14..., in case the value of PI changes",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:04): :-P",
        "ab7faae5d7b250ea8606486575f8f79c (21:05): You might want to include all Unicode digits, and the [...] syntax isn't incredibly great for that",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:07): :digit: doesn't include Ud, does it?",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:07): i thought it was only 0-9",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:10): er, Nd, i guess",
        "ab7faae5d7b250ea8606486575f8f79c (21:10): perl -e'for (qr/[0-9]/, qr/[[:digit:]]/, qr/\\d/) { print &quot;\\x{0b66}&quot; =~ $_ ? 1 : 0 }'",
        "ab7faae5d7b250ea8606486575f8f79c (21:10): says 011",
        "ab7faae5d7b250ea8606486575f8f79c (21:10): since U+0B66 is category Nd",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:11): ah",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:11): then that answers a924fb58d2c25874322f4e5126f608b9's question",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:11): they're not the same :-)",
        "a924fb58d2c25874322f4e5126f608b9 (21:11): But if you're matching more than 0-9 you'd obviously use \\d",
        "ab7faae5d7b250ea8606486575f8f79c (21:12): What if you want to match e.g. digits or commas?",
        "a924fb58d2c25874322f4e5126f608b9 (21:12): [\\d,]",
        "ab7faae5d7b250ea8606486575f8f79c (21:12): Hmm...",
        "ab7faae5d7b250ea8606486575f8f79c (21:13): What if you want to match e.g. digits or whitespace?",
        "ab7faae5d7b250ea8606486575f8f79c (21:13): given that \\s is not equivalent to [:space:]",
        "ab7faae5d7b250ea8606486575f8f79c (21:13): Actually, ignore the digits bit",
        "ab7faae5d7b250ea8606486575f8f79c (21:13): Actually, ignore all of that",
        "ab7faae5d7b250ea8606486575f8f79c (21:14): since you could use [\\s\\ck] instead of [[:space:]] which isn't that bad",
        "ab7faae5d7b250ea8606486575f8f79c (21:15): and it's irrelevant for the case of [:digit:] vs \\d",
        "ab7faae5d7b250ea8606486575f8f79c (21:16): But [:digit:] wins because it has theoretical purity, being consistent with the other Unicode category matchers",
        "a924fb58d2c25874322f4e5126f608b9 (21:20): Semantics for semantics' sake, eh? :P",
        "a6a85ac5a915114d44f12ad36090500c (21:29): fwiw, with a recent php/pcre you can do stuff like /\\p{Nd}/u",
        "ab7faae5d7b250ea8606486575f8f79c (21:33): Looks like Perl does that too, but without the /u",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:33): i just realised that this e-mail: http://html4all.org/pipermail/list_html4all.org/2007-August/000054.html",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:33): was sent the very day before i banned him from the whatwg list for 2 weeks for being unreasonable.",
        "a924fb58d2c25874322f4e5126f608b9 (21:36): So while we joke about cabals and conspiracies, they go and form one?",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:36): yeah, isn't it awesome?",
        "a924fb58d2c25874322f4e5126f608b9 (21:39): I dunno, how come they aren't getting formal complaints against them? :)",
        "ab7faae5d7b250ea8606486575f8f79c (21:39): I still don't see why they form a secret cabal with a public mailing list",
        "6905646aa63b96d6bdfbd256603fa58e (21:52): ab7faae5d7b250ea8606486575f8f79c: for the same reason we formed a secret cabal w/ a public IRC channel"
    ],
    "person_ids": [
        "ab7faae5d7b250ea8606486575f8f79c",
        "cc097e0d7183ae8436e7df709553c8c0",
        "a924fb58d2c25874322f4e5126f608b9",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "a6a85ac5a915114d44f12ad36090500c",
        "6905646aa63b96d6bdfbd256603fa58e"
    ]
}