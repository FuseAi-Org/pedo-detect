{
    "id": "00dd2b029b49bbf01a318eead66254e3",
    "messages": [
        "f69d55844584e567962289a5226442b4 (18:54): http://docs.codehaus.org/display/GROOVY/Groovy%2B1.8%2Brelease%2Bnotes#Groovy1.8releasenotes-CommandchainsfornicerDomainSpecificLanguages",
        "b25b6b77a0087ff8385941e5545d32ea (19:18): TabAtkins: ]citation needed]",
        "b25b6b77a0087ff8385941e5545d32ea (19:19): s/]/[/",
        "a9b326df4e6da61c5b6f5e1058be83a2 (19:20): hsivonen: just sent you an updated version of the alternative-text checking patch",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:20): b25b6b77a0087ff8385941e5545d32ea: Mismatched brackets.",
        "a9b326df4e6da61c5b6f5e1058be83a2 (19:20): hsivonen: which deals properly with the nested-figure case",
        "ab7faae5d7b250ea8606486575f8f79c (19:22): a11aabeeceeae6b8cb5d12ea06b56554: Not if you have a non-stupid regexp engine",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:23): ab7faae5d7b250ea8606486575f8f79c: I don't have one of those. :'(",
        "8269fc4aca67c69ef320ddd69881d4cc (19:25): ab7faae5d7b250ea8606486575f8f79c: by the way, /a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?aaaaaaaaaaaaaaaaaaaaaaaa/.exec('aaaaaaaaaaaaaaaaaaaaaaa') takes forever to *run* in chrome and opera",
        "8269fc4aca67c69ef320ddd69881d4cc (19:25): and fast in firefox",
        "8269fc4aca67c69ef320ddd69881d4cc (19:26): which one is non-stupid?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:26): wonders how that is fast in Firefox",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:29): I get 0 ms for both Firefox and Opera, but 100+ ms for Chrome.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:29): How can that possibly take 100+ ms to evaluate?",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:29): Oh, I guess it's trying to check all the possibilities and doesn't realize lots are the same . . .",
        "8269fc4aca67c69ef320ddd69881d4cc (19:29): I think they detect this kind of regexp, or something",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:29): 2^18?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:30): 88d4d34a8064a4ff39fd5e144eea7762: Backtracking.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:30): Does changing it to a?b?c?... make it slower?",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:30): Oh, but that would mean you wouldn't have to backtrack, maybe?",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:30): doesn't know how these things work, clearly",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:31): Regex is like a CPU: I know how it works in a black-box sort of way, but the innards are pure magic.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:31): (okay, I understand the innards of regex and CPUs a little bit)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:31): 88d4d34a8064a4ff39fd5e144eea7762: a?a? you may just optimize to a{0,2}, so that's how you make that case quick",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:32): 88d4d34a8064a4ff39fd5e144eea7762: but a?b?c? you can't, unless you transform the NFA you create to a DFA (and creating a DFA is potentionally O(n^2), and JS RegExp isn't actually entirely regular, so not all RegExp can be converted to DFA)",
        "ab7faae5d7b250ea8606486575f8f79c (19:33): Does /(a?)(a?)(a?).../ go slow in more browsers?",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:33): But a?b?c?... wouldn't be slow with the given string, since none of the letters after the first occur, so you don't have to backtrack, right?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:33): 88d4d34a8064a4ff39fd5e144eea7762: So you have a trade-off between compiling to a DFA (O(n^2) worst-case) and then O(n) runtime, or 0 compiling time and worst-case O(x^n) runtime\u201a\u00c4\u00b6",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:33): 88d4d34a8064a4ff39fd5e144eea7762: No existing JS impl compiles to a DFA, though",
        "ab7faae5d7b250ea8606486575f8f79c (19:34): I think DFAs are O(2^n), not O(n^2)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:34): ab7faae5d7b250ea8606486575f8f79c: Entirely possible my memory is wrong :)",
        "8269fc4aca67c69ef320ddd69881d4cc (19:34): hmm, yep, I think it is exponential complexity...",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:35): ab7faae5d7b250ea8606486575f8f79c, with (a?) it's just as fast in Firefox and Opera for me.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:35): Yeah, wikipedia says ab7faae5d7b250ea8606486575f8f79c is right",
        "8269fc4aca67c69ef320ddd69881d4cc (19:36): 88d4d34a8064a4ff39fd5e144eea7762: putting parenthesis is still slow in chrome",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:37): 8269fc4aca67c69ef320ddd69881d4cc, he was asking if that made it slower, not if it made it faster.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:37): I assume it will only ever make it slower.",
        "ab7faae5d7b250ea8606486575f8f79c (19:37): was just guessing it might defeat optimisations that detect that particular pattern",
        "8269fc4aca67c69ef320ddd69881d4cc (19:37): ah, yes",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:37): It should defeat simple tricks like replacing it with a{0,18} or such.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:37): Since you have to provide eighteen separate matches.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:38): (assuming I counted right, which is not a reliable assumption)",
        "ab7faae5d7b250ea8606486575f8f79c (19:38): (Maybe they cleverly detect that you're ignoring the return value of the regexp?)",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:38): I wondered about that.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:40): ab7faae5d7b250ea8606486575f8f79c: That would be quite hard to do",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:40): ab7faae5d7b250ea8606486575f8f79c, also, the return value is null in this case.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:43): http://software.hixie.ch/utilities/js/live-dom-viewer/saved/967",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:43): Firefox and Opera are 0 ms in all four cases.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:43): Chrome gets me around 50 ms in the first two cases (no match), 5 ms in the last two (match).",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:44): concludes V8 regex is just slow",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:44): (at least in this case)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:46): 88d4d34a8064a4ff39fd5e144eea7762: We cache results for regexp, so that might help there",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:46): That's probably why Chrome speeds up when I do more iterations.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:46): But the basic effect is still visible with a single iteration.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:46): I know when Carakan shipped we were the only ones to cache results, dunno about now.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:49): Chrome is pretty clearly doing *something* to speed up repeated regexes.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:50): Not fully caching the result, that's clear, but the first call to the slow regex takes 100+ ms and subsequent calls take only 50 ms.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:51): Maybe it does some kind of time-consuming optimized compile of the regex, and caches the compiled version, or something.",
        "a9b326df4e6da61c5b6f5e1058be83a2 (19:53): ah, wonderful - Joyent has trademarked &quot;Node.js&quot; and released a statement saying stuff like &quot;Use of a trademark in a domain name (e.g., nodeconsultingservices.com)&quot; is now prohibited",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:55): nodeconsultingservices.com was just registered anonymously today.",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:55): And redirects to http://www.dchest.org/node.html.",
        "a9b326df4e6da61c5b6f5e1058be83a2 (19:55): heh",
        "a9b326df4e6da61c5b6f5e1058be83a2 (19:55): beautiful"
    ],
    "person_ids": [
        "f69d55844584e567962289a5226442b4",
        "b25b6b77a0087ff8385941e5545d32ea",
        "a9b326df4e6da61c5b6f5e1058be83a2",
        "a11aabeeceeae6b8cb5d12ea06b56554",
        "ab7faae5d7b250ea8606486575f8f79c",
        "8269fc4aca67c69ef320ddd69881d4cc",
        "88d4d34a8064a4ff39fd5e144eea7762"
    ]
}