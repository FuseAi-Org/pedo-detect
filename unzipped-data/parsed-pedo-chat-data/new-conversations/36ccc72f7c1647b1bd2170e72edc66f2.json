{
    "id": "36ccc72f7c1647b1bd2170e72edc66f2",
    "messages": [
        "ab7faae5d7b250ea8606486575f8f79c (03:52): anne: For the differences document, I can see a few attributes in HTML4 (in particular the Strict DTD) and not in HTML5, which don't seem to be mentioned yet",
        "ab7faae5d7b250ea8606486575f8f79c (03:53): @style  @accesskey  area@target  area@rel  area@media  @hreflang  caption@char  caption@charoff  colgroup@span  img@name  object@codebase  object@name  td@scope",
        "139513027e8e90b5582cbc68fc733884 (03:54): ab7faae5d7b250ea8606486575f8f79c: it's really good that you are looking at it systematically",
        "ab7faae5d7b250ea8606486575f8f79c (03:54): Also, tabindex should probably go in the &quot;Several attributes from HTML4 now apply to all elements&quot; section, not the &quot;There are also several new global attributes&quot; section",
        "ab7faae5d7b250ea8606486575f8f79c (03:55): 139513027e8e90b5582cbc68fc733884: That's the benefit of laziness - it takes less physical effort to just write a script to parse the DTD and spec and compare them, than to actually read the documents ;-)",
        "139513027e8e90b5582cbc68fc733884 (03:56): ab7faae5d7b250ea8606486575f8f79c: awesome",
        "139513027e8e90b5582cbc68fc733884 (03:56): ab7faae5d7b250ea8606486575f8f79c: will you be doing the same for the frameset and transitional DTDs?",
        "ab7faae5d7b250ea8606486575f8f79c (03:57): Oh, whoops, my list was wrong - that's not just dropped attributes, it includes added ones too",
        "ab7faae5d7b250ea8606486575f8f79c (03:57): but I forgot what the list was for when I was half way through writing it down",
        "ab7faae5d7b250ea8606486575f8f79c (03:57): (e.g. area@media is new, and the differences document only mentions a@media)",
        "ab7faae5d7b250ea8606486575f8f79c (03:58): 139513027e8e90b5582cbc68fc733884: I wasn't sure whether this thing was meant to be describing differences between HTML5 and Strict or Transitional or Frameset, so I just chose the former at first",
        "139513027e8e90b5582cbc68fc733884 (04:00): ab7faae5d7b250ea8606486575f8f79c: I think probably Frameset should be considered the baseline, but for dropped things that were only in Transitional/Frameset or only in Frameset it might be worth mentioning that they were missing in Strict too",
        "ab7faae5d7b250ea8606486575f8f79c (04:02): wonders why his DTD parsing regexps don't work as well as they should",
        "ab7faae5d7b250ea8606486575f8f79c (04:04): (Oh, because I forgot to write one of them)",
        "139513027e8e90b5582cbc68fc733884 (04:04): &quot;oops&quot;",
        "ab7faae5d7b250ea8606486575f8f79c (04:06): isn't looking at the WF2 elements at all, because that doesn't seem as easy to parse",
        "ab7faae5d7b250ea8606486575f8f79c (04:28): Unless I made a horrible mistake somewhere (which is not unlikely), http://canvex.lazyilluminati.com/misc/htmldiffs.txt shows the differences between HTML4 Transitional and HTML4 Strict and HTML5",
        "ab7faae5d7b250ea8606486575f8f79c (04:30): (There's no Frameset because I'll get way too many possible intersections between sets, and I'm not sure which ones would be useful to present)",
        "139513027e8e90b5582cbc68fc733884 (04:31): Frameset adds only a tiny amount of stuff to Transitional",
        "139513027e8e90b5582cbc68fc733884 (04:32): in fact I think it includes transitional by reference",
        "ab7faae5d7b250ea8606486575f8f79c (04:32): http://www.w3.org/TR/html401/frameset.dtd - aha, it doesn't actually define any elements or attributes",
        "ab7faae5d7b250ea8606486575f8f79c (04:33): so I don't need to do anything, since I don't care about content models",
        "ab7faae5d7b250ea8606486575f8f79c (04:37): Hmm, I should drop the &quot;only in HTML4 Strict&quot; because there isn't actually anything that's only in HTML4 Strict",
        "ab7faae5d7b250ea8606486575f8f79c (04:39): Oh, and I got some of the Transitional bits wrong since I hard-coded entity lists...",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:43): frameset does include new elements",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:44): but only because those elements are not included in any content models otherwise",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:44): so if you're going by the &lt;!ELEMENT&gt; things, you're fine",
        "ab7faae5d7b250ea8606486575f8f79c (04:56): http://canvex.lazyilluminati.com/misc/htmldiffs.txt - now updated to be more concise and hopefully more correct",
        "a9b326df4e6da61c5b6f5e1058be83a2 (04:58): ab7faae5d7b250ea8606486575f8f79c++",
        "a9b326df4e6da61c5b6f5e1058be83a2 (04:58): very handy",
        "ab7faae5d7b250ea8606486575f8f79c (04:59): The HTML5 Differences document seems quite inconsistent in how it talks about de-deprecated attributes - it makes it sound like &lt;base target&gt; is new and &lt;a target&gt; was just resurrected, except the Transitional DTD seems to treat both identically",
        "a3f19f90edf0a0893c7847d08016abe3 (05:00): can i make html5lib convert an html document into xml?",
        "ab7faae5d7b250ea8606486575f8f79c (05:01): a3f19f90edf0a0893c7847d08016abe3: Yes, as long as it's not a random HTML document you pulled off the web because then the chances would be good that it'll be unserialisable as XML",
        "a3f19f90edf0a0893c7847d08016abe3 (05:02): it's not a random one, but a specific one (the html5 spec)",
        "ab7faae5d7b250ea8606486575f8f79c (05:03): http://html5.googlecode.com/svn/trunk/spec-splitter/to-xhtml5.py converts it to XHTML5, and you can skip some bits if you just want generic XML",
        "a3f19f90edf0a0893c7847d08016abe3 (05:04): oh there's a .deb for html5lib, handy",
        "ab7faae5d7b250ea8606486575f8f79c (05:06): It's trivial to install from SVN - just rename the 'src' directory to 'html5lib', then stick it in the directory you're working in, then &quot;import html5lib&quot; should pick it up",
        "a3f19f90edf0a0893c7847d08016abe3 (05:07): ok.  (just went the apt-get install route tho)",
        "ab7faae5d7b250ea8606486575f8f79c (05:07): (Maybe that's not the official installation route, but it works for me...)",
        "a3f19f90edf0a0893c7847d08016abe3 (05:09): great, that worked beautifully",
        "ab7faae5d7b250ea8606486575f8f79c (05:11): doesn't see why anyone would want the spec as XML when you can just parse it with regular expressions ;-)",
        "a3f19f90edf0a0893c7847d08016abe3 (05:12): the pumping lemma, for one ;)",
        "a3f19f90edf0a0893c7847d08016abe3 (05:13): i just wanted to extract the idl",
        "a3f19f90edf0a0893c7847d08016abe3 (05:13): xslt seemed the easiest way",
        "ab7faae5d7b250ea8606486575f8f79c (05:17): The pumping lemma is no problem if you're using Perl regexps - the documentation even has an example of how to match correctly parenthesised strings :-)",
        "a3f19f90edf0a0893c7847d08016abe3 (05:18): ah well if you can execute arbitrary code within the regex matching you can do whatever you want :)",
        "ab7faae5d7b250ea8606486575f8f79c (05:32): Oh, whoops, still had missing bits in htmldiffs.txt... Fixed now",
        "ab7faae5d7b250ea8606486575f8f79c (05:34): Oh, whoops, it wasn't actually missing important bits and they were just redundant data... Refixed now"
    ],
    "person_ids": [
        "ab7faae5d7b250ea8606486575f8f79c",
        "139513027e8e90b5582cbc68fc733884",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "a9b326df4e6da61c5b6f5e1058be83a2",
        "a3f19f90edf0a0893c7847d08016abe3"
    ]
}