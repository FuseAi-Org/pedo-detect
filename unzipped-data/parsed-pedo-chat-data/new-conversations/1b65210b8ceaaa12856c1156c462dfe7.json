{
    "id": "1b65210b8ceaaa12856c1156c462dfe7",
    "messages": [
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:19): anyone 'do' mingw with devcpp ?",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:19): hei hei",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:21): my brain hurts!",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:22): can anyone help me with a c++ related problem?",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:22): I think I have an understanding problem here..",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:22): go ahead",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:23): in my main function I read in data and save them into a struct.. the struct is defined global, but I set the size of it's variables in main..then I call my qwt plot method to plot the data from the array.. so I probably have to give a pointer to the array to the method..",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:24): is there no other way to store data globally so all methods can access it?",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:24): can you paste the source at qtnode.net so that i can see",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:24): yes, I will reduce it a bit so you can see..",
        "ea3f8a0223777fdf8d12983027629f14 (16:31): 'delta_' pasted &quot;main.cpp&quot;: <a href=\"http://qtnode.net/pastebin/1028\">http://qtnode.net/pastebin/1028</a>",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:32): that's it..",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:33): where is the struct global?",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:33): oh, sorry.. no it's not..",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:33): because I don't know how to change it's size in main, when it's global..",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:34): what do you mean, change its size?",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:34): because in main I find out how big the data array has to be, according to the size of the infile..",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:36): well, you've got generally the right idea, if your data is variable size, that you are pointing to an array",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:36): but there's nothing wrong with...",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:36): in main I assign memory to blockdata.data with &quot;new double[size]&quot; where the size information I get from the file I read..",
        "ea3f8a0223777fdf8d12983027629f14 (16:37): 'Anonymous' pasted &quot;main.cpp&quot;: <a href=\"http://qtnode.net/pastebin/1029\">http://qtnode.net/pastebin/1029</a>",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:37): but do I have to give a pointer to the array from main to MainWin, and then from MainWin again to blockplot?",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:37): yes, unless it's global",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:37): like i pasted",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:38): ah, I see..",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:38): so I can change the size of the global struct?",
        "ea3f8a0223777fdf8d12983027629f14 (16:39): 'Anonymous' pasted &quot;main.cpp&quot;: <a href=\"http://qtnode.net/pastebin/1030\">http://qtnode.net/pastebin/1030</a>",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:39): you can also declare the blockdata like that",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:39): in the same struct",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:39): but...",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:39): you're not changing the size of the struct",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:39): in either case",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:40): so that's where i'm not following you",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:41): hmm, I think I am confused about how structs are saved in memory..",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:41): they are saved serially, exactly as you define them",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:41): but what you've defined is a double *",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:41): that's simple a pointer to a double",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:41): s/simple.simply",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:42): for the sake of discussion, let's say int stores two bytes",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:42): oh, so I have a struct in mem, on the position it gets put while it gets globally defined.. and the pointer to the double in it just points to an array of doubles of the size &quot;size&quot; I assign to it later?",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:42): float stores 4",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:43): yes, double * points to some other array of memory",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:43): then I get it :)",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:43): which is variable size",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:43): this isn't even c++ ;)",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:43): now I feel ashame..",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:43): you should probably store .size. in your struct as well",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:44): so that whoever gets the struct, knows how many doubles are being pointed to",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:44): that's a good idea..",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:44): and there are probably better ways of setting this up",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:44): what you've got here is pretty error prone",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:45): I thought about having a method that stores the data for me.. with functions to get data in and out..",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:45): there's nothing 'wrong' with it, but you've got to be careful",
        "6347b72ac49d27e665b4e1d68ee4ec44 (16:45): Hi all",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:45): well, the thing to do is declare a class BlockData instead of a struct",
        "6347b72ac49d27e665b4e1d68ee4ec44 (16:45): i want to learn to make a program with qt and i was wondering if you can point me to a qt4 for dummies sort of thing thats free online for me to use to learn to program",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:45): that would be c++",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:46): Ace2007, check out qtnode.net",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:46): there's a link on that home page",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:46): 'My First Qt Program&quot;",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:46): or did you try: <a href=\"http://doc.trolltech.com/4.1/examples.html\">http://doc.trolltech.com/4.1/examples.html</a>",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:46): there you find a lot of tutorial..",
        "6347b72ac49d27e665b4e1d68ee4ec44 (16:46): yay thanks",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:48): Delt_, what you would do is define BlockData as a class, and then give it a method like open() and then that method can take care of allocating the double space for that object, storing it, assigning the pointers, and also making sure it can remember how many doubles were allocated and so on... then the BlockData destructor would clean all that up",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:48): and that would be more object oriented",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:48): and safer",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:49): but... these are oo suggestions",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:50): that's right, but what I don't understand about that is, how can I access the same class from different classes, like from main, and from plotdata?",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:50): well, you're already doing that in a sense",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:50): BlockData is currently a struct, and structs are just the precursor to objects",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:51): how familiar are you with object-oriented programming methods?",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:51): I know the basics..",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:51): I know it's one step further than a struct..",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:51): because I can have functions in it..",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:51): not just data..",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:51): right",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:52): so, interpret() already accepts a struct it looks like",
        "425dffd65427c15fafee92dda64120e8 (16:52): hi there",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:52): if you simple replace 'struct BlockData' with 'class BlockData' you'd have an object.",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:53): then, to do it the oo way, you'd place the code to load the struct (class) with the data from the file &lt;&lt;inside&gt;&gt; the class, instead of inside main()",
        "425dffd65427c15fafee92dda64120e8 (16:53): I want to reimplement mouseReleaseEvent in a class derived from qlistview",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:53): and that object is global, because it's defined global..",
        "425dffd65427c15fafee92dda64120e8 (16:53): But somehow the mousereleaseevent never gets called.",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:53): correct",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:54): although, you'd have to say...",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:54): that sounds easy ..",
        "425dffd65427c15fafee92dda64120e8 (16:54): Do have to set something first?",
        "ea3f8a0223777fdf8d12983027629f14 (16:55): 'marlo' pasted &quot;main.cpp&quot;: <a href=\"http://qtnode.net/pastebin/1031\">http://qtnode.net/pastebin/1031</a>",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:55): now, that's a class",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:56): i don't see code for interpret() but if i'm understanding what it does, it probably belongs inside that class",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:57): yes, it does.. it reads data from memblock , interprets it, and saves it into blockdata",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:57): think of it this way, there's a file on disk, and it's an object... a file object, right?  all you do with block data is create a c++ object that 'models' that file object more intelligently rather than just binary",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:57): so, blockdata is 'smart'",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:57): it 'knows' what all that data is",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:57): and you can tell it things like load() and save()",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:58): that's the advantage of oo.. I know..",
        "9ffd5c1bd88891137050c50f48d5ce4d (16:58): I probably could save the data I read from the file directly into the blockdata class too..",
        "6d9eb3e601fdbdff06b6c01341bfe314 (16:59): well, possibly, except that you're dynamically allocating some of the space for that data",
        "9ffd5c1bd88891137050c50f48d5ce4d (17:00): I'll try this now..",
        "6d9eb3e601fdbdff06b6c01341bfe314 (17:00): but, also, you might eliminate the .abweichung. .mittelwert. .referenzwert. and so on and make those functions also",
        "6d9eb3e601fdbdff06b6c01341bfe314 (17:00): if they were functions, then you could simple load the binary file into the class buffer, that gets dynamically allocated, and then 'interpret' those values on the fly",
        "6d9eb3e601fdbdff06b6c01341bfe314 (17:01): when requested",
        "6d9eb3e601fdbdff06b6c01341bfe314 (17:01): s/simple/simply",
        "6d9eb3e601fdbdff06b6c01341bfe314 (17:01): THAT would be oo",
        "6d9eb3e601fdbdff06b6c01341bfe314 (17:02): instead of data in a struct, you'd have functions (that looked like data) in a class and once you did that you'd be able to control access and make a much safer object",
        "6d9eb3e601fdbdff06b6c01341bfe314 (17:02): structs have no control what so ever, and therefore no safety",
        "6d9eb3e601fdbdff06b6c01341bfe314 (17:02): with a class, you can build in safety and intelligence",
        "6d9eb3e601fdbdff06b6c01341bfe314 (17:02): and that's oo",
        "9ffd5c1bd88891137050c50f48d5ce4d (17:03): this is my first oo program :)",
        "9ffd5c1bd88891137050c50f48d5ce4d (17:03): so I am still learning..",
        "6d9eb3e601fdbdff06b6c01341bfe314 (17:03): well, there's nothing wrong with it, like i said.  it's just dangerous",
        "6d9eb3e601fdbdff06b6c01341bfe314 (17:04): allocating global data and then managing that data in various functions spread around your program is unsafe, and oo can provide an environment where its safer",
        "6d9eb3e601fdbdff06b6c01341bfe314 (17:04): if that makes sense",
        "9ffd5c1bd88891137050c50f48d5ce4d (17:04): it does.. and it's the better way to do it..",
        "6d9eb3e601fdbdff06b6c01341bfe314 (17:06): well, procedural programs are fine, but as programs get larger, oo helps (can help) to make things more organized... but there's a lot of lattitude left to the programmer, so oo environments, especially c++ often get a bad wrap unfairly.",
        "9ffd5c1bd88891137050c50f48d5ce4d (17:06): I spend most of my time doing embedded dsp programming..",
        "9ffd5c1bd88891137050c50f48d5ce4d (17:07): there it's all just c..",
        "6d9eb3e601fdbdff06b6c01341bfe314 (17:07): yea, but depending on the size of your project you've probably been thinking oo and not realizing it",
        "6d9eb3e601fdbdff06b6c01341bfe314 (17:07): i was when i was doing embedded work",
        "9ffd5c1bd88891137050c50f48d5ce4d (17:08): because of the limited memory you almost do everything global..",
        "6d9eb3e601fdbdff06b6c01341bfe314 (17:08): yea, that's true",
        "9ffd5c1bd88891137050c50f48d5ce4d (17:08): it's a mess when the projects get bigger..",
        "6d9eb3e601fdbdff06b6c01341bfe314 (17:09): that's probably where c++ gets a bad wrap, because there's more abstraction and therefore more pointers popping around on stacks and whatnot and that's tough on an embedded project",
        "6d9eb3e601fdbdff06b6c01341bfe314 (17:10): but i've implemented some c++ on a memory-tight imbedded project and with some planning it works out quite nice, because the program gets reorganized logically source-code wize without impacting the memory required to support it.",
        "6d9eb3e601fdbdff06b6c01341bfe314 (17:11): anyway, good luck with your project",
        "9ffd5c1bd88891137050c50f48d5ce4d (17:12): the embedded project I am working on has grown over some years now.. to restructure it would be a terrible job :)",
        "9ffd5c1bd88891137050c50f48d5ce4d (17:13): merci, and thanks a lot for your help",
        "425dffd65427c15fafee92dda64120e8 (17:20): It seems that it is quite a ritual. I need to ask in here, to find the answer with the assistant",
        "425dffd65427c15fafee92dda64120e8 (17:21): QListview has onle the protected member contentsMouseReleaseEvent.",
        "425dffd65427c15fafee92dda64120e8 (17:21): And I thought every Widget can use the normal MouseReleaseEvent"
    ],
    "person_ids": [
        "6d9eb3e601fdbdff06b6c01341bfe314",
        "9ffd5c1bd88891137050c50f48d5ce4d",
        "ea3f8a0223777fdf8d12983027629f14",
        "6347b72ac49d27e665b4e1d68ee4ec44",
        "425dffd65427c15fafee92dda64120e8"
    ]
}