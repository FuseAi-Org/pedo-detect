{
    "id": "a26093cc7712607b2fdd51763fe91608",
    "messages": [
        "b25b6b77a0087ff8385941e5545d32ea (00:39): 69b0d3dfe919a6b860a9fac82de52a7e: The current outline spec really doesn't seem that amenable to easy selector implementation since you always have to consider the possibility of &lt;h2&gt;-&lt;h6&gt; changing the depth",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:39): it can't change the depth of a &lt;section&gt; element",
        "b25b6b77a0087ff8385941e5545d32ea (00:39): I'm not saying I disapprove of the current spec, I just disagree with your statement",
        "b25b6b77a0087ff8385941e5545d32ea (00:40): No, but given an element it can change what outline depth it is at",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:42): given an element other than a sectioning element an an &lt;h1&gt; element, absolutely.",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:43): not much we can do about that if you want to be backwards compatible, but luckily there are few use cases for applying such a selector in those cases",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:43): and there's an easy workaround",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:43): (not using &lt;h2&gt;-&lt;h6&gt;)",
        "b25b6b77a0087ff8385941e5545d32ea (00:45): For the author, sure, not really for the browser implementor",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:46): why would browser implementors need such a selector for anything other than &lt;h1&gt;?",
        "b25b6b77a0087ff8385941e5545d32ea (00:46): I mean you can special case &lt;h1&gt; but you still need a slow-case",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:46): i don't understand",
        "b25b6b77a0087ff8385941e5545d32ea (00:46): I mean when implementing the selector",
        "b25b6b77a0087ff8385941e5545d32ea (00:46): It has to work for any author input",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:47): oh, i see. i'm saying to not do that. just do a selector that counts the number of elements of a given type in the ancetor chain.",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:47): there's no use case for a generic outline algorithm selector, don't even consider doing one",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:47): it would be a perf disaster",
        "b25b6b77a0087ff8385941e5545d32ea (00:47): The use case seems obvious",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:47): oh?",
        "b25b6b77a0087ff8385941e5545d32ea (00:48): Without it, there is very little use case for a generic outline algorithm",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:48): the generic outline algorithm's use case is anolis",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:48): that's about it",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:48): (anolis and other such systems that generate tables of contents)",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:48): certainly not styling",
        "b25b6b77a0087ff8385941e5545d32ea (00:48): In particular the classic example where you aggregate content from multiple sources on a single page",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:48): Also: my blog, since I use h1-6 inside a post, and h1 outside.",
        "b25b6b77a0087ff8385941e5545d32ea (00:48): and they all use headings differently",
        "b25b6b77a0087ff8385941e5545d32ea (00:49): And you want consistent styling",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:49): well that's an html4 issue, nothing to do with the new outlining algorithm",
        "b25b6b77a0087ff8385941e5545d32ea (00:49): Huh?",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:50): if you want to be able to style the old-style &lt;h2&gt;-&lt;h6&gt; implied sections, then the perf issues of that were introduced years ago. in, like, tbl's &quot;html markup&quot; paper.",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:50): that's why we introduced &lt;section&gt; and &lt;h1&gt;, so that you could style things",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:50): since the perf issue of h2-h6 make them untractable",
        "b25b6b77a0087ff8385941e5545d32ea (00:51): That was never mentioned as a reason at the time",
        "b25b6b77a0087ff8385941e5545d32ea (00:51): Unless my memory has entirely failed",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:52): the whole point of &lt;section&gt;/&lt;h1&gt; is that it lets the browser take care of styling the &lt;h1&gt; on the basis of the nesting level",
        "b25b6b77a0087ff8385941e5545d32ea (00:52): But use cases like aggregating content were extensivly discussed",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:52): that's another way of phrasing the same use case",
        "b25b6b77a0087ff8385941e5545d32ea (00:52): Not at all",
        "b25b6b77a0087ff8385941e5545d32ea (00:53): It specifically requires that you can mix different styles of markup in the same document",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:53): i don't really understand what we're arguing here.",
        "b25b6b77a0087ff8385941e5545d32ea (00:53): Not that you force a particular style for the CSS to work",
        "b25b6b77a0087ff8385941e5545d32ea (00:54): I'm arguing that selectors that work with the outline depth have to work with the full algorithm, even if they are only performant in special cases",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:55): my main point here is that the outline depth algorithm is certainly not expected to be used in a perf-sensitive situation such as selectors, and that doing so is a lost cause; the algorithm is just designed to reflect the actual semantics of the page for semantic analysis like creating TOCs; and the design of that algorithm is constrainted by history.",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:55): the new elements were specifically designed so that they could be styled in a performant manner",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:55): that's all",
        "b25b6b77a0087ff8385941e5545d32ea (00:56): I agree with all but the first point",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:56): So would you consider it okay to have a :heading(n) selector *only* pay attention to &lt;section&gt;/&lt;h1&gt;?",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:56): Or top-level &lt;h1-6&gt;?",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:56): i wouldn't consider :heading(n) to be a good idea regardless",
        "b25b6b77a0087ff8385941e5545d32ea (00:57): (I also think the &quot;selectors can't be slow&quot; thing has been overdone. Many other things that authors willingly do are slow. We don't have to refuse to provide selectors on the basis of perf. unless it is unreasonably slow)",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:57): but then i consider the use case of styling content that uses h2-h6 at different depths in an aggregation context to be a lost cause itself",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:58): better to use the outline depth algorithm in the aggregator to generate consistent headings",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:58): and then just use regular css",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:59): b25b6b77a0087ff8385941e5545d32ea: slow selectors are a huge problem, because they are trivial to use in dramatically bad ways, and only UAs that implement them get screwed, and authors have no idea why.",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:59): b25b6b77a0087ff8385941e5545d32ea: and the problem only exhibits itself in real documents, not in test documents which the authors are using when writing their style sheets",
        "b25b6b77a0087ff8385941e5545d32ea (01:00): It seems quite like that applies to many kinds of scripts as well",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:01): and we're going crazy trying to make js faster, to the point of introducing background workers",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:01): and never introducing sync APIs",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:01): there's only so much we can do about existing issues",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:02): but we shouldn't introduce new ones",
        "b25b6b77a0087ff8385941e5545d32ea (01:02): None of that is really relevant to the fact that jQuery has a parent selector and CSS does not",
        "b25b6b77a0087ff8385941e5545d32ea (01:02): I mean a faster js engine will help a bit",
        "b25b6b77a0087ff8385941e5545d32ea (01:02): But it is mostly DOM speed",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:02): jQuery doesn't have to evaluate selectors anywhere near as often as CSS.",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:03): Browsers could have a parent selector for querySelector(), but not for actual stylesheets.",
        "b25b6b77a0087ff8385941e5545d32ea (01:03): It depends what you are doing with it",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:03): Or so I've been told.",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:03): Plus, parent selectors break incremental rendering arbitrarily badly.",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:04): so does :last-child, to be fair",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:04): (although I guess :nth-child with negative numbers can be pretty bad too)",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:04): :last-child is fairly limited in the damage it can do.",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:04): fair enough",
        "b25b6b77a0087ff8385941e5545d32ea (01:04): Anyway I am not arguing for parent",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:05): you brought it up :-)",
        "b25b6b77a0087ff8385941e5545d32ea (01:05): I don't think outline selectors have the same level of problems",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:05): well if you want to put the outline algorithm into a css selector implementation, be my guest :-)",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:05): i don't think other UAs will rush to follow though :-)",
        "b25b6b77a0087ff8385941e5545d32ea (01:05): At least the mutations that affect them are rather constrained",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:07): &quot;section section h1&quot; is a pretty bad selector to use instead of &quot;:heading(3)&quot;. :/",
        "b25b6b77a0087ff8385941e5545d32ea (01:07): But I could be wrong",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:07): (Sorry I'm late with the response - I was shanghaid into a standards discussion.)",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:08): 1f8387eb43f131d7c309a90a4e36b5cb: i'm thinking more something like  h1:ancestor-count(:matches(section, article, nav, aside), 3)",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:09): Holy jeezus, no wonder you're concerned about performance.",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:09): (though not specifically that)",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:09): actually that one would be really fast",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:10): it just has to do a count on the ancestor chain, applying a cachable selector at each level",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:10): that's amongst the fastest selectors we have",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:10): It's as fast as a descendant selector is in anyone except current Webkit.",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:10): my point re performance was regarding something that had to implement the outline algorithm, which is a whole different level of perf pain",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:11): little slower that descendant selector, but trivially so probably, yeah",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:11): Seems to be no more painful than namespaces. ^_^",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:11): well the above wasn't a concrete proposal",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:11): i just meant that we should provide generic tools, not something hard-coded for HTML",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:11): I think we should provide both.",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:11): hard-coding for HTML is only a good idea when the alternative is completely out of control or impossible",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:12): but anyway",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:12): i trust y'all to do a good job here",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:13): I submit that h1:ancestor-count(:matches(section, article, nav, aside), 3) is completely out of control.",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:14): that was just an indication of the general intent, not a concrete proposal",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:14): Dunno how you'd make a general ability substantially  more consise.",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:14): i'd have to look at common use cases to have an actual proposal to make",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:38): 65325d50b2e25aca54bc871b89758c9c: can you confirm that i read the decision correctly on http://www.w3.org/Bugs/Public/show_bug.cgi?id=10066 ?",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:39): man this makes a mess of ARIA",
        "65325d50b2e25aca54bc871b89758c9c (01:40): 69b0d3dfe919a6b860a9fac82de52a7e: sure, what should I check?",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:40): last comment",
        "65325d50b2e25aca54bc871b89758c9c (01:40): I see, you have a comment",
        "65325d50b2e25aca54bc871b89758c9c (01:40): ok, lemme pull up the decision and CP to double check",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:40): the reason i ask is that if i'm correct, sam's decision seems to leave the conformance requirements in a really inconsistent state",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:41): e.g. &lt;button&gt; can be a menuitemradio, a menuitemcheckbox, a radio, but not a checkbox.",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:41): and a &lt;button&gt; can be a link, which makes no sense but i presume is intentional",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:42): similarly, &lt;h1&gt; can be a menuitemcheckbox and menuitemradio, but not a checkbox or a radio",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:42): i don't really understand what school of language design these decisions would stem from",
        "65325d50b2e25aca54bc871b89758c9c (01:42): it looks like you have copied the changes and exclusions correctly",
        "65325d50b2e25aca54bc871b89758c9c (01:42): now checking the delta",
        "fd9ef1223e855714294498ebfde79f98 (01:44): 69b0d3dfe919a6b860a9fac82de52a7e: I guess I should have said, in my response on that poll, that my list of crazy element/role combos wasn't intended to be complete",
        "fd9ef1223e855714294498ebfde79f98 (01:44): http://www.w3.org/2002/09/wbs/40318/issue-129-objection-poll/results#xfigure",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:45): ah, so the school of design sam followed is the &quot;have no idea what you're doing and try to crib off someone else&quot;?",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:45): sigh",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:46): in other news, anyone know how one goes about reverting a specific revision in svn?",
        "65325d50b2e25aca54bc871b89758c9c (01:46): 69b0d3dfe919a6b860a9fac82de52a7e: re reverting, best way is to reverse-apply the diff",
        "65325d50b2e25aca54bc871b89758c9c (01:47): 69b0d3dfe919a6b860a9fac82de52a7e: I think you have correctly captured what the decision says",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:47): doesn't svn have a way to do a reverse merge or something that takes into account all the changes after the revision so that i get fewer conflicts, or something?",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:48): 65325d50b2e25aca54bc871b89758c9c: ok. i guess i'll apply it and fork for whatwg? or maybe just apply it and fix it in a few years once people aren't paying attention anymore.",
        "65325d50b2e25aca54bc871b89758c9c (01:48): 69b0d3dfe919a6b860a9fac82de52a7e: some of the things you mention as inconsistent, I would guess Sam would have also listed as exclusions if anyone (e.g. Ted) had specifically objected to them as not being justified by practice, and probably &lt;botton&gt; being a radio or menu item would have reasonably fallen in that bucket",
        "65325d50b2e25aca54bc871b89758c9c (01:48): 69b0d3dfe919a6b860a9fac82de52a7e: at this point, though, someone would have to plead to reopen the decision based on new info to adjust those things",
        "b25b6b77a0087ff8385941e5545d32ea (01:50): loves Process",
        "fd9ef1223e855714294498ebfde79f98 (01:50): sad face",
        "65325d50b2e25aca54bc871b89758c9c (01:51): for some reason I am reminded of http://programming-motherfucker.com/",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:09): oh wow, this is awesome",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:09): the aria thing actually breaks h1-h6 in ATs",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:10): (it removes their nesting depth)",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:10): cries a little inside",
        "aea28773b701e6d37813b6bfc59e200b (02:18): LOL at programming-motherfucker :)",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:21): (oh wow, it also removes role=heading for h1-h6)",
        "1f8387eb43f131d7c309a90a4e36b5cb (02:21): Wut.",
        "fd9ef1223e855714294498ebfde79f98 (02:25): that makes no sense"
    ],
    "person_ids": [
        "b25b6b77a0087ff8385941e5545d32ea",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "1f8387eb43f131d7c309a90a4e36b5cb",
        "88d4d34a8064a4ff39fd5e144eea7762",
        "65325d50b2e25aca54bc871b89758c9c",
        "fd9ef1223e855714294498ebfde79f98",
        "aea28773b701e6d37813b6bfc59e200b"
    ]
}