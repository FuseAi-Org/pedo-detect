{
    "id": "2dca037bb0b2539a078a54563a3fe96f",
    "messages": [
        "4c681049601b3c374f1d2c0077c99049 (20:58): bdedc97e25dde1328bae6e2d092691c8: what the eff is thattttt",
        "bdedc97e25dde1328bae6e2d092691c8 (20:58): The first sign of The End of Days 4c681049601b3c374f1d2c0077c99049",
        "70bfd0ae2cfbf2da192bddd569cf6132 (21:17): remysharp: you around?",
        "18d23e7e3397f5ffebebd0fd268b2446 (21:23): chrome is now the #1 browser in Brazil! \\o/",
        "18d23e7e3397f5ffebebd0fd268b2446 (21:23): can't believe IE just dropped that much :)",
        "86cad2950224c9494ad2ef4eeca30def (21:34): so the very good URI regex in jquery.validate doesn't seem to allow the pipe | character -- yet I see it in URLs (examples http://bugs.jquery.com/ticket/4694) -- anyone know any background on that?",
        "0de37da1d654c10aed33d7b7347b8e3b (21:38): | is technically illegal in a URL",
        "0de37da1d654c10aed33d7b7347b8e3b (21:38): but a decent browser will go &quot;there is actually no good reason for that, I'm going to accept it anyway&quot;",
        "0de37da1d654c10aed33d7b7347b8e3b (21:39): http://www.rfc-editor.org/rfc/rfc1738.txt, search for &quot;|&quot;, first result is the right result",
        "86cad2950224c9494ad2ef4eeca30def (21:40): that's what I found so far too - I'm wondering if I should allow it in the regex because of the browser behavior, or if I maybe should have a pre-processor that transforms it or something",
        "86cad2950224c9494ad2ef4eeca30def (21:41): 0de37da1d654c10aed33d7b7347b8e3b: the weird thing there is, ~ is also listed there but passes the jquery.validate regex",
        "0de37da1d654c10aed33d7b7347b8e3b (21:41): that would suggest the validate is too loose, officially, as well as too strict, practically =)",
        "86cad2950224c9494ad2ef4eeca30def (21:41): :)",
        "0de37da1d654c10aed33d7b7347b8e3b (21:47): I love the Japanese sometimes.",
        "0de37da1d654c10aed33d7b7347b8e3b (21:47): &quot;jQuery\u201e\u00c5\u00c6\u2030?\u00fa\u00cb\u00c4\u00d6\u201e\u00c5\u00df\u201e\u00c5\u00c7\u201e\u00c7\u00e3John Lessig\u201e\u00c5\u00e5\u201e\u00c9\u00f3\u201e\u00c9?\u201e\u00c9\u00e0\u201e\u00c7\u00f8\u201e\u00c7\u00a7\u201e\u00c9\u00f3\u00c8\u00f1\u00e3\u00c1\u00f4?&quot;",
        "0de37da1d654c10aed33d7b7347b8e3b (21:48): that's what happens when your langauge has no distinction between R and L",
        "bdedc97e25dde1328bae6e2d092691c8 (21:49): 18d23e7e3397f5ffebebd0fd268b2446: What the hell happened in your nation recently?",
        "bdedc97e25dde1328bae6e2d092691c8 (21:50): Did the gov't switch browsers or something?",
        "bdedc97e25dde1328bae6e2d092691c8 (21:51): Maybe all the IE users moved from South America to North America\u201a\u00c4\u00b6",
        "c63a5cfce0a1819ebbe4a19e074356b6 (22:02): let's say that I have following array:",
        "c63a5cfce0a1819ebbe4a19e074356b6 (22:03): var keys = [true, &quot;blah&quot;, &quot;length&quot;, 22]",
        "c63a5cfce0a1819ebbe4a19e074356b6 (22:03): what is the fastest way to remove &quot;length&quot; item from this array?",
        "c63a5cfce0a1819ebbe4a19e074356b6 (22:04): keys.indexOf('length')",
        "c63a5cfce0a1819ebbe4a19e074356b6 (22:04): and then splice this index?",
        "0de37da1d654c10aed33d7b7347b8e3b (22:13): short of rolling your own, that's the most convenient.",
        "0de37da1d654c10aed33d7b7347b8e3b (22:14): if you absolute need speed, note that indexOf will already iterate through the array entry by entry, so you could bypass it with a function of your own that creates an empty array, fills it with entries while iterating over the filled array until it finds the to-remove value, and then merge the rest of the filled array after that entry into the initially empty array",
        "c63a5cfce0a1819ebbe4a19e074356b6 (22:21): 0de37da1d654c10aed33d7b7347b8e3b: btw, I get it now what you meant by moving non-enumerable properties to prototype, this approach feels really clean",
        "c63a5cfce0a1819ebbe4a19e074356b6 (22:24): WebKit inspectors shows the name of the constructor function when inspecting an object",
        "c63a5cfce0a1819ebbe4a19e074356b6 (22:25): this is very useful feature, but it requires me to build my inheritance chain with constructors",
        "c63a5cfce0a1819ebbe4a19e074356b6 (22:25): could it be possible to have simillar feature when using Object.create()?",
        "c63a5cfce0a1819ebbe4a19e074356b6 (22:26): I mean it would be helpful I could see the name of the prototype, not just its methods",
        "c63a5cfce0a1819ebbe4a19e074356b6 (22:27): I was thinking about creating a wrapper around Object.create that would automatically add special property &quot;name&quot;",
        "c63a5cfce0a1819ebbe4a19e074356b6 (22:28): I should probably call it __PROTOTYPE_NAME__ or something like that",
        "0acb83f1a9cfc48f061ff5555e61c6bf (22:38): c63a5cfce0a1819ebbe4a19e074356b6: there is no point of having underscores and caps in Javascript",
        "18d23e7e3397f5ffebebd0fd268b2446 (22:39): bdedc97e25dde1328bae6e2d092691c8: we're getting better on our choices, I think! hahaha :)",
        "18d23e7e3397f5ffebebd0fd268b2446 (22:39): improving it day by day.",
        "c63a5cfce0a1819ebbe4a19e074356b6 (22:40): 0acb83f1a9cfc48f061ff5555e61c6bf: yeah, but there is a convention that constants are in uppercase and magic variables are between __",
        "0acb83f1a9cfc48f061ff5555e61c6bf (22:40): c63a5cfce0a1819ebbe4a19e074356b6: in JS there are no constants",
        "0acb83f1a9cfc48f061ff5555e61c6bf (22:40): if you use uppercase use it for gloabls",
        "0acb83f1a9cfc48f061ff5555e61c6bf (22:40): and also, there are no magic variables either :)",
        "c63a5cfce0a1819ebbe4a19e074356b6 (22:41): 0acb83f1a9cfc48f061ff5555e61c6bf: if I recall correctly, const is working on Firefox, Chrome and Safari",
        "c63a5cfce0a1819ebbe4a19e074356b6 (22:41): though it's non-standard",
        "0acb83f1a9cfc48f061ff5555e61c6bf (22:41): c63a5cfce0a1819ebbe4a19e074356b6: names http://javascript.crockford.com/code.html :)",
        "0acb83f1a9cfc48f061ff5555e61c6bf (22:42): though crockford is not always right he has some good points",
        "c63a5cfce0a1819ebbe4a19e074356b6 (22:42): 0acb83f1a9cfc48f061ff5555e61c6bf: I don't trust Crockford since I have learned that he is using &quot;for (;;)&quot; loops",
        "0acb83f1a9cfc48f061ff5555e61c6bf (22:42): haha",
        "0acb83f1a9cfc48f061ff5555e61c6bf (22:42): that's why I said some good points ;)",
        "18d23e7e3397f5ffebebd0fd268b2446 (22:43): c63a5cfce0a1819ebbe4a19e074356b6: it works as a cute crying face :)",
        "6776a0df301145ee5837cb2c31372d21 (22:46): Python doesn't have const. But it has lotsa magic __vars__.",
        "0acb83f1a9cfc48f061ff5555e61c6bf (22:47): 6776a0df301145ee5837cb2c31372d21: also some of them are against pep-8 style guide",
        "0acb83f1a9cfc48f061ff5555e61c6bf (22:47): and python has significance for _ and __",
        "0acb83f1a9cfc48f061ff5555e61c6bf (22:47): so they do matter"
    ],
    "person_ids": [
        "4c681049601b3c374f1d2c0077c99049",
        "bdedc97e25dde1328bae6e2d092691c8",
        "70bfd0ae2cfbf2da192bddd569cf6132",
        "18d23e7e3397f5ffebebd0fd268b2446",
        "86cad2950224c9494ad2ef4eeca30def",
        "0de37da1d654c10aed33d7b7347b8e3b",
        "c63a5cfce0a1819ebbe4a19e074356b6",
        "0acb83f1a9cfc48f061ff5555e61c6bf",
        "6776a0df301145ee5837cb2c31372d21"
    ]
}