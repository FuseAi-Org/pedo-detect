{
    "id": "5d81def8705bd91baf784060d0544076",
    "messages": [
        "edb259c0e0038f38bb200bc20c8cbf7e (14:08): f139aba52f9fa1394b4034a7954b2220, you mean &quot;Hixie, please sort this out&quot;?",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:08): (re: offline resources)",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:09): 99a3bfa1a9430e7df6358b5f3e9e1e17, why not just include all the &lt;source&gt; elements?",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:09): doesn't see the need for inspecting first",
        "0c613432f4687d9dae0e13d1af514eb8 (14:09): 99a3bfa1a9430e7df6358b5f3e9e1e17: How does your script handle fallback content for &lt;video&gt;?",
        "0c613432f4687d9dae0e13d1af514eb8 (14:09): &lt;noembed&gt; and alt?",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:10): edb259c0e0038f38bb200bc20c8cbf7e, the problem is that some content vendors only have a certain subset of formats available as fallbacks",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:11): 99a3bfa1a9430e7df6358b5f3e9e1e17, just give the UA all the alternative &lt;source&gt; elements",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:11): so if vendor A only has files in format B it may be good to know if this format is supported before using &lt;video&gt;",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:11): why?",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:11): the UA won't fetch stuff it doesn't support",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:11): it will iterate through &lt;source&gt;",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:11): (unless &lt;video&gt; has src= specified)",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:12): hmm... k. So a media error is only thrown if ALL given sources fail",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:12): I think a media error is thrown only once a resource is actually fetched and it appears it isn't supported or can't be decoded",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:13): 0c613432f4687d9dae0e13d1af514eb8, well, that script (it's not mine) just assumes &lt;video&gt; will support Ogg, there's no check to see if that has gone wrong",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:13): 0c613432f4687d9dae0e13d1af514eb8, however, if &lt;video&gt; isn't supported at all it'll go for a Java applet to decode the video",
        "0c613432f4687d9dae0e13d1af514eb8 (14:14): I'm not talking about video not being supported so much as embed not being supported.",
        "0c613432f4687d9dae0e13d1af514eb8 (14:14): (or being disabled)",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:16): well, actually that script seems to use &lt;object&gt; for plugin fallbacks",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:17): oh, and &lt;embed&gt; as nested fallback for that",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:17): http://metavid.ucsc.edu/wiki_dev/mv_embed/mv_embed.js",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:18): edb259c0e0038f38bb200bc20c8cbf7e, well, as more crude example: The Wikipedia player first determines what options are available, then does document.write stuff to embed a viable solution. No DOM manipulation afterwards, it's basically Netscape 3 compatible stuff (blame this on me, I've provided the logic)",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:19): so once it determined &quot;well, yes, there's a &lt;video&gt; tag with a play() method&quot; it'll use that",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:19): which of course goes completely wrong if the browser doesn't happen to support that particular format",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:20): you can insert &lt;video&gt;&lt;source src=ogg type=someoggtype&gt; &lt;source src=mpg type=somempgtype&gt; &lt;/video&gt; ...",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:20): personally I'd like to know what it supports without trying... as trying would most likely also have server interaction",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:20): that would not be compatible with Opera's implementation fwiw, but the idea is that that's how &lt;video&gt; will work",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:20): yeah",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:20): of course, you can still do &lt;video src=ogg&gt; in which case the &lt;source&gt; elements will be ignored",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:21): maybe we should define it that &lt;video src=&gt; is the final fallback...",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:21): that would make the whole thing &quot;backwards compatible&quot;...",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:21): I have to read what the type attribute is working like",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:22): if I can specify &lt;video src=&quot;blubb.ogg&quot; type=&quot;application/ogg&quot;&gt; and that thing throws an error without first trying to download and play back the file if Ogg is not supported everything is perfectly fine",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:22): (or whatever valid value for type)",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:23): type= is not on &lt;video&gt;",
        "f139aba52f9fa1394b4034a7954b2220 (14:24): edb259c0e0038f38bb200bc20c8cbf7e: I didn't intend to imply for Hixie to have to sort it out himself :-), I just wanted to let others know about it and start a discussion incase someone knows more about it",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:24): edb259c0e0038f38bb200bc20c8cbf7e, ah, stupid me",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:24): edb259c0e0038f38bb200bc20c8cbf7e, no wonder I missed that ;)",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:26): edb259c0e0038f38bb200bc20c8cbf7e, but right, if &lt;source src=&quot;blubb.media&quot; type=&quot;application/someformat&quot;&gt; immediately makes sure the &lt;video&gt; element reports back an error if application/someformat isn't supported that's a rather elegant thing",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:26): f139aba52f9fa1394b4034a7954b2220, well, it has been around for several months and the Firefox guys so far have not submitted stuff...",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:26): iirc",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:26): I don't think it returns an error...",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:27): But you're able to find out if it does something with it...",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:27): needs to study &lt;video&gt; some more at some point",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:28): would &quot;&lt;video id='file.media'&gt;&lt;source type='some/mimetype'&gt;&lt;/video&gt;&quot; be a valid construction to determine if some/mimetype is supported?",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:28): I'd hope for the media element to have MEDIA_ERR_DECODE set",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:29): I think &lt;source&gt; would need to have src= set as well",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:29): However, I think the right way to go around it is to simply use it",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:30): and render let the fallback content handle it if it's not supported",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:31): okay, thanks for clarifying these issues",
        "99a3bfa1a9430e7df6358b5f3e9e1e17 (14:32): I now see all use cases that'd make sense being covered"
    ],
    "person_ids": [
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "0c613432f4687d9dae0e13d1af514eb8",
        "99a3bfa1a9430e7df6358b5f3e9e1e17",
        "f139aba52f9fa1394b4034a7954b2220"
    ]
}