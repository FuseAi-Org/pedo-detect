{
    "id": "2ea4d2f92e3e0704bc8119e60e322c9a",
    "messages": [
        "66b0d785bfa15d051888c24dabba7342 (21:04): reads http://edward.oconnor.cx/2009/12/RDFa-and-the-DOM",
        "ab7faae5d7b250ea8606486575f8f79c (21:12): On the subject of text vs (DOM|Infoset|any sane model), see also http://github.com/msporny/rdfa-test-suite/commit/a27e4f4500a854024b0e3914af13f6227d54d805",
        "66b0d785bfa15d051888c24dabba7342 (21:12): wow, that was actually very well worth reading",
        "ab7faae5d7b250ea8606486575f8f79c (21:13): which seems to suggest SAX parsers may get confused by thinking markup like &amp;lt;string&amp;gt; is identical to &lt;string&gt;",
        "66b0d785bfa15d051888c24dabba7342 (21:13): (Edward O'Connor, not the git commit...)",
        "66b0d785bfa15d051888c24dabba7342 (21:14): hmm, a well written commit message though, I never bother writing that much",
        "ab7faae5d7b250ea8606486575f8f79c (21:15): It's a good explanation of the rationale behind the change, I just think the rationale is completely wrong and misguided :-)",
        "66b0d785bfa15d051888c24dabba7342 (21:16): I'm not sure I understand though",
        "ab7faae5d7b250ea8606486575f8f79c (21:16): (and caused by thinking the raw byte stream is important)",
        "66b0d785bfa15d051888c24dabba7342 (21:16): why would seeing &lt;strong&gt; in a text node cause you to think that's an XML literal?",
        "ab7faae5d7b250ea8606486575f8f79c (21:17): http://lists.w3.org/Archives/Public/public-rdf-in-xhtml-tf/2009Nov/0099.html - &quot;The first was an issue that would occur on SAX-based processors that did not have access to the raw byte stream and thus wouldn't be able to tell if the encoded &quot;&lt;strong&gt;&quot; value should be interpreted as an XML Literal or not.&quot;",
        "ab7faae5d7b250ea8606486575f8f79c (21:17): 66b0d785bfa15d051888c24dabba7342: It wouldn't",
        "66b0d785bfa15d051888c24dabba7342 (21:19): I just don't know enough about how XML Literals are encoded or how SAX parsers work to understand",
        "66b0d785bfa15d051888c24dabba7342 (21:19): but that's OK, because I have packing to do and am flying to Vietnam on Friday",
        "66b0d785bfa15d051888c24dabba7342 (21:19): yay me",
        "ab7faae5d7b250ea8606486575f8f79c (21:22): They shouldn't be encoded at all - the idea is that when you're converting an element to a value, if it has child elements then you serialise the element's content into an XMLLiteral string, else you use the content as a typeless string",
        "ab7faae5d7b250ea8606486575f8f79c (21:22): which is nice and easy when you consider XML documents to be a tree/stream of elements and text nodes",
        "66b0d785bfa15d051888c24dabba7342 (21:22): right",
        "66b0d785bfa15d051888c24dabba7342 (21:23): so how do &quot;SAX-based processors that did not have access to the raw byte stream&quot; see XML?",
        "66b0d785bfa15d051888c24dabba7342 (21:23): last time I used SAX for anything I was feeding it XML as a string and got parse events",
        "ab7faae5d7b250ea8606486575f8f79c (21:24): but if you don't have that model then even the concept of &quot;serialise the element's content&quot; makes no sense, so it's sort of defined as copying the characters contained within the element, except munging it a bit to add namespace declarations, and also it needs canonicalisation, and the specification is really fuzzy",
        "66b0d785bfa15d051888c24dabba7342 (21:24): (or something along those lines)",
        "ab7faae5d7b250ea8606486575f8f79c (21:24): SAX processors see a stream of startElement and endElement and characters events",
        "ab7faae5d7b250ea8606486575f8f79c (21:24): (or something very similar to that)",
        "66b0d785bfa15d051888c24dabba7342 (21:24): oh, on that end",
        "66b0d785bfa15d051888c24dabba7342 (21:24): I was thinking backwards",
        "66b0d785bfa15d051888c24dabba7342 (21:25): of course",
        "66b0d785bfa15d051888c24dabba7342 (21:26): sounds like a problem very much not specific to RDFa though",
        "ab7faae5d7b250ea8606486575f8f79c (21:26): I don't think there's a problem at all",
        "ab7faae5d7b250ea8606486575f8f79c (21:27): Or, I don't think there's a problem at all with SAX",
        "ab7faae5d7b250ea8606486575f8f79c (21:27): or with writing RDFa processors on top of a SAX processor",
        "ab7faae5d7b250ea8606486575f8f79c (21:27): The only problem is the RDFa spec",
        "66b0d785bfa15d051888c24dabba7342 (21:28): what does it actually say to do produce an XML Literal?",
        "ab7faae5d7b250ea8606486575f8f79c (21:28): (which is mostly specific to RDFa, not other specs)",
        "66b0d785bfa15d051888c24dabba7342 (21:28): pretend it has the raw byte stream, I presume",
        "66b0d785bfa15d051888c24dabba7342 (21:28): oh well",
        "ab7faae5d7b250ea8606486575f8f79c (21:29): &quot;The value of the [XML literal] is a string created by serializing to text, all nodes that are descendants of the [current element], i.e., not including the element itself, and giving it a datatype of rdf:XMLLiteral.&quot;",
        "ab7faae5d7b250ea8606486575f8f79c (21:30): plus errata: &quot;For the avoidance of doubt, this means in part that the current default namespace of each descendant element MUST also be included in the emitted XML literal.&quot;",
        "ab7faae5d7b250ea8606486575f8f79c (21:30): plus errata: &quot;Unfortunately, the requirements for such a serialized string are not completely clear when it comes to XML Namespaces. For the avoidance of doubt, in future versions of the RDFa Syntax Recommendation, we expect to indicate that the value of the XML literal SHOULD be serialized Exclusive Canonical XML as defined in [XMLEXC14N]. We advise current implementations to start supporting this use model now, since other participants in their XML tool ch",
        "fd9ef1223e855714294498ebfde79f98 (21:30): 66b0d785bfa15d051888c24dabba7342: thanks",
        "66b0d785bfa15d051888c24dabba7342 (21:31): sounds like it assumes a DOM",
        "ab7faae5d7b250ea8606486575f8f79c (21:31): Oh, so it does actually talk about serializing nodes",
        "66b0d785bfa15d051888c24dabba7342 (21:31): fd9ef1223e855714294498ebfde79f98: oh there you are :)",
        "ab7faae5d7b250ea8606486575f8f79c (21:33): Discussions about the namespace/c14n requirements and RDFa-in-text/html seem to indicate that many people don't believe in the DOM-like model, though",
        "ab7faae5d7b250ea8606486575f8f79c (21:34): Anyway, I should probably stop complaining about this :-p",
        "66b0d785bfa15d051888c24dabba7342 (21:34): We probably all should",
        "66b0d785bfa15d051888c24dabba7342 (21:35): but while we're on the topic, I found this amusing: http://www.merttol.com/articles/web/understanding-rdfa.html",
        "66b0d785bfa15d051888c24dabba7342 (21:35): (see my comment at end)",
        "66b0d785bfa15d051888c24dabba7342 (21:37): I just hope that this whole RDFa issue doesn't have people hating *RDF*",
        "ab7faae5d7b250ea8606486575f8f79c (21:38): Not at all",
        "ab7faae5d7b250ea8606486575f8f79c (21:39): RDF is hated for its own unique reasons",
        "a924fb58d2c25874322f4e5126f608b9 (21:40): RDF is too vague to be a proper target for hating",
        "66b0d785bfa15d051888c24dabba7342 (21:42): down with graphs!",
        "ab7faae5d7b250ea8606486575f8f79c (21:42): Down with data structures!",
        "ab7faae5d7b250ea8606486575f8f79c (21:42): Down with data!",
        "66b0d785bfa15d051888c24dabba7342 (21:44): PNG instead of HTML5?",
        "42e76c77af424a4350ab0e3e3f6f2ce9 (21:45): 66b0d785bfa15d051888c24dabba7342, that would put me and aobut 1,000,000 other people out of a job :(",
        "42e76c77af424a4350ab0e3e3f6f2ce9 (21:45): s/aobut/about/",
        "a924fb58d2c25874322f4e5126f608b9 (21:45): Poor Bobby McFerrin, doomed to never be a unique individual",
        "a924fb58d2c25874322f4e5126f608b9 (21:49): Maybe RDFa will usher in a new age of less graphy RDF, one where almost all statements use string literals",
        "ab7faae5d7b250ea8606486575f8f79c (21:51): Bonus points if you have RDFa embedded in markup inside string literals",
        "2845a055f5ec0387ee46b7a6f992bc46 (21:52): b5934067b4c7d9c30299478a245d4491, why are you here?",
        "b5934067b4c7d9c30299478a245d4491 (21:52): 2845a055f5ec0387ee46b7a6f992bc46: just hovering :)"
    ],
    "person_ids": [
        "66b0d785bfa15d051888c24dabba7342",
        "ab7faae5d7b250ea8606486575f8f79c",
        "fd9ef1223e855714294498ebfde79f98",
        "a924fb58d2c25874322f4e5126f608b9",
        "42e76c77af424a4350ab0e3e3f6f2ce9",
        "2845a055f5ec0387ee46b7a6f992bc46",
        "b5934067b4c7d9c30299478a245d4491"
    ]
}