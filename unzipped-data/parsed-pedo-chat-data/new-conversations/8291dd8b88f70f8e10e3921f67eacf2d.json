{
    "id": "8291dd8b88f70f8e10e3921f67eacf2d",
    "messages": [
        "f4ea20ae05d2da565e774193265e2df2 (21:44): +you dont know and you shouldnt expect to assume.",
        "74b03e84f75bc6733d3bccb926c69dd9 (21:44): +ironfroggy, I'm not building an enterprise on this fact",
        "8cb6add51460edd02e241d1c84dc9d30 (21:45): +Charles: You can rely on my statement as being factual.",
        "74b03e84f75bc6733d3bccb926c69dd9 (21:45): +if you read the docs there are plenty of mentions about reasonable assumptions you can make about the implementation",
        "f42a8e7adf4994b94dfa7d05d9a8d0ec (21:45): +I'm getting ^[[A when pressing up-arrow on the interpreter, what may be wrong?",
        "74b03e84f75bc6733d3bccb926c69dd9 (21:46): +scorphus,  do other things that use gnu readline do it?",
        "4c0c1d3d8ba815641ce1621584193537 (21:46): +scorphus lack of readline support",
        "f42a8e7adf4994b94dfa7d05d9a8d0ec (21:46): +charles`: it works on bash",
        "74b03e84f75bc6733d3bccb926c69dd9 (21:46): +scorphus, what distro are you using?",
        "f42a8e7adf4994b94dfa7d05d9a8d0ec (21:47): +NetBSD",
        "f42a8e7adf4994b94dfa7d05d9a8d0ec (21:47): +might be lack of support offered by something like gnu readline",
        "f42a8e7adf4994b94dfa7d05d9a8d0ec (21:47): +I'll check it out",
        "f42a8e7adf4994b94dfa7d05d9a8d0ec (21:48): +thanks so far",
        "74b03e84f75bc6733d3bccb926c69dd9 (21:48): +scorphus, there is some stuff in the docs on gnu readline",
        "74b03e84f75bc6733d3bccb926c69dd9 (21:49): +scorphus, but how to get it enabled might be  dependent on your distro; maybe check the make file in ports (if netBSD uses ports.. I'm not even sure)",
        "f42a8e7adf4994b94dfa7d05d9a8d0ec (21:50): +ok... I'll do my best",
        "74b03e84f75bc6733d3bccb926c69dd9 (21:52): +scorphus, like in gentoo to get support I have to have the 'readline' use flag set.  I think BSDs do it individually per package via their make files but it has been a long time since I've used one",
        "f42a8e7adf4994b94dfa7d05d9a8d0ec (21:53): +charles`: right. it seems I'll have to install the py-readline package",
        "98d438c09b0e4e8f83e9cae82883c30e (21:54): +hello all, is there a way I can do an &quot;append&quot; with ftplib ?",
        "74b03e84f75bc6733d3bccb926c69dd9 (21:57): +KoRnouille, <a href=\"http://www.google.com/search?hl=en&amp;q=python\">http://www.google.com/search?hl=en&amp;q=python</a>+append+ftplib&amp;btnG=Google+Search",
        "74b03e84f75bc6733d3bccb926c69dd9 (21:57): +first hit",
        "98d438c09b0e4e8f83e9cae82883c30e (21:58): +charles`: did the same",
        "98d438c09b0e4e8f83e9cae82883c30e (21:58): +i was just lazy on that one",
        "98d438c09b0e4e8f83e9cae82883c30e (21:58): +it took me longer to open my browser than to join the channel",
        "74b03e84f75bc6733d3bccb926c69dd9 (21:58): +it's ok, I do it all the time too =)",
        "98d438c09b0e4e8f83e9cae82883c30e (21:58): +blam m",
        "98d438c09b0e4e8f83e9cae82883c30e (21:58): +e",
        "b1e58a99b1e3779a120f2e217d2aa23c (21:58): +are all variables that have __ before their name public ?",
        "b1e58a99b1e3779a120f2e217d2aa23c (21:58): +in a class",
        "98d438c09b0e4e8f83e9cae82883c30e (21:59): +before their name public ?",
        "98d438c09b0e4e8f83e9cae82883c30e (21:59): +aah",
        "b1e58a99b1e3779a120f2e217d2aa23c (21:59): +class: __zy ... is __zy  a public variable ?",
        "98d438c09b0e4e8f83e9cae82883c30e (22:00): +ACTION doesn't know",
        "98d438c09b0e4e8f83e9cae82883c30e (22:00): +would python guru call it an attribute ?",
        "74b03e84f75bc6733d3bccb926c69dd9 (22:00): +vimman, there are some name mangling rules based on underscores to make variables private, I can't remember",
        "8576389fe048e91f7b3bf8bbc66ddd2d (22:01): +by default, all class members are public",
        "b1e58a99b1e3779a120f2e217d2aa23c (22:01): +charles`:  I just read them.. but did not understand them properly",
        "b1e58a99b1e3779a120f2e217d2aa23c (22:02): +graywh:  how do I create a private variable",
        "8576389fe048e91f7b3bf8bbc66ddd2d (22:02): +__ makes them private",
        "98d438c09b0e4e8f83e9cae82883c30e (22:02): +_private = &quot;private var&quot;",
        "98d438c09b0e4e8f83e9cae82883c30e (22:02): +so import * from module should not import _*",
        "b1e58a99b1e3779a120f2e217d2aa23c (22:03): +it imports as _CLASSNAME_VARIABLENAME",
        "b1e58a99b1e3779a120f2e217d2aa23c (22:03): +import * imports the private variable as _CLASSNAME_VARIBALENAME",
        "74b03e84f75bc6733d3bccb926c69dd9 (22:03): +wait is it __ makes them private or _ makes them private?",
        "8cb6add51460edd02e241d1c84dc9d30 (22:03): +?namemangling#",
        "8cb6add51460edd02e241d1c84dc9d30 (22:03): + &quot;begins with two or more underscore characters and does not end in two or more underscores&quot;  <a href=\"http://doc.python.org/ref/atom-identifiers.html\">http://doc.python.org/ref/atom-identifiers.html</a>",
        "b4b8ece4670c357660a103dd5e52cca3 (22:04): +I thought __ vs. _ was just convention?",
        "74b03e84f75bc6733d3bccb926c69dd9 (22:04): +bkjones, I think __ actually mangles",
        "74b03e84f75bc6733d3bccb926c69dd9 (22:04): +_ just means you are letting other people looking at your code know it shouldn't be touched",
        "b4b8ece4670c357660a103dd5e52cca3 (22:04): +oh.",
        "74b03e84f75bc6733d3bccb926c69dd9 (22:04): +or rather, other people calling your code",
        "b4b8ece4670c357660a103dd5e52cca3 (22:04): +:/",
        "b4b8ece4670c357660a103dd5e52cca3 (22:04): +I'll figure it all out some day.",
        "8576389fe048e91f7b3bf8bbc66ddd2d (22:06): +basically, nothing is ever private in the usual sense",
        "8576389fe048e91f7b3bf8bbc66ddd2d (22:06): +a single underscore lets others know that the variable shouldn't be touched",
        "74b03e84f75bc6733d3bccb926c69dd9 (22:07): +the name mangling with __ is just to prevent conflicts with classes that subclass from you",
        "74b03e84f75bc6733d3bccb926c69dd9 (22:07): +right?",
        "8576389fe048e91f7b3bf8bbc66ddd2d (22:07): +yes",
        "8576389fe048e91f7b3bf8bbc66ddd2d (22:08): +it also makes accessing those members less pretty to discourage their use",
        "98d438c09b0e4e8f83e9cae82883c30e (22:09): +vimman: Use one leading underscore only for non-public methods and instance variables. To avoid name clashes with subclasses, use two leading underscores to invoke Python's name mangling rules. Python mangles these names with the class name: if class Foo has an attribute named __a, it cannot be accessed by Foo.__a.  (An insistent user could still gain access by calling Foo._Foo__a.)  Generally, double leading underscores should be used only to av",
        "98d438c09b0e4e8f83e9cae82883c30e (22:09): +oid name conflicts with attributes in classes designed to be subclassed. -&gt; <a href=\"http://www.python.org/dev/peps/pep-0008/\">http://www.python.org/dev/peps/pep-0008/</a>",
        "f42a8e7adf4994b94dfa7d05d9a8d0ec (22:09): +charles`: installed the package py23-readline which depends on readline and now it's working, thanks",
        "74b03e84f75bc6733d3bccb926c69dd9 (22:09): +scorphus, cool, glad it worked",
        "48cbffb0018e689e433a5e764efd23fa (22:22): +!pong",
        "48cbffb0018e689e433a5e764efd23fa (22:22): +wrong channel"
    ],
    "person_ids": [
        "f4ea20ae05d2da565e774193265e2df2",
        "74b03e84f75bc6733d3bccb926c69dd9",
        "8cb6add51460edd02e241d1c84dc9d30",
        "f42a8e7adf4994b94dfa7d05d9a8d0ec",
        "4c0c1d3d8ba815641ce1621584193537",
        "98d438c09b0e4e8f83e9cae82883c30e",
        "b1e58a99b1e3779a120f2e217d2aa23c",
        "8576389fe048e91f7b3bf8bbc66ddd2d",
        "b4b8ece4670c357660a103dd5e52cca3",
        "48cbffb0018e689e433a5e764efd23fa"
    ]
}