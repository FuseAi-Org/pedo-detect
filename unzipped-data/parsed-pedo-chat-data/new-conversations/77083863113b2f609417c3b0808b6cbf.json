{
    "id": "77083863113b2f609417c3b0808b6cbf",
    "messages": [
        "bd6bd3edd6dfbea3a4bf8ddc8b6c04a4 (00:00): recurs|ve: ahigerd: It's done! one report down, about 20 more to go :P",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:00): :D",
        "3f2ae81593fea01e8a351af4d1256986 (00:11): Ok. So if mythtv is givng me errors and it says that it expects the build key on libqsqlmysql.so to be g++-3 and its getting g++-4, what is expecting the build key? Is MythTV expecting to find g++-3, or is QT expecting that?",
        "3f2ae81593fea01e8a351af4d1256986 (00:11): I compiled my computer w/ GCC 4 and after probing qt libs q/ strings, I found they all yield the g++-4 build key",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:12): Qt is expecting it.",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:12): Namely, QPluginLoader",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:12): And it will quite unforgivingly fail.",
        "3f2ae81593fea01e8a351af4d1256986 (00:12): Why is it expecting it?",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:12): Just a sec and I'll link you to the docs",
        "3f2ae81593fea01e8a351af4d1256986 (00:12): Ty",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:13): <a href=\"http://doc.trolltech.com/4.1/plugins-howto.html#the-build-key\">http://doc.trolltech.com/4.1/plugins-howto.html#the-build-key</a>",
        "3f2ae81593fea01e8a351af4d1256986 (00:13): Well if QT was compiled with GCC 4.1.4",
        "3f2ae81593fea01e8a351af4d1256986 (00:13): why on earth would it expect one of the libs to be compiled with GCC 3?",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:14): Uh... good question.",
        "3f2ae81593fea01e8a351af4d1256986 (00:14): Sounds like a bug somewhere. :|",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:15): I think it may actually be the application.",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:15): That specifies the compatible build key",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:15): Not sure",
        "3f2ae81593fea01e8a351af4d1256986 (00:16): Hmm",
        "3f2ae81593fea01e8a351af4d1256986 (00:16): then Im submitting a bug reprt",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:16): Well, it's specified at compile-time, not by the developers.",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:16): Rule of thumb: when compiling an application, compile ALL of it yourself.",
        "3f2ae81593fea01e8a351af4d1256986 (00:16): I did.",
        "3f2ae81593fea01e8a351af4d1256986 (00:17): Every last piece of software on here I compiled myself.",
        "3f2ae81593fea01e8a351af4d1256986 (00:17): Minus flash and stuff",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:17): Even MySQL?",
        "3f2ae81593fea01e8a351af4d1256986 (00:17): Yes",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:17): Hmm",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:17): (Gentoo?)",
        "3f2ae81593fea01e8a351af4d1256986 (00:17): Yes, Gentoo",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:17): I've still got my Gentoo set up with gcc3, haven't had a problem with it yet",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:18): Incredibly strange.",
        "1753f2fb147247a0ee3be694a7677da3 (00:42): bipolar: lol hehe what are you using for the reporting?",
        "bd6bd3edd6dfbea3a4bf8ddc8b6c04a4 (00:53): recurs|ve: a QTextDocument",
        "bd6bd3edd6dfbea3a4bf8ddc8b6c04a4 (00:54): recurs|ve: the last section of it is static, so I just used an image of that section of the old report to save time. :P",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:54): XD",
        "bd6bd3edd6dfbea3a4bf8ddc8b6c04a4 (00:54): it works. I'll clean it up later :D",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:54): That's not a terribly good idea",
        "bd6bd3edd6dfbea3a4bf8ddc8b6c04a4 (00:54): ahigerd: yeah. It's slow.",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:54): Slow? I was going to say low-resolution.",
        "bd6bd3edd6dfbea3a4bf8ddc8b6c04a4 (00:54): ahigerd: oh, it's just for printing anyway",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:54): Printing is worse!",
        "bd6bd3edd6dfbea3a4bf8ddc8b6c04a4 (00:55): ahigerd: it prints out ok. :)",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:55): 75dpi is very visibly crap on a printer ;)",
        "bd6bd3edd6dfbea3a4bf8ddc8b6c04a4 (00:55): ahigerd: it's not the best looking, but I'll make a ticket for fixing it later for my refactoring milestone",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:55): Heh",
        "bd6bd3edd6dfbea3a4bf8ddc8b6c04a4 (00:56): it's actulay not that ugly.",
        "bd6bd3edd6dfbea3a4bf8ddc8b6c04a4 (00:56): it's only quasi-ugly",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:56): Heh.",
        "bd6bd3edd6dfbea3a4bf8ddc8b6c04a4 (00:58): damn. I gotta get to the bank",
        "bd6bd3edd6dfbea3a4bf8ddc8b6c04a4 (00:58): later all!",
        "1753f2fb147247a0ee3be694a7677da3 (01:01): bipolar: nice",
        "f1b5e22042863b134aa14b5a8f34907a (01:13): Hi!",
        "f1b5e22042863b134aa14b5a8f34907a (01:15): If I have a model whose data needs to be filtered, but not per row like QSortFilterProxyModel would provide, but by the data as a &quot;whole&quot;, how could I achieve that?",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:15): I don't understand.",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:15): Like, each cell needs to be filtered somehow?",
        "f1b5e22042863b134aa14b5a8f34907a (01:15): Like, think of the data of the original model of a set of items of which some are removed based on the other left items",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:16): Right, but how is that filtering by something besides rows...?",
        "f1b5e22042863b134aa14b5a8f34907a (01:16): ok... I need to be more specific",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:16): Yes, you do. :P",
        "f1b5e22042863b134aa14b5a8f34907a (01:16): I have a model which lists plain VCS revisions",
        "f1b5e22042863b134aa14b5a8f34907a (01:17): none, some or all of this plain list items have parent/child relations",
        "f1b5e22042863b134aa14b5a8f34907a (01:18): like in a set {a,b,c,d} which is displayed as a single list, there could be the relation a -&gt; b -&gt; c -&gt; d",
        "f1b5e22042863b134aa14b5a8f34907a (01:19): now, I have an algorithm to remove all ancestors of a given revision set",
        "f1b5e22042863b134aa14b5a8f34907a (01:19): meaning I would remove a, b and c from the set as these are all ancestors of d",
        "f1b5e22042863b134aa14b5a8f34907a (01:20): this algorithm, actually an interface to an external program, needs to read in the complete set of revisions all at once and then spits out only those who have no decendents in the set left",
        "f1b5e22042863b134aa14b5a8f34907a (01:21): I can't feed a single revision I get via a row filter to this interface",
        "f1b5e22042863b134aa14b5a8f34907a (01:22): makes any sense?! =)",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:23): Oh, I see what you mean.",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:23): The filtering criteria aren't limited to a single row of data.",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:24): You can have multiple rows participating in the calculation.",
        "f1b5e22042863b134aa14b5a8f34907a (01:25): how so?",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:25): No, I mean, that's what you mean.",
        "f1b5e22042863b134aa14b5a8f34907a (01:26): ok, so the question is: can this be implemented somehow? maybe by subclassing QAbstractProxyModel...?",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:26): I can't see why not.",
        "f1b5e22042863b134aa14b5a8f34907a (01:28): so, I start my overriding work in setSourceModel and then...",
        "f1b5e22042863b134aa14b5a8f34907a (01:28): I'm a bit lost, do I need to reimplement the mapSelection* methods?",
        "f1b5e22042863b134aa14b5a8f34907a (01:28): (I don't care about lost selections)",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:28): Are they pure virtual?",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:29): Or just virtual?",
        "f1b5e22042863b134aa14b5a8f34907a (01:29): just virtual",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:29): Then you don't have to reimp",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:29): It has a default implementation",
        "f1b5e22042863b134aa14b5a8f34907a (01:29): mapTo/FromSource are pure virtual",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:30): Those you have to implement.",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:30): You'll want to maintain some sort of internal data structure",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:30): By the way, is this a read-only model?",
        "f1b5e22042863b134aa14b5a8f34907a (01:30): hrmmm... and since this proxy model subclasses QAbstractItemModel, the other needed things from there (::index, ::data) are already done for me",
        "f1b5e22042863b134aa14b5a8f34907a (01:31): read-only, yes",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:31): Scrap the proxy model.",
        "f1b5e22042863b134aa14b5a8f34907a (01:31): hrmmm... I think I know where you want to get me",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:32): Question #2: Is this hierarchical data or tabular?",
        "f1b5e22042863b134aa14b5a8f34907a (01:32): tabular",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:32): QAbstractTableModel is where you should start, then.",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:32): (Avoid QAbstractItemModel if you're not using hierarchical data. Implementing index() is a nightmare)",
        "f1b5e22042863b134aa14b5a8f34907a (01:33): I have heard of that before, but actually I need to do it to get the most flexibility (and other than that my current subclassing requires it)",
        "f1b5e22042863b134aa14b5a8f34907a (01:34): I know its kind of hard, I recently tried to let ::index() return a QModelIndex with a pointer to a QString but failed miserably (all connects with this qobject failed...)",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:35): Well, regardless, you could probably get away with a QStandardItemModel -- store the filtered stuff instead of pointing to it.",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:35): Since you've got to process over the whole model with your external filter anyway",
        "f1b5e22042863b134aa14b5a8f34907a (01:35): so, to get this right: I create two models, A and B",
        "f1b5e22042863b134aa14b5a8f34907a (01:36): A contains my main data, B gets a pointer to A and filters them on request",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:36): I'm thinking a little bit differently",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:36): You create a model A that has a factory function that generates filtered models.",
        "f1b5e22042863b134aa14b5a8f34907a (01:36): and when I need to display filtered data, I switch the model of my view via setModel to either A or B?",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:36): And you can either setModel(A) or setModel(A-&gt;filter(&quot;blah&quot;)) as desired",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:37): Don't try to make the filter a smart proxy; just generate a table of data.",
        "f1b5e22042863b134aa14b5a8f34907a (01:38): but for the filtered data, I'd need to set a different model, right?",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:38): Well, that's what I just showed you -- you'd make A::filter() return a model object.",
        "f1b5e22042863b134aa14b5a8f34907a (01:38): okok",
        "f1b5e22042863b134aa14b5a8f34907a (01:39): thanks =)",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:39): For most applications I confess this isn't the way you'd want to do it.",
        "f1b5e22042863b134aa14b5a8f34907a (01:39): well, my app is not what most apps may want",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:39): But you're making a read-only, static view with a complex filtering algorithm that can effectively stand alone.",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:39): Just be careful with object lifetimes.",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:40): Good luck :)",
        "f1b5e22042863b134aa14b5a8f34907a (01:40): thanks again for your time!",
        "87f17fd7f6a21743b2efc2ad30b75ead (01:50): To &quot;nuge&quot;, &quot;ahigerd&quot; or &quot;blockd&quot; : I'd like to be added to the qtnode wiki, I want to add something to the setup procedure of Qt 4.1.4 + Visual Studio 2005",
        "4ec442c3af762774a882f10a7b99a386 (02:05): I have QByteArray, how can I convert each of the characters to its hex representation ? ( ie. I have &quot;las&quot; and I would like to get &quot;6C6173&quot;)",
        "cdf4ad80dc66a41f951abab3fde0d774 (02:06): desowin: Iterate over the characters in the array, cast them to some integer type (unsigned char is fine), and use QString::number to output in base 16",
        "4ec442c3af762774a882f10a7b99a386 (02:10): ahigerd: thanks, it works"
    ],
    "person_ids": [
        "bd6bd3edd6dfbea3a4bf8ddc8b6c04a4",
        "cdf4ad80dc66a41f951abab3fde0d774",
        "3f2ae81593fea01e8a351af4d1256986",
        "1753f2fb147247a0ee3be694a7677da3",
        "f1b5e22042863b134aa14b5a8f34907a",
        "87f17fd7f6a21743b2efc2ad30b75ead",
        "4ec442c3af762774a882f10a7b99a386"
    ]
}