{
    "id": "47f2ec117cbaf19880e7fdaa8fea534a",
    "messages": [
        "e2c986ec5103be8446162e5908d5b8b8 (23:30): hello, we're using html5lib to generate plain text from archived html pages.  we're finding html5lib bombs out with maximum recursion errors on some pages.",
        "6905646aa63b96d6bdfbd256603fa58e (23:30): e2c986ec5103be8446162e5908d5b8b8: please give an example",
        "e2c986ec5103be8446162e5908d5b8b8 (23:32): http://mavra.perilith.com/~vito/html5lib/2002-0919-120019.html",
        "e2c986ec5103be8446162e5908d5b8b8 (23:33): this is the python html5lib, and we're just doing parser=html5lib.HTMLParser();dom=parser.parse(filecontents);",
        "6905646aa63b96d6bdfbd256603fa58e (23:33): backtrace?",
        "e2c986ec5103be8446162e5908d5b8b8 (23:33): maximum recursion depth reached, or some such",
        "e2c986ec5103be8446162e5908d5b8b8 (23:34): the backtrace is accordingly &gt; 1000 lines",
        "6905646aa63b96d6bdfbd256603fa58e (23:34): that'd be the error message. do you have backtrace?",
        "6905646aa63b96d6bdfbd256603fa58e (23:34): ah",
        "6905646aa63b96d6bdfbd256603fa58e (23:34): can you at least give us an idea of where the recursion is happening?",
        "e2c986ec5103be8446162e5908d5b8b8 (23:34): lines 273 and 866 are repeated",
        "6905646aa63b96d6bdfbd256603fa58e (23:34): of what file?",
        "6905646aa63b96d6bdfbd256603fa58e (23:35): and which version of html5lib are you using?",
        "e2c986ec5103be8446162e5908d5b8b8 (23:35): html5parser.py, in endTagHtml, self.parser.phase.processEndTag(name) and self.endTagHandler[name](name)",
        "6905646aa63b96d6bdfbd256603fa58e (23:36): I can't reproduce the error in trunk in either python or ruby",
        "e2c986ec5103be8446162e5908d5b8b8 (23:36): hm",
        "6905646aa63b96d6bdfbd256603fa58e (23:37): which version are you using?",
        "ab7faae5d7b250ea8606486575f8f79c (23:37): I get no error in the Python trunk version either",
        "e2c986ec5103be8446162e5908d5b8b8 (23:37): trying to find out",
        "ab7faae5d7b250ea8606486575f8f79c (23:37): and http://james.html5.org/cgi-bin/parsetree/parsetree.py?uri=http%3A%2F%2Fmavra.perilith.com%2F%7Evito%2Fhtml5lib%2F2002-0919-120019.html looks alright",
        "e2c986ec5103be8446162e5908d5b8b8 (23:52): I thought it was the latest, but I guess we're running 0.9 or something.  Installing 0.10 locally got the first batch of failures passing.",
        "e2c986ec5103be8446162e5908d5b8b8 (23:52): I'll let you know if anything new comes up.  Thanks for the sanity check.",
        "b25b6b77a0087ff8385941e5545d32ea (23:59): Hmm. In principle there are places where html5lib could have problems with recursion as it uses recursive algorithms in some places where iterative ones could be used",
        "b25b6b77a0087ff8385941e5545d32ea (23:59): But AFAIK there was at least one infinite loop bug fixed since 0.9",
        "e2c986ec5103be8446162e5908d5b8b8 (00:00): we have a bit over 23k archived pages and we were hitting something pretty frequently",
        "e2c986ec5103be8446162e5908d5b8b8 (00:00): but it's all OKs so far with 0.10",
        "ab7faae5d7b250ea8606486575f8f79c (00:05): If you're parsing lots of pages, it may be worth looking at hsivonen's Java HTML5 parser since it's around a hundred times faster than the Python one",
        "e2c986ec5103be8446162e5908d5b8b8 (00:07): alright, I've an AssertionError using 0.10.  Should I try with trunk or are they the same?",
        "6905646aa63b96d6bdfbd256603fa58e (00:09): they're mostly the same",
        "e2c986ec5103be8446162e5908d5b8b8 (00:11): happens with trunk as well",
        "e2c986ec5103be8446162e5908d5b8b8 (00:12): http://mavra.perilith.com/~vito/html5lib/2003-0701-120001.html",
        "e2c986ec5103be8446162e5908d5b8b8 (00:12): I can save these and stuff them all into the issue tracker as well, of course",
        "e2c986ec5103be8446162e5908d5b8b8 (00:12): given that many more are passing than failing now",
        "b25b6b77a0087ff8385941e5545d32ea (00:36): e2c986ec5103be8446162e5908d5b8b8: That looks like a recent regression. I'll have to investigate further",
        "e2c986ec5103be8446162e5908d5b8b8 (00:37): I've had a handful of those now, plus one with an encoding error.  I'll just put them all in the tracker.",
        "b25b6b77a0087ff8385941e5545d32ea (00:38): (in the meantime you can try removing the assertion that fires; I _think_ the only bad side effect is that the source position reported for errors might be wrong)",
        "b25b6b77a0087ff8385941e5545d32ea (00:38): Thanks",
        "b25b6b77a0087ff8385941e5545d32ea (00:40): e2c986ec5103be8446162e5908d5b8b8: Add me as the owner for the bugs you file  b25b6b77a0087ff8385941e5545d32ea.html)",
        "e2c986ec5103be8446162e5908d5b8b8 (00:41): k",
        "4e528aa62dacc1d204b6b9a06e317317 (00:48): 65325d50b2e25aca54bc871b89758c9c: do you mind if i skip replying to &lt;video&gt;-related e-mails from you if the spec already does everything you asked for in those e-mails, or would you rather have replies to all your mails? (either is fine, just checking which you prefer)",
        "65325d50b2e25aca54bc871b89758c9c (00:48): 4e528aa62dacc1d204b6b9a06e317317: if the emails predate the current version of &lt;video&gt; then I can do without such replies",
        "65325d50b2e25aca54bc871b89758c9c (00:49): 4e528aa62dacc1d204b6b9a06e317317: I will have new feedback from Apple soon relative to the current spec as a baseline, so I am not worried about things getting lost",
        "4e528aa62dacc1d204b6b9a06e317317 (00:49): k",
        "4e528aa62dacc1d204b6b9a06e317317 (00:50): these predate the &lt;video&gt; dinner at google",
        "b25b6b77a0087ff8385941e5545d32ea (00:57): e2c986ec5103be8446162e5908d5b8b8: I think I have fixed one of your issues. I'll update svn in a few minutes once I fix a few issues with my working copy",
        "e2c986ec5103be8446162e5908d5b8b8 (01:03): ooh",
        "e2c986ec5103be8446162e5908d5b8b8 (01:03): &quot;Warning: Undefined behaviour for end tag section&quot;",
        "e2c986ec5103be8446162e5908d5b8b8 (01:03): didn't log the file for that one, darn",
        "b25b6b77a0087ff8385941e5545d32ea (01:03): e2c986ec5103be8446162e5908d5b8b8: That's expected",
        "e2c986ec5103be8446162e5908d5b8b8 (01:04): ah",
        "b25b6b77a0087ff8385941e5545d32ea (01:04): &lt;section&gt; is a new HTML 5 tag but its parsing isn't yet defined (we treat it like a generic unkown element). However you will sometimes find authors inventing tags in the wild",
        "b25b6b77a0087ff8385941e5545d32ea (01:05): So you could have encountered a rouge &lt;section&gt;",
        "e2c986ec5103be8446162e5908d5b8b8 (01:05): I wonder what page that was.  There were ~30 of them.",
        "4e528aa62dacc1d204b6b9a06e317317 (01:05): a red section? Is that, like, a porn site?",
        "b25b6b77a0087ff8385941e5545d32ea (01:06): 4e528aa62dacc1d204b6b9a06e317317: ?",
        "e2c986ec5103be8446162e5908d5b8b8 (01:06): rouge",
        "fd9ef1223e855714294498ebfde79f98 (01:06): maybe you mean rogue, e2c986ec5103be8446162e5908d5b8b8",
        "b25b6b77a0087ff8385941e5545d32ea (01:06): Sorry being slow",
        "4e528aa62dacc1d204b6b9a06e317317 (01:07): sorry :-)",
        "b25b6b77a0087ff8385941e5545d32ea (01:07): :-p",
        "e2c986ec5103be8446162e5908d5b8b8 (01:08): I assume &quot;Warning: Undefined behaviour for end tag header&quot; is the same sort of thing?",
        "b25b6b77a0087ff8385941e5545d32ea (01:09): Uh hu.",
        "e2c986ec5103be8446162e5908d5b8b8 (01:09): fascinating",
        "b25b6b77a0087ff8385941e5545d32ea (01:11): Hmm. Odd. html5lib is failing unit tests even without my change. This isn't supposed to happen :-|",
        "b25b6b77a0087ff8385941e5545d32ea (01:15): Maybe it's just 6905646aa63b96d6bdfbd256603fa58e's extra tests",
        "ab7faae5d7b250ea8606486575f8f79c (01:25): Incidentally, RIP has slightly interesting error handling - it has a version field, and v1 of the spec defines draconian error handling for packets with version=1 (e.g. reserved fields must contain zero, else the data is rejected), but non-draconian handling if the packet has version &gt;= 2",
        "4e528aa62dacc1d204b6b9a06e317317 (01:25): what's RIP? And is that actually implemented?",
        "4e528aa62dacc1d204b6b9a06e317317 (01:26): (and do people ever give a version field?)",
        "ab7faae5d7b250ea8606486575f8f79c (01:26): so v2 of the protocol can start using the reserved fields, being certain that v1 implementations won't be sneakily using those fields anyway, while still being backward-compatible with v1 implementations",
        "ab7faae5d7b250ea8606486575f8f79c (01:26): It's a routing protocol",
        "ab7faae5d7b250ea8606486575f8f79c (01:26): (RFC1058)",
        "4e528aa62dacc1d204b6b9a06e317317 (01:26): interesting",
        "4e528aa62dacc1d204b6b9a06e317317 (01:26): oh, that RIP",
        "4e528aa62dacc1d204b6b9a06e317317 (01:27): i shoulda recognised the name",
        "ab7faae5d7b250ea8606486575f8f79c (01:29): As far as I'm aware, people do actually use it (on very small networks, since it's very simple (which is why I've been looking at RIP and not at anything more interesting and complex :-) ))",
        "4e528aa62dacc1d204b6b9a06e317317 (01:30): :-)",
        "e2c986ec5103be8446162e5908d5b8b8 (01:31): b25b6b77a0087ff8385941e5545d32ea...  I'm most of the way through this corpus now, and that assertion error and the unicode error are the only two unique failures I've seen",
        "ab7faae5d7b250ea8606486575f8f79c (01:31): (I think I'll end up having to work with BGP, which looks much scarier)",
        "b25b6b77a0087ff8385941e5545d32ea (01:32): e2c986ec5103be8446162e5908d5b8b8: That sounds like it could be worse (did you get the message that I checked in a fix that I think helps with the assertion to trunk?)",
        "e2c986ec5103be8446162e5908d5b8b8 (01:33): if it's in trunk I'll update and check the pages against it",
        "e2c986ec5103be8446162e5908d5b8b8 (01:37): also html5lib can't handle GIF files with inappropriate MIME types",
        "e2c986ec5103be8446162e5908d5b8b8 (01:38): just...  so you know",
        "ab7faae5d7b250ea8606486575f8f79c (01:38): Hmm, it worked fine when I passed a PDF through it once",
        "ab7faae5d7b250ea8606486575f8f79c (01:38): What kind of problem did you get?",
        "e2c986ec5103be8446162e5908d5b8b8 (01:39): unicodedecodeerror",
        "ab7faae5d7b250ea8606486575f8f79c (01:40): Ah",
        "e2c986ec5103be8446162e5908d5b8b8 (01:40): awesome",
        "e2c986ec5103be8446162e5908d5b8b8 (01:40): recursion error",
        "e2c986ec5103be8446162e5908d5b8b8 (01:40): and it didn't log",
        "e2c986ec5103be8446162e5908d5b8b8 (01:40): argh",
        "b25b6b77a0087ff8385941e5545d32ea (01:42): e2c986ec5103be8446162e5908d5b8b8: I don't lnow what test data you're using but it clearly rocks :)",
        "e2c986ec5103be8446162e5908d5b8b8 (01:43): it's just our group's cache of bookmarked sites, crawled over the past few years",
        "6905646aa63b96d6bdfbd256603fa58e (01:43): b25b6b77a0087ff8385941e5545d32ea: yes, I've added some test which may break the python impl",
        "6905646aa63b96d6bdfbd256603fa58e (01:43): b25b6b77a0087ff8385941e5545d32ea: in ruby it was mostly a matter of adding error messages to the parserError() calls",
        "b25b6b77a0087ff8385941e5545d32ea (01:43): 6905646aa63b96d6bdfbd256603fa58e: It mostly seems to be small things; I'm just working through it now",
        "6905646aa63b96d6bdfbd256603fa58e (01:44): cool",
        "6905646aa63b96d6bdfbd256603fa58e (01:44): I meant to write a note to the ML about it, but forgot",
        "e2c986ec5103be8446162e5908d5b8b8 (01:45): b25b6b77a0087ff8385941e5545d32ea...  testing against your updated trunk now",
        "e2c986ec5103be8446162e5908d5b8b8 (01:48): b25b6b77a0087ff8385941e5545d32ea...  looks good against a couple of the failing pages",
        "e2c986ec5103be8446162e5908d5b8b8 (01:53): b25b6b77a0087ff8385941e5545d32ea...  I can't seem to mark you as owner of the unicode issue I just reported",
        "b25b6b77a0087ff8385941e5545d32ea (01:53): e2c986ec5103be8446162e5908d5b8b8: Not to worry; I'll do it"
    ],
    "person_ids": [
        "e2c986ec5103be8446162e5908d5b8b8",
        "6905646aa63b96d6bdfbd256603fa58e",
        "ab7faae5d7b250ea8606486575f8f79c",
        "b25b6b77a0087ff8385941e5545d32ea",
        "4e528aa62dacc1d204b6b9a06e317317",
        "65325d50b2e25aca54bc871b89758c9c",
        "fd9ef1223e855714294498ebfde79f98"
    ]
}