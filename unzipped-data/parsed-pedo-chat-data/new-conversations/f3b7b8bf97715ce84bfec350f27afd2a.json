{
    "id": "f3b7b8bf97715ce84bfec350f27afd2a",
    "messages": [
        "efcb1cfe5b4d1032c158415eda536f19 (08:21): why is this an error?",
        "efcb1cfe5b4d1032c158415eda536f19 (08:21): Message\t43\tCould not find schema information for the element '<a href=\"http://schemas.microsoft.com/.NetConfiguration/v2.0\">http://schemas.microsoft.com/.NetConfiguration/v2.0</a>:error'.\tC:\\BalloonShop\\Web.Config\t49\t5\tC:\\BalloonShop\\",
        "63fe657d12300796d472e0d733381d76 (08:37): Hm.  I'm trying to get the type for the 'string' primitive/object type, to pass in as a parameter type using reflection.  Type.GetType(&quot;string&quot;) doesn't seem to return a type, any ideas how I can get string ?",
        "63fe657d12300796d472e0d733381d76 (08:37): or do I need to specify a fully qualified name, eg, System.string ?",
        "835da926ee11cac8ea432e5ebe00ed55 (08:42): &quot;string&quot; is just an alias for System.String that the C# compilter implements",
        "835da926ee11cac8ea432e5ebe00ed55 (08:43): getting the type is easiest by using typeof(string)",
        "63fe657d12300796d472e0d733381d76 (08:43): I think I've found the problem.  Reflection can only see public members.",
        "835da926ee11cac8ea432e5ebe00ed55 (08:43): by using typeof, you leverage the compiler's alias and don't need to know what it actually aliases to",
        "63fe657d12300796d472e0d733381d76 (08:43): unlike in Java (what I'm used to), which can see private members also.",
        "835da926ee11cac8ea432e5ebe00ed55 (08:43): reflection can see private members too, you just have to include them via the flags",
        "835da926ee11cac8ea432e5ebe00ed55 (08:44): NonPublic iirc",
        "63fe657d12300796d472e0d733381d76 (08:44): as BindingFlags?",
        "835da926ee11cac8ea432e5ebe00ed55 (08:44): sounds right",
        "63fe657d12300796d472e0d733381d76 (08:45): gah... there's only a real complex getMethod that has bindingFlags, just my luck heh.",
        "63fe657d12300796d472e0d733381d76 (08:45): I don't *reallly* want to have to specify all those other actual params... oh well.  Will just have to wrap it myself.",
        "835da926ee11cac8ea432e5ebe00ed55 (08:45): you can pass in null for lots of them",
        "63fe657d12300796d472e0d733381d76 (08:46): including Type[] ?  The documentation on it is pretty vague :/",
        "63fe657d12300796d472e0d733381d76 (08:46): i'll give it a try anyway, see what happens.",
        "835da926ee11cac8ea432e5ebe00ed55 (08:46): those are the types of the params - pretty important info to pass when trying to figure out which method to give you :)",
        "63fe657d12300796d472e0d733381d76 (08:47): so if there's only one method with a particular name, it won't return that method?  danm.",
        "835da926ee11cac8ea432e5ebe00ed55 (08:47): there's an overload that takes just string and bindingflags - why not use that?",
        "5d2657e6fc207ca99fbdcf75457c6a86 (08:47): anyone know how to show the TraceRoute in an Exception ?",
        "835da926ee11cac8ea432e5ebe00ed55 (08:48): <a href=\"http://msdn2.microsoft.com/en-us/library/05eey4y9.aspx\">http://msdn2.microsoft.com/en-us/library/05eey4y9.aspx</a>",
        "5d2657e6fc207ca99fbdcf75457c6a86 (08:48): like how in Java its e.printTraceRoute()",
        "835da926ee11cac8ea432e5ebe00ed55 (08:48): schnoodles: traceroute?  I'm guessing you mean stack trace - and you can create a stack trace at any time (new StackTrace())",
        "63fe657d12300796d472e0d733381d76 (08:49): well, specifying myType.GetMethod(&quot;methodName&quot;, BindingFlags.NonPublic); isn't returning my method, so I'm guessing I'm going to need the whole lot, including the parameter types (the method has a String param)",
        "5d2657e6fc207ca99fbdcf75457c6a86 (08:49): oh sorry and yeah i meant that :\\",
        "835da926ee11cac8ea432e5ebe00ed55 (08:50): Zero: what's the signature for the method?",
        "5d2657e6fc207ca99fbdcf75457c6a86 (08:50): Flav, would i create it with in the Exception Catch ?",
        "63fe657d12300796d472e0d733381d76 (08:50): public void parseMove(string command)",
        "63fe657d12300796d472e0d733381d76 (08:50): which I'm trying to access with MethodInfo mi = typ.GetMethod(&quot;parseMove&quot;, BindingFlags.NonPublic, null, new Type[] { stringType }, null);",
        "835da926ee11cac8ea432e5ebe00ed55 (08:51): Zero: if it's public, why are you passing NonPublic?",
        "63fe657d12300796d472e0d733381d76 (08:51): typ and stringType are the relevant classes as necessary.  I've been able to get it if I change it to public and... oops.  heh.  sec, will fix that.",
        "63fe657d12300796d472e0d733381d76 (08:51): tried it just now as private, still doens't find it.",
        "835da926ee11cac8ea432e5ebe00ed55 (08:52): Zero: pastebin the source?",
        "835da926ee11cac8ea432e5ebe00ed55 (08:54): schnoodles: ah - in a catch you'll more likely just access the StackTrace property off the exception",
        "835da926ee11cac8ea432e5ebe00ed55 (08:54): schnoodles: <a href=\"http://msdn2.microsoft.com/en-us/library/system.exception.stacktrace.aspx\">http://msdn2.microsoft.com/en-us/library/system.exception.stacktrace.aspx</a>",
        "835da926ee11cac8ea432e5ebe00ed55 (08:56): Zero: it's an instance method, make sure to include that in the bindingflags (IIRC)",
        "63fe657d12300796d472e0d733381d76 (08:56): I've just pasted the relevant info,, but you can cut/paste it as necessary.  <a href=\"http://rafb.net/paste/results/79131S87.html\">http://rafb.net/paste/results/79131S87.html</a>",
        "835da926ee11cac8ea432e5ebe00ed55 (08:57): Zero: are you going to construct an instance of the type via reflection as well?",
        "63fe657d12300796d472e0d733381d76 (08:57): nope, I'm using the same instance for this one.",
        "63fe657d12300796d472e0d733381d76 (08:57): I basically have a command table, which I want to use to invoke methods based on input string data.",
        "63fe657d12300796d472e0d733381d76 (09:01): hm, interesing, when I do type.GetMethods(BindingFlags.NonPublic), I get nothing back at all.",
        "63fe657d12300796d472e0d733381d76 (09:02): well, I lie, I get an empty array of MethodInfo",
        "835da926ee11cac8ea432e5ebe00ed55 (09:02): you're not including Instance",
        "63fe657d12300796d472e0d733381d76 (09:02): that's a litlte confusing, why would it need Instances?",
        "63fe657d12300796d472e0d733381d76 (09:03): but yes, it found the method by adding the flag.  odd.",
        "835da926ee11cac8ea432e5ebe00ed55 (09:03): because it's an instance method, not a static method",
        "63fe657d12300796d472e0d733381d76 (09:03): mm, I see, so it would only be returning static members normally.",
        "63fe657d12300796d472e0d733381d76 (09:03): yeah.  Hm.  oh well.  glad that's sorted.",
        "63fe657d12300796d472e0d733381d76 (09:04): excellent, now I can just use String, BindingFlags.  Thanks for that.",
        "835da926ee11cac8ea432e5ebe00ed55 (09:04): np"
    ],
    "person_ids": [
        "efcb1cfe5b4d1032c158415eda536f19",
        "63fe657d12300796d472e0d733381d76",
        "835da926ee11cac8ea432e5ebe00ed55",
        "5d2657e6fc207ca99fbdcf75457c6a86"
    ]
}