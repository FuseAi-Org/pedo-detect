{
    "id": "c03f46c07c1302d2803f3a236b74c3e8",
    "messages": [
        "71478f54c7ba58e67f6db029828be538 (20:16): What python modules are there for downloading files from the internet?",
        "33b58f7982c1fca3ec36b54f2f549267 (20:17): urllib/urllib2",
        "1890495e3b0c6a8a3f4c1946fdd06d35 (20:17): does anybody know if there is a python module for downloading files?",
        "71478f54c7ba58e67f6db029828be538 (20:18): urllib/urllib2",
        "33b58f7982c1fca3ec36b54f2f549267 (20:18): :-)",
        "1890495e3b0c6a8a3f4c1946fdd06d35 (20:18): kk thanx",
        "f24a126cd3a827fcce5593f111a31795 (20:19): lol @ python eastern egg",
        "5b071d2ef49b0a84a2b96e649ea8642f (20:21): Anyone can tell me what this is supposed to mean while using element tree? &quot;SyntaxError: undefined entity: line 156, column 108&quot;",
        "8e646668f4d6e0ac8985e9f8eb0d8180 (20:22): how can I find out the number of required arguments of a given method? need a numberOfRequiredArguments(myMethod) function",
        "019cedf410539bd96b1f7edd14a6e594 (20:23): setre, see the inspect module",
        "8e646668f4d6e0ac8985e9f8eb0d8180 (20:23): soyt: thanks!",
        "ac54f65fb68bf8a14c58bb36bfb31cba (20:29): Does python apps support 24 bit color depth",
        "ac54f65fb68bf8a14c58bb36bfb31cba (20:29): ?",
        "1f100e36a4edbfedd2315eba78be2770 (20:36): <a href=\"http://www.msnbc.msn.com/id/13073811/\">http://www.msnbc.msn.com/id/13073811/</a>",
        "5a5a867c687778f6a8648799e0da2f30 (20:42): does anyone know of a simple way to get mod_python to map URLs to different modules? For example, I would like <a href=\"http://mydomain.org/\">http://mydomain.org/</a> to load index.py and <a href=\"http://mydomain.org/subdir/\">http://mydomain.org/subdir/</a> to load subdir/index.py",
        "5a5a867c687778f6a8648799e0da2f30 (20:42): just like the standard behaviour when one writes cgi scripts",
        "8e7dd5d3e76aa952e21999a5537dcffb (20:42): flamoot: that's an informative story",
        "5a5a867c687778f6a8648799e0da2f30 (20:43): I want to have my modules scattered in a real directory tree rather than all modules in one dir",
        "f4ea20ae05d2da565e774193265e2df2 (20:49): samae had an interesting question from the context of understanding how people see a language (and programming in general) before learning about it.",
        "f4ea20ae05d2da565e774193265e2df2 (20:49): eleftherios: so dont use mod_python. if you want it to work like CGI, use CGI.",
        "5a5a867c687778f6a8648799e0da2f30 (20:50): ironfroggy, I wanted to use mod_python because it is faster and I am doing a lot of connections to databases. Other than that I definitely prefer the simplicity of cgi",
        "f4ea20ae05d2da565e774193265e2df2 (20:50): FastCGI is faster.",
        "5a5a867c687778f6a8648799e0da2f30 (20:50): ironfroggy, really?",
        "f4ea20ae05d2da565e774193265e2df2 (20:51): i dont know how it compares to mod_python, but its obviously faster than normal CGI.",
        "f4ea20ae05d2da565e774193265e2df2 (20:51): mod_python is not python's answer to mod_perl, which causes lots of confusion.",
        "5a5a867c687778f6a8648799e0da2f30 (20:51): ironfroggy, oh I thought you said it is faster than mod_python",
        "5a5a867c687778f6a8648799e0da2f30 (20:52): I wish mod_python worked in a straight forward manner like PHP does with apache",
        "5a5a867c687778f6a8648799e0da2f30 (20:52): is there a FastCGI module that comes with python?",
        "f4ea20ae05d2da565e774193265e2df2 (20:52): PHP is an abomination unto programming.",
        "f4ea20ae05d2da565e774193265e2df2 (20:52): what are you talking about?",
        "f4ea20ae05d2da565e774193265e2df2 (20:52): what would a FastCGI module even do?",
        "5a5a867c687778f6a8648799e0da2f30 (20:52): ironfroggy, I haven't got a clue",
        "5a5a867c687778f6a8648799e0da2f30 (20:53): ironfroggy, I don't even know what FastCGI is",
        "f4ea20ae05d2da565e774193265e2df2 (20:53): its CGI.",
        "f4ea20ae05d2da565e774193265e2df2 (20:53): but fast.",
        "8e646668f4d6e0ac8985e9f8eb0d8180 (20:53): easiest way to test if a string contains only digits?",
        "5a5a867c687778f6a8648799e0da2f30 (20:53): yes I figured that much",
        "f4ea20ae05d2da565e774193265e2df2 (20:53): setre: what about decimals?",
        "f4ea20ae05d2da565e774193265e2df2 (20:53): eleftherios: do i dont see what else you need to know.",
        "8e646668f4d6e0ac8985e9f8eb0d8180 (20:53): ironfroggy: nope",
        "f4ea20ae05d2da565e774193265e2df2 (20:53): setre: int(theString)",
        "5a5a867c687778f6a8648799e0da2f30 (20:54): ironfroggy, I need to know how I do some FastCGI programming. I'll google around",
        "8e646668f4d6e0ac8985e9f8eb0d8180 (20:54): try/except eh. ok",
        "f4ea20ae05d2da565e774193265e2df2 (20:54): eleftherios: like i said. its like CGI, but fast. there isnt anything to learn.",
        "25d235e595e01be1d815a8ce66c5131c (20:54): setre: else use the string module",
        "8e646668f4d6e0ac8985e9f8eb0d8180 (20:54): marmoute: thanks",
        "5a5a867c687778f6a8648799e0da2f30 (20:55): ironfroggy, well how will I convert my cgi scripts to become 'fastcgi'?",
        "f4ea20ae05d2da565e774193265e2df2 (20:55): hows the string module help",
        "25d235e595e01be1d815a8ce66c5131c (20:55): setre np",
        "f4ea20ae05d2da565e774193265e2df2 (20:55): eleftherios: it has nothing to do with the scripts.",
        "f4ea20ae05d2da565e774193265e2df2 (20:55): eleftherios: it has to do with the server.",
        "5a5a867c687778f6a8648799e0da2f30 (20:56): ironfroggy, yes, I just saw there is a mod_fastcgi",
        "f4ea20ae05d2da565e774193265e2df2 (20:57): marmoute: how does the string module do anything to solve that problem?",
        "f24a126cd3a827fcce5593f111a31795 (20:57): how do i unload a module in a python interpreter?",
        "25d235e595e01be1d815a8ce66c5131c (20:58): ironfroggy: there is a string. digits",
        "25d235e595e01be1d815a8ce66c5131c (20:58): nexu: as for variable",
        "25d235e595e01be1d815a8ce66c5131c (20:59): del module_name",
        "25d235e595e01be1d815a8ce66c5131c (20:59): but if some code is still used it will not be &quot;unload&quot;",
        "25d235e595e01be1d815a8ce66c5131c (20:59): nexu: what do you want to do ,",
        "25d235e595e01be1d815a8ce66c5131c (20:59): ?",
        "f4ea20ae05d2da565e774193265e2df2 (20:59): marmoute: so?",
        "f4ea20ae05d2da565e774193265e2df2 (21:00): marmoute: thats just a string of all the digits.",
        "f4ea20ae05d2da565e774193265e2df2 (21:00): marmoute: doesnt seem very helpful.",
        "820541c2e1d69edf4ae28dffe741e511 (21:00): Hi all.",
        "f4ea20ae05d2da565e774193265e2df2 (21:00): hello",
        "820541c2e1d69edf4ae28dffe741e511 (21:02): If I have a generator in in a chain of generators that yields no results on a particular run, how can I pass the result of the previous generator to the next?",
        "f4ea20ae05d2da565e774193265e2df2 (21:03): define &quot;chain of generatoes&quot; and &quot;yields no results&quot;",
        "8e646668f4d6e0ac8985e9f8eb0d8180 (21:04): def OnlyDigitsInString(str): return False not in [x in string.digits for x in str]    ... feels like there must be a nicer way to do it :)",
        "f4ea20ae05d2da565e774193265e2df2 (21:05): setre: there is. i told you.",
        "8e646668f4d6e0ac8985e9f8eb0d8180 (21:05): how is int() a test?",
        "f4ea20ae05d2da565e774193265e2df2 (21:06): if it can make an integer form the string, the string represents an integer. seems pretty straightforward.",
        "71478f54c7ba58e67f6db029828be538 (21:07): ironfroggy: do you use ironpython?",
        "f4ea20ae05d2da565e774193265e2df2 (21:08): pianoboy3333: ive only played around with it a bit. i havent used it in anything resembling a production environment yet.",
        "820541c2e1d69edf4ae28dffe741e511 (21:08): Ok, so I start with an iterable object containing millions of elements, I pass that object to a generator, pass that generator to the next and so on, filtering down the number of elements, however if I pass the elements to a generator, and based on the predicate it yields no results, how can I avoid passing zero elements to the next generator?",
        "71478f54c7ba58e67f6db029828be538 (21:08): ironfroggy: I find that a let down in your name ;)",
        "f4ea20ae05d2da565e774193265e2df2 (21:09): pianoboy3333: hey, i was around way before ironpython!",
        "f4ea20ae05d2da565e774193265e2df2 (21:09): pianoboy3333: tho i am increasingly getting comments about it.",
        "f4ea20ae05d2da565e774193265e2df2 (21:10): wamd: so if the first call of the generator's next() method raises StopIteration, you want to instead get the items iterated by the generator that it had been passed?",
        "f4ea20ae05d2da565e774193265e2df2 (21:10): wamd: i think i understand the functionality you desire, but it seems odd. if the generator says &quot;nothing meets my conditions&quot; then shouldnt that filter everything out? just seems to make sense that there would be no results then.",
        "820541c2e1d69edf4ae28dffe741e511 (21:13): I want to keep elements that meet conditions and shed the rest, however if every iteration through a particular generator yields no result then it would be silly to pass nothing to the next generator.",
        "820541c2e1d69edf4ae28dffe741e511 (21:15): Makes me think I have a very obscure feature somewhere in the generator.",
        "f4ea20ae05d2da565e774193265e2df2 (21:15): wouldnt it be sillier to pass it a bunch of elements that dont meet the filter conditions?",
        "820541c2e1d69edf4ae28dffe741e511 (21:15): Yes, it would.",
        "f4ea20ae05d2da565e774193265e2df2 (21:15): so why would you want to do that then?",
        "f4ea20ae05d2da565e774193265e2df2 (21:15): it makes perfect sense that if the generator is to filter out all results not meeting some conditions, that it would yield nothing if none of them met those conditions.",
        "bbf260615b3fae411e9e8edbd90a13cb (21:16): hm, what methods are there for using databases with python without manually typing SQL?",
        "820541c2e1d69edf4ae28dffe741e511 (21:16): ironfroggy: Apologies, that points to a sure fault in the logic of the  conditional statement that yields a valid result.",
        "f4ea20ae05d2da565e774193265e2df2 (21:17): elias: depends on your requirements. SQLObject, SQLAlchemy, Axiom, etc.",
        "f4ea20ae05d2da565e774193265e2df2 (21:17): wamd: you are saying if none of them meet the condition, then the condition logic is wrong?",
        "820541c2e1d69edf4ae28dffe741e511 (21:20): That's just the thing, of the arguments that get passed to the function 0 elements in a result is an option.  Like so... if (x &gt;= 0 and x &lt;= 2): yield x",
        "820541c2e1d69edf4ae28dffe741e511 (21:21): So x being equal to 0,1, or 2 is valid.",
        "f4ea20ae05d2da565e774193265e2df2 (21:26): sorry i dont see the connection. wouldnt that mean the particular generator would yield 0's, not 0 elements?",
        "820541c2e1d69edf4ae28dffe741e511 (21:26): It's okay, I've found the flaw.  It's in how I generate the result in the function to yield a valid condition.",
        "820541c2e1d69edf4ae28dffe741e511 (21:33): Okay I take that back.",
        "820541c2e1d69edf4ae28dffe741e511 (21:38): The logic is fine.  What I want to do is pass the results from the previous generator if the current generator yields zero results.  Like for example I have a generator that tests if the elements in the iterable are under 10.  Each iterable contains a list of 7 elements.  In that list if 0 to 2 of those elements are under 10 in value keep the list.  Move to the next and test the next 7 etc.",
        "f4ea20ae05d2da565e774193265e2df2 (21:39): i dont understand how that makes sense.",
        "820541c2e1d69edf4ae28dffe741e511 (21:39): But if none of the elements in any of the lists is under 10, then none of them is yielded and thus my problem.",
        "f4ea20ae05d2da565e774193265e2df2 (21:40): if the iterable is supposed to filter out any elements not under 10, what is the logic in it passing _all_ elements if less than 3 of them are under 10?",
        "f4ea20ae05d2da565e774193265e2df2 (21:40): i understand what you are trying to do, but the reasoning behind it escapes me to the point of brain damage.",
        "e0a5033ea6f5f30705b86795808d3a77 (21:40): yay i just made my first permutations script :)",
        "820541c2e1d69edf4ae28dffe741e511 (21:41): Because the next generator checks for elements under 20.",
        "820541c2e1d69edf4ae28dffe741e511 (21:42): Maybe what I need to go is the whole process in reverse.",
        "f4ea20ae05d2da565e774193265e2df2 (21:42): wamd: well then, obviously, you are chaining them in the wrong order."
    ],
    "person_ids": [
        "71478f54c7ba58e67f6db029828be538",
        "33b58f7982c1fca3ec36b54f2f549267",
        "1890495e3b0c6a8a3f4c1946fdd06d35",
        "f24a126cd3a827fcce5593f111a31795",
        "5b071d2ef49b0a84a2b96e649ea8642f",
        "8e646668f4d6e0ac8985e9f8eb0d8180",
        "019cedf410539bd96b1f7edd14a6e594",
        "ac54f65fb68bf8a14c58bb36bfb31cba",
        "1f100e36a4edbfedd2315eba78be2770",
        "5a5a867c687778f6a8648799e0da2f30",
        "8e7dd5d3e76aa952e21999a5537dcffb",
        "f4ea20ae05d2da565e774193265e2df2",
        "25d235e595e01be1d815a8ce66c5131c",
        "820541c2e1d69edf4ae28dffe741e511",
        "bbf260615b3fae411e9e8edbd90a13cb",
        "e0a5033ea6f5f30705b86795808d3a77"
    ]
}