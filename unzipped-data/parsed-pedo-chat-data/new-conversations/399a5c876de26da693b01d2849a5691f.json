{
    "id": "399a5c876de26da693b01d2849a5691f",
    "messages": [
        "f139aba52f9fa1394b4034a7954b2220 (17:19): cc097e0d7183ae8436e7df709553c8c0, yt?",
        "f139aba52f9fa1394b4034a7954b2220 (17:30): cc097e0d7183ae8436e7df709553c8c0, I created a basic form handler for the script, though it doesn't yet handle DB updating http://html5.googlecode.com/svn/trunk/status/update-markers.php",
        "cc097e0d7183ae8436e7df709553c8c0 (17:31): f139aba52f9fa1394b4034a7954b2220: nice!",
        "f139aba52f9fa1394b4034a7954b2220 (17:31): test it here http://lachy.id.au/temp/html5/annotate.html",
        "f139aba52f9fa1394b4034a7954b2220 (17:31): if you forget to enter an email and/or rationale, it will prompt you for it",
        "cc097e0d7183ae8436e7df709553c8c0 (17:32): f139aba52f9fa1394b4034a7954b2220: i think the idea is for the script to send an email to Hixie or someone who can approve the change before it updates the database",
        "f139aba52f9fa1394b4034a7954b2220 (17:33): ok, so it would have to somehow preserve the data temporarily somewhere while it awaits approval",
        "cc097e0d7183ae8436e7df709553c8c0 (17:33): yeah",
        "cc097e0d7183ae8436e7df709553c8c0 (17:33): perhaps also in the database but another table",
        "cc097e0d7183ae8436e7df709553c8c0 (17:33): or in the email",
        "f139aba52f9fa1394b4034a7954b2220 (17:34): it could check which fields have changed, and then include those fields in the query string",
        "cc097e0d7183ae8436e7df709553c8c0 (17:34): yeah",
        "cc097e0d7183ae8436e7df709553c8c0 (17:35): wonder what would happen if you make another change before the first was approved",
        "f139aba52f9fa1394b4034a7954b2220 (17:36): that wouldn't matter, they wouldn't get committed until the approval.  So it would depend on the order in which Hixie approved them",
        "cc097e0d7183ae8436e7df709553c8c0 (17:36): i guess",
        "f139aba52f9fa1394b4034a7954b2220 (17:37): maybe it should have some authentication system so Hixie doesn't have to approve all changes.  Authorised users could just commit directly",
        "f139aba52f9fa1394b4034a7954b2220 (17:37): though we'd need that anyway, so it couldn't be hacked",
        "cc097e0d7183ae8436e7df709553c8c0 (17:38): perhaps the js could figure out what the changes were so that the whole shebang isn't sent back to the php script",
        "cc097e0d7183ae8436e7df709553c8c0 (17:38): whatever is simplest",
        "f139aba52f9fa1394b4034a7954b2220 (17:40): easy way would be to include an empty value for the intial value so it doesn't get submitted if selected: &lt;label class=initial&gt;&lt;input ... name=foo value=&quot;&quot; checked&gt; TBW&lt;/label&gt;",
        "cc097e0d7183ae8436e7df709553c8c0 (17:42): aha",
        "cc097e0d7183ae8436e7df709553c8c0 (17:42): radio buttons with empty values aren't submitted?",
        "cc097e0d7183ae8436e7df709553c8c0 (17:44): hmm, seems they are, just with no value... :)",
        "f139aba52f9fa1394b4034a7954b2220 (17:45): no, I was wrong.  They are submitted",
        "cc097e0d7183ae8436e7df709553c8c0 (17:45): but the php script doesn't need to figure out what the changes were",
        "cc097e0d7183ae8436e7df709553c8c0 (17:45): just ignore the ones with no value",
        "f139aba52f9fa1394b4034a7954b2220 (17:45): yeah, that makes it easy",
        "cc097e0d7183ae8436e7df709553c8c0 (17:46): ok, i'll implement that in the js",
        "f139aba52f9fa1394b4034a7954b2220 (17:46): I'll update the PHP to check for empty values",
        "cc097e0d7183ae8436e7df709553c8c0 (17:47): the value &quot;none&quot; means that the initial was something else and the marker is to be removed",
        "f139aba52f9fa1394b4034a7954b2220 (17:51): I've updated the PHP",
        "cc097e0d7183ae8436e7df709553c8c0 (18:01): js updated too",
        "cc097e0d7183ae8436e7df709553c8c0 (18:01): i have a send email script in php somewhere",
        "cc097e0d7183ae8436e7df709553c8c0 (18:02): that sends emails encoded as utf-8 and works correctly with funny characters in headers",
        "cc097e0d7183ae8436e7df709553c8c0 (18:06): http://simon.html5.org/temp/mail-utf8.txt",
        "cc097e0d7183ae8436e7df709553c8c0 (18:07): although i guess the email address itself might well contain non-ascii characters too nowadays",
        "f139aba52f9fa1394b4034a7954b2220 (18:07): I deployed the new script on my server, it seems to work",
        "cc097e0d7183ae8436e7df709553c8c0 (18:08): nice",
        "f139aba52f9fa1394b4034a7954b2220 (18:08): I'm not sure how non-ascii email addresses work or if PHP would support them",
        "cc097e0d7183ae8436e7df709553c8c0 (18:08): probably not worth worrying about :)",
        "cc097e0d7183ae8436e7df709553c8c0 (18:09): i guess very few systems allow non-ascii in email addresses",
        "f139aba52f9fa1394b4034a7954b2220 (18:14): should we have this email comit-watchers as well?",
        "f139aba52f9fa1394b4034a7954b2220 (18:14): after it's confirmed",
        "cc097e0d7183ae8436e7df709553c8c0 (18:15): yeah that would be good",
        "cc097e0d7183ae8436e7df709553c8c0 (18:15): twitter?",
        "f139aba52f9fa1394b4034a7954b2220 (18:15): yes, that too",
        "f139aba52f9fa1394b4034a7954b2220 (18:15): I'm just implementing the email script now and to have it email me for testing",
        "cc097e0d7183ae8436e7df709553c8c0 (18:17): ok",
        "f139aba52f9fa1394b4034a7954b2220 (18:18): your email script was missing the format=flowed parameter",
        "cc097e0d7183ae8436e7df709553c8c0 (18:21): hmm, do you do wrapping of the body?",
        "cc097e0d7183ae8436e7df709553c8c0 (18:22): or does php do that?",
        "cc097e0d7183ae8436e7df709553c8c0 (18:23): $message = wordwrap($message, 72); ?",
        "cc097e0d7183ae8436e7df709553c8c0 (18:26): linebreaks in headers should be \\r\\n also",
        "cc097e0d7183ae8436e7df709553c8c0 (18:26): between headers that is",
        "cc097e0d7183ae8436e7df709553c8c0 (18:27): not sure if php wordwrap() is RFC 2646 compliant though :)",
        "cc097e0d7183ae8436e7df709553c8c0 (18:30): it's not",
        "cc097e0d7183ae8436e7df709553c8c0 (18:31): words shorter than 998 shouldn't be wrapped",
        "cc097e0d7183ae8436e7df709553c8c0 (18:33): soft linebreaks should also be SP CRLF",
        "cc097e0d7183ae8436e7df709553c8c0 (18:38): finds http://drupal.org/node/154218 which might be interesting",
        "f139aba52f9fa1394b4034a7954b2220 (18:41): probably doesn't matter for this, since I can control the line lengths manually.  does the php mail() funciton replace \\n with \\r\\n properly?",
        "cc097e0d7183ae8436e7df709553c8c0 (18:41): dunno",
        "cc097e0d7183ae8436e7df709553c8c0 (18:46): php should just do this boring processing by default :)",
        "cc097e0d7183ae8436e7df709553c8c0 (18:47): with options about encoding, format, and some others, and then Do The Right Thing",
        "ef6f2287bae00ba79475fbf56c2b6fee (18:48): PHP is not exactly the DTRTiest language ;)",
        "cc097e0d7183ae8436e7df709553c8c0 (18:48): indeed",
        "f139aba52f9fa1394b4034a7954b2220 (18:53): I suppose we should add some check to make sure only the values TBW, WIP, SCS and none will be accepted. At the moment, it doesn't do much input validation, which could be a problem",
        "cc097e0d7183ae8436e7df709553c8c0 (18:54): yeah",
        "f139aba52f9fa1394b4034a7954b2220 (18:54): should we restrict the length of the rationale, especially if we're going to twitter it?",
        "cc097e0d7183ae8436e7df709553c8c0 (18:54): seems reasonable",
        "cc097e0d7183ae8436e7df709553c8c0 (18:54): what does twitter accept?",
        "f139aba52f9fa1394b4034a7954b2220 (18:54): 140 chars total",
        "cc097e0d7183ae8436e7df709553c8c0 (18:55): we might want some context text in the twitter messages",
        "f139aba52f9fa1394b4034a7954b2220 (18:55): so if we send the twitter message as: &quot;Status Update: $rationale&quot;, that leaves 125 chars for the rationale",
        "cc097e0d7183ae8436e7df709553c8c0 (18:55): yeah",
        "f139aba52f9fa1394b4034a7954b2220 (18:56): I'll add a comment to the PHP, update the JS to make the rationale input maxlength=125",
        "a924fb58d2c25874322f4e5126f608b9 (18:56): Is twitter 140 chars or 140 bytes, though?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (18:59): chars",
        "cc097e0d7183ae8436e7df709553c8c0 (19:02): f139aba52f9fa1394b4034a7954b2220: i already updated the js",
        "cc097e0d7183ae8436e7df709553c8c0 (19:03): http://krijnhoetmer.nl/irc-logs/whatwg/20070524#l-461",
        "f139aba52f9fa1394b4034a7954b2220 (19:11): I've committed the current PHP versions, feel free to fix some of the bugs, it's getting a bit late for me",
        "f139aba52f9fa1394b4034a7954b2220 (19:11): there's a TODO list at the top of the file",
        "cc097e0d7183ae8436e7df709553c8c0 (19:11): ok",
        "f139aba52f9fa1394b4034a7954b2220 (19:17): we'll need to wordwrap the rationale in the email.  Just do wordwrap($rationale,72) and then fix then append a space before the new lines (if any)",
        "f139aba52f9fa1394b4034a7954b2220 (19:23): use wordwrap(&quot;Rationale: $rationale&quot;, 72, '\\n', false);",
        "f139aba52f9fa1394b4034a7954b2220 (19:25): then, if you want to be really cautious, do wordwrap($body, 998, '\\n', true); to ensure no line is longer than that which could happen with a long URL",
        "cc097e0d7183ae8436e7df709553c8c0 (19:25): not wordwrap(&quot;Rationale: $rationale&quot;, 72, ' \\r\\n', false); ?",
        "cc097e0d7183ae8436e7df709553c8c0 (19:26): maxlength is 125 already :)",
        "cc097e0d7183ae8436e7df709553c8c0 (19:26): we could cut at 125 before wrapping if it's longer",
        "f139aba52f9fa1394b4034a7954b2220 (19:26): yeah, I know, I just left it there as a reminder for when we do the twitter messages, and we need to do input validation for it",
        "f139aba52f9fa1394b4034a7954b2220 (19:27): probably where I check for empty $email and $rationale, we should also check for strlen($rationale) &lt; 125 and check for a valid email address",
        "cc097e0d7183ae8436e7df709553c8c0 (19:28): yeah",
        "65325d50b2e25aca54bc871b89758c9c (19:28): good morning everyone",
        "cc097e0d7183ae8436e7df709553c8c0 (19:29): morning 65325d50b2e25aca54bc871b89758c9c",
        "f139aba52f9fa1394b4034a7954b2220 (19:29): should probably use mb_strlen also",
        "f139aba52f9fa1394b4034a7954b2220 (19:29): hi 65325d50b2e25aca54bc871b89758c9c",
        "65325d50b2e25aca54bc871b89758c9c (19:29): I've been away all weekend - any exciting flamewars?",
        "f139aba52f9fa1394b4034a7954b2220 (19:29): no, not since your last one with ROb",
        "f139aba52f9fa1394b4034a7954b2220 (19:29): :-)",
        "f139aba52f9fa1394b4034a7954b2220 (19:31): oh, but there's nearly a flamewar in the whatwg blog comments",
        "f139aba52f9fa1394b4034a7954b2220 (19:52): cc097e0d7183ae8436e7df709553c8c0, we should probably use this UTF-8 wordwrap function instead http://www.php.net/manual/en/function.wordwrap.php#57090",
        "cc097e0d7183ae8436e7df709553c8c0 (19:53): f139aba52f9fa1394b4034a7954b2220: aha, cheers",
        "f139aba52f9fa1394b4034a7954b2220 (19:54): and it would probably be easier if all the word wrapping was handled in the sendMail function in mail-utf8.php",
        "f139aba52f9fa1394b4034a7954b2220 (19:54): that way, it doesn't need to be handled individually for each email we generate",
        "cc097e0d7183ae8436e7df709553c8c0 (19:55): ok",
        "cc097e0d7183ae8436e7df709553c8c0 (20:02): though utf8_wordwrap doesn't have a cut argument",
        "f139aba52f9fa1394b4034a7954b2220 (20:03): oh, well, it shouldn't be too hard to modify it",
        "f139aba52f9fa1394b4034a7954b2220 (20:03): I can probably do that tomorrow if you like",
        "cc097e0d7183ae8436e7df709553c8c0 (20:08): i'll look into it for a bit later today",
        "f139aba52f9fa1394b4034a7954b2220 (20:11): hmm. This comment suggests that wordwrap() doesn't preserve existing line breaks, but I just tested it and it seems to preserve them http://www.php.net/manual/en/function.wordwrap.php#53403"
    ],
    "person_ids": [
        "f139aba52f9fa1394b4034a7954b2220",
        "cc097e0d7183ae8436e7df709553c8c0",
        "ef6f2287bae00ba79475fbf56c2b6fee",
        "a924fb58d2c25874322f4e5126f608b9",
        "a11aabeeceeae6b8cb5d12ea06b56554",
        "65325d50b2e25aca54bc871b89758c9c"
    ]
}