{
    "id": "43a2a4f3fc758b0d272905d71a03cdd1",
    "messages": [
        "ab7faae5d7b250ea8606486575f8f79c (16:59): Licensing is hard :-(",
        "ab7faae5d7b250ea8606486575f8f79c (17:01): I have some project that includes C++ source files, which will be GPL; and some art data (bitmap textures etc) which will be CC-by-sa; but then there's stuff like XML files that tie together the art data, so they're sort of art data but since they're XML they're sort of like code too, and it gets a bit confusing",
        "b25b6b77a0087ff8385941e5545d32ea (17:02): ab7faae5d7b250ea8606486575f8f79c: Lets go shopping",
        "b25b6b77a0087ff8385941e5545d32ea (17:02): Or, if you prefer I will ask you a more interesting question",
        "b25b6b77a0087ff8385941e5545d32ea (17:02): Actually I will anywway",
        "b25b6b77a0087ff8385941e5545d32ea (17:03): (you can always stick your fingers in your eyes and hum)",
        "ab7faae5d7b250ea8606486575f8f79c (17:03): (That might hurt my eyes)",
        "b25b6b77a0087ff8385941e5545d32ea (17:03): Is there a good/standard way of empirically determining the big-O of a function?",
        "ab7faae5d7b250ea8606486575f8f79c (17:04): What do you count as &quot;empirical&quot;?",
        "b25b6b77a0087ff8385941e5545d32ea (17:04): At least under some reasonable set of assumptions e.g. the function has to be drawn from a finite set",
        "b25b6b77a0087ff8385941e5545d32ea (17:04): s/function/big O function/",
        "73eaf221abca1b8244e34b0b9e76ac46 (17:05): http://forums.whatwg.org/viewtopic.php?t=4101 - spam or not?",
        "b25b6b77a0087ff8385941e5545d32ea (17:05): ab7faae5d7b250ea8606486575f8f79c: Say I have an implementation of a &quot;sort&quot; function and I want to know if it is quadratic or subquadratic purely by black box measurement",
        "b25b6b77a0087ff8385941e5545d32ea (17:06): In a way that is reasonably robust against the environment",
        "f139aba52f9fa1394b4034a7954b2220 (17:06): ddd01b1de2f07d48d4953be350a7944c, I just sent a revised copy of the selectors api exit criteria to public-webapps, which also describes what should be done with the testsuite. Let me know what you think, and if and when you'll be able to make those changes",
        "b25b6b77a0087ff8385941e5545d32ea (17:07): 73eaf221abca1b8244e34b0b9e76ac46: spam",
        "ab7faae5d7b250ea8606486575f8f79c (17:07): b25b6b77a0087ff8385941e5545d32ea: It's not possible to determine a theoretically correct answer - the function could have cost n^1.5 + n^2/1000000000, and it would be O(n^2) but all your black box measurements would make you think it was O(n^1.5)",
        "ab7faae5d7b250ea8606486575f8f79c (17:08): (The definition of big-O notation is that it's all about what happens in the limit, and you can't perform measurements in the limit)",
        "b25b6b77a0087ff8385941e5545d32ea (17:09): ab7faae5d7b250ea8606486575f8f79c: Indeed. So lets say that we don't care so much about the true asymptotic behaviour but the behaviour for some reasonable range of input values",
        "b25b6b77a0087ff8385941e5545d32ea (17:09): Which isn't the theoretically pure case but is more practically interesting",
        "ab7faae5d7b250ea8606486575f8f79c (17:10): Then you can just run it for a range of n values, and pass it into some statistical analysis package (e.g. Excel's graph plotter) and get it to tell you the polynomial equation of the curve",
        "b25b6b77a0087ff8385941e5545d32ea (17:10): ab7faae5d7b250ea8606486575f8f79c: Right but does that seem likely to be robust in the face of environmental factors",
        "b25b6b77a0087ff8385941e5545d32ea (17:11): like, say, GC pauses or whatever",
        "b25b6b77a0087ff8385941e5545d32ea (17:11): and there are practical concerns about the range of input values that should be chosen",
        "ab7faae5d7b250ea8606486575f8f79c (17:11): (There's also the issue that big-O is technically about worst case behaviour, and e.g. quicksort has terrible worst-case behaviour but you'll never notice that except on carefully-chosen inputs)",
        "b25b6b77a0087ff8385941e5545d32ea (17:12): (Yeah the worst-case behaviour thing is a reasonable concern but we'll ignore that for now)",
        "ab7faae5d7b250ea8606486575f8f79c (17:12): b25b6b77a0087ff8385941e5545d32ea: It seems likely to be sufficiently robust that the difference between n log n and n^2 would be blatantly obvious",
        "b25b6b77a0087ff8385941e5545d32ea (17:13): ab7faae5d7b250ea8606486575f8f79c: OK but you are not aware of any useful prior art on doing this kind of meaurement?",
        "ab7faae5d7b250ea8606486575f8f79c (17:13): I don't see why it's a complicated enough issue that one would need prior art, rather than just measuring some values and looking to see what the curve is like :-)",
        "ab7faae5d7b250ea8606486575f8f79c (17:14): or looking at the implementation and working out what it's doing",
        "b25b6b77a0087ff8385941e5545d32ea (17:14): ab7faae5d7b250ea8606486575f8f79c: I have been told that this is harder in practice than it sounds in theory :)",
        "ab7faae5d7b250ea8606486575f8f79c (17:15): (In the latter case, see e.g. Knuth for more information than you ever wanted to know about sorting algorithms)",
        "ab7faae5d7b250ea8606486575f8f79c (17:15): b25b6b77a0087ff8385941e5545d32ea: I guess it depends on how precise an answer you want",
        "ab7faae5d7b250ea8606486575f8f79c (17:15): e.g. n log n vs n^2 is easy to detect, but n^1.99 vs n^2 would be much harder",
        "ab7faae5d7b250ea8606486575f8f79c (17:17): I suppose the problem is I don't understand what problem you're trying to solve",
        "b25b6b77a0087ff8385941e5545d32ea (17:19): ab7faae5d7b250ea8606486575f8f79c: Fair enough :)",
        "b25b6b77a0087ff8385941e5545d32ea (17:20): isn't quite sure either",
        "ab7faae5d7b250ea8606486575f8f79c (17:20): Easy solution: Just use heap sort",
        "ab7faae5d7b250ea8606486575f8f79c (17:20): Uh, merge sort",
        "ab7faae5d7b250ea8606486575f8f79c (17:21): I think that's the one I mean",
        "73eaf221abca1b8244e34b0b9e76ac46 (17:23): smylers++ on UAs generating a description of the table structure",
        "b25b6b77a0087ff8385941e5545d32ea (17:24): ab7faae5d7b250ea8606486575f8f79c: It isn't really a sort-specific question",
        "ab7faae5d7b250ea8606486575f8f79c (17:25): b25b6b77a0087ff8385941e5545d32ea: Oh",
        "ab7faae5d7b250ea8606486575f8f79c (17:32): b25b6b77a0087ff8385941e5545d32ea: Anyway, I think in conclusion I don't have any useful non-obvious knowledge that would help you do whatever it is you're trying to do",
        "ddd01b1de2f07d48d4953be350a7944c (17:35): f139aba52f9fa1394b4034a7954b2220: k - I'll probably be able to look at it/make the changes early July",
        "f139aba52f9fa1394b4034a7954b2220 (17:43): ok",
        "73eaf221abca1b8244e34b0b9e76ac46 (17:45): http://blog.benward.me/post/128294973",
        "b25b6b77a0087ff8385941e5545d32ea (17:49): I think it's sweet of Adobe to talk about HTML5 at every possible oppertunity.",
        "b25b6b77a0087ff8385941e5545d32ea (17:49): It's hard to imagine what more they could do to promote it",
        "ab7faae5d7b250ea8606486575f8f79c (17:52): They could make Flash buggy and crash-prone, and not port it to new platforms and devices",
        "b25b6b77a0087ff8385941e5545d32ea (17:53): ab7faae5d7b250ea8606486575f8f79c: Like it said it's hard to imagine what more they could do",
        "b25b6b77a0087ff8385941e5545d32ea (17:53): s/it/I/",
        "73eaf221abca1b8244e34b0b9e76ac46 (18:07): b25b6b77a0087ff8385941e5545d32ea: do you think it would be possible to hack together a demo implementation of generating a description of a table's structure?",
        "b25b6b77a0087ff8385941e5545d32ea (18:08): 73eaf221abca1b8244e34b0b9e76ac46: All things are possible",
        "73eaf221abca1b8244e34b0b9e76ac46 (18:08): b25b6b77a0087ff8385941e5545d32ea: i mean, do you want to do it?",
        "b25b6b77a0087ff8385941e5545d32ea (18:08): 73eaf221abca1b8244e34b0b9e76ac46: I can have a go",
        "73eaf221abca1b8244e34b0b9e76ac46 (18:08): cool",
        "b25b6b77a0087ff8385941e5545d32ea (18:10): 73eaf221abca1b8244e34b0b9e76ac46: Another interesting project would be to see how well the Mozilla layout table detector works",
        "73eaf221abca1b8244e34b0b9e76ac46 (18:10): yeah",
        "73eaf221abca1b8244e34b0b9e76ac46 (18:10): i wonder how mozilla's algorithm came into being",
        "f139aba52f9fa1394b4034a7954b2220 (18:10): are you show that it's possible for UAs to determine for itself what would otherwise be provided by a summary attribute (if one is supplied and used properly)?",
        "b25b6b77a0087ff8385941e5545d32ea (18:11): If it works reasonably well hsivonen could add it to the validator",
        "b25b6b77a0087ff8385941e5545d32ea (18:11): f139aba52f9fa1394b4034a7954b2220: No. But it seems worth finding out",
        "73eaf221abca1b8244e34b0b9e76ac46 (18:11): is it just a bunch of guesses? or is it based on research?",
        "b25b6b77a0087ff8385941e5545d32ea (18:11): guesses it is a bunch of guesses",
        "f139aba52f9fa1394b4034a7954b2220 (18:11): b25b6b77a0087ff8385941e5545d32ea, certainly, if we could show that summary was redundant, then it would end the debate",
        "ab7faae5d7b250ea8606486575f8f79c (18:12): f139aba52f9fa1394b4034a7954b2220: I assume that was a joke",
        "b25b6b77a0087ff8385941e5545d32ea (18:12): f139aba52f9fa1394b4034a7954b2220: Hah ha",
        "f139aba52f9fa1394b4034a7954b2220 (18:13): no, it wasn't a joke. I'm serious. If everything an author is supposed to provide with a summary attribute can be determined automatically from the table structure, then it is redundant",
        "73eaf221abca1b8244e34b0b9e76ac46 (18:13): b25b6b77a0087ff8385941e5545d32ea: look at ben's collection of tables for inspiration",
        "b25b6b77a0087ff8385941e5545d32ea (18:14): f139aba52f9fa1394b4034a7954b2220: I doubt it will be possible to determine &quot;everything an author is supposed to provide&quot;",
        "b25b6b77a0087ff8385941e5545d32ea (18:14): Even if it is I think people will still claim @summary is needed",
        "b25b6b77a0087ff8385941e5545d32ea (18:15): (for legacy UAs or for super-complex corner cases or something)",
        "ab7faae5d7b250ea8606486575f8f79c (18:15): Is summary=&quot;Calendar&quot; considered a useful use of summary? That's something that's very hard to determine algorithmically, and hard for someone using a non-graphical browser to determine, but trivial for someone using a graphical browser",
        "b25b6b77a0087ff8385941e5545d32ea (18:16): ab7faae5d7b250ea8606486575f8f79c: That's not what @summary is for, apparently",
        "f139aba52f9fa1394b4034a7954b2220 (18:16): ab7faae5d7b250ea8606486575f8f79c, I don't think so",
        "b25b6b77a0087ff8385941e5545d32ea (18:16): (my current understanding is that it is _only_ supposed to be used for describing the structure of the table)",
        "ab7faae5d7b250ea8606486575f8f79c (18:16): b25b6b77a0087ff8385941e5545d32ea: It doesn't really matter what it's apparently for, it matters whether it's beneficial to users",
        "73eaf221abca1b8244e34b0b9e76ac46 (18:17): would be interesting to see if it's possible to determine whether a given table is a calendar or not",
        "73eaf221abca1b8244e34b0b9e76ac46 (18:17): calendars usually have a specific format",
        "f139aba52f9fa1394b4034a7954b2220 (18:17): &quot;This attribute provides a summary of the table's purpose and structure ...&quot; - For most common simple cases, it's possible to determine the structure simply by looking at the headings. The purpose should be indicated by the caption or surrounding prose.",
        "d114be1698421a7cec050e2207d29631 (18:23): if the ua can't provide a summary, allow the author to use @summary or whatever, no?",
        "f139aba52f9fa1394b4034a7954b2220 (18:24): d114be1698421a7cec050e2207d29631, even if the UA can't, there are better proposals than the @summary"
    ],
    "person_ids": [
        "ab7faae5d7b250ea8606486575f8f79c",
        "b25b6b77a0087ff8385941e5545d32ea",
        "73eaf221abca1b8244e34b0b9e76ac46",
        "f139aba52f9fa1394b4034a7954b2220",
        "ddd01b1de2f07d48d4953be350a7944c",
        "d114be1698421a7cec050e2207d29631"
    ]
}