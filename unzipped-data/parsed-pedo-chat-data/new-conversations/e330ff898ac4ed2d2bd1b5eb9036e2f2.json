{
    "id": "e330ff898ac4ed2d2bd1b5eb9036e2f2",
    "messages": [
        "ab7faae5d7b250ea8606486575f8f79c (03:38): http://canvex.lazyilluminati.com/misc/states6.png - now with fewer bugs than before, since implementation seems to pass most of the tests now",
        "ab7faae5d7b250ea8606486575f8f79c (03:39): *the implementation",
        "9fdcde97c1cb33fe4e9f6aab1d84bc76 (03:40): yay squiggly lines",
        "f139aba52f9fa1394b4034a7954b2220 (03:41): ab7faae5d7b250ea8606486575f8f79c: what's the difference between red and black lines?",
        "ab7faae5d7b250ea8606486575f8f79c (03:41): (Oh, I segfault on &lt;x y=&quot;&amp;&quot;&gt;, which can't be good)",
        "9fdcde97c1cb33fe4e9f6aab1d84bc76 (03:42): an especially squiggly red one going from CommentEndDash to Data",
        "ab7faae5d7b250ea8606486575f8f79c (03:42): f139aba52f9fa1394b4034a7954b2220: Red is transitions that are parse errors, black is transitions that probably aren't",
        "f139aba52f9fa1394b4034a7954b2220 (03:42): ok",
        "ab7faae5d7b250ea8606486575f8f79c (03:42): (&quot;probably&quot; because of the parse-error-unless-it's-a-permitted-slash thing, which the graph treats as not-an-error)",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:43): that's awesome",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:43): why not have a red line and a black line when you have the permitted slash thing?",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:43): you do that elsewhere",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:43): yay, bogus doctype only has red arrows leading to it",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:43): same with bogus comment, yay",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:44): you really should use another colour for the EOF transitions",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:44): in fact maybe we should have an EOF state",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:44): instead of having EOF go back to the dat astate",
        "ab7faae5d7b250ea8606486575f8f79c (03:45): I can't easily have both because I only generate one arrow per transition from the original algorithm, and then delete all duplicates, so it only ends up with red+black when there are two separate transitions between the same states",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:45): ah ok",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:45): didn't realise it came from actual code",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:46): that graph is awesome",
        "ab7faae5d7b250ea8606486575f8f79c (03:46): It's not entirely actual code - the algorithm is represented as data in OCaml, and I can generate that graph or a C++ implementation from that data",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:46): it shows that there are really three basic ideas",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:46): aah",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:46): cool",
        "a480104b0e570389c6f4284a88c7cd9d (03:47): is there any reason why you couldn't generate a, say, Python or Ruby implementation from that data?",
        "ab7faae5d7b250ea8606486575f8f79c (03:50): http://canvex.lazyilluminati.com/misc/states7.png - unless I did something wrong, that has blue lines for every transition that cannot occur if EOF is never consumed",
        "ab7faae5d7b250ea8606486575f8f79c (03:50): (i.e. all the transitions that are (at least partially) caused by EOF)",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:51): can you try it with a separate state for EOF? or is that more effort than it's worth?",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:51): it'd be cool to have the arrows go down to another state for EOF, it would look less cluttered i'd think",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:51): just an idea, don't worry about it if it's more work than a few seconds :-)",
        "ab7faae5d7b250ea8606486575f8f79c (03:51): a480104b0e570389c6f4284a88c7cd9d: I don't think there is any reason why that wouldn't work",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:51): this is really cool",
        "ab7faae5d7b250ea8606486575f8f79c (03:53): I've still had to manually write a few hundred lines of C++ (which would need to be ported to other languages), mostly for the entity parsing (since that's too boring to do in a more generic way), but then it generates a thousand lines of state-machine code automatically",
        "a480104b0e570389c6f4284a88c7cd9d (03:53): I don't know O'Caml, but this sounds like a wonderful excuse to learn.  Will you be publishing your source at some point?",
        "ab7faae5d7b250ea8606486575f8f79c (03:53): I didn't know it either, so I'm using it as exactly the same excuse ;-)",
        "ab7faae5d7b250ea8606486575f8f79c (03:54): I'll try to upload what I've done soonish",
        "132ea029b178e3c6d3a3aa4521ea24a5 (03:54): looks like it could be used to generate code coverage testcases too",
        "ab7faae5d7b250ea8606486575f8f79c (03:55): I'm sure there must be a way to add in a new EOF state in about three lines of code, but I'm also sure they'll take a few minutes to work out...",
        "ab7faae5d7b250ea8606486575f8f79c (04:03): http://canvex.lazyilluminati.com/misc/states8.png",
        "ab7faae5d7b250ea8606486575f8f79c (04:03): (Hmm, it took fourteen lines)",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:04): sweet",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:05): that's totally awesome",
        "ab7faae5d7b250ea8606486575f8f79c (04:06): Now I just need to make it able to generate the spec text from the algorithm ;-)",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:06): hah",
        "ab7faae5d7b250ea8606486575f8f79c (04:08): wonders if people have experience of how much more time it takes to implement tree construction compared to tokenisation",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:08): about twice as long to write, about three times as long to debug, iirc",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:08): but it's not especially hard",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:08): just tedious",
        "a480104b0e570389c6f4284a88c7cd9d (04:15): why is there a blue arrow from data to data?",
        "ab7faae5d7b250ea8606486575f8f79c (04:19): Because I modified the algorithm so any case which is triggered by EOF and causes a transition into the Data state, was changed to transition into the EOFData state",
        "ab7faae5d7b250ea8606486575f8f79c (04:19): but the relevant part inside the Data state bit of the algorithm doesn't transition into the Data state",
        "ab7faae5d7b250ea8606486575f8f79c (04:20): (because I didn't bother writing in the &quot;stay in the same state&quot; bits explicitly)",
        "ab7faae5d7b250ea8606486575f8f79c (04:20): so that could be considered a bug in my old-algorithm-to-new-algorithm transformation code, but it'd require too much effort to fix :-)",
        "ab7faae5d7b250ea8606486575f8f79c (04:26): Hmm, it's far too easy to get exponential growth in these things",
        "ab7faae5d7b250ea8606486575f8f79c (04:28): http://canvex.lazyilluminati.com/misc/states9.png - I'm not sure why it's gone quite that bad",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:29): holy crap what the hell is that",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:29): states * pcdata etc?",
        "ab7faae5d7b250ea8606486575f8f79c (04:30): Yes",
        "ab7faae5d7b250ea8606486575f8f79c (04:31): I suppose it's unhappy because lots of states emit start/end tag tokens when they see EOF, and the tokeniser can't tell what the tree constructor is going to do to the content model flag when that happens, so I assume it could end up being set to anything, which causes unpleasant growth",
        "ab7faae5d7b250ea8606486575f8f79c (04:31): (&quot;I assume&quot; = &quot;I tell the code to assume&quot;)",
        "ab7faae5d7b250ea8606486575f8f79c (04:34): Looks like that is the case - http://canvex.lazyilluminati.com/misc/states10.png is far better without the EOFs",
        "f139aba52f9fa1394b4034a7954b2220 (04:35): ab7faae5d7b250ea8606486575f8f79c: what are you using to create those flow charts?",
        "ab7faae5d7b250ea8606486575f8f79c (04:36): Graphviz",
        "ab7faae5d7b250ea8606486575f8f79c (04:38): (It does tend to collapse into a mass of unreadable squiggles when you get past a certain size, and I always tend to use it on things that approach that size, but I've not heard of anything else that does the same kind of thing)",
        "ab7faae5d7b250ea8606486575f8f79c (04:39): (Uh, &quot;same kind of thing&quot; = drawing graphs, not collapsing into squiggles)",
        "88efc6feb6704817d8ffe8449b5d135f (04:54): What is whatwg ?",
        "7692c84549b372ed8035649676847a65 (04:55): u mean this channel?",
        "88efc6feb6704817d8ffe8449b5d135f (04:55): The website needs an 'about' link",
        "88efc6feb6704817d8ffe8449b5d135f (04:55): I just saw the site in a slashdot sig, went there and was not sure how it related to silverlight",
        "88efc6feb6704817d8ffe8449b5d135f (04:58): is it some kind of social front end to w3c's html specifications?",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:59): 88efc6feb6704817d8ffe8449b5d135f: see http://blog.whatwg.org/faq/#whattf",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:00): 88efc6feb6704817d8ffe8449b5d135f: we're basically the renegade group that started html5",
        "ab7faae5d7b250ea8606486575f8f79c (05:05): My entirely unoptimised C++ tokeniser (which no longer segfaults) takes about 0.4 seconds for the HTML5 spec, which doesn't seem too bad",
        "ab7faae5d7b250ea8606486575f8f79c (05:07): (It's certainly a bit useless, because it just computes all the tokens and then memory-leaks them away)",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:20): ab7faae5d7b250ea8606486575f8f79c: yeah tokenising is easy",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:21): ab7faae5d7b250ea8606486575f8f79c: the tree construction is definitely the more expensive part"
    ],
    "person_ids": [
        "ab7faae5d7b250ea8606486575f8f79c",
        "9fdcde97c1cb33fe4e9f6aab1d84bc76",
        "f139aba52f9fa1394b4034a7954b2220",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "a480104b0e570389c6f4284a88c7cd9d",
        "132ea029b178e3c6d3a3aa4521ea24a5",
        "88efc6feb6704817d8ffe8449b5d135f",
        "7692c84549b372ed8035649676847a65"
    ]
}