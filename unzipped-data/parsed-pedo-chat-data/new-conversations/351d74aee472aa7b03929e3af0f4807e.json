{
    "id": "351d74aee472aa7b03929e3af0f4807e",
    "messages": [
        "33ad25ed5e7950dce85e69b1a4fa8a20 (17:55): Hixie: not that you can really do anything about it at this point, but amusingly Chromium/Webkit sort of deadlocks if you call executeSql from inside a statement callback, which is the only way to execute a query based on the results of a previous one",
        "4c681049601b3c374f1d2c0077c99049 (17:56): 33ad25ed5e7950dce85e69b1a4fa8a20: that might be worth filing a webkit ticket for.",
        "33ad25ed5e7950dce85e69b1a4fa8a20 (17:56): I think the proliferation of callbacks in Web APIs has got out of control, and certain things are simply impossible if all you have are callback-based APIs",
        "33ad25ed5e7950dce85e69b1a4fa8a20 (17:57): 4c681049601b3c374f1d2c0077c99049: yes, I'm reducing it to the minimal testcase now",
        "4c681049601b3c374f1d2c0077c99049 (17:57): :)",
        "33ad25ed5e7950dce85e69b1a4fa8a20 (17:58): still, any API that could possibly ever be called from an event listener should have a sync version, or else things go wrong",
        "b25b6b77a0087ff8385941e5545d32ea (17:58): 33ad25ed5e7950dce85e69b1a4fa8a20: Any suggestions for good API patterns that handle the requirement to be async without callbacks and with current js language features?",
        "b25b6b77a0087ff8385941e5545d32ea (17:59): &quot;it should be sync&quot; doesn't really work if sync calls can block the browser for an arbitary amount of time",
        "b25b6b77a0087ff8385941e5545d32ea (18:00): (Opera handles this unusually well, but still)",
        "33ad25ed5e7950dce85e69b1a4fa8a20 (18:00): sure, but there's openDatabaseSync already, so that argument doesn't really fly in the specific case of webSQL",
        "b25b6b77a0087ff8385941e5545d32ea (18:00): That's only for workers",
        "b25b6b77a0087ff8385941e5545d32ea (18:00): Isn't it?",
        "33ad25ed5e7950dce85e69b1a4fa8a20 (18:01): oh, it doesn't really say it in the spec that I've noticed",
        "33ad25ed5e7950dce85e69b1a4fa8a20 (18:01): rereads",
        "33ad25ed5e7950dce85e69b1a4fa8a20 (18:01): b25b6b77a0087ff8385941e5545d32ea: but transactions are already run async",
        "6a8ca7ce228632a45b077b5398962bf2 (18:02): Does anyone know if chrome 6 supports the file api?",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:02): I wrote http://dev.w3.org/2006/webapi/progress/ today",
        "33ad25ed5e7950dce85e69b1a4fa8a20 (18:02): so if you add another level of executeSql working async, it becomes quite unmanageable",
        "6a8ca7ce228632a45b077b5398962bf2 (18:02): I know 7 does.",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:02): feedback welcome before I post to public-webapps",
        "edb259c0e0038f38bb200bc20c8cbf7e (18:02): needs to do some shopping first",
        "33ad25ed5e7950dce85e69b1a4fa8a20 (18:03): b25b6b77a0087ff8385941e5545d32ea: ah, right, WorkerUtilsDatabase",
        "6a8ca7ce228632a45b077b5398962bf2 (18:04): Can anyone figure out how to make webworkers work with graphics bound to the CPU core.",
        "6a8ca7ce228632a45b077b5398962bf2 (18:04): I tried that with the gbc emu, but it made performance slower, since the framebuffer was being passed back to the UI.",
        "33ad25ed5e7950dce85e69b1a4fa8a20 (18:05): b25b6b77a0087ff8385941e5545d32ea: one way to alleviate it a bit would be to introduce checkpoints / barriers that could be inserted optionally and would essentially put the caller to sleep until the results are available",
        "6a8ca7ce228632a45b077b5398962bf2 (18:06): WebWorks seem to also block any onmessage event inside the worker when it's running (Feature?).",
        "b25b6b77a0087ff8385941e5545d32ea (18:06): 33ad25ed5e7950dce85e69b1a4fa8a20: That would be a language feature,no?",
        "33ad25ed5e7950dce85e69b1a4fa8a20 (18:06): so transaction.barrier() would make sure all transaction steps queued until now have been performed",
        "6a8ca7ce228632a45b077b5398962bf2 (18:06): *WebWorkers",
        "b25b6b77a0087ff8385941e5545d32ea (18:06): co-routines?",
        "33ad25ed5e7950dce85e69b1a4fa8a20 (18:06): b25b6b77a0087ff8385941e5545d32ea: it doesn't really need to be exposed in the language",
        "b25b6b77a0087ff8385941e5545d32ea (18:06): Well it doesn't work if you want to get data back, does it?",
        "b25b6b77a0087ff8385941e5545d32ea (18:07): It sounds like",
        "b25b6b77a0087ff8385941e5545d32ea (18:07): foo = (yield something)",
        "33ad25ed5e7950dce85e69b1a4fa8a20 (18:07): it would if your callback stuffed the result in a known location, which is not hard to do with closures, which JS thankfully does have",
        "b25b6b77a0087ff8385941e5545d32ea (18:07): in python",
        "33ad25ed5e7950dce85e69b1a4fa8a20 (18:07): ah, you're looking at it from the other side",
        "33ad25ed5e7950dce85e69b1a4fa8a20 (18:08): I mean more like this:",
        "1f58faf0d058f303f30239a369808167 (18:08): Very early alpha state pure JavaScript implementation of the RDFa API draft spec released -- http://lists.w3.org/Archives/Public/public-rdfa-wg/2010Oct/0029",
        "33ad25ed5e7950dce85e69b1a4fa8a20 (18:09): function myTransaction(tx) { var result; tx.executeSql(&quot;...&quot;,[], function(tx, r) { result = r }); tx.checkpoint(); alert(result) }",
        "33ad25ed5e7950dce85e69b1a4fa8a20 (18:15): b25b6b77a0087ff8385941e5545d32ea: related is http://chumsley.org/jwacs/",
        "33ad25ed5e7950dce85e69b1a4fa8a20 (18:15): which is a dialect with continuations that transforms to regular JS",
        "33ad25ed5e7950dce85e69b1a4fa8a20 (18:16): though I don't believe you can actually use it to fix things like &quot;can't use any async APIs from inside an event listener&quot;",
        "b25b6b77a0087ff8385941e5545d32ea (18:20): Anyone know what ES5-strict-mode-enabled browsers do when setting a readonly IDL property?",
        "b25b6b77a0087ff8385941e5545d32ea (18:20): per the current letter of WebIDL they should not throw since it is ignorant of strict mode, but per the spirit of Strict Mode they should throw"
    ],
    "person_ids": [
        "33ad25ed5e7950dce85e69b1a4fa8a20",
        "4c681049601b3c374f1d2c0077c99049",
        "b25b6b77a0087ff8385941e5545d32ea",
        "6a8ca7ce228632a45b077b5398962bf2",
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "1f58faf0d058f303f30239a369808167"
    ]
}