{
    "id": "93eb363b3cc047cd59970d403a91143d",
    "messages": [
        "b8810fee2f4a71f849f3f7409546d1d9 (13:49): is there any way to inform HTTP clients that the server accepts *inbound* gzip-compressed POST data?",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:50): will clients go crazy if I use Accept-Encoding as a *response* header and write support for Content-Encoding as a *request* header?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:54): b8810fee2f4a71f849f3f7409546d1d9: clients will ignore the accept-encoding header",
        "a924fb58d2c25874322f4e5126f608b9 (13:54): The form element has various attributes, but I'm not sure if any of them are able to do on-the-fly gzip",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:55): a924fb58d2c25874322f4e5126f608b9: I'm mainly considering restful Web service clients",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:56): it appears that RFC 2616 allows Content-Encoding on Entities",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:56): i.e. both on response and request entities",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:57): goes implement incoming gzip",
        "a924fb58d2c25874322f4e5126f608b9 (13:57): wonders why people make html versions of rfcs without hyperlinks",
        "a924fb58d2c25874322f4e5126f608b9 (14:00): &quot;If the content-coding of an entity in a request message is not acceptable to the origin server, the server SHOULD respond with a status code of 415 (Unsupported Media Type).&quot;",
        "a924fb58d2c25874322f4e5126f608b9 (14:00): Seems like you're expected to just try gzip and retry without if it fails on 415",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:01): I want to get compression right in both directions before I start advertising the Web service facet of validator.nu",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:01): so I can tell people from get-go that they can (should?) compress incoming stuff",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:01): incoming from my POV",
        "a924fb58d2c25874322f4e5126f608b9 (14:02): Do you want to disallow identity entirely?",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:02): that would be extreme",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:03): I think I'll cross the bridge of banning uncompressed stuff if the bandwidth bill actually grows to be unmanageable",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:04): of course, the joke will be on me if the service ends up being CPU-bound instead of bandwidth/IO-bound",
        "a924fb58d2c25874322f4e5126f608b9 (14:04): Because if identity is allowed, and you mention gzip is encouraged in the docs, shouldn't that be enough to get people who are willing to do gzip to do it?",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:04): a924fb58d2c25874322f4e5126f608b9: hopefully",
        "a924fb58d2c25874322f4e5126f608b9 (14:05): Can't really imagine a http client which supports automatic switching to gzip based on a non-documented header :)",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:05): I need to post some sample code, too",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:09): has Xbox 360 fail",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:09): watches his productivity rise massively",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:29): hmm. hmm. the RFC is not too clear about the relationship of content-length and content-encoding",
        "ab7faae5d7b250ea8606486575f8f79c (14:35): Does inbound compression make DOS attacks easier? Someone could send a low-bandwidth compressed stream that expands into a huger amount of data on the server and uses up lots of CPU time",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:36): ab7faae5d7b250ea8606486575f8f79c: do you mean a specially-crafted Gzip-stream designed to just expand?",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:36): ab7faae5d7b250ea8606486575f8f79c: it seems to me the same risk exists with compressed streams read using GET",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:37): how do browsers cope with that case?",
        "ab7faae5d7b250ea8606486575f8f79c (14:37): Not necessarily specially-crafted - someone could just compress a gigabyte of space characters, transmit that (which is cheap for them), and your server would decompress and process it all (which is expensive for you)",
        "ab7faae5d7b250ea8606486575f8f79c (14:38): Browsers have observant users and a 'stop' button, whereas servers tend to blindly process whatever you send them",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:39): hmm. can a single read() from a GzipInputStream be worse that decompressing 32 KB of data?",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:40): that is, if I put a watchdog stream wrapper between the decompression and the parser, am I safe?",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:41): 32 KB is the default gzip window, isn't it?",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:42): am I right that Content-Length is the length of the compressed stream--not the length of the decompressed stream?",
        "ab7faae5d7b250ea8606486575f8f79c (14:42): is unsure of how it works",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:44): has reverse-engineered that yet",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:44): I can say it is not what is defined in RFC2616, though",
        "a924fb58d2c25874322f4e5126f608b9 (14:44): It says &quot;transfer-length&quot;, seems clear to me",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:45): But there again, a lot of RFC2616 isn't actually what things are done",
        "a924fb58d2c25874322f4e5126f608b9 (14:47): hmm, no... tricky stuff this",
        "a924fb58d2c25874322f4e5126f608b9 (14:52): content-length is the entity-length if there is no transfer-encoding. The entity-length is the length of the entity-body. The entity-body includes content-encoding.",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:53): moreover, transfer-encoding and content-encoding are different beast with potentially same values",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:54): I think I sort of grok content-encoding where there are no byte ranges involved",
        "a924fb58d2c25874322f4e5126f608b9 (14:54): Well, if you use transfer-encoding it says to not use content-length at all. Not sure if that's how it works in practice, but still",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:54): is Opera the only browser to not download &lt;img style=&quot;display:none&quot; src=&quot;test.gif&quot;&gt;?",
        "5b67d980ae4c3c82251106e26913ce67 (14:55): No",
        "a924fb58d2c25874322f4e5126f608b9 (14:55): Let's find out",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:56): is non-chunked transfer-encoding used in the real world?",
        "a924fb58d2c25874322f4e5126f608b9 (15:01): Both FF2 and IE7 downloaded the image",
        "ab7faae5d7b250ea8606486575f8f79c (15:04): If you do &lt;object data=&quot;test.svg&quot;&gt;&lt;img src=&quot;test.png&quot;&gt;&lt;/object&gt; then FF2 downloads both files and Opera only downloads the .svg, if I remember correctly",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:06): http://www.aerasec.de/security/advisories/decompression-bomb-vulnerability.html",
        "5b67d980ae4c3c82251106e26913ce67 (15:06): a924fb58d2c25874322f4e5126f608b9: you sure?",
        "a924fb58d2c25874322f4e5126f608b9 (15:07): Apache logs do not lie (I hope)",
        "5b67d980ae4c3c82251106e26913ce67 (15:07): They do! :)",
        "5b67d980ae4c3c82251106e26913ce67 (15:07): Hmm",
        "5b67d980ae4c3c82251106e26913ce67 (15:07): I tested it with background images",
        "5b67d980ae4c3c82251106e26913ce67 (15:07): Those aren't downloaded for elements with display: none",
        "5b67d980ae4c3c82251106e26913ce67 (15:07): Or for :hover states",
        "a924fb58d2c25874322f4e5126f608b9 (15:08): I could venture a guess, the img tag is recognized and starts downloading before the inline style is applied",
        "a924fb58d2c25874322f4e5126f608b9 (15:08): Background image is not recognized as such until styling is applied",
        "5b67d980ae4c3c82251106e26913ce67 (15:08): That's probably it",
        "5b67d980ae4c3c82251106e26913ce67 (15:08): Background images with visibility: hidden are downloaded though",
        "cc097e0d7183ae8436e7df709553c8c0 (15:12): b8810fee2f4a71f849f3f7409546d1d9: http://simon.html5.org/temp/validator.nu/Validator.nu.htm",
        "5b67d980ae4c3c82251106e26913ce67 (15:15): b8810fee2f4a71f849f3f7409546d1d9: why am I getting an IO Error: Circular redirect to ..",
        "5b67d980ae4c3c82251106e26913ce67 (15:16): For a page that can be viewed in a browser",
        "cc097e0d7183ae8436e7df709553c8c0 (15:16): b8810fee2f4a71f849f3f7409546d1d9: although the file upload label doesn't seem to focus the &quot;file&quot; field in firefox :|",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:20): cc097e0d7183ae8436e7df709553c8c0: thank you",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:20): 5b67d980ae4c3c82251106e26913ce67: URL?",
        "5b67d980ae4c3c82251106e26913ce67 (15:20): http://www.toernooi.nl/sport/teammatches.aspx?id=17064&amp;tid=191",
        "5b67d980ae4c3c82251106e26913ce67 (15:20): It's a weird site",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:22): 5b67d980ae4c3c82251106e26913ce67: might have something to do with their cookie behavior",
        "5b67d980ae4c3c82251106e26913ce67 (15:24): If you disable cookies, you get back a really weird URL",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:25): yes, but still not circular",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:25): I wonder if Commons HttpClient is so aggressive with circularity that it ignores the query string",
        "5b67d980ae4c3c82251106e26913ce67 (15:26): Damnit, we really want to parse this site :)",
        "cc097e0d7183ae8436e7df709553c8c0 (15:28): hmm, doesn't tabindex on &lt;label&gt; work in ie/firefox?",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:29): I'm experiencing the jar version of dll hell when trying to debug :-(",
        "cc097e0d7183ae8436e7df709553c8c0 (15:31): i can't get keyboard nav work in ie or firefox",
        "cc097e0d7183ae8436e7df709553c8c0 (15:31): s/work/to work/",
        "cc097e0d7183ae8436e7df709553c8c0 (15:32): perhaps it's better to add radio buttons after all",
        "cc097e0d7183ae8436e7df709553c8c0 (15:47): b8810fee2f4a71f849f3f7409546d1d9: there, that works better, although it doesn't boot correctly in ie for some reason",
        "cc097e0d7183ae8436e7df709553c8c0 (15:55): b8810fee2f4a71f849f3f7409546d1d9: ie barks at &quot;n.disabled = false&quot; in toggleParsers()",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:01): 5b67d980ae4c3c82251106e26913ce67: I suspect this is the problem: http://jakarta.apache.org/httpcomponents/httpclient-3.x//xref/org/apache/commons/httpclient/HttpMethodDirector.html#630",
        "cc097e0d7183ae8436e7df709553c8c0 (16:03): b8810fee2f4a71f849f3f7409546d1d9: also, ie doesn't seem to uncheck the other radio buttons for some reason",
        "5b67d980ae4c3c82251106e26913ce67 (16:03): b8810fee2f4a71f849f3f7409546d1d9: is that a bug?",
        "5b67d980ae4c3c82251106e26913ce67 (16:04): Or just bad behavior of that site?",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:05): 5b67d980ae4c3c82251106e26913ce67: bad behavior of site coupled with over-eager counter-measures",
        "5b67d980ae4c3c82251106e26913ce67 (16:07): Bah",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:07): tries to loosen the counter-measures",
        "5b67d980ae4c3c82251106e26913ce67 (16:07): Too bad that's the only site where results are posted :/",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:21): 5b67d980ae4c3c82251106e26913ce67: fixed",
        "5b67d980ae4c3c82251106e26913ce67 (16:22): b8810fee2f4a71f849f3f7409546d1d9: Cool, thanks :)",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:23): it took me like 3 tries to stick the params in the right place. Commons HttpClient has a zilloin places you can stick params into",
        "5b67d980ae4c3c82251106e26913ce67 (16:29): b8810fee2f4a71f849f3f7409546d1d9: What's a good entry point if you're not into HTML5, but you just want to use your parser in a Java project?",
        "5b67d980ae4c3c82251106e26913ce67 (16:34): http://about.validator.nu/htmlparser/ I guess :)",
        "ab7faae5d7b250ea8606486575f8f79c (16:36): With that parser, I found it pretty straightforward to set up the libraries and get it to parse a document into a DOM, so it seems to work fine :-)",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:39): 5b67d980ae4c3c82251106e26913ce67: I suggest you check out how I instantiate the parser in XSLT4HTML5 (bundled sample)",
        "5b67d980ae4c3c82251106e26913ce67 (16:39): I'm not into Java",
        "5b67d980ae4c3c82251106e26913ce67 (16:39): Somebody else is going to try it out",
        "5b67d980ae4c3c82251106e26913ce67 (16:40): I hope :)",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:40): 5b67d980ae4c3c82251106e26913ce67: do you want DOM, XOM or SAX?",
        "5b67d980ae4c3c82251106e26913ce67 (16:40): I really have no idea",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:40): 5b67d980ae4c3c82251106e26913ce67: streaming or tree?",
        "5b67d980ae4c3c82251106e26913ce67 (16:40): We were talking about fetching results from a website, and now I'm pointing him to your library",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:41): 5b67d980ae4c3c82251106e26913ce67: well, if the wants DOM, he should do  new HtmlDocumentBuilder(XmlViolationPolicy.ALTER_INFOSET);",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:41): and then proceed the same way as with an XML DocumentBuilder instance",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:42): if he wants SAX, he should do new HtmlParser(XmlViolationPolicy.ALTER_INFOSET); and proceed as with a usual XMLReader instance",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:43): if he wants XOM, he should do new HtmlBuilder(XmlViolationPolicy.ALTER_INFOSET); and proceed as with a usual XOM Builder instance",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:43): familiarity with one of DOM, XOM or SAX in a prerequisite",
        "ab7faae5d7b250ea8606486575f8f79c (16:44): was unfamiliar with all of those but just made it up as he went along and it kind of worked",
        "ab7faae5d7b250ea8606486575f8f79c (16:46): (Well, I suppose I had some familiarity with the JS DOM, and the Java version is basically the same except it takes four method calls to set an attribute (as far as I can see))",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:47): ab7faae5d7b250ea8606486575f8f79c: elem.setAttribute(&quot;foo&quot;, &quot;bar&quot;);",
        "ab7faae5d7b250ea8606486575f8f79c (16:49): b8810fee2f4a71f849f3f7409546d1d9: Hmm",
        "ab7faae5d7b250ea8606486575f8f79c (16:49): Oh, it's because I was using Node instead of Element, and Node doesn't have setAttribute",
        "ab7faae5d7b250ea8606486575f8f79c (16:50): ... and I was using Node because stuff like getElementsByTagName returns a NodeList",
        "a924fb58d2c25874322f4e5126f608b9 (16:51): Yeah, that one's a bit silly, there is no ElementList",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:51): ab7faae5d7b250ea8606486575f8f79c: the interface hierarchy of DOM sucks big time with strongly-typed languages",
        "ab7faae5d7b250ea8606486575f8f79c (16:51): I guess I can cast things to Element, but casting always feels a little dirty and unsafe",
        "a924fb58d2c25874322f4e5126f608b9 (16:51): Just check nodeType (or instanceof) and you're safe enough",
        "ab7faae5d7b250ea8606486575f8f79c (16:53): Sounds reasonable",
        "ab7faae5d7b250ea8606486575f8f79c (16:54): Too lazy to fix my code now, though :-p",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:54): it would be interesting to know if which one is faster: instanceof followed by cast or nodeType followed by cast",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:55): I'd expect instanceof to be slower than nodeType, but then I'd expect HotSpot to perform less expensive cast operations if it can prove that instanceof was just tested",
        "b8810fee2f4a71f849f3f7409546d1d9 (17:00): when I wrote my own XML tree API, I hoisted all methods to the top of the hierarchy to avoid casts when traversing"
    ],
    "person_ids": [
        "b8810fee2f4a71f849f3f7409546d1d9",
        "a11aabeeceeae6b8cb5d12ea06b56554",
        "a924fb58d2c25874322f4e5126f608b9",
        "ab7faae5d7b250ea8606486575f8f79c",
        "5b67d980ae4c3c82251106e26913ce67",
        "cc097e0d7183ae8436e7df709553c8c0"
    ]
}