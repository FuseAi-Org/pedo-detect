{
    "id": "d6e5fbc87f06723c9a25ee6725980c14",
    "messages": [
        "88d4d34a8064a4ff39fd5e144eea7762 (00:58): The fact that we have LLVM-to-JavaScript compilers that work in practice and are efficient enough to use for real-world applications is somehow terrifying: https://github.com/kripken/emscripten/wiki",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:59): Like a speech synthesizer.  Written in C++, compiled to LLVM, recompiled to JavaScript, actually runs in a web browser.",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:59): It actually works.  http://syntensity.com/static/espeak.html",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:59): boggles",
        "ab7faae5d7b250ea8606486575f8f79c (01:00): It's possible to write code and run it on a computer? Amazing!",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:01): &quot;The development versions of the top JavaScript engines today can run code compiled from C++ only 3-5X slower than a fast C++ compiler, and getting even better.&quot;",
        "66ac8412c3aa86545c46679cf3528c98 (01:01): Any ideas if CSS3 gradients will be able to be used on boarders down the road?",
        "06cb330920ae58e1614c9145d983b3d6 (01:01): ... uh huh",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:01): 66ac8412c3aa86545c46679cf3528c98, 1f8387eb43f131d7c309a90a4e36b5cb is the one to ask about that.",
        "042dd99eb0ff8653814e445ca0093427 (01:02): depends on how you want to use them",
        "66ac8412c3aa86545c46679cf3528c98 (01:02): Kk - 1f8387eb43f131d7c309a90a4e36b5cb: Any ideas if CSS3 gradients will be able to be used on boarders down the road? :D",
        "042dd99eb0ff8653814e445ca0093427 (01:02): current CSS3 drafts already let you use gradients with border-image",
        "042dd99eb0ff8653814e445ca0093427 (01:02): although Gecko at least doesn't support that yet AFAIK",
        "66ac8412c3aa86545c46679cf3528c98 (01:03): Don't you have to use an actual pre-rendered image to do that or can you use an ID or something as an image?",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:03): 66ac8412c3aa86545c46679cf3528c98: In border-image.",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:03): 66ac8412c3aa86545c46679cf3528c98: No, border-image just takes an image.",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:03): Anything which is defined as part of the &lt;image&gt; type, theoretically.",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:03): But doesn't border-image require an image in a very particular format?",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:03): No.",
        "66ac8412c3aa86545c46679cf3528c98 (01:04): Well, I mean I could use an image to do a background gradient on a div",
        "66ac8412c3aa86545c46679cf3528c98 (01:04): the point of having an api that allows you to do it is so that you don't need to do that",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:04): I mean, you have to provide one single image for all four borders and then slice it up somehow, no?",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:04): You can't use different images for different sides, say.  Or could you fake it by just using complicated gradients with a bunch of extra stops?",
        "66ac8412c3aa86545c46679cf3528c98 (01:04): No, you can use a single image using border-image",
        "042dd99eb0ff8653814e445ca0093427 (01:05): yeah that's why I said it depends on *how* you want to use a gradient on the border",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:05): 353fa4cc248867e98de9cab7d122c320, UTF-32 is verboten :p",
        "042dd99eb0ff8653814e445ca0093427 (01:05): some uses could be done with border-image:linear-gradient or border-image:radial-gradient; others can't",
        "66ac8412c3aa86545c46679cf3528c98 (01:05): but it seems silly to have to use an image for a gradient border if you're going to allow people to define gradients as backgrounds",
        "353fa4cc248867e98de9cab7d122c320 (01:06): edb259c0e0038f38bb200bc20c8cbf7e: it's not a terrible encoding for some things, actually",
        "042dd99eb0ff8653814e445ca0093427 (01:06): yes it is",
        "353fa4cc248867e98de9cab7d122c320 (01:06): edb259c0e0038f38bb200bc20c8cbf7e: constant-time indexing for the full range of unicode codepoints",
        "042dd99eb0ff8653814e445ca0093427 (01:06): what are the use-cases for constant-time indexing?",
        "353fa4cc248867e98de9cab7d122c320 (01:06): if you have a lot of codepoints that are 2^17th and larger it's better than utf-16",
        "042dd99eb0ff8653814e445ca0093427 (01:06): 66ac8412c3aa86545c46679cf3528c98: you need to describe what effect you're trying to get",
        "353fa4cc248867e98de9cab7d122c320 (01:07): on the web it's useless",
        "66ac8412c3aa86545c46679cf3528c98 (01:07): A one-pixel linear gradient as a boarder?",
        "66ac8412c3aa86545c46679cf3528c98 (01:07): border*",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:07): 66ac8412c3aa86545c46679cf3528c98, in theory, you can use gradients anywhere you can use images, as I understand it.",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:07): Firefox has the non-standard border-colors property.",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:07): So you can manually implement a gradient.",
        "88d4d34a8064a4ff39fd5e144eea7762 (01:08): 353fa4cc248867e98de9cab7d122c320, you basically never actually need constant-time code-point-based indexing, though.  Either you're iterating through the whole string, or you can use byte-based indexing instead.",
        "66ac8412c3aa86545c46679cf3528c98 (01:08): I guess I mean to ask if there is something planned in the spec down the road",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:08): 353fa4cc248867e98de9cab7d122c320, you still don't get all characters",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:08): 353fa4cc248867e98de9cab7d122c320, well, compound characters or whatever they are called",
        "66ac8412c3aa86545c46679cf3528c98 (01:08): Hi d8bdaf4cce4eed42abe28293a26743b7, I'm David B.",
        "d8bdaf4cce4eed42abe28293a26743b7 (01:09): hi 66ac8412c3aa86545c46679cf3528c98",
        "353fa4cc248867e98de9cab7d122c320 (01:10): edb259c0e0038f38bb200bc20c8cbf7e: surrogate pairs? those only exist in utf-16",
        "353fa4cc248867e98de9cab7d122c320 (01:10): edb259c0e0038f38bb200bc20c8cbf7e: all unicode codepoints are less than 2^22 or 2^23, so they all take the same space in utf32",
        "353fa4cc248867e98de9cab7d122c320 (01:10): none of this is important for the web so forget i asked :)",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:11): edb259c0e0038f38bb200bc20c8cbf7e: 353fa4cc248867e98de9cab7d122c320 is right.  In utf-32 you just store the codepoint directly.",
        "b25b6b77a0087ff8385941e5545d32ea (01:11): 353fa4cc248867e98de9cab7d122c320: I suspect edb259c0e0038f38bb200bc20c8cbf7e means glyphs that are formed froma character plus a combining character",
        "b25b6b77a0087ff8385941e5545d32ea (01:12): So constant time indexing of codepoints doesn't give you constant time indexing of anything users care about",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:16): 353fa4cc248867e98de9cab7d122c320, no, diacritical marks as separate codepoints",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:16): yeah, what b25b6b77a0087ff8385941e5545d32ea said",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:17): UTF-16 is nonsense too",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:17): but we cannot kill it",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:17): it's baked into fricking ECMAScript and the DOM :(",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:17): maybe fricking baked*",
        "06cb330920ae58e1614c9145d983b3d6 (01:17): utf-16 is great: it takes the advantages of utf-8 and the advantages of a fixed-width encoding like ucs4 ... then throws them away and keeps the disadvantages of both",
        "353fa4cc248867e98de9cab7d122c320 (01:18): edb259c0e0038f38bb200bc20c8cbf7e: UCS-2 is baked in",
        "353fa4cc248867e98de9cab7d122c320 (01:18): ECMAScript has basically no UTF16 support",
        "353fa4cc248867e98de9cab7d122c320 (01:18): if it has any",
        "353fa4cc248867e98de9cab7d122c320 (01:18): surrogate pairs = you deal with it, sucker",
        "353fa4cc248867e98de9cab7d122c320 (01:21): fromCharCode() and codePointAt() only handle codepoints &lt;= 2^16",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:21): that's kind of what I meant",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:21): but I should have said 16-bit code units",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:31): 353fa4cc248867e98de9cab7d122c320: {decode,encode}URL{Component,} deals with surrogates! But I think that's it.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:32): Harmony will introduce some sort of support for full Unicode.",
        "aad758927f12b95b0cd1961f8dbee690 (01:35): oh really, that sounds interesting.",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:36): hmm something is going wrong with the tracker again",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:37): oh oops",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:37): I had unchecked &quot;Show editorial changes&quot;",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:37): should add something somewhere that says &quot;23 editorial changes hidden&quot;",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:39): yeah, or attempt to kill that option again over zcorpan's objections :p",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:40): 69b0d3dfe919a6b860a9fac82de52a7e, btw, what is the difference between EventSource and WebSocket when it comes to garbage collection?",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:40): 69b0d3dfe919a6b860a9fac82de52a7e, WebSocket is way more complicated",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:41): the main difference is that websockets speak back to the host",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:42): also maybe eventsource is buggy? doesn't look like it preserves the object for load/error events...",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:42): e.g. only WebSocket has &quot;make disappear&quot; steps",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:43): EventSource talks about a strong reference instead",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:43): maybe EventSource was done and then later you decided upon another way of doing this?",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:44): I'll file a bug on EventSource so you can take a look, let me know, and maybe I can then finally update XMLHttpRequest",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:44): the make disappear stuff is entirely because websocket speaks back",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:45): whereas eventsource is just a one-way connection",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:45): websockets has a closing handshake, etc",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:46): well eventsource has a request and response",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:46): yeah but it's http, so the connection can just be dropped arbitrarily",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:46): whereas websocket has this closing handshake thing",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:46): okay",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:46): so XHR should be modeled after EventSource",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:47): I'll file a bug on the other events",
        "edb259c0e0038f38bb200bc20c8cbf7e (01:59): haha http://imgur.com/xFfzw",
        "a3f19f90edf0a0893c7847d08016abe3 (02:15): 69b0d3dfe919a6b860a9fac82de52a7e, can I give you a perl script rather than a diff to remove the &quot;in&quot;s?",
        "a3f19f90edf0a0893c7847d08016abe3 (02:16): 69b0d3dfe919a6b860a9fac82de52a7e, http://pastebin.mozilla.org/1302853",
        "a3f19f90edf0a0893c7847d08016abe3 (02:16): I didn't check the output extensively, but it looks right on a first glance :)",
        "ab7faae5d7b250ea8606486575f8f79c (02:20): notes the $a thing could likely be replaced by &quot;..&quot;, like &quot;while (&lt;&gt;) { if (/&lt;pre class=&quot;idl/ .. /&lt;\\/pre&gt;/) { s/whatever/ } }&quot;",
        "ab7faae5d7b250ea8606486575f8f79c (02:20): which is one of my top 50 favourite Perl features",
        "edb259c0e0038f38bb200bc20c8cbf7e (02:22): yay for removing 'in'",
        "edb259c0e0038f38bb200bc20c8cbf7e (02:22): now modules",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:22): a3f19f90edf0a0893c7847d08016abe3: i'll try, but it scares me!",
        "a3f19f90edf0a0893c7847d08016abe3 (02:22): ab7faae5d7b250ea8606486575f8f79c, wow I don't know about that feature",
        "a3f19f90edf0a0893c7847d08016abe3 (02:23): ab7faae5d7b250ea8606486575f8f79c, is it an implicit while loop there?",
        "ab7faae5d7b250ea8606486575f8f79c (02:23): a3f19f90edf0a0893c7847d08016abe3: The &quot;while (&lt;&gt;) {&quot; looks pretty explicit to me :-)",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:23): what is &quot;..&quot;? is that new?",
        "a3f19f90edf0a0893c7847d08016abe3 (02:24): oh I see, so it's not an implicit loop, just an implicit variable",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:24): wow i never knew about the bistable .. operator",
        "ab7faae5d7b250ea8606486575f8f79c (02:24): Scalar &quot;..&quot; is a flip-flop",
        "ab7faae5d7b250ea8606486575f8f79c (02:25): It goes true when the first operand is true, and false when the second goes true",
        "ab7faae5d7b250ea8606486575f8f79c (02:26): It's existed forever, I think",
        "a3f19f90edf0a0893c7847d08016abe3 (02:26): that's kind of awesome",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:27): that's pretty sweet",
        "ab7faae5d7b250ea8606486575f8f79c (02:28): (Given http://www.cs.cmu.edu/cgi-bin/perl-man it seems to have existed since before Perl 5)",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:30): ok well i found some problems with this scrtip",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:30): e.g. it missed &quot;[Clamp] in...&quot;",
        "a3f19f90edf0a0893c7847d08016abe3 (02:30): ah!",
        "a3f19f90edf0a0893c7847d08016abe3 (02:30): do you want me to fix it or can you handle it?",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:31): i found four. fixed them.",
        "a3f19f90edf0a0893c7847d08016abe3 (02:31): ah cool. only four extended attributes on arguments? fewer than i thought there'd be.",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:32): two [Clamp]s and two [AllowAny]s",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:32): one of the [Clamp]s is movign to the arraybuffer spec soon",
        "a3f19f90edf0a0893c7847d08016abe3 (02:34): cool",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:34): no webidl errors",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:34): if we missed any i guess we'll find out when dom updates the checker",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:35): is there a bug # for this?",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:37): couldn't find it again. nevermind, i'll just commit without a bug #.",
        "edb259c0e0038f38bb200bc20c8cbf7e (02:39): there's no bug",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:39): k"
    ],
    "person_ids": [
        "88d4d34a8064a4ff39fd5e144eea7762",
        "ab7faae5d7b250ea8606486575f8f79c",
        "66ac8412c3aa86545c46679cf3528c98",
        "06cb330920ae58e1614c9145d983b3d6",
        "042dd99eb0ff8653814e445ca0093427",
        "1f8387eb43f131d7c309a90a4e36b5cb",
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "353fa4cc248867e98de9cab7d122c320",
        "d8bdaf4cce4eed42abe28293a26743b7",
        "b25b6b77a0087ff8385941e5545d32ea",
        "a11aabeeceeae6b8cb5d12ea06b56554",
        "aad758927f12b95b0cd1961f8dbee690",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "a3f19f90edf0a0893c7847d08016abe3"
    ]
}