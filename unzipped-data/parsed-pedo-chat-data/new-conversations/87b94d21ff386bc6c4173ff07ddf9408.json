{
    "id": "87b94d21ff386bc6c4173ff07ddf9408",
    "messages": [
        "49ba7e3d61343c60adb4a24a848089c9 (08:35): 69b0d3dfe919a6b860a9fac82de52a7e?",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:36): 1a11ef65e59a402769635562579a7df6: yo",
        "1a11ef65e59a402769635562579a7df6 (08:36): thinks it's totally fair to ask browsers to be faster than Safari",
        "1a11ef65e59a402769635562579a7df6 (08:37): 69b0d3dfe919a6b860a9fac82de52a7e: new bug in WK?",
        "1a11ef65e59a402769635562579a7df6 (08:37): hurt his thuumb playing guitar tonight :(",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:37): WK?",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:37): new bug?",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:37): confused",
        "1a11ef65e59a402769635562579a7df6 (08:39): webkit",
        "1a11ef65e59a402769635562579a7df6 (08:40): WK=WebKit, FF=Firefox, IE=Internet Explorer, WC=WebCore, SS=SunSpider, JSC=JavaScriptCore",
        "1a11ef65e59a402769635562579a7df6 (08:40): I think that's all the acronyms I use on a regular basis :)",
        "1a11ef65e59a402769635562579a7df6 (08:40): &quot;&lt 69b0d3dfe919a6b860a9fac82de52a7e&gt; yay, it found a new bug in webkit&quot;",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:41): oh",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:41): heh",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:41): that",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:42): i fixed a bug, and was expecting webkit to totally pass the relevant subtest",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:42): but then one of the next bits of that test still failed",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:42): so i was happy",
        "1a11ef65e59a402769635562579a7df6 (08:45): sweeeet.  no morning meetings!",
        "1a11ef65e59a402769635562579a7df6 (08:47): 69b0d3dfe919a6b860a9fac82de52a7e: if you'd liek to demonstrate brokeness in WebKIt, manipulate the DOM not using Range methods and watch the Range get out of sync :(",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:47): already in the test",
        "1a11ef65e59a402769635562579a7df6 (08:47): k",
        "1a11ef65e59a402769635562579a7df6 (08:47): 69b0d3dfe919a6b860a9fac82de52a7e: I also found a few more Range edge cases in my testsing",
        "1a11ef65e59a402769635562579a7df6 (08:47): which I've not yet fixed, but plan to fil a bug on",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:50): cool",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:50): cc me :-)",
        "1a11ef65e59a402769635562579a7df6 (08:52): doesn't quite understand what's going wrong with the cursor test",
        "1a11ef65e59a402769635562579a7df6 (08:55): 69b0d3dfe919a6b860a9fac82de52a7e: why would this match?",
        "1a11ef65e59a402769635562579a7df6 (08:55): style.appendChild(doc.createTextNode('@media (bogus), all { #h { text-transform: uppercase; } }'));                                   // matches",
        "1a11ef65e59a402769635562579a7df6 (08:55): shouldn't it fail to parse?",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:55): why would it fail to parse?",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:56): it's an expression with an unknown keyword, which evaluates to false, and a media query &quot;all&quot;, which always evaluates to true",
        "1a11ef65e59a402769635562579a7df6 (08:56): but ( is not a valid keyword char",
        "1a11ef65e59a402769635562579a7df6 (08:57): 69b0d3dfe919a6b860a9fac82de52a7e: I mean... the spec isn't very clear.  and I'm not sure what our impl is actually doing in that case, maybe @media (monchrome), all would be a better test",
        "1a11ef65e59a402769635562579a7df6 (08:57): since IMO that should also fail due to a misparse",
        "65325d50b2e25aca54bc871b89758c9c (08:57): Range is a crazy API",
        "1a11ef65e59a402769635562579a7df6 (08:58): 69b0d3dfe919a6b860a9fac82de52a7e: the grammar is quiet clear, the question is if ( and ) can be interpreted as part of a media_feature and thus be an &quot;unknown media feature&quot; and thus be false",
        "1a11ef65e59a402769635562579a7df6 (08:58): 69b0d3dfe919a6b860a9fac82de52a7e: if they can't be part of a media_feature, than it's a parse error, and is silently ignored",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:58): &quot;@media (monchrome), all&quot; would be a very different test, since it would be testing something else on a monochrome UA",
        "1a11ef65e59a402769635562579a7df6 (08:58): IMO it's a parse error :)",
        "1a11ef65e59a402769635562579a7df6 (08:59): 69b0d3dfe919a6b860a9fac82de52a7e: well, the point there was that it's a valid keyword with extra parenthesis",
        "69b0d3dfe919a6b860a9fac82de52a7e (08:59): he spec very clearly says: &quot;Expressions involving unknown media features or unknown/illegal values are always false&quot;",
        "1a11ef65e59a402769635562579a7df6 (08:59): yeah, so the only part of that which applies here is &quot;unknown media features&quot;",
        "1a11ef65e59a402769635562579a7df6 (08:59): since &quot;values&quot; is on the other side of a colon",
        "1a11ef65e59a402769635562579a7df6 (08:59): so can ( ) be part of an &quot;unknown media feature&quot; ?",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:00): oh i see, you're saying &quot;(color)&quot; is not valid because it doesn't have a media keyword first",
        "1a11ef65e59a402769635562579a7df6 (09:00): I kinda doubt it.  the parser would reject them as being a different token",
        "b8810fee2f4a71f849f3f7409546d1d9 (09:00): zcorpan: restored method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; on the file upload form. sorry about that.",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:00): hm, some parts of media queries say the media keyword is required and others don't",
        "1a11ef65e59a402769635562579a7df6 (09:00): 69b0d3dfe919a6b860a9fac82de52a7e: it's kinda like saying if @media ,,,,,,, , all  { } should match",
        "1a11ef65e59a402769635562579a7df6 (09:00): saying that &quot;,,,,,,,&quot; would be an &quot;unknown media feature&quot;",
        "1a11ef65e59a402769635562579a7df6 (09:01): which I would argue is rather a &quot;parse error&quot;",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:01): we're arguing different things",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:01): i had thought &lt;media_type&gt; was optional, as some of the examples imply it is",
        "1a11ef65e59a402769635562579a7df6 (09:01): 69b0d3dfe919a6b860a9fac82de52a7e: yes, @media (color) is equally invalid",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:01): but it seems the examples are invalid",
        "1a11ef65e59a402769635562579a7df6 (09:02): the spec is quite clear on where parens are allowed",
        "1a11ef65e59a402769635562579a7df6 (09:02): even if stupidly clear",
        "1a11ef65e59a402769635562579a7df6 (09:02): equally so for the &quot;not&quot; keyword",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:03): fixed subtest h",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:03): fixed subtest l too",
        "8c8837db54a2907cacd8633547977e33 (09:04): 69b0d3dfe919a6b860a9fac82de52a7e: test 5 isn't done yet, right?",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:05): how do you mean?",
        "8c8837db54a2907cacd8633547977e33 (09:06): 69b0d3dfe919a6b860a9fac82de52a7e: the line which compares against &quot;!!!&quot; -- I don't see how that could possibly be in the DOM at that point",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:07): oops, crap, i forgot to fix the tests depending on !!!",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:07): when i removed the !!!",
        "8c8837db54a2907cacd8633547977e33 (09:08): heh",
        "1a11ef65e59a402769635562579a7df6 (09:08): thinks hixie might have actually found a bug finally in kompo's code with test v",
        "1a11ef65e59a402769635562579a7df6 (09:08): so far Kompo's code has been BUG FREE :)",
        "8c8837db54a2907cacd8633547977e33 (09:09): just like all the code I've ever written, right?",
        "8c8837db54a2907cacd8633547977e33 (09:09): and all the code you've ever written",
        "8c8837db54a2907cacd8633547977e33 (09:09): :-P",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:09): fixed test 5",
        "1a11ef65e59a402769635562579a7df6 (09:09): 8c8837db54a2907cacd8633547977e33: oh, my code is never bug free :)",
        "1a11ef65e59a402769635562579a7df6 (09:09): I just write a lot of it to make up for it",
        "1a11ef65e59a402769635562579a7df6 (09:09): and surround myself with people who seem to be good and cleaning up my messes",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:09): 1a11ef65e59a402769635562579a7df6: nope, sadly for me, webkit now passes the media queries test",
        "1a11ef65e59a402769635562579a7df6 (09:09): (and seem to enjoy it)",
        "1a11ef65e59a402769635562579a7df6 (09:09): 69b0d3dfe919a6b860a9fac82de52a7e: oh, was &quot;v' wrong too?",
        "8c8837db54a2907cacd8633547977e33 (09:10): nobody's code is bug-free",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:10): 1a11ef65e59a402769635562579a7df6: yeah",
        "1a11ef65e59a402769635562579a7df6 (09:10): oh",
        "1a11ef65e59a402769635562579a7df6 (09:10): 69b0d3dfe919a6b860a9fac82de52a7e: blame Kompo",
        "8c8837db54a2907cacd8633547977e33 (09:10): 66-&gt;67 pass now in my build :-)",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:10): there has to be SOME bug here",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:10): :-P",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:10): the real test i want to do involves shrinking the viewport dynamically",
        "1a11ef65e59a402769635562579a7df6 (09:10): 69b0d3dfe919a6b860a9fac82de52a7e: there are are a bunch which we don't implement",
        "1a11ef65e59a402769635562579a7df6 (09:11): color-index is one",
        "1a11ef65e59a402769635562579a7df6 (09:11): 69b0d3dfe919a6b860a9fac82de52a7e: there is a bug I filed on it",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:11): oh",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:11): well",
        "1a11ef65e59a402769635562579a7df6 (09:11): 69b0d3dfe919a6b860a9fac82de52a7e: but you're kinda venturing into the obscure now",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:11): yes",
        "8c8837db54a2907cacd8633547977e33 (09:11): &quot;now&quot;?",
        "1a11ef65e59a402769635562579a7df6 (09:11): pulls 69b0d3dfe919a6b860a9fac82de52a7e back from the crazy weeds before he gets lost",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:11): 8c8837db54a2907cacd8633547977e33: ?",
        "8c8837db54a2907cacd8633547977e33 (09:12): 69b0d3dfe919a6b860a9fac82de52a7e: nothing other than the echoing of bz's sentiments, more or less",
        "1a11ef65e59a402769635562579a7df6 (09:12): woh.  suddenly were back up to 73!",
        "1a11ef65e59a402769635562579a7df6 (09:12): 74 if I fix up my :div patch",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:13): 8c8837db54a2907cacd8633547977e33: which ones?",
        "1a11ef65e59a402769635562579a7df6 (09:13): wants to see Darin's patch land and fix all the iterator tests",
        "8c8837db54a2907cacd8633547977e33 (09:13): 8c8837db54a2907cacd8633547977e33: that the tests are getting obscure in what's being tested",
        "8c8837db54a2907cacd8633547977e33 (09:14): I mean, I really don't know that ranges are used all that often, tbh",
        "8c8837db54a2907cacd8633547977e33 (09:14): or would be if browsers all implemented them correctly",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:15): 8c8837db54a2907cacd8633547977e33: DOM ranges are used a lot, actually, mostly for handing text selection",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:15): handling",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:16): people complain about them all the time",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:16): that's how i came across the bugs that i tested in acid3",
        "65325d50b2e25aca54bc871b89758c9c (09:16): ranges are used a fair amount",
        "65325d50b2e25aca54bc871b89758c9c (09:16): TreeWalker and NodeIterator, I think not so much",
        "8c8837db54a2907cacd8633547977e33 (09:16): huh",
        "1a11ef65e59a402769635562579a7df6 (09:17): 8c8837db54a2907cacd8633547977e33: I would agree, I think Ranges are useful",
        "65325d50b2e25aca54bc871b89758c9c (09:17): execCommand is probably used more than either, but has not yet gotten to CR (or even WD yet) in standard form",
        "1a11ef65e59a402769635562579a7df6 (09:18): is very much in favor of fixing ranges",
        "69b0d3dfe919a6b860a9fac82de52a7e (09:18): TreeWalker and NodeIterator would be used a lot more if they actually worked and people knew about them.",
        "8c8837db54a2907cacd8633547977e33 (09:19): 69b0d3dfe919a6b860a9fac82de52a7e: in moz-land it's been pointed out to me that |var nullInRegexpArgumentResult = 0 &lt; /script/.test('\\0script') ? &quot;failed&quot; : &quot;passed&quot;;| should correctly return &quot;failed&quot;, because test() returns true"
    ],
    "person_ids": [
        "49ba7e3d61343c60adb4a24a848089c9",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "1a11ef65e59a402769635562579a7df6",
        "65325d50b2e25aca54bc871b89758c9c",
        "b8810fee2f4a71f849f3f7409546d1d9",
        "8c8837db54a2907cacd8633547977e33"
    ]
}