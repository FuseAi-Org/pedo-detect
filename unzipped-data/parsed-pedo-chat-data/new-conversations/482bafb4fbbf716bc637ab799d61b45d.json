{
    "id": "482bafb4fbbf716bc637ab799d61b45d",
    "messages": [
        "cc097e0d7183ae8436e7df709553c8c0 (22:50): why can't css transitions transition to height:auto",
        "cc097e0d7183ae8436e7df709553c8c0 (22:50): how are submenus or &lt;details&gt; supposed to have a nice animation with height:auto?",
        "65325d50b2e25aca54bc871b89758c9c (22:51): CSS transitions should totally transition to (and from) height: auto",
        "65325d50b2e25aca54bc871b89758c9c (22:52): I think it does not work right now because it would have to do an extra layout at the end state to figure out how to animate",
        "65325d50b2e25aca54bc871b89758c9c (22:52): or something",
        "65325d50b2e25aca54bc871b89758c9c (22:52): I'm wondering if I can figure out another way to implement &lt;details&gt; nicely w/ mostly just CSS",
        "cc097e0d7183ae8436e7df709553c8c0 (22:53): webkit animates to height:0 and then snaps over to auto",
        "cc097e0d7183ae8436e7df709553c8c0 (22:53): opera doesn't animate at all",
        "a19007ec26167f5b7caf77aae3640abd (22:53): cc097e0d7183ae8436e7df709553c8c0: sounds like an impl bug",
        "65325d50b2e25aca54bc871b89758c9c (22:53): I think the spec actually doesn't define animating to/from auto",
        "65325d50b2e25aca54bc871b89758c9c (22:54): so it is also a spec bug",
        "a19007ec26167f5b7caf77aae3640abd (22:54): 65325d50b2e25aca54bc871b89758c9c: is the issue you referred to earlier about behind the firewall the same issue with JSONRequest?",
        "65325d50b2e25aca54bc871b89758c9c (22:54): (or really conscious spec design limitation)",
        "a19007ec26167f5b7caf77aae3640abd (22:54): one option of course would be to try to calculate it yourself",
        "65325d50b2e25aca54bc871b89758c9c (22:54): a19007ec26167f5b7caf77aae3640abd: there is some of that issue with JSONRequest, though JS content can to some extent be read cross-site already since there is no same-origin limit on embedding scripts via &lt;script&gt;",
        "a19007ec26167f5b7caf77aae3640abd (22:54): might work in many cases",
        "65325d50b2e25aca54bc871b89758c9c (22:55): yes, you could get the actual height, and animate from that to 0",
        "a19007ec26167f5b7caf77aae3640abd (22:55): 65325d50b2e25aca54bc871b89758c9c: right but you can't actually SEE the data with the exception of the __defineSetter__ hole",
        "65325d50b2e25aca54bc871b89758c9c (22:55): going the other way might be trickier (may need an extra layout)",
        "65325d50b2e25aca54bc871b89758c9c (22:56): a19007ec26167f5b7caf77aae3640abd: there have been other holes (mostly closed now I think)",
        "65325d50b2e25aca54bc871b89758c9c (22:56): but I do think JSONRequest is not a great security design",
        "a19007ec26167f5b7caf77aae3640abd (22:57): 65325d50b2e25aca54bc871b89758c9c: agree 100%",
        "a19007ec26167f5b7caf77aae3640abd (22:57): I'm just frustrated by having to get people to agree to open up CORS",
        "a19007ec26167f5b7caf77aae3640abd (22:57): thinking about adding an easy way to do it to Rails",
        "65325d50b2e25aca54bc871b89758c9c (22:57): a19007ec26167f5b7caf77aae3640abd: are you having trouble persuading people?",
        "a19007ec26167f5b7caf77aae3640abd (22:57): class MyController; cors_friendly; end",
        "65325d50b2e25aca54bc871b89758c9c (22:57): it would be nice for frameworks to give an easy way to do it",
        "a19007ec26167f5b7caf77aae3640abd (22:57): 65325d50b2e25aca54bc871b89758c9c: there are two issues: (1) the security implications are not obvious, so people want to research; (2) it's never a high priority",
        "65325d50b2e25aca54bc871b89758c9c (22:58): you may want to give the option of allowing access to anyone or to a whitelist, and whether to allow credentials or not",
        "a19007ec26167f5b7caf77aae3640abd (22:58): 65325d50b2e25aca54bc871b89758c9c: I work with the 37 signals guys and they say &quot;cool&quot; to adding CORS to their Campfire API but it's not on their list",
        "cc097e0d7183ae8436e7df709553c8c0 (22:58): working around the height:auto limitation with script gets really ugly",
        "a19007ec26167f5b7caf77aae3640abd (22:58): 65325d50b2e25aca54bc871b89758c9c: yeah",
        "a19007ec26167f5b7caf77aae3640abd (22:58): 65325d50b2e25aca54bc871b89758c9c: Rails tends to go with 90% case first and then refine to other cases",
        "a19007ec26167f5b7caf77aae3640abd (22:58): instead of trying to preplan everything... but some additional config wouldn't be bad",
        "65325d50b2e25aca54bc871b89758c9c (22:58): so you're thinking the 90% case is fully public data source that takes no credentials and is open to everyone?",
        "a19007ec26167f5b7caf77aae3640abd (23:00): 65325d50b2e25aca54bc871b89758c9c: the 90% case I think takes credentials via an API token",
        "a19007ec26167f5b7caf77aae3640abd (23:00): or basic auth",
        "a19007ec26167f5b7caf77aae3640abd (23:00): more likely an API token",
        "65325d50b2e25aca54bc871b89758c9c (23:00): depends on what kind of credentials you have in mind",
        "65325d50b2e25aca54bc871b89758c9c (23:00): if it's a resource that is somehow per-user, people may want to use cookies",
        "a19007ec26167f5b7caf77aae3640abd (23:01): 65325d50b2e25aca54bc871b89758c9c: that's not a common case",
        "a19007ec26167f5b7caf77aae3640abd (23:01): the common case is you have an API that is available from Ruby or Java or something",
        "a19007ec26167f5b7caf77aae3640abd (23:01): via HTTP",
        "a19007ec26167f5b7caf77aae3640abd (23:01): and you want to open it up for web access",
        "65325d50b2e25aca54bc871b89758c9c (23:01): if for example GMail wanted to offer a contacts service as a data API",
        "a19007ec26167f5b7caf77aae3640abd (23:01): 65325d50b2e25aca54bc871b89758c9c: I'd consider that the 10% case",
        "a19007ec26167f5b7caf77aae3640abd (23:01): Gmail has smart engineers",
        "65325d50b2e25aca54bc871b89758c9c (23:01): or flickr wanted a photostream data API",
        "a19007ec26167f5b7caf77aae3640abd (23:01): and we can converge on that case if it gets common",
        "a19007ec26167f5b7caf77aae3640abd (23:02): 65325d50b2e25aca54bc871b89758c9c: why wouldn't an API token work for that case?",
        "65325d50b2e25aca54bc871b89758c9c (23:02): a19007ec26167f5b7caf77aae3640abd: how does an API token tell you which flickr user is logged into the browser?",
        "65325d50b2e25aca54bc871b89758c9c (23:02): is the token per-user or is it an &quot;app key&quot;?",
        "65325d50b2e25aca54bc871b89758c9c (23:03): if it's per-app, then if you ship it down to the client anyone can rip it from your client-side code",
        "65325d50b2e25aca54bc871b89758c9c (23:03): if it's per user, then you need a server-to-server communication to do setup per-user",
        "a19007ec26167f5b7caf77aae3640abd (23:03): 65325d50b2e25aca54bc871b89758c9c: nah it'd be stored in local storage",
        "a19007ec26167f5b7caf77aae3640abd (23:03): the user would type in their un/pw, and a call would be made to get the token",
        "65325d50b2e25aca54bc871b89758c9c (23:03): a call to who?",
        "a19007ec26167f5b7caf77aae3640abd (23:03): a fully open CORS service",
        "65325d50b2e25aca54bc871b89758c9c (23:04): you sure don't want the user typing their site A password into site B",
        "a19007ec26167f5b7caf77aae3640abd (23:04): ha",
        "a19007ec26167f5b7caf77aae3640abd (23:04): see: the internet :P",
        "65325d50b2e25aca54bc871b89758c9c (23:04): the whole point of CORS is to avoid brokenness like that",
        "a19007ec26167f5b7caf77aae3640abd (23:04): but yeah",
        "a19007ec26167f5b7caf77aae3640abd (23:04): 65325d50b2e25aca54bc871b89758c9c: seems basic auth would work",
        "a19007ec26167f5b7caf77aae3640abd (23:05): 65325d50b2e25aca54bc871b89758c9c: I was being snarky -- I of course realize that's bad",
        "65325d50b2e25aca54bc871b89758c9c (23:05): basic auth over CORS requires the same level of opt-in as cookies, so you may as well use cookies since that is probably what the service already uses for normal login",
        "a19007ec26167f5b7caf77aae3640abd (23:05): 65325d50b2e25aca54bc871b89758c9c: hmmm",
        "a19007ec26167f5b7caf77aae3640abd (23:06): so why wouldn't the default just be &quot;allow cookies&quot;?",
        "a19007ec26167f5b7caf77aae3640abd (23:06): in the non-preflight case we don't even need to do anything",
        "65325d50b2e25aca54bc871b89758c9c (23:06): well it's pretty easy for a server to opt into cookies",
        "a19007ec26167f5b7caf77aae3640abd (23:06): in the preflight case it seems &quot;yes&quot; is the right default",
        "a19007ec26167f5b7caf77aae3640abd (23:06): 65325d50b2e25aca54bc871b89758c9c: yeah I've read the spec",
        "65325d50b2e25aca54bc871b89758c9c (23:06): all it has to do is add Access-Control-Allow-Cookies: true",
        "a19007ec26167f5b7caf77aae3640abd (23:06): 65325d50b2e25aca54bc871b89758c9c: I know",
        "a19007ec26167f5b7caf77aae3640abd (23:07): 65325d50b2e25aca54bc871b89758c9c: it seems the make_cors_friendly should do that by default",
        "a19007ec26167f5b7caf77aae3640abd (23:07): 65325d50b2e25aca54bc871b89758c9c: I understand how the spec works, I'm thinking through the 90% case here",
        "65325d50b2e25aca54bc871b89758c9c (23:07): seems fine for a framework to make it the default if that is well-documented and well-understood",
        "a19007ec26167f5b7caf77aae3640abd (23:07): (you are being very helpful, thank you)",
        "a19007ec26167f5b7caf77aae3640abd (23:07): 65325d50b2e25aca54bc871b89758c9c: make_cors_friendly :cookies =&gt; false",
        "a19007ec26167f5b7caf77aae3640abd (23:07): would be the opt-out",
        "a19007ec26167f5b7caf77aae3640abd (23:08): obviously that would not be the method name",
        "a19007ec26167f5b7caf77aae3640abd (23:08): :p",
        "a19007ec26167f5b7caf77aae3640abd (23:08): probably something more like allow_cross_origin_requests",
        "a19007ec26167f5b7caf77aae3640abd (23:08): 65325d50b2e25aca54bc871b89758c9c: and could be implemented as Rack middleware, although you'd probably want finer control than that offered",
        "a19007ec26167f5b7caf77aae3640abd (23:13): 65325d50b2e25aca54bc871b89758c9c: what is the one-sentence answer to &quot;I need to explore the security considerations&quot;",
        "65325d50b2e25aca54bc871b89758c9c (23:14): a19007ec26167f5b7caf77aae3640abd: I don't know if there is one - depends on the context",
        "65325d50b2e25aca54bc871b89758c9c (23:15): a19007ec26167f5b7caf77aae3640abd: if it's a fully public data service that's not per-user and would work without cookies, you could say &quot;other sites can already do this by routing requests bak through their own servers&quot;",
        "65325d50b2e25aca54bc871b89758c9c (23:15): *back",
        "a19007ec26167f5b7caf77aae3640abd (23:17): lemme look at how conceptually campfire works",
        "a19007ec26167f5b7caf77aae3640abd (23:17): 65325d50b2e25aca54bc871b89758c9c: why is it considered verboten to type un/pw into &quot;some random web app&quot; but not in &quot;some random native iphone app&quot;?",
        "a19007ec26167f5b7caf77aae3640abd (23:17): expectation discrepancy?",
        "a19007ec26167f5b7caf77aae3640abd (23:21): &quot;When you're using the API, it's always through an existing user in Campfire. There's no special API user. So when you use the API as &quot;david&quot;, you get to see and work with what &quot;david&quot; is allowed to. Authenticating is done with an authentication token, which you'll find on the &quot;Edit my Campfire account&quot; screen in Campfire (click the &quot;Reveal authentication token for API&quot; link).",
        "a19007ec26167f5b7caf77aae3640abd (23:21): When using the authentication token, you don't need a separate password. But since Campfire uses HTTP Basic Authentication, and lots of implementations assume that you want to have a password, it's often easier just to pass in a dummy password, like X.&quot;",
        "a19007ec26167f5b7caf77aae3640abd (23:21): I think this is pretty representative",
        "5332c788a7805a955ba854fa123357e7 (23:40): i'm serializing some objects to XML, and trying to decide how to serialize the booleans",
        "1f8387eb43f131d7c309a90a4e36b5cb (23:40): cc097e0d7183ae8436e7df709553c8c0: Are you going to ping www-style about the &quot;animating to auto&quot; thing?",
        "1f8387eb43f131d7c309a90a4e36b5cb (23:40): 5332c788a7805a955ba854fa123357e7: true/false?",
        "5332c788a7805a955ba854fa123357e7 (23:40): i know that you  guys consider a boolean to be true if the key is included and false if its omitted",
        "5332c788a7805a955ba854fa123357e7 (23:40): is this a feature of xml, or a quirk of html?",
        "1f8387eb43f131d7c309a90a4e36b5cb (23:41): Ah, that.  That's how HTML works.  A general XML language can define booleans however they want.",
        "5332c788a7805a955ba854fa123357e7 (23:41): 1f8387eb43f131d7c309a90a4e36b5cb: i'm wondering whether to represent @mirror as &lt;\u201a\u00c4\u00b6 mirror = 'true' /&gt;",
        "5332c788a7805a955ba854fa123357e7 (23:41): 1f8387eb43f131d7c309a90a4e36b5cb: i thought so",
        "5332c788a7805a955ba854fa123357e7 (23:41): thanks",
        "cc097e0d7183ae8436e7df709553c8c0 (23:51): 1f8387eb43f131d7c309a90a4e36b5cb: not tonight",
        "1f8387eb43f131d7c309a90a4e36b5cb (23:51): Eventually, or you want me to do it?",
        "cc097e0d7183ae8436e7df709553c8c0 (23:52): you can do it if you want",
        "2d039717f89d95c099d4d07556c54371 (00:06): anyone know of some cool examples of a unified object namespace heh",
        "2d039717f89d95c099d4d07556c54371 (00:12): not unified heh",
        "cc097e0d7183ae8436e7df709553c8c0 (00:26): now has a non-animated js-impl of &lt;details&gt;",
        "cc097e0d7183ae8436e7df709553c8c0 (00:30): wonder if i should store the open state across reloads and navigation",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:30): Do you expect that browsers will do so?",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:31): looks at the fullscreen feedback and tries to find if any browsers have actually implemented something he can test",
        "cc097e0d7183ae8436e7df709553c8c0 (00:31): dunno",
        "cc097e0d7183ae8436e7df709553c8c0 (00:31): browsers store state of form input",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:31): Not across navigations, at least.",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:31): reloads, yes.",
        "cc097e0d7183ae8436e7df709553c8c0 (00:32): my browser stores form input when going back and forward",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:33): Ah, true for that.  I thought you were referring to, say, a &lt;details&gt; appearing in the same place on a page, and it staying open when you navigated.",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:34): Easy to save, anyway.  Just pop a hidden checkbox into there, and check/uncheck it as appropriate.",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:36): Are you display:none'ing the contents of the &lt;details&gt;?",
        "cc097e0d7183ae8436e7df709553c8c0 (00:36): hmm a checkbox might be a reasonable way to implement details for legacy browsers anyway",
        "cc097e0d7183ae8436e7df709553c8c0 (00:36): yes",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:37): For accessibility reasons, you may want to position:absolute;left:-9001px; it.",
        "cc097e0d7183ae8436e7df709553c8c0 (00:37): right now i set tabIndex = 0 on summary and listen to click events on document",
        "cc097e0d7183ae8436e7df709553c8c0 (00:38): dunno if all browsers fire click for unknown elements when activated with keyboard yet",
        "cc097e0d7183ae8436e7df709553c8c0 (00:42): as it happens i managed to use &lt;details&gt; with tinymce by using the &lt;blockquote&gt; feature and replacing it with &lt;details&gt; afterwards",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:43): Hrm.  Well, ff doesn't seem to be dispatching keyboard-based clicks on summary, based on a quick test I threw together.",
        "cc097e0d7183ae8436e7df709553c8c0 (00:43): oh well",
        "cc097e0d7183ae8436e7df709553c8c0 (00:44): what's the boilerplate for listening to 'enter'?",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:45): Look for keycode 13, I believe.",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:47): All right, according to ppk, function(e) { var evt = e||window.event; evt.keyCode==13; }",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:47): Sub in the rest of your code as appropriate.",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:48): Use keydown, though, as apparently IE won't fire keypress.",
        "cc097e0d7183ae8436e7df709553c8c0 (00:50): i was going to use the same function as my onclick handler, but that checks e.which and it seems some browsers use e.which for keyup also",
        "cc097e0d7183ae8436e7df709553c8c0 (00:51): maybe i can check for keyCode first",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:57): Just check e.keyCode || e.charCode || e.which"
    ],
    "person_ids": [
        "cc097e0d7183ae8436e7df709553c8c0",
        "65325d50b2e25aca54bc871b89758c9c",
        "a19007ec26167f5b7caf77aae3640abd",
        "5332c788a7805a955ba854fa123357e7",
        "1f8387eb43f131d7c309a90a4e36b5cb",
        "2d039717f89d95c099d4d07556c54371",
        "69b0d3dfe919a6b860a9fac82de52a7e"
    ]
}