{
    "id": "ba6002e353321fca34f02338e7e2416f",
    "messages": [
        "eab22ddafe9ed99f3735e412bf7ae3e3 (03:57): 69b0d3dfe919a6b860a9fac82de52a7e, does [6.11.9 History Traversal] occur on all page loads, even if I type straight into the URL bar?",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:57): yes",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:57): it is invoked as part of the navigation algorithm",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (03:57): So is popstate fired on all loads?",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:57): no",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:57): only if there is state to pop",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (03:58): Only if the state to pop is non-null?",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (03:58): I could set the document pending object to null as part of the algorithm.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:01): hold on",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:03): eab22ddafe9ed99f3735e412bf7ae3e3: ok, here now. looking...",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:04): eab22ddafe9ed99f3735e412bf7ae3e3: popstate only fires when an entry in the session history is activated",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:04): eab22ddafe9ed99f3735e412bf7ae3e3: which only occurs if the specified entry is a state object or the first entry for a Document",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:05): eab22ddafe9ed99f3735e412bf7ae3e3: but yes, it fires at least once per Document load",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:05): s/but/so/",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:05): my statement earlier was incorrect",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:06): eab22ddafe9ed99f3735e412bf7ae3e3: sorry about that!",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:09): 69b0d3dfe919a6b860a9fac82de52a7e, sorry, was afk for a sec.  I'm not totally clear on this: If we load index.html and then go to index.html#foo, do we get one or two popstates?",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:10): Once for the initial document load...",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:10): one",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:10): I see.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:10): you get one for the page load",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:10): And if we go back to index.html, we also don't get a popstate, because index.html doesn't have an associated state object.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:10): right",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:11): er",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:11): well actually...",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:11): looks closer",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:11): :)",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:11): actually yes, you do",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:11): you always get a popstate when traversing to the first entry in the history for a Document",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:11): is relieved.",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:11): Oh...interesting.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:11): not sure that's entirely sane",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:11): but it's what it says",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:11): Me either.",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:12): I've been dispatching popstate whenever we dispatch onload, and also when you go back/forwards to any history entry.",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:13): That might be easier for developers to deal with, since it's somewhat consistent.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:13): the original intent was to only dispatch it when hitting an entry that has been pushState()d",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:13): i am not sure why we dispatch for the initial page load",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:13): I think because you want to know when you go back to it?",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:13): i guess, yeah",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:14): yeah, that makes sense",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:14): So it treats the first history entry for a document as one which was pushState()ed to.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:14): right",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:14): that makes sense i guess",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:14): maybe?  :)",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:14): :-)",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:14): so the only entries for which you don't fire a popstate per spec are those that were added due to the hash changing",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:14): (they get a hashchange)",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:15): I see.  That might be a little confusing, because clearstate does clear those.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:15): yeah, that was a recent change",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:16): iirc",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:16): or at least, that wasn't my original intent",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:16): thing is, if we do fire popstate for everything",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:16): then authors are going to have to distinguish the state=null-because-first case from the state=null-because-hashchange-will-fire-next case",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:17): and that's probably harder than just dealing with those two cases",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:18): Hm...  I'm not yet convinced that matters.  Wouldn't they listen to popstate alone in that case?",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:19): * rephrased: If they just ignore hashchanges, do they care about differentiating between them?",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:19): if they don't distinguish them, then each time the user changes the hash manually, the page is going to reset to the initial state",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:19): Hmm",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:21): wonders how this would change if we had a setState() function.  Then you *could* associate state with the initial entry.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:22): true",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:22): but it's easy enough to remember the state for the initial state",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:23): i mean, what they _should_ do is if state is null, or if hashchange is called, just base the state on the url",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:23): i guess we could call popstate always",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:23): do any other UAs implement this yet?",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:23): That's how I've been imagining it working.  That way you can bookmark the page and it'll do the right thing.",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:23): I'm not aware of any other UAs working on this.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:23): try e-mailing the list and seeing what others think of it",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:24): Will do.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:24): if it's not too late for shipped implementations, i can change it to just always fire popstate",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:24): my contribution to the web: events firing all the damn time. :-/",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:24): Okay.  I'll try and send out an e-mail soon.  I have a few other things in there, but they don't require the Author to parse the spec for me.  :)",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:24): i guess nothing i've done with events is as bad as mutation events, still",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:24): eab22ddafe9ed99f3735e412bf7ae3e3: k :-)",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:25): Thanks, 69b0d3dfe919a6b860a9fac82de52a7e.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:25): np",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:25): wonders why adding features to the web platform feels like a continuous exercise in damage mitigation",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:25): it's like trying to build a sandcastle under a waterfall",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:26): lol.  And you have four large, powerful groups of people all telling you that they don't like the shape of your crenelations.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:26): fan more than four",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:27): far, even",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:27): there's the IETF people, the accessibility people, microsoft, google, apple, mozilla, opera, the TAG, the RDFa people...",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:27): Yeah.  I'm only just beginning to get into this, but...I don't envy that.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:28): eh, the sad thing is i enjoy it",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:28): i'm a sucker i guess :-P",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (04:28): :)  I need to go catch my train now.  Thanks again!",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:28): later!"
    ],
    "person_ids": [
        "eab22ddafe9ed99f3735e412bf7ae3e3",
        "69b0d3dfe919a6b860a9fac82de52a7e"
    ]
}