{
    "id": "8e87699d25c2925fc408606e094de85a",
    "messages": [
        "88d4d34a8064a4ff39fd5e144eea7762 (21:50): 69b0d3dfe919a6b860a9fac82de52a7e, what sorts of tests should I write for createContextualFragment()?  It seems like any tests would necessarily test the text/html parser to some extent, but I don't actually know much of anything about the text/html parser, so those tests should probably be written about someone else (and be put somewhere else, like in the HTML5 test suite).",
        "88d4d34a8064a4ff39fd5e144eea7762 (21:50): Perhaps I could compare behavior to innerHTML, or only test simple cases where the parsing is clear?",
        "88d4d34a8064a4ff39fd5e144eea7762 (21:51): Actually, in some cases it tests the XML fragment parsing algorithm, too.",
        "88d4d34a8064a4ff39fd5e144eea7762 (21:57): has no idea what &quot;Unmark all scripts in new children as 'already started'.&quot; means",
        "8b3687499080633e1898fa1dd209ef81 (22:12): 88d4d34a8064a4ff39fd5e144eea7762, that means that scripts will run when inserted into the doc",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:12): Okay, that sounds testable.",
        "8b3687499080633e1898fa1dd209ef81 (22:12): hsivonen probably has tests",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:12): How can I determine a Node's namespace from JavaScript?",
        "8b3687499080633e1898fa1dd209ef81 (22:12): Node.namespaceURI",
        "8b3687499080633e1898fa1dd209ef81 (22:13): Actually, that's on Element in Web DOM Core",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:13): Oh, I was looking at Node and that's on Element.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:13): Well, that makes my life easier.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:13): Although I think I found a bug in the spec while I was at it, so let me report that.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:13): Or maybe not.",
        "8b3687499080633e1898fa1dd209ef81 (22:13): Which?",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:13): Maybe it's only a WebKit bug?",
        "65325d50b2e25aca54bc871b89758c9c (22:13): I don't think non-Element Nodes have a namespace URI",
        "8b3687499080633e1898fa1dd209ef81 (22:13): Attrs, too",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:13): data:text/html,&lt;!doctype html&gt;&lt;script&gt;alert(document.createElement(&quot;test&quot;).lookupNamespaceURI(null));&lt;/script&gt;",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:14): Spec says that should alert null, WebKit alerts the namespace.",
        "8b3687499080633e1898fa1dd209ef81 (22:14): knows nothing about lookupNamespaceURI",
        "65325d50b2e25aca54bc871b89758c9c (22:14): what does lookupNamespaceURI do?",
        "8b3687499080633e1898fa1dd209ef81 (22:14): edb259c0e0038f38bb200bc20c8cbf7e might remember",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:14): But the definition of isDefaultNamespace() seems to suggest that calling lookupNamespaceURI(null) should return a string in some cases: http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html#dom-node-isdefaultnamespace",
        "a3f19f90edf0a0893c7847d08016abe3 (22:14): it either looks up a namespace uri based on a prefix",
        "a3f19f90edf0a0893c7847d08016abe3 (22:14): or the reverse",
        "a3f19f90edf0a0893c7847d08016abe3 (22:14): i can never remember",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:15): But the definition of lookupNamespaceURI() implies that passing null should always return null, at least for an element . . .",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:15): files a spec bug",
        "65325d50b2e25aca54bc871b89758c9c (22:16): is lookupNamespaceURI(null) supposed to give you the default namespace, or always null?",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:16): 88d4d34a8064a4ff39fd5e144eea7762, the spec says it should return the namespace actually",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:16): 88d4d34a8064a4ff39fd5e144eea7762, because if you pass null and namespace prefix of the node in question is null, the argument and namespace prefix match",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:17): 88d4d34a8064a4ff39fd5e144eea7762, and you can return the namespace",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:17): Oh.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:17): Confusing.",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:17): it's like the first step",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:17): &quot;If its namespace is not null and its namespace prefix is prefix return namespace and terminate these steps.&quot;",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:17): Yeah, I didn't realize namespace prefixes could be null.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:17): I assumed they'd just be the empty string or something.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:17): Anyway, I'll use namespaceURI.",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:17): &quot;Unless explicitly given when an Element node is created, its namespace and namespace prefix are null&quot;",
        "a924fb58d2c25874322f4e5126f608b9 (22:17): I had the fortune to be using the tidy java implementation of org.w3c.dom today.",
        "a924fb58d2c25874322f4e5126f608b9 (22:18): public boolean hasAttribute() { return false; }",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:18): Now, is there any official way to figure out if a Document is an HTML or XML document?  Or should I just test something like whether tagName gets uppercased?",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:18): . . .",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:18): no official way",
        "65325d50b2e25aca54bc871b89758c9c (22:18): it would be kind of convenient to have an official way but there is not",
        "a924fb58d2c25874322f4e5126f608b9 (22:19): Apparently it's not tidy enough to throw UnsupportedOperationException(), instead you put &quot;not implemented&quot; in the javadoc that nobody's going to see because it's hidden by the interface doc",
        "8b3687499080633e1898fa1dd209ef81 (22:19): 88d4d34a8064a4ff39fd5e144eea7762, whether we're going to use the XML parser for all these things is still up in the air",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:19): For all which things?",
        "8b3687499080633e1898fa1dd209ef81 (22:20): createContextualFragment and friends",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:20): Oh.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:20): So currently it always uses the HTML parser?",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:20): Should I just not test the XML case?",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:20): The spec should probably say that in a note, if so.",
        "8b3687499080633e1898fa1dd209ef81 (22:20): Probably",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:20): (Also, someone should update this page to point to the spec: https://developer.mozilla.org/en/DOM/range.createContextualFragment )",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:33): Oh look, createContextualFragment() behaves totally differently in WebKit, Gecko, and Opera.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:33): Hurrah.",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:33): film at 11",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:33): Actually, WebKit just throws NOT_SUPPORTED_ERR, so maybe it just throws unconditionally.",
        "8b3687499080633e1898fa1dd209ef81 (22:33): Nah",
        "65325d50b2e25aca54bc871b89758c9c (22:34): WebKit has createContextualFragment()",
        "65325d50b2e25aca54bc871b89758c9c (22:34): I added it myself!",
        "65325d50b2e25aca54bc871b89758c9c (22:34): in, like, 2002",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:34): -&gt; naptime",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:34): Why does it throw NOT_SUPPORTED_ERR here, then?  http://aryeh.name/spec/dom-parsing-and-serialization/test/createContextualFragment.html",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:35): 8b3687499080633e1898fa1dd209ef81, what's the practical difference between &lt;html&gt; and &lt;body&gt; being the context element?",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:35): wonders why he's writing tests for this when he doesn't have any idea how the HTML parser works",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:36): to learn how it works :-)",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:37): Should I spend a few days reading the text/html parser algorithm?  It doesn't seem to have to do with anything else I'm doing right now.",
        "8b3687499080633e1898fa1dd209ef81 (22:37): Then we've got four people who understand it",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:37): sure",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:37): the more people understand it the better",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:37): and if you're gonna be working on stuff related to it, best to know it",
        "8b3687499080633e1898fa1dd209ef81 (22:38): https://bugzilla.mozilla.org/show_bug.cgi?id=585819",
        "8b3687499080633e1898fa1dd209ef81 (22:38): 88d4d34a8064a4ff39fd5e144eea7762, ^",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:38): I'd think it would be more useful if I stuck to DOM Range and contenteditable, since there's mounds of stuff to do there and it has nothing to do with text/html parsing.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:38): But I could read the parser algorithm if you like.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:38): 8b3687499080633e1898fa1dd209ef81, ah, makes sense.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:39): Actually, that was the first thing I tried, but I wasn't sure I should be testing it specifically.  But if it broke a site, then clearly that's what should be tested.",
        "8b3687499080633e1898fa1dd209ef81 (22:40): The patch includes a test, fwiw",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:40): Even easier.",
        "8b3687499080633e1898fa1dd209ef81 (22:40): And https://bugzilla.mozilla.org/show_bug.cgi?id=599588 has one for scripts",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:41): 88d4d34a8064a4ff39fd5e144eea7762: it's up to you",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:41): Okay.",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:42): 88d4d34a8064a4ff39fd5e144eea7762: but if you do want to learn the parser, you can definitely consider it part of the work",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:42): Sure.",
        "b25b6b77a0087ff8385941e5545d32ea (22:45): suggests that reading the parser algorithm is not the most effective way to understand it",
        "ab7faae5d7b250ea8606486575f8f79c (22:46): suggests that implementing it is a good way",
        "b25b6b77a0087ff8385941e5545d32ea (22:47): 88d4d34a8064a4ff39fd5e144eea7762: So you have the whole universe of languages to chose from except python, PHP and java",
        "b25b6b77a0087ff8385941e5545d32ea (22:47): choose",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:48): Too bad that includes a) my favorite language, b) the only language I'm really familiar with.",
        "a924fb58d2c25874322f4e5126f608b9 (22:48): And ocaml",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:48): Maybe I can take it as an opportunity to learn Haskell!",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:48): I can learn two things at once that way.",
        "a924fb58d2c25874322f4e5126f608b9 (22:48): Why not go?",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:48): It's an official Google language now!",
        "a924fb58d2c25874322f4e5126f608b9 (22:48): \\hipstercat",
        "b25b6b77a0087ff8385941e5545d32ea (22:50): A Haskell implementation would be awesome",
        "ab7faae5d7b250ea8606486575f8f79c (22:50): Some of the spec's algorithms really don't map very well onto functional languages",
        "b25b6b77a0087ff8385941e5545d32ea (22:50): I occasionally think it would be a good way to learn haskell",
        "ab7faae5d7b250ea8606486575f8f79c (22:50): but if you reverse-engineer them to figure out what they're actually doing, you can reimplement them and check it at least passes the test cases",
        "b25b6b77a0087ff8385941e5545d32ea (22:50): Then I realise what I really mean is &quot;challenging&quot;",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:51): b25b6b77a0087ff8385941e5545d32ea: Hahaha.",
        "a924fb58d2c25874322f4e5126f608b9 (22:52): b25b6b77a0087ff8385941e5545d32ea: Okay, fine, do it in FORTRAN then",
        "b25b6b77a0087ff8385941e5545d32ea (22:53): a924fb58d2c25874322f4e5126f608b9: I know a fair amount of Fortran 90... but yeah the idea isn't making me happy :)",
        "a924fb58d2c25874322f4e5126f608b9 (22:53): 90? Bah, humbug",
        "a924fb58d2c25874322f4e5126f608b9 (22:53): 77 is all you need",
        "b25b6b77a0087ff8385941e5545d32ea (22:55): Well only if you are a masochist^Wacademic",
        "a924fb58d2c25874322f4e5126f608b9 (22:55): But honestly, I didn't find it that bad",
        "b25b6b77a0087ff8385941e5545d32ea (22:56): Hmm, maybe doing it in F90 wouldn't be so hard",
        "a924fb58d2c25874322f4e5126f608b9 (22:56): I think people just overrate it because it's often mentioned in the same sentence as COBOL",
        "b25b6b77a0087ff8385941e5545d32ea (22:56): But supremely pointless",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:56): This frightens me: &quot;@var $b Roman&quot;;        p { font-family: &quot;Times New $b; }&quot;",
        "b25b6b77a0087ff8385941e5545d32ea (22:56): Oh, for numerics Fortran is nicer than C",
        "8b3687499080633e1898fa1dd209ef81 (22:57): 1f8387eb43f131d7c309a90a4e36b5cb, and it should!",
        "b25b6b77a0087ff8385941e5545d32ea (22:57): 1f8387eb43f131d7c309a90a4e36b5cb: Why?",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:59): 1f8387eb43f131d7c309a90a4e36b5cb, that should be illegal.",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:00): (just on principle)",
        "1f8387eb43f131d7c309a90a4e36b5cb (23:00): 88d4d34a8064a4ff39fd5e144eea7762: Indeed, and it is.  Holy god, it is.",
        "1f8387eb43f131d7c309a90a4e36b5cb (23:00): b25b6b77a0087ff8385941e5545d32ea: Variables as character-level macros are an abomination.",
        "8b3687499080633e1898fa1dd209ef81 (23:00): 1f8387eb43f131d7c309a90a4e36b5cb, http://krijnhoetmer.nl/irc-logs/whatwg/20101230#l-326",
        "1f8387eb43f131d7c309a90a4e36b5cb (23:01): 8b3687499080633e1898fa1dd209ef81: Huh, wonder how I missed that last year.",
        "1f8387eb43f131d7c309a90a4e36b5cb (23:01): Um, that might work.  pending() still confused me a bit.",
        "8b3687499080633e1898fa1dd209ef81 (23:01): Marvelous 69b0d3dfe919a6b860a9fac82de52a7eisms",
        "1f8387eb43f131d7c309a90a4e36b5cb (23:01): Also: nobody implements it.  display:marker is a much more restricted form, and probably easier to implement.",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:02): pending() is a terrible idea",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:02): please find a better solution",
        "1f8387eb43f131d7c309a90a4e36b5cb (23:02): Will do.",
        "8b3687499080633e1898fa1dd209ef81 (23:03): :(",
        "1f8387eb43f131d7c309a90a4e36b5cb (23:03): When I pick up G&amp;RC I'll be ripping out most of it so it can just function as a place to specify already-existing things better.",
        "1f8387eb43f131d7c309a90a4e36b5cb (23:03): Then I'll review what was ripped out for G&amp;RC 2.",
        "1f8387eb43f131d7c309a90a4e36b5cb (23:03): s/2/4/, I guess.",
        "1f8387eb43f131d7c309a90a4e36b5cb (23:04): Our numbering is confusing on purpose.",
        "1f8387eb43f131d7c309a90a4e36b5cb (23:04): Anyway, I'm off to a meeting.  bbl",
        "8b3687499080633e1898fa1dd209ef81 (23:04): It is the Garbage Collection Placeholder Module, after all",
        "65325d50b2e25aca54bc871b89758c9c (23:10): what's G&amp;RC?",
        "58869a2e5c3f0eab9aa398b0a798e354 (23:10): Generated and Replaced Content",
        "58869a2e5c3f0eab9aa398b0a798e354 (23:10): http://www.w3.org/TR/css3-content"
    ],
    "person_ids": [
        "88d4d34a8064a4ff39fd5e144eea7762",
        "8b3687499080633e1898fa1dd209ef81",
        "65325d50b2e25aca54bc871b89758c9c",
        "a3f19f90edf0a0893c7847d08016abe3",
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "a924fb58d2c25874322f4e5126f608b9",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "b25b6b77a0087ff8385941e5545d32ea",
        "ab7faae5d7b250ea8606486575f8f79c",
        "1f8387eb43f131d7c309a90a4e36b5cb",
        "58869a2e5c3f0eab9aa398b0a798e354"
    ]
}