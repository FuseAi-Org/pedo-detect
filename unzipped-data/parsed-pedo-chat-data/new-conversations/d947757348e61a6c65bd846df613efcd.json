{
    "id": "d947757348e61a6c65bd846df613efcd",
    "messages": [
        "8c8837db54a2907cacd8633547977e33 (00:27): clearly readyState on XHR2 should switch to being a string",
        "edb259c0e0038f38bb200bc20c8cbf7e (00:34): http://www.reddit.com/r/fifthworldproblems nice",
        "edb259c0e0038f38bb200bc20c8cbf7e (00:35): 8c8837db54a2907cacd8633547977e33: cannot make incompatible changes; but you can just use the events and forget about readyState",
        "8c8837db54a2907cacd8633547977e33 (00:35): edb259c0e0038f38bb200bc20c8cbf7e: I am tempted to string things along further, but I was not being serious",
        "edb259c0e0038f38bb200bc20c8cbf7e (00:38): 8c8837db54a2907cacd8633547977e33: we've been low on sarcasm lately",
        "edb259c0e0038f38bb200bc20c8cbf7e (00:38): apparently it's all about memes these days",
        "edb259c0e0038f38bb200bc20c8cbf7e (00:41): http://eric.van-der-vlist.com/blog/2012/02/15/xml-prague-2012-the-web-would-be-so-cool-without-the-web-developers/ is a pretty neat summary of the XML thing past weekend",
        "a11aabeeceeae6b8cb5d12ea06b56554 (00:42): 8c8837db54a2907cacd8633547977e33: seeming you're around, know what the semantics of Object.prototype.__proto__ are? Just a accessor property that claims data property which mutates the [[Prototype]] of this?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (00:42): (in SM)",
        "8c8837db54a2907cacd8633547977e33 (00:43): a11aabeeceeae6b8cb5d12ea06b56554: nobody represents it as an accessor, but it just reflects [[Prototype]]",
        "8c8837db54a2907cacd8633547977e33 (00:43): and lets you change it",
        "a11aabeeceeae6b8cb5d12ea06b56554 (00:44): And there's nothing magic about it apart from the fact that it is secretly an accessor, thus the fact it can be deleted fine?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (00:45): (or have I misunderstood what be said on es-discuss about its deletability)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (00:50): The more and more I think about it, the less I'm convinced my gut reaction of not wanting to ever make it an accessor is right, and the more I want to make it an accessor.",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:54): 8c8837db54a2907cacd8633547977e33: I thought that we (chrome) represent it as an accessor in recent builds?",
        "8c8837db54a2907cacd8633547977e33 (00:56): 1f8387eb43f131d7c309a90a4e36b5cb: might have changed; last I remembered the internal API implemented it as a CALLBACK",
        "8c8837db54a2907cacd8633547977e33 (00:56): er",
        "8c8837db54a2907cacd8633547977e33 (00:56): INTERCEPTOR, sorry, I think",
        "a11aabeeceeae6b8cb5d12ea06b56554 (00:56): 1f8387eb43f131d7c309a90a4e36b5cb: AFAIK only JSC has changed recently",
        "1f8387eb43f131d7c309a90a4e36b5cb (00:57): I only know what I overheard in the __proto__ thread on es-discuss.",
        "8c8837db54a2907cacd8633547977e33 (00:57): a11aabeeceeae6b8cb5d12ea06b56554: well, we mark it as non-configurable, so it can't be deleted; I think we should change this, and probably make it a getter/setter pair, but I haven't looked too closely",
        "a11aabeeceeae6b8cb5d12ea06b56554 (00:58): 8c8837db54a2907cacd8633547977e33: The consensus on es-discuss seemed to be against making it an accessor, because the setter function could then be got. But you don't seem to lose much, seeming you can't statically determine the lookup anyway\u201a\u00c4\u00b6",
        "a11aabeeceeae6b8cb5d12ea06b56554 (00:58): 8c8837db54a2907cacd8633547977e33: And I thought someone claimed it could be deleted. Definite consensus that it much be deletable.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (00:58): s/delete/configurable/",
        "a11aabeeceeae6b8cb5d12ea06b56554 (00:59): Bleh, now what I wrote just makes no sense, ignore that change :P",
        "8c8837db54a2907cacd8633547977e33 (00:59): frankly I say we nuke it from orbit, and we all do it at once and suck up the pain",
        "a11aabeeceeae6b8cb5d12ea06b56554 (00:59): 8c8837db54a2907cacd8633547977e33: That's what I've been arguing for too.",
        "8c8837db54a2907cacd8633547977e33 (00:59): IE is totally in the right here",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:01): 8c8837db54a2907cacd8633547977e33: Well, I've more been arguing for nuking the setter, I have no issue with Object.defineProperty(Object.prototype, &quot;__proto__&quot;, {get:function(){return Object.getPrototypeOf(this);}, configurable:true}); given those exact semantics",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:01): (i.e., it's something which has obvious native semantics and is contained in a single place)",
        "8c8837db54a2907cacd8633547977e33 (01:02): that would be better than nothing, certainly",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:02): I think the ship has sailed with the getter \u201a\u00c4\u00ee it looks more and more like mobile is forcing the setter :(",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:02): At the very least it'd be nice to poison the __proto__ in strict.",
        "8c8837db54a2907cacd8633547977e33 (01:02): stupid idiot web developers",
        "8c8837db54a2907cacd8633547977e33 (01:03): __proto__-setting is poisoned, at least",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:03): 8c8837db54a2907cacd8633547977e33: In what?",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:03): won't mention his own use of __proto__.",
        "8c8837db54a2907cacd8633547977e33 (01:04): er",
        "8c8837db54a2907cacd8633547977e33 (01:04): no, sorry, I was thinking of __proto__-setting on non-extensible objects",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:04): 8c8837db54a2907cacd8633547977e33: But still, in what?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:04): Or is that required by spec?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:04): guesses test262 doesn't test that seeming __proto__ is non-standard",
        "8c8837db54a2907cacd8633547977e33 (01:04): &quot;use strict&quot;; Object.freeze({}).__proto__ = {}",
        "8c8837db54a2907cacd8633547977e33 (01:05): TypeError: Object.freeze({}).__proto__ is not extensible",
        "8c8837db54a2907cacd8633547977e33 (01:05): if you have a non-extensible object, you can't change its prototype",
        "8c8837db54a2907cacd8633547977e33 (01:05): and a TypeError gets thrown if you try in strict mode",
        "8c8837db54a2907cacd8633547977e33 (01:05): I think most engines implement this",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:05): Carakan seems to at least",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:06): didn't remember that being the case",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:06): http://trac.webkit.org/changeset/107498 is the JSC change",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:06): __proto__ is an accessor in JSC now.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:07): And reverted.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:08): (Because it didn't work cross-origin)",
        "8c8837db54a2907cacd8633547977e33 (01:08): bumpy landings happen",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:08): I'm tempted to just try and make the change to an accessor in Carakan, and go back to arguing for that.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:09): And try and pick the fight for the setter once we've got major mobile libraries not relying upon it.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:09): Because I do really want to get rid of the setter.",
        "8c8837db54a2907cacd8633547977e33 (01:10): word to your mother",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:10): What I want is someone to do a good write-up of why you don't want to mutate [[Prototype]] and shove it in the face of developers who do.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:11): 8c8837db54a2907cacd8633547977e33: You were CC'd on the emails about dropping __proto__ before, weren't you, about a year or so ago now?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:12): thinks he remembers Apple people agreeing in principle",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:13): Eh, not even I was.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:14): Just your later email RegExp.prototype.compile.",
        "8c8837db54a2907cacd8633547977e33 (01:14): oh gag, that idiocy",
        "8c8837db54a2907cacd8633547977e33 (01:15): I vaguely remember some sort of segue there, not much more than that",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:15): doesn't really have his email on this laptop",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:15): And webmail is making me gag.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:17): But yeah, on the whole I think we should just make it an accessor on Object.prototype and move towards getting rid of the setter.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:18): Making the setter throw from strict is kinda evil, but probably a good idea.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (01:18): (From what I've seen relying upon the setter, it's all non-strict)",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:24): Did ES5 globally change the &quot;reserved keyword&quot; policy to not block them from being property names?",
        "8c8837db54a2907cacd8633547977e33 (01:25): you could always have them as property names",
        "8c8837db54a2907cacd8633547977e33 (01:25): but now, you can have them to the right of dots, as names in object literals, etc.",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:26): Really?  I thought ES3 prevented you from doing, say, foo.delete()",
        "8c8837db54a2907cacd8633547977e33 (01:26): f[&quot;delete&quot;]()",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:26): That's what I meant, yeah.",
        "8c8837db54a2907cacd8633547977e33 (01:26): if you wanted to call such a function, or access such a property, you needed bracket notation",
        "8c8837db54a2907cacd8633547977e33 (01:27): the Javaheads in particular found this annoying for the delete method on files (I think)",
        "6b57ea7f33069df5914663ba9e59afdf (01:50): um, I'm bad with CSS",
        "b2cd6591be1072d089bbff014c556826 (01:51): &lt;3 css",
        "6b57ea7f33069df5914663ba9e59afdf (01:51): how do I get layout where 1st column has the width of its content, and other 2 columns fill the rest of the viewport (they may overflow: auto if needed)",
        "6b57ea7f33069df5914663ba9e59afdf (01:52): all the &quot;columns&quot; are div elements",
        "b2cd6591be1072d089bbff014c556826 (01:52): &lt;left style=&quot;position: absolute; left: 0; width: whatever;&quot;/&gt;&lt;right style=&quot;position: absolute; left: whatever; right: 0;&quot;/&gt;",
        "b2cd6591be1072d089bbff014c556826 (01:52): or any of a million other ways",
        "b2cd6591be1072d089bbff014c556826 (01:52): oh, width of its content",
        "b2cd6591be1072d089bbff014c556826 (01:53): hm.",
        "b2cd6591be1072d089bbff014c556826 (01:53): &lt;left style=&quot;position: absolute; left: 0; width: auto;&quot;/&gt;&lt;right style=&quot;position: relative; left: 100%; right: 0;&quot;/&gt;  might work",
        "8c8837db54a2907cacd8633547977e33 (01:53): sounds like you want a box that will flex",
        "6b57ea7f33069df5914663ba9e59afdf (01:53): 8c8837db54a2907cacd8633547977e33: yeah",
        "b2cd6591be1072d089bbff014c556826 (01:53): flexbox doesn't reach many browsers yert",
        "b2cd6591be1072d089bbff014c556826 (01:53): yet*",
        "6b57ea7f33069df5914663ba9e59afdf (01:54): I guess I could use -moz-box",
        "6b57ea7f33069df5914663ba9e59afdf (01:54): or flex, whatever it is called",
        "b2cd6591be1072d089bbff014c556826 (01:54): the above should do portably",
        "8c8837db54a2907cacd8633547977e33 (01:54): I just passed by dholbert a minute ago, I could corner him until he finishes implementing it",
        "6b57ea7f33069df5914663ba9e59afdf (01:54): :)",
        "8c8837db54a2907cacd8633547977e33 (01:54): might need reinforcements, tho",
        "1f8387eb43f131d7c309a90a4e36b5cb (01:59): 6b57ea7f33069df5914663ba9e59afdf: Use flexbox."
    ],
    "person_ids": [
        "8c8837db54a2907cacd8633547977e33",
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "a11aabeeceeae6b8cb5d12ea06b56554",
        "1f8387eb43f131d7c309a90a4e36b5cb",
        "6b57ea7f33069df5914663ba9e59afdf",
        "b2cd6591be1072d089bbff014c556826"
    ]
}