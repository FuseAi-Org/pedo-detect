{
    "id": "cde50b0f13d9bba66c2310469d56243d",
    "messages": [
        "709698dbdf971a9099a819777b5c9333 (02:47): Say HTML 6 adds a new void element. How would an HTML 5 parser know that the rest of the document isn't a child of that element?",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:48): it wouldn't",
        "709698dbdf971a9099a819777b5c9333 (02:50): That seems problematic.",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:51): why?",
        "709698dbdf971a9099a819777b5c9333 (02:55): Any new void element then creates a chicken &amp; egg problem. Authors won't adopt it because they can't use it in a progressive enhancement safe way since it corrupts the DOM. Agents won't add it because authors don't use it. Similar situation to XHTML 2.",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:58): doesn",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:58): er",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:58): doesn't seem to have caused particular problems in the past",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:58): people don't really want to use new elements until the browsers use them anyway",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:59): er, until they implement them i mean",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:59): browsers add lots of stuff before authors use them",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:59): in fact, they add everything before authors use them",
        "709698dbdf971a9099a819777b5c9333 (02:59): People are jumping in and using section/header/footer/etc now without proper browser support.",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:59): not many people :-)",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:00): and those people will get burnt anyway, e.g. when we rename &lt;headeR&gt;",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:00): (or remove it, or whatever we end up doing with it)",
        "709698dbdf971a9099a819777b5c9333 (03:00): Not if they're serving as text/html ;)",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:00): well i mean their pages won't be correct html5 anymore",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:00): i don't mean that their site will break or anything",
        "709698dbdf971a9099a819777b5c9333 (03:01): As for the past, there's never been a time where HTML was actively evolving with so many authors and authoring programs.",
        "709698dbdf971a9099a819777b5c9333 (03:01): \u201a\u00c4\u00b6as we have today",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:01): yup, it'll keep on increasing until we have everyone on the planet online",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:02): (and then it'll keep increasing until the population stops growing)",
        "709698dbdf971a9099a819777b5c9333 (03:03): I'd propose that HTML 5 parsing treat unrecognized elements (and only unrecognized elements) similar to foreign elements, where the SOLIDUS marks the start tag as self-closing.",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:04): what problem does it solve?",
        "709698dbdf971a9099a819777b5c9333 (03:04): Author adoption of new void elements.",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:05): wouldn't the fact that the browsers don't support those elements be a bigger barrier to adoption than the fact that the author has to jump through some minor hoops to get teh styling right?",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:05): (if we introduce &lt;foo&gt;, you can always just do &lt;span&gt;&lt;foo&gt;&lt;/span&gt; to get the parsing right in older browsers)",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:06): put it this way: historically, HTML has never had a void element that was useful without the browser actually supporting the element directly somehow",
        "ab7faae5d7b250ea8606486575f8f79c (03:09): What about &lt;meta&gt;? That's useful for some UAs (e.g. search engines) even if browsers don't do anything with it",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:09): elements in &lt;head&gt; have much bigger problems in the parser than whether they're void or not",
        "709698dbdf971a9099a819777b5c9333 (03:09): When &lt;area&gt; was first introduce, authors would add an image map to their site but also provide supplemental navigation below the image. Authors were able to adopt the element before all agents supported it.",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:10): 709698dbdf971a9099a819777b5c9333: but with &lt;area&gt;, the elements all get closed by the &lt;map&gt;, so it doesn't matter if the element gets closed or not",
        "709698dbdf971a9099a819777b5c9333 (03:11): You can't know that all new void elements will have a mandatory parent element.",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:13): no, but i can predict the likelihood of there being a problem if unknown elements can't be closed by /&gt;, based on past experience",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:14): (note that &quot;span&quot; is an unknown element per the parser, and we definitely don't want to support &lt;span/&gt;)",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:14): (so actually what we would need to do is more complex than what you describe)",
        "709698dbdf971a9099a819777b5c9333 (03:17): Didn't realize span was unknown to the parser. Why is that?",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:17): because only the elements with weird rules have to be known",
        "709698dbdf971a9099a819777b5c9333 (03:18): ah, like void elements :)",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:18): yeah",
        "709698dbdf971a9099a819777b5c9333 (03:19): One of the solutions offered on the mailing list back in August was to have not add any new void elements.",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:19): i maintain that there's no problem, so discussion of solutions seems pointless to me :-)",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:19): but sure, we could just not add more void elements if that makes people happy :-)",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:21): (at least until we have a need for one!)",
        "709698dbdf971a9099a819777b5c9333 (03:22): Not a fan of the idea, would just lead to more cases like &lt;script src=# /&gt;",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:23): hm?",
        "709698dbdf971a9099a819777b5c9333 (03:25): I can see how not allowing new void elements would lead to elements with empty content models instead, which then authors would just try to self-close (like with script src) causing more problems in the end.",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:27): well then we'd just use a void element",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:28): or we could just not introduce elements with empty content models as well",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:31): wooot! i've finally gotten through all the feedback on microdata stuff",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:31): ok now i have to go through all the notes i collected",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:31): and actually come up with a set of use cases, requirements, and scenarios",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:31): so that i can evaluate solutions",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:33): so far i've boiled down 15000+ lines of e-mail and dozens of pages of wiki and blog comments into 600 lines or so of notes",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:46): here are my notes http://wiki.whatwg.org/wiki/Microdata_Problem_Descriptions",
        "69b0d3dfe919a6b860a9fac82de52a7e (03:46): i'll clean it up later"
    ],
    "person_ids": [
        "709698dbdf971a9099a819777b5c9333",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "ab7faae5d7b250ea8606486575f8f79c"
    ]
}