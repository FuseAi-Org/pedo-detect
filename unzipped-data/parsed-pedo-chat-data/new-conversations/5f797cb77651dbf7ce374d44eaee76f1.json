{
    "id": "5f797cb77651dbf7ce374d44eaee76f1",
    "messages": [
        "c5eb8f040636665f66711fbabf236b35 (02:00): i agree and have no idea why they set it up like that",
        "ca96cfead13f29e530eb615cef9221ad (02:00): then just change the script that builds the indexes and be done with it",
        "c5eb8f040636665f66711fbabf236b35 (02:01): i guess",
        "c5eb8f040636665f66711fbabf236b35 (02:01): we'll give it a run... the mediawiki people did say it shouldnt cause problems",
        "c5eb8f040636665f66711fbabf236b35 (02:01): im just worried that there would be a reason it was set up that way and i dont want to get hosed",
        "c5eb8f040636665f66711fbabf236b35 (02:02): fear of not having spoken to The Right Guy among the mediawiki people, i guess....",
        "ca96cfead13f29e530eb615cef9221ad (02:02): Then ask them *specifically why they did it",
        "ca96cfead13f29e530eb615cef9221ad (02:02): If they can't tell you, stone them",
        "ab14bd2ee3f91af24d7bbf48a933b8f9 (02:02): wheres domas",
        "c5eb8f040636665f66711fbabf236b35 (02:02): lol",
        "c5eb8f040636665f66711fbabf236b35 (02:02): is a DoS the internet equivalent to a stoning?",
        "0311963ee43c84f5d278b5ff866a7782 (02:03): here!",
        "034f5fe8494097bb274500182f17ebfc (02:03): christ almighty why won't mysql 5.0.21 not work on freebsd 6.0 but 5.1.7 will, something is obviously broken",
        "0311963ee43c84f5d278b5ff866a7782 (02:03): so, who bashes wide indexes?",
        "ab14bd2ee3f91af24d7bbf48a933b8f9 (02:03): see above 500 byte length in mediawiki indexes",
        "0311963ee43c84f5d278b5ff866a7782 (02:04): um, there's some issues with utf8",
        "0311963ee43c84f5d278b5ff866a7782 (02:04): usually when we use binary fields",
        "ca96cfead13f29e530eb615cef9221ad (02:04): &lt;---- bashes wide indexes with a spiked club",
        "0311963ee43c84f5d278b5ff866a7782 (02:04): inviso: innodb is wide index by itself",
        "0311963ee43c84f5d278b5ff866a7782 (02:04): table",
        "5750bddcb522a69997fe3a018968d2d2 (02:04): I guess there are plenty tutorials out there? Can someone suggest some tutorials with a lot of practical examples? I'm interested in complex queries in particular.",
        "ca96cfead13f29e530eb615cef9221ad (02:05): domas: if you're indexing out past where data uniqueness is already established, you're wasting space and processing resources",
        "0311963ee43c84f5d278b5ff866a7782 (02:06): inviso: you do not have to hit table again! :)",
        "c5eb8f040636665f66711fbabf236b35 (02:06): <a href=\"http://pastebin.com/710261\">http://pastebin.com/710261</a> &lt;--- teh offending query written by those darn mediawiki people",
        "ca96cfead13f29e530eb615cef9221ad (02:06): For example, with last names, the breakpoint comes at 3 or 4 characters depending on your data",
        "0311963ee43c84f5d278b5ff866a7782 (02:06): on the other hand, how do you establish uniqueness?",
        "0311963ee43c84f5d278b5ff866a7782 (02:06): by PK?",
        "0311963ee43c84f5d278b5ff866a7782 (02:06): by having wide PK you put it into all indexes anyway",
        "ca96cfead13f29e530eb615cef9221ad (02:06): no, &quot;sufficient&quot; uniqueness",
        "0311963ee43c84f5d278b5ff866a7782 (02:06): so if you have wide index, that includes PK fields (for sorting), you do not waste space",
        "ca96cfead13f29e530eb615cef9221ad (02:07): so the index can do it's job while being as small as possible",
        "0311963ee43c84f5d278b5ff866a7782 (02:07): inviso: you can't sort based on truncated index",
        "ca96cfead13f29e530eb615cef9221ad (02:07): entirely not true",
        "0311963ee43c84f5d278b5ff866a7782 (02:07): try it",
        "0311963ee43c84f5d278b5ff866a7782 (02:08): anyway, yes, we're duplicating data in indexes",
        "ca96cfead13f29e530eb615cef9221ad (02:08): gah, I suppose the optimizer might not be making choices on the sorting, but it wouldn't have to be that way.  I may have to check that for sorting",
        "0311963ee43c84f5d278b5ff866a7782 (02:08): inviso: well, filesorting on semi-sorted data isn't fun",
        "ca96cfead13f29e530eb615cef9221ad (02:09): if the cardinality is low enough, it would be fine",
        "0311963ee43c84f5d278b5ff866a7782 (02:09): you have actually to do lots of small sorts",
        "ca96cfead13f29e530eb615cef9221ad (02:09): true. Depends on when the small sorts were done",
        "ca96cfead13f29e530eb615cef9221ad (02:10): but I guess I don't know that the optimizer passes off the semi-sorted data or if it doesn't even try semi-sorting",
        "0311963ee43c84f5d278b5ff866a7782 (02:10): spiderworm_work: if you're not really going to use unicode too much (as in rely on tailorings/collations for sorting), you may use old BINARY-based character sets code",
        "0311963ee43c84f5d278b5ff866a7782 (02:10): inviso: I have some entries on that",
        "0311963ee43c84f5d278b5ff866a7782 (02:10): in bugs",
        "c5eb8f040636665f66711fbabf236b35 (02:10): ack, im getting a different error now... <a href=\"http://pastebin.com/710275\">http://pastebin.com/710275</a>",
        "c5eb8f040636665f66711fbabf236b35 (02:11): wtf is &quot;insert ignore&quot; ?",
        "0311963ee43c84f5d278b5ff866a7782 (02:11): what the heck",
        "ca96cfead13f29e530eb615cef9221ad (02:11): ignores errors",
        "edc181cf0de0c3cc8babe6b187714363 (02:11): what version of mysql are you using spiderworm?",
        "0311963ee43c84f5d278b5ff866a7782 (02:11): spiderworm_work: which version of mysql?",
        "edc181cf0de0c3cc8babe6b187714363 (02:11): this sounds like 3.23 to me",
        "434898b7c6bf8efde0d23c3290616991 (02:11): spiderworm_work, MySQL version?",
        "0311963ee43c84f5d278b5ff866a7782 (02:12): this code looks like installer to me :)",
        "c5eb8f040636665f66711fbabf236b35 (02:12): Ver 14.7 Distrib 4.1.13a, for apple-darwin8.0 (powerpc) using  EditLine wrapper",
        "edc181cf0de0c3cc8babe6b187714363 (02:12): that's the client not the server",
        "c5eb8f040636665f66711fbabf236b35 (02:12): oh duh",
        "edc181cf0de0c3cc8babe6b187714363 (02:12): select version() on the server",
        "c5eb8f040636665f66711fbabf236b35 (02:12): lol",
        "c5eb8f040636665f66711fbabf236b35 (02:12): 3.23.58-log &lt;-- you're right, gleam-",
        "0311963ee43c84f5d278b5ff866a7782 (02:12): 500 sounds like something old to me too",
        "0311963ee43c84f5d278b5ff866a7782 (02:12): !tell us about 3.23",
        "edc181cf0de0c3cc8babe6b187714363 (02:12): are you able to upgrade?",
        "ac5c74b64b4b8352ef2f181affb5ac2a (02:13): domas asked me to tell you this: MySQL 3.23 is a version of MySQL used by idiots or people whose systems are maintained by idiots.",
        "0311963ee43c84f5d278b5ff866a7782 (02:13): \\o/",
        "edc181cf0de0c3cc8babe6b187714363 (02:13): at the very least to 4.0",
        "0311963ee43c84f5d278b5ff866a7782 (02:13): had to do my daily quota",
        "edc181cf0de0c3cc8babe6b187714363 (02:13): afaik mediawiki requirets 4.0 and up anyway",
        "5750bddcb522a69997fe3a018968d2d2 (02:13): ah, another one with 3.23",
        "034f5fe8494097bb274500182f17ebfc (02:13): in 5.0.21 i get a floating point exception... when i enable logging, there is no exception.. wtf",
        "0311963ee43c84f5d278b5ff866a7782 (02:13): spiderworm_work: we dropped 3.23 with 1.6 I guess",
        "c5eb8f040636665f66711fbabf236b35 (02:13): ... yikes",
        "c5eb8f040636665f66711fbabf236b35 (02:13): i better tell teh admins",
        "ca96cfead13f29e530eb615cef9221ad (02:13): domas: Thanks for clarifying the reason for the wide indexes. That's pretty icky but it sounds unavoidable :(",
        "0311963ee43c84f5d278b5ff866a7782 (02:13): inviso: there're more reasons",
        "5750bddcb522a69997fe3a018968d2d2 (02:13): I told my boss that it is heavily outdated, he mailed the admin, admin said &quot;yeah, it's so old that there are no more exploits in it, so it's mega-secure.&quot;",
        "ca96cfead13f29e530eb615cef9221ad (02:13): domas: fire away :)",
        "0311963ee43c84f5d278b5ff866a7782 (02:14): inviso: really, when you're doing various scans, hitting PK+row data may be to expensive",
        "5750bddcb522a69997fe3a018968d2d2 (02:14): I fear going into a discussion about that :)",
        "0311963ee43c84f5d278b5ff866a7782 (02:14): I already told how innodb holds data",
        "0311963ee43c84f5d278b5ff866a7782 (02:14): so the price is same :)",
        "0311963ee43c84f5d278b5ff866a7782 (02:14): inviso: we want all our data to be clustered properly",
        "0311963ee43c84f5d278b5ff866a7782 (02:14): inviso: so no random hits would be done",
        "ca96cfead13f29e530eb615cef9221ad (02:14): domas: meaning innodb effectively stores the data in the index?",
        "0311963ee43c84f5d278b5ff866a7782 (02:15): inviso: yes",
        "ca96cfead13f29e530eb615cef9221ad (02:15): And not in the table?",
        "0311963ee43c84f5d278b5ff866a7782 (02:15): inviso: right",
        "0311963ee43c84f5d278b5ff866a7782 (02:15): table _is_ index",
        "ca96cfead13f29e530eb615cef9221ad (02:15): interesting",
        "0311963ee43c84f5d278b5ff866a7782 (02:15): it's very powerful weapon, once you know that :)",
        "ca96cfead13f29e530eb615cef9221ad (02:15): /nod",
        "0311963ee43c84f5d278b5ff866a7782 (02:16): anyway, if you find something weird in mediawiki code",
        "0311963ee43c84f5d278b5ff866a7782 (02:16): it _has_ to be so ;-)",
        "ab14bd2ee3f91af24d7bbf48a933b8f9 (02:16): hmm heard of it but didnt know innodb did that",
        "ca96cfead13f29e530eb615cef9221ad (02:16): domas: hehe",
        "0311963ee43c84f5d278b5ff866a7782 (02:16): well, it's not much sense, when your PK is ID BIGINT AUTO_INCREMENT",
        "ca96cfead13f29e530eb615cef9221ad (02:16): domas: In which case, I'll come hunting you for an explanation ;)",
        "0311963ee43c84f5d278b5ff866a7782 (02:16): because if you do not define PK, InnoDB creates BIGINT there",
        "c84099c2c6d26c1562cd40a25cec46ae (02:16): hi there, is there a way to do an SQL-level search-and-replace?",
        "c84099c2c6d26c1562cd40a25cec46ae (02:16): on a field in a table?",
        "0311963ee43c84f5d278b5ff866a7782 (02:16): MrBIOS: REPLACE()"
    ],
    "person_ids": [
        "c5eb8f040636665f66711fbabf236b35",
        "ca96cfead13f29e530eb615cef9221ad",
        "ab14bd2ee3f91af24d7bbf48a933b8f9",
        "0311963ee43c84f5d278b5ff866a7782",
        "034f5fe8494097bb274500182f17ebfc",
        "5750bddcb522a69997fe3a018968d2d2",
        "edc181cf0de0c3cc8babe6b187714363",
        "434898b7c6bf8efde0d23c3290616991",
        "ac5c74b64b4b8352ef2f181affb5ac2a",
        "c84099c2c6d26c1562cd40a25cec46ae"
    ]
}