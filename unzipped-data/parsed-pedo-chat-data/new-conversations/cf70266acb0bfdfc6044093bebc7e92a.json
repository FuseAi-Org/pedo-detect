{
    "id": "cf70266acb0bfdfc6044093bebc7e92a",
    "messages": [
        "eca88ce0deea1275223afe139b2595e2 (09:36): wtf &amp;#18446744073709551681;",
        "a9b326df4e6da61c5b6f5e1058be83a2 (09:38): eca88ce0deea1275223afe139b2595e2: you testing surrogate handling?",
        "eca88ce0deea1275223afe139b2595e2 (09:39): Uhh, sort of",
        "eca88ce0deea1275223afe139b2595e2 (09:39): So 69b0d3dfe919a6b860a9fac82de52a7e landed a change to the spec which implies that crazy stuff like that should get passed through without harm",
        "eca88ce0deea1275223afe139b2595e2 (09:39): But that doesn't have any legal surrogates...",
        "eca88ce0deea1275223afe139b2595e2 (09:42): I think I should send him mail about this",
        "b8810fee2f4a71f849f3f7409546d1d9 (09:46): eca88ce0deea1275223afe139b2595e2: aside from lone surrogates, the weirdo characters that can now be used as numeric references were already available if you used them as UTF-8 in the raw stream",
        "eca88ce0deea1275223afe139b2595e2 (09:47): UTF-8 doesn't even have a mechanism for building something that long...",
        "b8810fee2f4a71f849f3f7409546d1d9 (09:47): eca88ce0deea1275223afe139b2595e2: what were you about to complain to me about?",
        "eca88ce0deea1275223afe139b2595e2 (09:48): It was my fault; after double checking with the spec all of your changes were correct.",
        "b8810fee2f4a71f849f3f7409546d1d9 (09:48): eca88ce0deea1275223afe139b2595e2: UTF-8 can build code points until 0x10FFFF just fine",
        "b8810fee2f4a71f849f3f7409546d1d9 (09:48): ok",
        "eca88ce0deea1275223afe139b2595e2 (09:48): On an unrelated note, have you looked at r3374?",
        "b8810fee2f4a71f849f3f7409546d1d9 (09:48): of the spec?",
        "eca88ce0deea1275223afe139b2595e2 (09:48): Yeah",
        "b8810fee2f4a71f849f3f7409546d1d9 (09:48): looks",
        "b8810fee2f4a71f849f3f7409546d1d9 (09:49): eca88ce0deea1275223afe139b2595e2: the changes to the Windows-1252 table are questionable, but I'm not sure if they are what existing browsers do",
        "b8810fee2f4a71f849f3f7409546d1d9 (09:50): &quot;If the number is in the range 0x0001 to 0x0008&quot; ... &quot;error&quot; is good",
        "b8810fee2f4a71f849f3f7409546d1d9 (09:51): so, the C1 range stuff I'd have to double-check, but the rest is good",
        "b8810fee2f4a71f849f3f7409546d1d9 (09:54): what's the right way to convert a single-character string to the number corresponding to the code point in JS_",
        "b8810fee2f4a71f849f3f7409546d1d9 (09:54): ?",
        "b8810fee2f4a71f849f3f7409546d1d9 (09:57): charCodeAt",
        "b8810fee2f4a71f849f3f7409546d1d9 (09:59): http://software.hixie.ch/utilities/js/live-dom-viewer/saved/159",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:00): have to wait for Windows to boot to have a verdict...",
        "eca88ce0deea1275223afe139b2595e2 (10:06): b8810fee2f4a71f849f3f7409546d1d9: The interesting bit is how error handling changed",
        "eca88ce0deea1275223afe139b2595e2 (10:07): Instead of replacing it with U+FFFD, we pass it through.",
        "eca88ce0deea1275223afe139b2595e2 (10:07): This results in hilarity with large numeric entities",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:07): eca88ce0deea1275223afe139b2595e2: larger than 0x10FFFF?",
        "eca88ce0deea1275223afe139b2595e2 (10:07): yep",
        "ab7faae5d7b250ea8606486575f8f79c (10:07): eca88ce0deea1275223afe139b2595e2: I think numericEntities.test and unicodeChars.test were generated by me with a Perl script that I might have not uploaded anywhere",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:08): oh. those should still becode U+FFFD",
        "eca88ce0deea1275223afe139b2595e2 (10:08): Yep",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:08): if the spec now says otherwise, it's a bug",
        "eca88ce0deea1275223afe139b2595e2 (10:08): I wrote a script to convert them, so don't worry about it",
        "eca88ce0deea1275223afe139b2595e2 (10:08): Well, 69b0d3dfe919a6b860a9fac82de52a7e very deliberately changed it to match browser behavior",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:08): eca88ce0deea1275223afe139b2595e2: what's browser behavior for &gt; 0x10FFFF?",
        "eca88ce0deea1275223afe139b2595e2 (10:08): Firefox simply ignores the character",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:09): that's not good",
        "eca88ce0deea1275223afe139b2595e2 (10:09): Don't have access to other browsers at the moment",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:09): oops, i thought i'd already made &gt; 10FFFF get not parsed as a charref",
        "ab7faae5d7b250ea8606486575f8f79c (10:09): I thought Firefox wrapped values larger than 2^32",
        "eca88ce0deea1275223afe139b2595e2 (10:09): I could have missed that cluedump",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:09): webkit treats &amp;#x110000; as &amp;amp;#x110000;",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:09): not great, either",
        "eca88ce0deea1275223afe139b2595e2 (10:10): 69b0d3dfe919a6b860a9fac82de52a7e: I dropped you mail about it, ftr",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:10): hrm. my test case isn't working in IE at all",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:10): thanks",
        "eca88ce0deea1275223afe139b2595e2 (10:11): It's way past my bedtime. Let me know what we decide :-)",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:11): it's on my pile",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:11): my latency is about a month right now",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:12): how do I get the DOMString out of a text node in IE?",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:12): it's been a long time since I've written IE workaround JS",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:12): .data",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:12): thanks",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:13): no, that's not it",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:13): nodeValue is supposed to be a prop on the object...",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:13): hmm. does IE go crazy if a node value contains a bad character?",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:14): nope. that's not the reason",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:15): something is going badly wrong in my testing in IE",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:15): I feel clueless",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:18): anyway, whatever IE does, it's not mapping the unmapped characters of Windows-1252 C1 range to U+FFFD",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:19): .data definitely gets you the text out of Text node in IE last i checked",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:19): Opinions on https://bugzilla.mozilla.org/show_bug.cgi?id=503210 for Web DOM Core?",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:20): re bug, no opinion. what's the use case?",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:20): 69b0d3dfe919a6b860a9fac82de52a7e: I'm failing to get even innerHTML out of an element or .length out of a text node in Live DOM Viewer in IE",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:20): have you tried with just regular text?",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:20): maybe their serialiser is barfing",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:20): 69b0d3dfe919a6b860a9fac82de52a7e: serializing any DOM as a JS script that recreates the DOM",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:21): 69b0d3dfe919a6b860a9fac82de52a7e: I tried with 'a'",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:21): 69b0d3dfe919a6b860a9fac82de52a7e: same result, which is weird",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:21): what's the use case for serializing any DOM as a JS script that recreates the DOM?",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:21): odd",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:21): 69b0d3dfe919a6b860a9fac82de52a7e: fuzzing",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:21): so testing? not a platform feature?",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:21): does the innerHTML part of the live dom viewer itself work?",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:22): 69b0d3dfe919a6b860a9fac82de52a7e: yes",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:22): then i dunno what's going on",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:27): b8810fee2f4a71f849f3f7409546d1d9: did you implement the spec or webkit behaviour for table taint in the html5.parser?",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:32): 69b0d3dfe919a6b860a9fac82de52a7e: WebKit behavior",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:33): anything to report?",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:33): nothing regarading Web compat regarding taint to report",
        "b25b6b77a0087ff8385941e5545d32ea (10:33): b8810fee2f4a71f849f3f7409546d1d9: which version of IE?",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:34): the only problems have been with Gecko-only test suites",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:34): the only taint problems that is",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:34): b25b6b77a0087ff8385941e5545d32ea: IE8 on Windows XP SP3",
        "b25b6b77a0087ff8385941e5545d32ea (10:34): b8810fee2f4a71f849f3f7409546d1d9: AFAICT IE8 is broken in the live dom viewer",
        "b25b6b77a0087ff8385941e5545d32ea (10:34): At least for me on windows 7",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:34): b25b6b77a0087ff8385941e5545d32ea: well, it's broken in a really subtle way",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:35): because I can w() the text node object",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:35): b8810fee2f4a71f849f3f7409546d1d9:",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:35): er",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:35): b8810fee2f4a71f849f3f7409546d1d9: k",
        "b25b6b77a0087ff8385941e5545d32ea (10:35): b8810fee2f4a71f849f3f7409546d1d9: oh. Well the whole w() function is broken for me",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:35): i guess i'll make &lt;table&gt;&lt;b&gt;do&lt;/b&gt; &lt;b&gt;do&lt;/b&gt; do &lt;b&gt;do&lt;/b&gt; &lt;b&gt;do&lt;/b&gt;&lt;/table&gt; parse as &quot;dodo do dodo&quot; instead of &quot;do do do do do&quot; tomorrow then",
        "b8810fee2f4a71f849f3f7409546d1d9 (10:36): 69b0d3dfe919a6b860a9fac82de52a7e: nice",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:36): not really, but it's hard to argue with your points :-)",
        "69b0d3dfe919a6b860a9fac82de52a7e (10:36): the list of things in html5 i disagree with is growing quite long"
    ],
    "person_ids": [
        "eca88ce0deea1275223afe139b2595e2",
        "a9b326df4e6da61c5b6f5e1058be83a2",
        "b8810fee2f4a71f849f3f7409546d1d9",
        "ab7faae5d7b250ea8606486575f8f79c",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "b25b6b77a0087ff8385941e5545d32ea"
    ]
}