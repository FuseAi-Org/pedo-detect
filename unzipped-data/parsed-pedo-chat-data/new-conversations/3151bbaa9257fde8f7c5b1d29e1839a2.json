{
    "id": "3151bbaa9257fde8f7c5b1d29e1839a2",
    "messages": [
        "e7e94d9ef1edaf2c6c55e9966b551295 (01:50): Hi",
        "e7e94d9ef1edaf2c6c55e9966b551295 (01:50): &quot;Please leave your sense of logic at the door&quot;?",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:51): hi e7e94d9ef1edaf2c6c55e9966b551295",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:51): ab7faae5d7b250ea8606486575f8f79c: so my original idea was to have bla{input::attr(value)}bla sort of stuff",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:51): ab7faae5d7b250ea8606486575f8f79c: but i'm not a big fan of that either",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:55): i do kind of like the JS idea",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:55): maybe we can say that any mutations of the DOM during expansion will cause the entire thing to abort",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:58): ab7faae5d7b250ea8606486575f8f79c: your 002 has an error -- your onchange should not be in &amp;{}",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:58): interesting error though. might well be common.",
        "ab7faae5d7b250ea8606486575f8f79c (01:58): Would implementors find it easier to detect and abort from DOM mutations than to make the algorithm interruptible on a timeout?",
        "e7e94d9ef1edaf2c6c55e9966b551295 (01:59): People can't really serve their documents as XHTML because of MSIE... Since Microsoft doesn't support the development of (X)HTML5, does it mean that XHTML is definitely out of the window?",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:59): ab7faae5d7b250ea8606486575f8f79c: implementors have to detect DOM mutations anyway for other parts of the algorithm",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:59): also, your data tree is non-compliant -- &lt;div&gt;s can't contain &lt;shop&gt;s",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:59): e7e94d9ef1edaf2c6c55e9966b551295: not definitely, but for now, certainly, i wouldn't recommend using XHTML",
        "ab7faae5d7b250ea8606486575f8f79c (01:59): (They'd have to support &amp;{while(1);} too, so it doesn't seem obvious that they couldn't recover from infinite loops elsewhere)",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:00): 69b0d3dfe919a6b860a9fac82de52a7e: on practical ground, not technical grounds, right?",
        "ab7faae5d7b250ea8606486575f8f79c (02:00): (or at least it doesn't seem obvious to me, but then I've never written a web browser and don't intend to :-) )",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:00): e7e94d9ef1edaf2c6c55e9966b551295: on practical technical grounds, right, as opposed to theoretical ones",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:00): :(",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:01): e7e94d9ef1edaf2c6c55e9966b551295: but don't worry, we're working on html5, so html won't be left behind",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:01): ab7faae5d7b250ea8606486575f8f79c: catching an infinite loop in your own code is a lot harder than catching it in code you are running in a sandbox",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:01): Good for you, but I was hoping XHTML would win eventually",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:01): e7e94d9ef1edaf2c6c55e9966b551295: well, it might eventually, if IE loses more market share or implements XHTML",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:02): e7e94d9ef1edaf2c6c55e9966b551295: HTML5 and XHTML5 are being developed in lockstep",
        "ab7faae5d7b250ea8606486575f8f79c (02:02): 69b0d3dfe919a6b860a9fac82de52a7e: I assume I'd have to use X(HT)ML to make it not non-conformant HTML, so I'm happy to neglect conformance for convenience as long as it works :-)",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:02): e7e94d9ef1edaf2c6c55e9966b551295: so we're agnostic as to which one succeeds",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:02): ab7faae5d7b250ea8606486575f8f79c: well, you'll probably have to use XML for the datatemplate anyway",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:02): ab7faae5d7b250ea8606486575f8f79c: e.g. your &lt;rule condition=&quot;category&quot;&gt;&lt;option ...&gt;&lt;/rule&gt; rule will probably not parse as you'd expect",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:03): same as your &lt;select&gt; &lt;nest/&gt; &lt;/select&gt;",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:03): That's good, but it doesn't give people the choice to serve XHTML, because we are still dependent on browser vendors...",
        "ab7faae5d7b250ea8606486575f8f79c (02:03): Hmm, I guess that means I'll have to give up the convenience :-(",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:03): e7e94d9ef1edaf2c6c55e9966b551295: yup, not much we can do about that from the specs side of things :-)",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:04): *sigh*",
        "ab7faae5d7b250ea8606486575f8f79c (02:04): except this is a non-working demonstration, so I can keep the convenience even though it wouldn't actually work in reality :-)",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:04): ab7faae5d7b250ea8606486575f8f79c: yeah, i don't expect to have &lt;datatemplate&gt; ever work in HTML5 without external files for the template at least (and the data, if the data isn't in HTML)",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:04): (though the data could easily be in HTML, e.g. using &lt;ol&gt;, maybe marked up as a microformat)",
        "ab7faae5d7b250ea8606486575f8f79c (02:04): (Fixed the onchange)",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:05): 69b0d3dfe919a6b860a9fac82de52a7e: do you know from experience if an X(HT)ML-only browser would be faster than an HTML/XHTML one?",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:05): e7e94d9ef1edaf2c6c55e9966b551295: wouldn't make any difference in speed",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:06): just code complexity?",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:06): or not even that?",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:06): (on the browser's side I mean)",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:06): e7e94d9ef1edaf2c6c55e9966b551295: it's almost entirely the same code, except for the parser, which is just different, not especially more or less complex or slower or faster, and not even that different really",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:06): I would have thought a tag-soup parser would be much more complex?",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:07): not really",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:07): and xml is pretty complex to parse itself anyway",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:08): I'm a little concerned that if browsers continue to be conservative in error handling people will keep generating terrible code",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:09): e7e94d9ef1edaf2c6c55e9966b551295: html5 defines exactly what the error handling should be",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:09): e7e94d9ef1edaf2c6c55e9966b551295: and people will keep generating terrible code regardless of what browsers do",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:09): e7e94d9ef1edaf2c6c55e9966b551295: even if the code is forced to be syntactically correct, that doesn't guarentee it'll be semantically correct",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:09): Even more so: people will be able to count on browsers handling their errors silently",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:10): they already can",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:10): ab7faae5d7b250ea8606486575f8f79c: one advantage of having them be external files is that it makes it easier to build shims for IE, btw",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:10): differences between browsers arise, which if I understand correctly, won't be the case with HTML5",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:11): e7e94d9ef1edaf2c6c55e9966b551295: there'll still be bugs",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:13): hehe, I guess one can always count on software being buggy :)",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:13): I don't have to worry about HTML5 before firefox 3.0 / opera 10 though, right?",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:13): you don't ever have to _worry_ about html5, hopefully :-)",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:13): lol",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:13): parts of html5 are already implemented in browsers",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:13): other parts won't be implemented for a decade or more",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:13): if ever",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:13): yeah I remember reading something about it",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:15): hmmm... &quot;XHTML content can be parsed with a simpler parser than tag soup can, and a _much_ simpler parser than SGML can.&quot;",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:15): changed your mind, or did I misunderstand you?",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:16): http://www.hixie.ch/advocacy/xhtml",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:17): changed my mind :-)",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:17): that was written before we had a spec for html5",
        "a924fb58d2c25874322f4e5126f608b9 (02:17): Makes me wonder... is xml+namespaces+allthatstuff still less than a html5 parser?",
        "ab7faae5d7b250ea8606486575f8f79c (02:19): b25b6b77a0087ff8385941e5545d32ea: Your recent html5lib commit had &quot;- return result&quot; &quot;+ return resutl&quot; which looks like an odd change",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:20): e7e94d9ef1edaf2c6c55e9966b551295: (fixed)",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:20): oh ok",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:21): I've been out of touch with the web development word - has XHTML become a nasty word in a resume?",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:21): s/word/world/",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:21): s/nasty/dirty/",
        "b25b6b77a0087ff8385941e5545d32ea (02:22): ab7faae5d7b250ea8606486575f8f79c: Which file?",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:22): (I need to replace that brain -&gt; fingers uplink)",
        "b25b6b77a0087ff8385941e5545d32ea (02:22): Oh, I see",
        "ab7faae5d7b250ea8606486575f8f79c (02:23): inputstream.py",
        "b25b6b77a0087ff8385941e5545d32ea (02:25): ab7faae5d7b250ea8606486575f8f79c: Fixed. Thanks :)",
        "b25b6b77a0087ff8385941e5545d32ea (02:25): -&gt; bed",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:31): Alright, I'm off. Thanks for your insight 69b0d3dfe919a6b860a9fac82de52a7e.",
        "e7e94d9ef1edaf2c6c55e9966b551295 (02:31): Good night!",
        "ab7faae5d7b250ea8606486575f8f79c (02:36): wonders which versions of Netscape Navigator supported the &amp;{script}; syntax"
    ],
    "person_ids": [
        "e7e94d9ef1edaf2c6c55e9966b551295",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "ab7faae5d7b250ea8606486575f8f79c",
        "a924fb58d2c25874322f4e5126f608b9",
        "b25b6b77a0087ff8385941e5545d32ea"
    ]
}