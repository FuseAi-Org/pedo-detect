{
    "id": "1302f6db0123eb8b62a7947ce62eff59",
    "messages": [
        "6a8ca7ce228632a45b077b5398962bf2 (07:30): paul_irish: I updated my nearest-neighbor scaling algorithm for my emulator, now chrome renders it 3x faster.",
        "6a8ca7ce228632a45b077b5398962bf2 (07:30): actually fullspeed even at 400x400",
        "6a8ca7ce228632a45b077b5398962bf2 (07:30): while having chrome do its default blur scaling is slo-mo even at that resolution",
        "6a8ca7ce228632a45b077b5398962bf2 (07:31): the native scaling is too damn slow in chrome",
        "6a8ca7ce228632a45b077b5398962bf2 (07:31): :/",
        "6a8ca7ce228632a45b077b5398962bf2 (07:31): especially when scaling gfx in JS is faster than native",
        "6a8ca7ce228632a45b077b5398962bf2 (07:34): Peter`: Does V8 trace?",
        "6a8ca7ce228632a45b077b5398962bf2 (07:34): After leaving the res the same for a few seconds chrome seems to optimize the for loops",
        "6a8ca7ce228632a45b077b5398962bf2 (07:34): for the scaling algo",
        "6a8ca7ce228632a45b077b5398962bf2 (07:35): huh",
        "6a8ca7ce228632a45b077b5398962bf2 (07:40): says nevermind",
        "6a8ca7ce228632a45b077b5398962bf2 (07:41): notices blitting is the culprit to the heavy load jump",
        "6a8ca7ce228632a45b077b5398962bf2 (07:41): damnit google chrome. &lt;.&lt;",
        "6a8ca7ce228632a45b077b5398962bf2 (07:43): scumbag google chrome takes 2/3 of the time running the JS gameboy color emulator rendering the resulting image from putImageData...",
        "0fe8692be7a494c6561f745b9f3b0d17 (07:53): if only all browsers were made equally",
        "06cb330920ae58e1614c9145d983b3d6 (07:53): that would suck",
        "06cb330920ae58e1614c9145d983b3d6 (07:53): give me browsers with different capabilities and different bugs, so each browser can see what it's doing wrong",
        "0fe8692be7a494c6561f745b9f3b0d17 (07:54): logic overload!",
        "06cb330920ae58e1614c9145d983b3d6 (07:54): D:",
        "6a8ca7ce228632a45b077b5398962bf2 (07:59): hmm",
        "6a8ca7ce228632a45b077b5398962bf2 (07:59): Took chrome 5 minutes before it picked back up to fullspeed",
        "6a8ca7ce228632a45b077b5398962bf2 (08:00): like it's doing something retarded for 5 minutes, then realizing it should be doing something else.",
        "6a8ca7ce228632a45b077b5398962bf2 (08:00): :/",
        "6a8ca7ce228632a45b077b5398962bf2 (08:00): I don't even...",
        "0fe8692be7a494c6561f745b9f3b0d17 (08:01): some browsers just don't grow the same parts at the same rate at the same time....",
        "6a8ca7ce228632a45b077b5398962bf2 (08:01): heh, the scaling algo I wrote takes up 10% of the CPU time, another 20% is to GBC emulation",
        "6a8ca7ce228632a45b077b5398962bf2 (08:01): the rest taken up by chrome to render the resulting image",
        "6a8ca7ce228632a45b077b5398962bf2 (08:01): D:",
        "6a8ca7ce228632a45b077b5398962bf2 (08:02): yo dawg, it should be the other way around. 8(",
        "0fe8692be7a494c6561f745b9f3b0d17 (08:02): i'm strangely glad that chrome is 2nd in something",
        "6a8ca7ce228632a45b077b5398962bf2 (08:03): I need to poke around the rendering path for putImageData in webkit",
        "6a8ca7ce228632a45b077b5398962bf2 (08:03): this is just abnormally slow",
        "6a8ca7ce228632a45b077b5398962bf2 (08:06): Here's my framebuffer scaling function: https://github.com 6a8ca7ce228632a45b077b5398962bf2alitz/GameBoy-Online/blob/master/js/GameBoyCore.js#L5908",
        "6a8ca7ce228632a45b077b5398962bf2 (08:07): notice it's just a for loop with an inner for loop",
        "6a8ca7ce228632a45b077b5398962bf2 (08:07): and the loop code part is just 5 lines...",
        "6a8ca7ce228632a45b077b5398962bf2 (08:07): TM in firefox should trace this very well at least.",
        "6a8ca7ce228632a45b077b5398962bf2 (08:12): paul_irish: I saw an html5rocks post on pixelated sprites",
        "6a8ca7ce228632a45b077b5398962bf2 (08:12): this algo should help",
        "6a8ca7ce228632a45b077b5398962bf2 (08:12): since it does nearest-neighbor scaling. :)",
        "6a8ca7ce228632a45b077b5398962bf2 (08:13): just scale the original sprite by grabbing its pixel data from getimagedata",
        "6a8ca7ce228632a45b077b5398962bf2 (08:13): pass it through here",
        "6a8ca7ce228632a45b077b5398962bf2 (08:13): and then putimagedata to a new sprite image",
        "6a8ca7ce228632a45b077b5398962bf2 (08:14): you'll need to just modify this slightly",
        "06cb330920ae58e1614c9145d983b3d6 (08:16): at one point i tried implementing image zooming, eg. like mousewheel zooming in an image viewer; you see some interesting behavior between browsers there, the different optimization strategies become very visible",
        "6a8ca7ce228632a45b077b5398962bf2 (08:16): 06cb330920ae58e1614c9145d983b3d6: If you do this scaling in js when &quot;preloading&quot; your images, then you have 1:1 sprites that are pixelated to the way you like.",
        "06cb330920ae58e1614c9145d983b3d6 (08:17): eg. FF (3.6 at the time, IIRC) seemed to scale images at paint time, so rendering is a little slow, but if you zoom in on a big image it's fairly consistent",
        "06cb330920ae58e1614c9145d983b3d6 (08:17): whereas chrome (8? 9?), IIRC, seemed to scale the entire image just once when you changed the scale; rendering was much faster, but there was a huge hitch whenever the zoom level changed",
        "6a8ca7ce228632a45b077b5398962bf2 (08:17): 06cb330920ae58e1614c9145d983b3d6: Though you need not to do nearest-neighbor scaling in js for firefox 3.6+",
        "6a8ca7ce228632a45b077b5398962bf2 (08:17): thanks to -moz-crisp-edges",
        "06cb330920ae58e1614c9145d983b3d6 (08:18): this was just CSS scaling and differences in the browser's internal image scaling methods",
        "6a8ca7ce228632a45b077b5398962bf2 (08:18): 06cb330920ae58e1614c9145d983b3d6: Yeah, but notice chrome only lets you do bi-linear scaling",
        "06cb330920ae58e1614c9145d983b3d6 (08:19): well, for the particular case that's all I wanted (it was an image viewer, so nearest scaling would have been too low-quality)",
        "6a8ca7ce228632a45b077b5398962bf2 (08:19): If you want to do nearest-neighbor on purpose, then you'll need to either have your images already scaled, or do it in js with something like my js",
        "06cb330920ae58e1614c9145d983b3d6 (08:19): but yeah I wish it was possible to more directly hint the scaling algorithm, between nearest (very fast), bilinear (fast/decent quality), and slower, high-quality scaling",
        "6a8ca7ce228632a45b077b5398962bf2 (08:20): 06cb330920ae58e1614c9145d983b3d6: scaling through CSS should always be faster",
        "6a8ca7ce228632a45b077b5398962bf2 (08:20): but doing putImageData through chrome when the canvas has been scaled via CSS is slow as hell.",
        "6a8ca7ce228632a45b077b5398962bf2 (08:20): even for a 50x50 canvas",
        "6a8ca7ce228632a45b077b5398962bf2 (08:21): heck even a 25x25 canvas in chrome can't do 60 fps here.",
        "06cb330920ae58e1614c9145d983b3d6 (08:21): the sort of UI I was looking for was eg. mousewheel zooming in and out in Photoshop ... i should probably revisit it since both chrome and FF have had a major release since then",
        "6a8ca7ce228632a45b077b5398962bf2 (08:21): 06cb330920ae58e1614c9145d983b3d6: You can implement a fast gaussian blur algorithm in js",
        "06cb330920ae58e1614c9145d983b3d6 (08:21): this is just zooming the image with CSS",
        "6a8ca7ce228632a45b077b5398962bf2 (08:22): 06cb330920ae58e1614c9145d983b3d6: True",
        "06cb330920ae58e1614c9145d983b3d6 (08:22): eg. with a large (say, 3000x3000) image, zooming in a notch would freeze for 500ms or so in chrome",
        "6a8ca7ce228632a45b077b5398962bf2 (08:22): If some browsers are giving you a hard time you can always scale and cache the 1:1 result in js. :P",
        "06cb330920ae58e1614c9145d983b3d6 (08:22): presumably (guessing based on behavior, didn't look at the code) resizing the entire image, even though only a small portion was visible",
        "6a8ca7ce228632a45b077b5398962bf2 (08:22): 06cb330920ae58e1614c9145d983b3d6: Heh 3000x3000",
        "06cb330920ae58e1614c9145d983b3d6 (08:22): which makes a lot of sense for certain use cases--just not mine",
        "6a8ca7ce228632a45b077b5398962bf2 (08:23): memory issues there bro",
        "06cb330920ae58e1614c9145d983b3d6 (08:23): nah modern browsers can handle images that size easily",
        "6a8ca7ce228632a45b077b5398962bf2 (08:23): try breaking up that image into chunks",
        "6a8ca7ce228632a45b077b5398962bf2 (08:23): 06cb330920ae58e1614c9145d983b3d6: Still, it has to reside in RAM",
        "06cb330920ae58e1614c9145d983b3d6 (08:23): normally it just shows a downscaled version",
        "6a8ca7ce228632a45b077b5398962bf2 (08:23): breaking it into chunks might allow the browser to optimize for the visible portions",
        "6a8ca7ce228632a45b077b5398962bf2 (08:24): and the hidden portions can be disabled while offscreen.",
        "06cb330920ae58e1614c9145d983b3d6 (08:24): ff4 is much better than 3.6 was at painting large, scaled images, it seems",
        "6a8ca7ce228632a45b077b5398962bf2 (08:25): 06cb330920ae58e1614c9145d983b3d6: FF4 is better than FF3.6 in many ways",
        "06cb330920ae58e1614c9145d983b3d6 (08:25): 3.6 had a fast path for that (scrolling only horizontally or vertically, obviously optimized for scrollbars), but if you did both at once it would get ugly",
        "6a8ca7ce228632a45b077b5398962bf2 (08:25): like JS is 10x faster for me.",
        "06cb330920ae58e1614c9145d983b3d6 (08:25): looks like ff4 optimized that in the general case",
        "6a8ca7ce228632a45b077b5398962bf2 (08:25): still",
        "6a8ca7ce228632a45b077b5398962bf2 (08:25): you shouldn't rely on the browser to do these heuristics",
        "6a8ca7ce228632a45b077b5398962bf2 (08:25): especially in RAM constrained environments",
        "6a8ca7ce228632a45b077b5398962bf2 (08:26): like 30 tabs open on a 512 MB comp",
        "06cb330920ae58e1614c9145d983b3d6 (08:26): if you're in a RAM-constrained environment you're not viewing print-resolution images :)",
        "6a8ca7ce228632a45b077b5398962bf2 (08:26): you'll be using VM mon",
        "06cb330920ae58e1614c9145d983b3d6 (08:26): (that's why the low-res versions exist; they're a lot more convenient and all most people want)",
        "6a8ca7ce228632a45b077b5398962bf2 (08:27): Do you pack low-res into your image file next to the high-res?",
        "06cb330920ae58e1614c9145d983b3d6 (08:27): no, separate files",
        "6a8ca7ce228632a45b077b5398962bf2 (08:27): Or are you assuming the browser samples the image?",
        "6a8ca7ce228632a45b077b5398962bf2 (08:27): 06cb330920ae58e1614c9145d983b3d6: You're doing a timer to check to see if it's scaling on time then?",
        "6a8ca7ce228632a45b077b5398962bf2 (08:27): to switch images?",
        "06cb330920ae58e1614c9145d983b3d6 (08:28): no, it only shows the low-res one by default; UI to view the large one",
        "6a8ca7ce228632a45b077b5398962bf2 (08:28): So it's up to the user then?",
        "6a8ca7ce228632a45b077b5398962bf2 (08:28): heh",
        "06cb330920ae58e1614c9145d983b3d6 (08:28): sure, it's up to the user if they want to download a 3-meg image instead of a 500k one",
        "6a8ca7ce228632a45b077b5398962bf2 (08:29): discouraging the power users from the high-res as well. :P",
        "6a8ca7ce228632a45b077b5398962bf2 (08:29): anyhow, maybe do timers to check to see if the scaling is taking too long in order to &quot;fallback&quot;?",
        "6a8ca7ce228632a45b077b5398962bf2 (08:29): or to skip zoom intervals",
        "6a8ca7ce228632a45b077b5398962bf2 (08:30): if you're animating the zoom",
        "06cb330920ae58e1614c9145d983b3d6 (08:31): http://oreno.imouto.org/post/browse#/pool:1832",
        "06cb330920ae58e1614c9145d983b3d6 (08:31): (hit v)",
        "6a8ca7ce228632a45b077b5398962bf2 (08:31): woah, where did all these anime girls come from? heh",
        "06cb330920ae58e1614c9145d983b3d6 (08:33): an odd island nation, i assume",
        "6a8ca7ce228632a45b077b5398962bf2 (08:34): You froze my firefox. &lt;.&lt;",
        "6a8ca7ce228632a45b077b5398962bf2 (08:34): lol",
        "06cb330920ae58e1614c9145d983b3d6 (08:34): maybe some time i'll put up an example site using that with stupid cat pictures or something, people always get distracted :P",
        "6a8ca7ce228632a45b077b5398962bf2 (08:35): can haz cats?",
        "06cb330920ae58e1614c9145d983b3d6 (08:35): never freezes for me, i think your firefox is misbehaving sir",
        "6a8ca7ce228632a45b077b5398962bf2 (08:35): firefox 4 for mac",
        "6a8ca7ce228632a45b077b5398962bf2 (08:35): :/",
        "06cb330920ae58e1614c9145d983b3d6 (08:36): last i saw most webkit browsers (including chrome and mobile safari) were a bit leaky with dynamically-loaded images which is annoying",
        "6a8ca7ce228632a45b077b5398962bf2 (08:36): don't use data uris if you're conscious about RAM usage then",
        "06cb330920ae58e1614c9145d983b3d6 (08:36): i've crashed chrome tabs just by scrolling around google maps for a while (in a contrived case to repro it--a low-memory VM)",
        "06cb330920ae58e1614c9145d983b3d6 (08:36): i never use data:, heh",
        "06cb330920ae58e1614c9145d983b3d6 (08:37): (when I can help it; nothing in this code does)",
        "06cb330920ae58e1614c9145d983b3d6 (08:38): tip: don't view image on that page in firefox; it's a canvas, and view image loads canvases as data:, heh",
        "06cb330920ae58e1614c9145d983b3d6 (08:38): so it ends up trying to load a several-megabyte data url",
        "6a8ca7ce228632a45b077b5398962bf2 (08:38): heh",
        "06cb330920ae58e1614c9145d983b3d6 (08:38): it survives but gets annoyed",
        "6a8ca7ce228632a45b077b5398962bf2 (08:40): nn",
        "0fe8692be7a494c6561f745b9f3b0d17 (08:50): damn it....opera mobile is just too damn slick",
        "19685048ab49226517b9e214a6e971f6 (08:54): paul_irish: yo yt",
        "19685048ab49226517b9e214a6e971f6 (08:54): 6a8ca7ce228632a45b077b5398962bf2: YO MAN",
        "19685048ab49226517b9e214a6e971f6 (08:54): 0fe8692be7a494c6561f745b9f3b0d17: yo we gotta talk",
        "19685048ab49226517b9e214a6e971f6 (08:55): 6a8ca7ce228632a45b077b5398962bf2: i gotta catch u up to speed",
        "19685048ab49226517b9e214a6e971f6 (08:55): 6a8ca7ce228632a45b077b5398962bf2: we won 1st place for that idea in our univ's entrepreneurship's competition",
        "0fe8692be7a494c6561f745b9f3b0d17 (08:56): i didn't do it!",
        "0fe8692be7a494c6561f745b9f3b0d17 (08:56): ok i admit, me liking opera mobile is in fact true, but i can claim firefox",
        "0fe8692be7a494c6561f745b9f3b0d17 (08:57): i can negotiate to lie to 20 people",
        "0fe8692be7a494c6561f745b9f3b0d17 (08:59): *grovels*"
    ],
    "person_ids": [
        "6a8ca7ce228632a45b077b5398962bf2",
        "0fe8692be7a494c6561f745b9f3b0d17",
        "06cb330920ae58e1614c9145d983b3d6",
        "19685048ab49226517b9e214a6e971f6"
    ]
}