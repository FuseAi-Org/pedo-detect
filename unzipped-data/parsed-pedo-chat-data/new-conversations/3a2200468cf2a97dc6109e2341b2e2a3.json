{
    "id": "3a2200468cf2a97dc6109e2341b2e2a3",
    "messages": [
        "73eaf221abca1b8244e34b0b9e76ac46 (11:48): b8810fee2f4a71f849f3f7409546d1d9: the spoon feed bug is about the xml parser",
        "73eaf221abca1b8244e34b0b9e76ac46 (11:48): b8810fee2f4a71f849f3f7409546d1d9: innerHTML says to feed the xml parser the string of a start tag and an end tag, iirc",
        "b8810fee2f4a71f849f3f7409546d1d9 (11:59): 73eaf221abca1b8244e34b0b9e76ac46: ok. oops.",
        "73eaf221abca1b8244e34b0b9e76ac46 (12:02): wow validator.w3.org seems to say that anything is valid html5",
        "73eaf221abca1b8244e34b0b9e76ac46 (12:02): way to go",
        "b25b6b77a0087ff8385941e5545d32ea (12:06): def validate(document): return True",
        "b25b6b77a0087ff8385941e5545d32ea (12:07): why did that take b8810fee2f4a71f849f3f7409546d1d9 so long?",
        "b25b6b77a0087ff8385941e5545d32ea (12:07): I mean I know java is verbose, but even so...",
        "b25b6b77a0087ff8385941e5545d32ea (12:07): ;)",
        "73eaf221abca1b8244e34b0b9e76ac46 (12:10): now it's confirmed that html5 makes tag soup legal",
        "73eaf221abca1b8244e34b0b9e76ac46 (12:10): and D.E, too",
        "b25b6b77a0087ff8385941e5545d32ea (12:11): Hmm seems to wfm in that I get errors reported",
        "b25b6b77a0087ff8385941e5545d32ea (12:11): (using Text Field)",
        "73eaf221abca1b8244e34b0b9e76ac46 (12:12): you need detect automatically",
        "73eaf221abca1b8244e34b0b9e76ac46 (12:13): and a doctype that triggers html5 validation",
        "b25b6b77a0087ff8385941e5545d32ea (12:14): Erm, I may have been using validator.nu rahter than validator.w3.org. I lose.",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:16): hi all!",
        "73eaf221abca1b8244e34b0b9e76ac46 (12:16): hi a5ae94eea63b2e45b153f1e87a0c3d62",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:16): Has anyone ever talked about private/public hashing for INPUT tags for HTML5 ?",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:17): I'm about to write out my idea into a blog post, but wanted to know if anyone else had started work or proposal on this type of thing",
        "ef6f2287bae00ba79475fbf56c2b6fee (12:17): a5ae94eea63b2e45b153f1e87a0c3d62: Maybe ... what sort of hashing? for what?",
        "73eaf221abca1b8244e34b0b9e76ac46 (12:17): &lt;input value=#&gt;",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:18): Most people use Javascript right now to do client-side hashing of things like passwords",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:18): Like sending some salt and then doing MD5 in Javascript",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:18): To avoid sending the password over the wire",
        "ef6f2287bae00ba79475fbf56c2b6fee (12:18): right like this: http://drupal.org/node/36793 ?",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:19): I haven't seen that, but from scanning it sounds like what I'm talking about",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:19): I see it re-created all the time and thought it deserves a non-scripting solution",
        "ef6f2287bae00ba79475fbf56c2b6fee (12:20): I remember various discussion of hashing like http://www.blooberry.com/indexdot/html/tagpages/k/keygen.htm but I don't recall a discussion of singling out a field and converting it to a hash before sendng.",
        "ef6f2287bae00ba79475fbf56c2b6fee (12:20): ah ha",
        "ef6f2287bae00ba79475fbf56c2b6fee (12:20): a5ae94eea63b2e45b153f1e87a0c3d62: http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2007-August/012385.html",
        "ef6f2287bae00ba79475fbf56c2b6fee (12:20): so yes, it has been discussed",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:21): one important thing is that it should be capable of doing salt",
        "ef6f2287bae00ba79475fbf56c2b6fee (12:21): so I guess search the archives for related discussion :)",
        "ab7faae5d7b250ea8606486575f8f79c (12:21): guesses that the conclusion of the discussion was &quot;if you care about security at all, use HTTPS&quot;",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:22): Thanks I'm reading the mailing list now",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:22): HTTPS is broken",
        "ab7faae5d7b250ea8606486575f8f79c (12:22): Less broken than HTTP :-)",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:22): I can sign PayPals cert...",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:22): Its obfustication now IMO",
        "ef6f2287bae00ba79475fbf56c2b6fee (12:23): HTTPS does mean you aren't sending unencrypted traffic over the wire.",
        "ef6f2287bae00ba79475fbf56c2b6fee (12:23): It just doesn't guarantee you aren't sending unencrypted traffic to the wrong destination.",
        "ef6f2287bae00ba79475fbf56c2b6fee (12:23): (in practice)",
        "ef6f2287bae00ba79475fbf56c2b6fee (12:24): so ... wouldn't one have the same problem with a salted password?",
        "ef6f2287bae00ba79475fbf56c2b6fee (12:24): is not a security expert, I should hasten to add.",
        "ab7faae5d7b250ea8606486575f8f79c (12:27): vaguely remembers the issues with fake cert signing simply being about MD5, which is easily solved by using better hashing algorithms (which already work perfectly well in HTTPS)",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:27): The failures aren't the same",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:28): When SSL fails you get the plain text password",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:28): (Because it was transmitted)",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:28): If this is broken you at best get a subset of what the password could have been, if you wasted enough FLOPS to break the hash",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:28): Which also assumes you busted the salting technique",
        "ab7faae5d7b250ea8606486575f8f79c (12:29): With HTTP, an attacker can easily intercept the response and send you a version of the HTML page that doesn't have the hashing enabled on the password input",
        "ab7faae5d7b250ea8606486575f8f79c (12:29): and so you type your password in and the attacker gets it in plain text",
        "ef6f2287bae00ba79475fbf56c2b6fee (12:29): a5ae94eea63b2e45b153f1e87a0c3d62: But, if the endpoint is using (say) an MD5 hash to authenticate, and a middleman grabs your MD5 hash, can't the middleman use that to authenticate?",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:29): ab7faae5d7b250ea8606486575f8f79c: You can't use old technology to justify not creating new technology",
        "ef6f2287bae00ba79475fbf56c2b6fee (12:30): a5ae94eea63b2e45b153f1e87a0c3d62: You can if the proposed new technology doesn't solve problems the old one doesn't.",
        "ef6f2287bae00ba79475fbf56c2b6fee (12:30): *old one does.",
        "ef6f2287bae00ba79475fbf56c2b6fee (12:30): or doesn't solve any new problems.",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:30): ef6f2287bae00ba79475fbf56c2b6fee: In my proposal the salt would actually not be transmitted over the wire but would be a truely private key, such as when the user registered",
        "ef6f2287bae00ba79475fbf56c2b6fee (12:31): a5ae94eea63b2e45b153f1e87a0c3d62: what would be sent over the wire? what would prevent a middleman sending the same thing over the wire?",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:31): ab7faae5d7b250ea8606486575f8f79c's scenario would keep the new technology from being created because the old technology can enable a flaw. The old (unsecure) tech should be deprecated",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:32): ef6f2287bae00ba79475fbf56c2b6fee: All that would be sent over the wire is a hash of the INPUT data and a salt",
        "ab7faae5d7b250ea8606486575f8f79c (12:41): a5ae94eea63b2e45b153f1e87a0c3d62: It would keep new technology from being created when its purpose is undermined by flaws in the current technology that it relies on and that hasn't been replaced yet",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:43): I think you're on a logically slippery slope there",
        "002fd66affb058c756926402acf97570 (12:44): falls flat on his face",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:45): A neat solution for that attack would be to force the salt to be based on the content delivered",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:45): (or part of a composite salt)",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:46): So the server delivers you content and saves the salt of the content delivered in server session for later verification",
        "ab7faae5d7b250ea8606486575f8f79c (12:49): What is &quot;the content&quot;?",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:50): the document",
        "ab7faae5d7b250ea8606486575f8f79c (12:50): If you're using an insecure protocol like HTTP, the attacker could just replace the content of an external script that your page includes, to make it send the user's password to them",
        "ab7faae5d7b250ea8606486575f8f79c (12:50): even if the page itself can't change",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:51): By &quot;replace the content of an external script&quot;, do you mean change a script on my host?",
        "ab7faae5d7b250ea8606486575f8f79c (12:52): I mean change the content delivered to the user in response to their request for the script",
        "ab7faae5d7b250ea8606486575f8f79c (12:53): (as a MITM attack)",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:54): The hashing wouldn't be done in a script",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:54): Thats the point of this &quot;proposal&quot;",
        "ab7faae5d7b250ea8606486575f8f79c (12:55): I mean change the script to do &quot;onload = function () { document.getElementById('hashed-password').removeAttribute('hash'); }&quot; or similar",
        "ab7faae5d7b250ea8606486575f8f79c (12:56): so that the user's browser won't hash the password",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (12:57): And instead submit to the attacker",
        "ab7faae5d7b250ea8606486575f8f79c (12:57): Yes, or send it unencrypted to the original server so the attacker can read it, or whatever",
        "ab7faae5d7b250ea8606486575f8f79c (12:58): (I'm assuming the attacker can read and modify all unencrypted content passing between the client and server)",
        "a924fb58d2c25874322f4e5126f608b9 (12:59): If the attacker can control the content, you've already lost",
        "ab7faae5d7b250ea8606486575f8f79c (13:01): Not really, because you can use encryption to know that you're talking to the server and not the attacker",
        "ab7faae5d7b250ea8606486575f8f79c (13:01): but it seems unlikely to work unless the entire session is encrypted",
        "ab7faae5d7b250ea8606486575f8f79c (13:02): (and also you need some way to verify identities of servers, which doesn't work so well nowadays)",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (13:03): If something like this was adopted I would expect browsers to warn when sending unencrypted passwords more violently",
        "73eaf221abca1b8244e34b0b9e76ac46 (13:03): if you care about security, you should hand over the password in person",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (13:03): Or deprecated/remove the behaviour",
        "a924fb58d2c25874322f4e5126f608b9 (13:04): ab7faae5d7b250ea8606486575f8f79c: How can you verify anything when the attacker can just MITM anything?",
        "ab7faae5d7b250ea8606486575f8f79c (13:04): a924fb58d2c25874322f4e5126f608b9: The attacker can't MITM anything, unless they put your brain in a vat and control all your sensory inputs",
        "a924fb58d2c25874322f4e5126f608b9 (13:04): Any client-side code is provided by the attacker",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (13:04): Either way I find it hard to justify keeping the behaviour of sending the password as (obfusticated) text",
        "a924fb58d2c25874322f4e5126f608b9 (13:05): ab7faae5d7b250ea8606486575f8f79c: They can MITM anything on the client end of the browsing session",
        "ab7faae5d7b250ea8606486575f8f79c (13:08): a924fb58d2c25874322f4e5126f608b9: They can MITM your internet connections for some period of time, but it's reasonable to assume that e.g. they didn't alter your installation of CD of Windows, and that means they didn't alter your OS's root certificate store, and you assume they didn't get Microsoft to install fake certificates, etc",
        "ab7faae5d7b250ea8606486575f8f79c (13:08): s/of CD/CD/",
        "a924fb58d2c25874322f4e5126f608b9 (13:08): ab7faae5d7b250ea8606486575f8f79c: Unsecure connection was a premise here, wasn't it?",
        "ab7faae5d7b250ea8606486575f8f79c (13:08): and you assume certificate authorities are perfect",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (13:09): I understand where everyone is going with this, but does it really justify continuing to send passwords as obfuscated plain text ?",
        "ab7faae5d7b250ea8606486575f8f79c (13:10): a924fb58d2c25874322f4e5126f608b9: I think the premise was a combination of insecure and secure parts of the connection (e.g. sending the password 'securely')",
        "a924fb58d2c25874322f4e5126f608b9 (13:10): I thought the premise was trying to do secure communication on an insecure connection",
        "ab7faae5d7b250ea8606486575f8f79c (13:11): TCP is an insecure connection but you can do secure communication over it using SSL",
        "a924fb58d2c25874322f4e5126f608b9 (13:11): Because you control the code on your endpoint",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (13:11): a924fb58d2c25874322f4e5126f608b9: ab7faae5d7b250ea8606486575f8f79c believes that a more secure password authentication that doesn't send the password over the wire, and instead sends a hash, is not worth having because the MITM can just rely on deprecated behaviour",
        "a924fb58d2c25874322f4e5126f608b9 (13:11): With a webpage, you're using code provided by an unknown party",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (13:12): ab7faae5d7b250ea8606486575f8f79c: I remind you again that SSL is broken",
        "ab7faae5d7b250ea8606486575f8f79c (13:12): a5ae94eea63b2e45b153f1e87a0c3d62: I don't think it justifies that, but I think the point is it doesn't justify spending effort on a solution that doesn't actually solve the problem in practice (due to flaws in the underlying technology) - the effort would be better spent on a solution that has a much better chance of working and isn't fundamentally broken, like SSL",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (13:13): I disagree, because we'll be putting faith once again in another technology like SSL, that when/if broken will give access to plaintext passwords again.",
        "ab7faae5d7b250ea8606486575f8f79c (13:13): (Uh, I mean that something like SSL isn't fundamentally broken)",
        "ab7faae5d7b250ea8606486575f8f79c (13:13): (and didn't mean to imply the opposite)",
        "ab7faae5d7b250ea8606486575f8f79c (13:14): a924fb58d2c25874322f4e5126f608b9: You're using code provided by your favourite browser vendor, who might be able to implement features that ensure communication is secure",
        "ab7faae5d7b250ea8606486575f8f79c (13:14): in theory",
        "ab7faae5d7b250ea8606486575f8f79c (13:15): (though in practice there's so much flexibility allowed to scripts that the only solution that seems feasible is to encrypt the entire session)",
        "73eaf221abca1b8244e34b0b9e76ac46 (13:16): maybe the attacker could modify the browser and push it onto the user with autoupdate",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (13:16): Again though, &quot;doesn't actually solve the problem in practice&quot; only because of deprecated old technology",
        "ab7faae5d7b250ea8606486575f8f79c (13:17): &quot;deprecated old technology&quot; is what exists in practice so we have to deal with it :-)",
        "ab7faae5d7b250ea8606486575f8f79c (13:17): 73eaf221abca1b8244e34b0b9e76ac46: Autoupdates are signed",
        "ab7faae5d7b250ea8606486575f8f79c (13:17): or at least I hope they are, because browser developers can't be idiots",
        "ab7faae5d7b250ea8606486575f8f79c (13:18): so they're guaranteed to be safe by the person who you originally trusted to download the browser from",
        "002fd66affb058c756926402acf97570 (13:19): ab7faae5d7b250ea8606486575f8f79c: I'm an idiot.",
        "ab7faae5d7b250ea8606486575f8f79c (13:19): 002fd66affb058c756926402acf97570: I mean collectively, not each individual",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (13:20): is probably dumber",
        "a5ae94eea63b2e45b153f1e87a0c3d62 (13:20): STUPID WAR!",
        "73eaf221abca1b8244e34b0b9e76ac46 (13:23): 002fd66affb058c756926402acf97570: you're not a browser developer",
        "002fd66affb058c756926402acf97570 (13:23): 73eaf221abca1b8244e34b0b9e76ac46: True.",
        "002fd66affb058c756926402acf97570 (13:23): 73eaf221abca1b8244e34b0b9e76ac46: I just find their mistakes.",
        "73eaf221abca1b8244e34b0b9e76ac46 (13:25): have you found any autoupdate mistakes?",
        "002fd66affb058c756926402acf97570 (13:25): YEs",
        "002fd66affb058c756926402acf97570 (13:25): *Yes",
        "ab7faae5d7b250ea8606486575f8f79c (13:27): Were you responsible for finding the mistake that autoupdate didn't exist?",
        "002fd66affb058c756926402acf97570 (13:29): No",
        "ab7faae5d7b250ea8606486575f8f79c (13:29): I suppose that was a subtle one and easy to miss",
        "b25b6b77a0087ff8385941e5545d32ea (13:38): ab7faae5d7b250ea8606486575f8f79c: He didn't say he missed it just that he didn't have responsibility for noticing it"
    ],
    "person_ids": [
        "73eaf221abca1b8244e34b0b9e76ac46",
        "b8810fee2f4a71f849f3f7409546d1d9",
        "b25b6b77a0087ff8385941e5545d32ea",
        "a5ae94eea63b2e45b153f1e87a0c3d62",
        "ef6f2287bae00ba79475fbf56c2b6fee",
        "ab7faae5d7b250ea8606486575f8f79c",
        "002fd66affb058c756926402acf97570",
        "a924fb58d2c25874322f4e5126f608b9"
    ]
}