{
    "id": "5c3434b3dcdf602c2e5286b0d9497386",
    "messages": [
        "88d4d34a8064a4ff39fd5e144eea7762 (17:20): &quot;User agents may wait for a suitable break in the user's interaction before queuing the task; for example, a user agent could wait for the user to have not hit a key for 100ms, so as to only fire the event when the user pauses, instead of continuously for each keystroke.&quot;",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:21): So I guess this means we need to use onkeypress or onkeyup instead of oninput?",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:21): If we really want to have it be per key.",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:24): I guess there's no event that fires after the input has happened, so that it will reliably fire once each keystroke and event.target.value will be the current value?",
        "ab7faae5d7b250ea8606486575f8f79c (17:25): Why would you want such a thing?",
        "ab7faae5d7b250ea8606486575f8f79c (17:25): What do you expect it to do with input methods where you use multiple keystrokes to insert a single character?",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:26): Just give the current value after whatever the user just entered.  Really I want an event whenever the contents of the form field change, with the new value of the field.",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:26): For using &lt;datalist&gt;.",
        "ab7faae5d7b250ea8606486575f8f79c (17:26): Why is 100ms latency unacceptable?",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:26): I want to dispatch the new contents to my backend to ask for suggestions.",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:27): Because the result has to be thrown out if the form value is no longer the same when the suggestion returns, and there already may be a significant round-trip delay.",
        "ab7faae5d7b250ea8606486575f8f79c (17:27): You'd have to implement some kind of buffering yourself anyway, because you don't want to send a request to the backend after every keystroke if the user's typing really really fast and has a dialup connection",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:29): tries to figure out if MW already buffers",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:30): It looks like we usually wait 250 ms, except if the user hits the down arrow.",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:31): We use keyup, keydown, keypress, blur, and focus, but of course we also use a &lt;div&gt; positioning hack right now to generate the results.",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:31): Probably we don't need to hook blur and focus with datalist.",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:31): Using datalists via JS is really ugly, by the way.",
        "ab7faae5d7b250ea8606486575f8f79c (17:31): Given that pages will have to implement some kind of buffering if some browsers don't buffer themselves, it seems silly for the spec to say &quot;may&quot; - it should require buffering for all browsers or none",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:32): I'd really prefer just input.suggest = ['Foo', 'Bar'] instead of creating a datalist element, making up an id, giving it the id, setting the input's list attribute, and looping through the result list to add &lt;option&gt; children.",
        "ab7faae5d7b250ea8606486575f8f79c (17:32): (maybe)",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:32): Anyway, yeah, &quot;may&quot; is a pain.",
        "ab7faae5d7b250ea8606486575f8f79c (17:33): Author feedback from attempting to use the element is a good thing to have :-)",
        "f139aba52f9fa1394b4034a7954b2220 (17:34): 88d4d34a8064a4ff39fd5e144eea7762, datalist is useful to have when the choices are a fixed list, so they can just be listed in the page and not have to worry about being modified by scripts",
        "f139aba52f9fa1394b4034a7954b2220 (17:34): but maybe we need an optimised API for the scripted use cases that dynamically change the list",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:34): f139aba52f9fa1394b4034a7954b2220, when does that actually happen?  I can't think of a real-world page where it would be useful.",
        "f139aba52f9fa1394b4034a7954b2220 (17:34): html5.lachy.id.au has uses a fixed list",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:34): The only use-case I can see for this is suggestions generated as the user types.",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:35): Interesting.",
        "f139aba52f9fa1394b4034a7954b2220 (17:35): also, another simple case is a form requesting personal details.  The title field could offer defaults of Mr, Mrs, Ms, etc. but still allow users to type in their own",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:35): Okay, granted, it has some uses, but the script use case seems a lot more compelling.",
        "ab7faae5d7b250ea8606486575f8f79c (17:35): 88d4d34a8064a4ff39fd5e144eea7762: Normal UI widget systems have combo boxes, which seem to be what this is similar to",
        "ab7faae5d7b250ea8606486575f8f79c (17:35): and they're used in lots of places",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:35): I've seen plenty of sites hack up their own absolutely-positioned divs to do dynamic search suggestions, never seen anyone try it to suggest MIME types or honorifics.",
        "ab7faae5d7b250ea8606486575f8f79c (17:35): like, um,",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:36): I still don't know what a combobox is.",
        "ab7faae5d7b250ea8606486575f8f79c (17:36): fails to think of compelling examples of static lists",
        "ab7faae5d7b250ea8606486575f8f79c (17:36): 88d4d34a8064a4ff39fd5e144eea7762: It's just a dropdown list you can type arbitrary text into",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:37): Hmm, okay.",
        "ef6f2287bae00ba79475fbf56c2b6fee (17:37): Rationale: maximize conformity of input without enforcing uniformity.",
        "ef6f2287bae00ba79475fbf56c2b6fee (17:37): e.g. by offering a carot against entry of multiple spellings of a thing",
        "ab7faae5d7b250ea8606486575f8f79c (17:38): Hmm, the only one I can easily find in my currently-open applications is a &quot;Default Graphic Extension&quot; configuration, which offers eps/pdf/png/jpg/tif but lets you type in other values if you want",
        "f139aba52f9fa1394b4034a7954b2220 (17:40): 88d4d34a8064a4ff39fd5e144eea7762, a combobox is just a select list, but which also allows users to type in other values.  Your browsers address bar is bascially an example of this.",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:40): Interesting.",
        "f139aba52f9fa1394b4034a7954b2220 (17:41): ordinarily, they have drop down arrows on the side, but unfortunatley, Opera's datalist implementation omitted this for some reason",
        "ab7faae5d7b250ea8606486575f8f79c (17:42): Scripted search suggestions typically don't have arrows on the side",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:42): Maybe there should be an entirely separate JS-only interface for scripted search suggestions?",
        "f139aba52f9fa1394b4034a7954b2220 (17:42): 88d4d34a8064a4ff39fd5e144eea7762, HTMLSelectElement contains APIs for add() and remove(), that simply the process of adding and removing options. Would those help if they were available on datalist, or would you like a more optimised alternative?",
        "ab7faae5d7b250ea8606486575f8f79c (17:42): Seems problematic if the same HTML control is meant to be used for all the cases",
        "f139aba52f9fa1394b4034a7954b2220 (17:44): yeah, I suppose. Perhaps that issue is best handled with CSS using the 'appearance' property.",
        "f139aba52f9fa1394b4034a7954b2220 (17:44): appearance: combo-box; is already defined in the spec",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:45): f139aba52f9fa1394b4034a7954b2220, I'd really just like to be able to do input.suggest = ['foo', 'bar'].  I don't see why it should need to be more complicated than that.",
        "f139aba52f9fa1394b4034a7954b2220 (17:46): how would that interact with the suggestions from the datalist element, if both were used together?",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:46): I'd expect the scripted results would override the datalist ones.",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:46): But I dunno, just don't use them together.  :)",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:47): Doesn't matter much for authors, it just needs to be unambiguous.",
        "f139aba52f9fa1394b4034a7954b2220 (17:47): maybe it could merge the two sets of suggestions, like Firefox's search box does, when it lists previous searches, then a separator line, and then the google suggest results.",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:47): I dunno.  It's hard to say without use-cases.",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:48): I mean, maybe the browser could merge datalist suggestions with its own too, right?",
        "f139aba52f9fa1394b4034a7954b2220 (17:48): yeah, I think the spec says it can do that",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:48): Actually, I guess the spec permits that, doesn't it?",
        "ab7faae5d7b250ea8606486575f8f79c (17:49): Are people really going to use datalist if its behaviour is so unpredictable?",
        "ab7faae5d7b250ea8606486575f8f79c (17:50): I'd hope it works consistently everywhere, otherwise people would be better off writing their own implementations in JS",
        "f139aba52f9fa1394b4034a7954b2220 (17:50): for existing scripted implementations, do you know what the responses from the server looks like? Do they commonly just return JSON, or even just an serialised array, and then use eval(...) to parse it?",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:50): f139aba52f9fa1394b4034a7954b2220, that's what mwsuggest.js does.",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:50): JSON in our case.",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:50): So allowing a literal list to be assigned would be ideal.",
        "f139aba52f9fa1394b4034a7954b2220 (17:51): ok. Do you know what Google Suggest uses?",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:51): No idea.",
        "ab7faae5d7b250ea8606486575f8f79c (17:54): http://www.google.com/complete/search?q=what",
        "f139aba52f9fa1394b4034a7954b2220 (17:56): I found an article explaining it http://serversideguy.blogspot.com/2004/12/google-suggest-dissected.html",
        "ab7faae5d7b250ea8606486575f8f79c (17:59): It's changed a little bit since 2004",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:59): Interesting that they just use a loop instead of key events.",
        "88d4d34a8064a4ff39fd5e144eea7762 (17:59): Er, right, used.",
        "f139aba52f9fa1394b4034a7954b2220 (18:02): 88d4d34a8064a4ff39fd5e144eea7762, does your use case involve replacing the entire suggestion list each time the data is updated, or would you want the ability to selectively add and remove options?",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:03): f139aba52f9fa1394b4034a7954b2220, replacing the whole thing is fine, typically.",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:03): If it's just a list, I don't see why you couldn't use normal list methods, though.",
        "ab7faae5d7b250ea8606486575f8f79c (18:04): Are there any existing list-taking APIs in HTML?",
        "ab7faae5d7b250ea8606486575f8f79c (18:05): Seems tricky to make the reflection work right",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:06): Why would it be tricky?",
        "ab7faae5d7b250ea8606486575f8f79c (18:06): e.g. if people say x=[]; input.suggest=x; x.push('cheese'); // does suggest update?",
        "ab7faae5d7b250ea8606486575f8f79c (18:06): or x=input.suggest; x.push('cheese'); // does suggest update?",
        "ab7faae5d7b250ea8606486575f8f79c (18:06): or input.suggest.push('cheese'); // surely this should update?",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:06): Don't the same questions apply to strings?",
        "ab7faae5d7b250ea8606486575f8f79c (18:06): No",
        "ab7faae5d7b250ea8606486575f8f79c (18:06): Strings are immutable",
        "f139aba52f9fa1394b4034a7954b2220 (18:06): I don't think that would work.",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:06): Hmm.",
        "ab7faae5d7b250ea8606486575f8f79c (18:07): Immutability makes everything easy",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:07): So every single API in HTML only takes immutable objects?",
        "ab7faae5d7b250ea8606486575f8f79c (18:07): (Well, everything except mutations)",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:07): Just say it copies the list on assignment, if you want.",
        "f139aba52f9fa1394b4034a7954b2220 (18:08): I'd expect input.suggest to use a specialised interface, not a normal array",
        "ab7faae5d7b250ea8606486575f8f79c (18:08): 88d4d34a8064a4ff39fd5e144eea7762: They take immutable strings/numbers, or objects with special interfaces that define their own mutation semantics",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:08): f139aba52f9fa1394b4034a7954b2220, as long as you can assign an array to it and have it work, be auto-converted or such.  Does that sound reasonable?",
        "f139aba52f9fa1394b4034a7954b2220 (18:08): but I would expect the setter for input.suggest to accept an array, and to return a collection on getting.",
        "f139aba52f9fa1394b4034a7954b2220 (18:08): not sure what type of collection to return though",
        "ab7faae5d7b250ea8606486575f8f79c (18:09): 88d4d34a8064a4ff39fd5e144eea7762: If it copies the list on assignment, would you still expect normal list methods to work? (input.suggest.push etc)",
        "f139aba52f9fa1394b4034a7954b2220 (18:09): 88d4d34a8064a4ff39fd5e144eea7762, I suggest you clearly document the use case and problem to be solved, and document the proposed solution along with it.",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:09): k.",
        "f139aba52f9fa1394b4034a7954b2220 (18:09): write it up in the wiki",
        "88d4d34a8064a4ff39fd5e144eea7762 (18:09): I was planning on posting to whatwg.",
        "f139aba52f9fa1394b4034a7954b2220 (18:09): yeah, that'll do too"
    ],
    "person_ids": [
        "88d4d34a8064a4ff39fd5e144eea7762",
        "ab7faae5d7b250ea8606486575f8f79c",
        "f139aba52f9fa1394b4034a7954b2220",
        "ef6f2287bae00ba79475fbf56c2b6fee"
    ]
}