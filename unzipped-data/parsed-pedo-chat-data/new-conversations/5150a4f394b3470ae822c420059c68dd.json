{
    "id": "5150a4f394b3470ae822c420059c68dd",
    "messages": [
        "a480104b0e570389c6f4284a88c7cd9d (16:02): hisvonen: re: &quot;an eye towards translation to C++&quot;, for some values of C++ perhaps.  :-)",
        "a480104b0e570389c6f4284a88c7cd9d (16:02): example: the code generated today depends heavily on the mozilla classes and on assumptions like utf-16.",
        "b25b6b77a0087ff8385941e5545d32ea (16:03): a480104b0e570389c6f4284a88c7cd9d: Is it the code generated that depends heavilly on those assumptions or the code generating?",
        "b25b6b77a0087ff8385941e5545d32ea (16:04): Because the former seems less of a problem than the latter",
        "a480104b0e570389c6f4284a88c7cd9d (16:04): the former, but it makes it rather difficult for somebody else to pick up from there and take it in a different direction.",
        "a480104b0e570389c6f4284a88c7cd9d (16:04): at least for this someone :-)",
        "edb259c0e0038f38bb200bc20c8cbf7e (16:04): but you could hack the translator maybe?",
        "b25b6b77a0087ff8385941e5545d32ea (16:05): a480104b0e570389c6f4284a88c7cd9d: I would have thought that e.g. a notional v.nu -&gt; python translation would en up depending a lot on python APIs and the Python string type in particular",
        "a480104b0e570389c6f4284a88c7cd9d (16:05): I generally don't give up easily, and that was my thoughts, but it looked too difficult (read: more than a weekend project to get even small results) for me at the time.",
        "a480104b0e570389c6f4284a88c7cd9d (16:06): b25b6b77a0087ff8385941e5545d32ea: that's exactly what I want to be working on.",
        "b25b6b77a0087ff8385941e5545d32ea (16:06): a480104b0e570389c6f4284a88c7cd9d: I know :)",
        "b25b6b77a0087ff8385941e5545d32ea (16:06): (which would be really cool btw)",
        "a480104b0e570389c6f4284a88c7cd9d (16:07): I was hoping that hsivonen was still around.  Because a command line tokenizer that worked with the mozilla class libraries might be something smaller that, if I saw how that worked, I could start with.",
        "a480104b0e570389c6f4284a88c7cd9d (16:07): by that I mean, just the tokenizer.  The rest could be added in a second pass.",
        "a480104b0e570389c6f4284a88c7cd9d (16:08): A third pass could be pythonic (elementtree, etc)",
        "b25b6b77a0087ff8385941e5545d32ea (16:09): You could probably hook a standalone tokenizer in to html5lib fairly easilly",
        "ab7faae5d7b250ea8606486575f8f79c (16:10): still kind of likes his OCaml tokeniser generator :-)",
        "b25b6b77a0087ff8385941e5545d32ea (16:10): s/n t/nt/",
        "ab7faae5d7b250ea8606486575f8f79c (16:10): (though it doesn't currently generate Python, only C++ and JS and Perl)",
        "a480104b0e570389c6f4284a88c7cd9d (16:10): ab7faae5d7b250ea8606486575f8f79c: does it pass the HTML5 tests?",
        "ab7faae5d7b250ea8606486575f8f79c (16:10): a480104b0e570389c6f4284a88c7cd9d: Some versions have passed all the tokeniser tests at some point in the past",
        "a480104b0e570389c6f4284a88c7cd9d (16:11): just the tokenizer tests?  That's somewhat less interesting.",
        "b25b6b77a0087ff8385941e5545d32ea (16:11): wonders how it could pass other tests without implementing a treebuilder",
        "ab7faae5d7b250ea8606486575f8f79c (16:11): It's a tokeniser, so it's not going to run any non-tokeniser tests :-)",
        "a480104b0e570389c6f4284a88c7cd9d (16:12): I'm interested in a tree builder.",
        "ab7faae5d7b250ea8606486575f8f79c (16:12): I have half of an OCaml tree builder generator, but that's not enough to actually be useful :-(",
        "b25b6b77a0087ff8385941e5545d32ea (16:13): ab7faae5d7b250ea8606486575f8f79c: Generating C++ is more useful than generating python if you can make python run that C++",
        "b25b6b77a0087ff8385941e5545d32ea (16:13): (unless the generated python is better than html5lib)",
        "a480104b0e570389c6f4284a88c7cd9d (16:14): generating python may be useful for other implementations of python (jython, pypy, etc)",
        "ab7faae5d7b250ea8606486575f8f79c (16:14): (By &quot;better&quot;, do you mean &quot;faster&quot;?)",
        "b25b6b77a0087ff8385941e5545d32ea (16:15): ab7faae5d7b250ea8606486575f8f79c: Faster would be one criterion, yes",
        "a480104b0e570389c6f4284a88c7cd9d (16:15): What appeals to me about Henri's is that it is likely to be maintained, so even if it isn't a better match technically, it appears to be the one to bet on.",
        "ab7faae5d7b250ea8606486575f8f79c (16:15): (If so, I'm not sure how to make it faster, since I've not seen any easily fixable bottlenecks in html5lib, and can't think of alternative ways of writing the code that would make it much faster)",
        "ab7faae5d7b250ea8606486575f8f79c (16:16): 's OCaml stuff is very much unmaintained, but he thinks it's a fun toy :-)",
        "ab7faae5d7b250ea8606486575f8f79c (16:17): hopes a pure-Python html5lib will always exist, because it's often a pain to use impure modules",
        "ab7faae5d7b250ea8606486575f8f79c (16:17): (e.g. in sandboxed environments where you can't use binary modules)",
        "edb259c0e0038f38bb200bc20c8cbf7e (16:17): or they ship a native version with Python",
        "a480104b0e570389c6f4284a88c7cd9d (16:18): edb259c0e0038f38bb200bc20c8cbf7e: +1",
        "a480104b0e570389c6f4284a88c7cd9d (16:19): to get it to ship with python, it might be helpful to move past &quot;draft&quot; stage at some point that's still useful.",
        "ab7faae5d7b250ea8606486575f8f79c (16:21): edb259c0e0038f38bb200bc20c8cbf7e: People still use Python 2.3 today, so having it added in Python 2.7 won't solve all the problems until many years in the future",
        "edb259c0e0038f38bb200bc20c8cbf7e (16:22): in that case they might not care whether html5lib is still maintained",
        "ab7faae5d7b250ea8606486575f8f79c (16:22): is thinking of things like Google App Engine, which are likely to be frozen at a particular version for a long time",
        "cc097e0d7183ae8436e7df709553c8c0 (16:22): f139aba52f9fa1394b4034a7954b2220: the spec already defines how to mutate the dom to make it xml-compatible",
        "a480104b0e570389c6f4284a88c7cd9d (16:22): This group seems to have some good contacts at Google.",
        "ab7faae5d7b250ea8606486575f8f79c (16:23): Has anyone pointed out that a document like &lt;script&gt;document.write('x')&lt;/script&gt; is impossible to serialise to a DOM that will be parsed back into the same DOM?",
        "ab7faae5d7b250ea8606486575f8f79c (16:24): (Well, impossible for a generic algorithm to serialise)",
        "edb259c0e0038f38bb200bc20c8cbf7e (16:24): or &lt;script&gt;document.body.appendChild(document.createElement(&quot;img&quot;))&lt;/script&gt;",
        "edb259c0e0038f38bb200bc20c8cbf7e (16:24): not sure anyone did that yet",
        "cc097e0d7183ae8436e7df709553c8c0 (16:28): you could have a view source that does a parse and serialize with no scripting support",
        "f139aba52f9fa1394b4034a7954b2220 (16:29): cc097e0d7183ae8436e7df709553c8c0, http://www.whatwg.org/specs/web-apps/current-work/#xml-fragment-serialization-algorithm defines that for things that would cause well formedness errors, throw an INVALID_STATE_ERR exception",
        "ab7faae5d7b250ea8606486575f8f79c (16:30): cc097e0d7183ae8436e7df709553c8c0: That would break pages like &lt;script&gt;document.write('&lt;table&gt;')&lt;/script&gt;&lt;tr&gt;&lt;td&gt;foo",
        "cc097e0d7183ae8436e7df709553c8c0 (16:30): f139aba52f9fa1394b4034a7954b2220: i was referring to http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#coercing-an-html-dom-into-an-infoset",
        "cc097e0d7183ae8436e7df709553c8c0 (16:30): ab7faae5d7b250ea8606486575f8f79c: yes",
        "f139aba52f9fa1394b4034a7954b2220 (16:31): oh, I wasn't aware of that section",
        "14af4ca97e316b17ea96286dc6882fd4 (16:38): maybe it should be written in RPython"
    ],
    "person_ids": [
        "a480104b0e570389c6f4284a88c7cd9d",
        "b25b6b77a0087ff8385941e5545d32ea",
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "ab7faae5d7b250ea8606486575f8f79c",
        "cc097e0d7183ae8436e7df709553c8c0",
        "f139aba52f9fa1394b4034a7954b2220",
        "14af4ca97e316b17ea96286dc6882fd4"
    ]
}