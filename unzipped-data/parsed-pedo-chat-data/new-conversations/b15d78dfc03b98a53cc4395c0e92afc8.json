{
    "id": "b15d78dfc03b98a53cc4395c0e92afc8",
    "messages": [
        "27dec4a1731ba7ef8f0ec965dd05d0a0 (11:30): is there a benchmarking module in the stdlib?",
        "9c20ec32e72accec26c2014d9a62b3a6 (11:30): There's timeit, but it might not be what you want.",
        "27dec4a1731ba7ef8f0ec965dd05d0a0 (11:31): i guess i could just write unittests and time them",
        "f3dbfec117987d168d9e024d285f750c (11:31): wow, actually writing unittests. That's pretty keen :)",
        "f3dbfec117987d168d9e024d285f750c (11:31): the profiler can give you some decent timing info",
        "27dec4a1731ba7ef8f0ec965dd05d0a0 (11:32): hmmm",
        "27dec4a1731ba7ef8f0ec965dd05d0a0 (11:32): well i'm in the process of porting about 120 unit tests to python",
        "27dec4a1731ba7ef8f0ec965dd05d0a0 (11:32): well, i'm 120 tests into a LOT of unittests, prob more like 300",
        "27dec4a1731ba7ef8f0ec965dd05d0a0 (11:32): maybe more :(",
        "27dec4a1731ba7ef8f0ec965dd05d0a0 (11:33): upon further inspection, change that to something closer to 1000 tests",
        "27dec4a1731ba7ef8f0ec965dd05d0a0 (11:33): :\\",
        "acd27b45dc3dd1e2235de68838749177 (11:39): hey guys, wondering if anyone here actively used python and cocoa, It looks to be in development.. but I would like to know how sane/stable it is.",
        "27dec4a1731ba7ef8f0ec965dd05d0a0 (12:01): timeit is hard to test classes with",
        "27dec4a1731ba7ef8f0ec965dd05d0a0 (12:01): :\\",
        "27dec4a1731ba7ef8f0ec965dd05d0a0 (12:01): i need to benchmark with methods from a testcase class",
        "27dec4a1731ba7ef8f0ec965dd05d0a0 (12:01): :|",
        "b3af409bb8423187c75e6c7f5b683908 (12:12): what's the difference between unicode.isdigit and unicode.isnumeric?",
        "f3dbfec117987d168d9e024d285f750c (12:23): I think numeric can include things like 1/5th",
        "f3dbfec117987d168d9e024d285f750c (12:23): (the unicode symbol for)",
        "8bece2647a39db763401c1e98abe5854 (12:24): oh, that would make sense.",
        "8bece2647a39db763401c1e98abe5854 (12:24): because it doesn't work for '1.0' or '-1'",
        "8bece2647a39db763401c1e98abe5854 (12:24): which was my first thought",
        "f3dbfec117987d168d9e024d285f750c (12:32): should this be as easy as using  @mydecorator   and at runtime assign an empty function to mydecorator?",
        "9c20ec32e72accec26c2014d9a62b3a6 (12:32): What's the best way to do something every time a given object changes state? Define __setattr__?",
        "f3dbfec117987d168d9e024d285f750c (12:32): or is there a more efficient way to do it",
        "f3dbfec117987d168d9e024d285f750c (12:32): jacob: I think so, yes",
        "9c20ec32e72accec26c2014d9a62b3a6 (12:32): That's what I figure also.",
        "a965fe34034879fe521e2e3ae6552da8 (12:37): I have a list of 3*N items. Could anubody suggest an elegant way to build a list of N items where each item is a list of three neighbours from the first list?",
        "ff9a0e89d53b13ba2184bfb30af29d83 (12:38): matrix",
        "b3af409bb8423187c75e6c7f5b683908 (12:40): HowardTheCoward: [foo[i:i+3] for i in range(0, len(foo), 3)]",
        "a965fe34034879fe521e2e3ae6552da8 (12:40): jml: ty",
        "209ebb52a0e330b9fc63aa149a821000 (12:53): HowardTheCoward, zip(**[foo[i::3] for i in xrange(3)])",
        "209ebb52a0e330b9fc63aa149a821000 (12:54): eh",
        "acd27b45dc3dd1e2235de68838749177 (12:54): hey guys, wondering if anyone here actively used python and cocoa, It looks to be in development.. but I would like to know how sane/stable it is?",
        "209ebb52a0e330b9fc63aa149a821000 (12:54): zip(*[foo[i::3] for i in xrange(3)]",
        "9c20ec32e72accec26c2014d9a62b3a6 (13:00): cracki: just out of curiosity, why xrange when the argument is a mere 3?",
        "209ebb52a0e330b9fc63aa149a821000 (13:00): out of habit",
        "209ebb52a0e330b9fc63aa149a821000 (13:00): i should break it anyway, because soon/py3k: range = xrange",
        "209ebb52a0e330b9fc63aa149a821000 (13:04): one could write a wrapper that takes an iterator and behaves like an iterator, but memoizes the elements and can act like a normal list if used that way",
        "209ebb52a0e330b9fc63aa149a821000 (13:05): so &gt;&gt;&gt; wrap(xrange(12345)) would dump the list, but using &quot;for x in wrap(...)&quot; if would just iterate and not hog memory",
        "209ebb52a0e330b9fc63aa149a821000 (13:05): (or rather, build up a list on the way instead of precomputing a list)",
        "82d4a5f22b7123eb2f0887a0de55481c (13:10): itertools.tee pretty much does that, but doesn't give you random access post-iteration afaik",
        "209ebb52a0e330b9fc63aa149a821000 (13:11): who needs it anyway. there should be ways for the interpreter to know how to optimize for each case."
    ],
    "person_ids": [
        "27dec4a1731ba7ef8f0ec965dd05d0a0",
        "9c20ec32e72accec26c2014d9a62b3a6",
        "f3dbfec117987d168d9e024d285f750c",
        "acd27b45dc3dd1e2235de68838749177",
        "b3af409bb8423187c75e6c7f5b683908",
        "8bece2647a39db763401c1e98abe5854",
        "a965fe34034879fe521e2e3ae6552da8",
        "ff9a0e89d53b13ba2184bfb30af29d83",
        "209ebb52a0e330b9fc63aa149a821000",
        "82d4a5f22b7123eb2f0887a0de55481c"
    ]
}