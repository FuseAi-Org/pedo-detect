{
    "id": "2483a6628a189bb68c0fe23d016a5f8f",
    "messages": [
        "edb259c0e0038f38bb200bc20c8cbf7e (21:38): hmm, maybe SSD will be able to solve the slow boot up times of computers",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:38): (as opposed to software)",
        "a924fb58d2c25874322f4e5126f608b9 (21:41): Isn't software the reason? :)",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:42): I'd think so, but I don't really know",
        "a924fb58d2c25874322f4e5126f608b9 (21:43): I know from experience that OS startup time increases with age, and I doubt my disks are getting slower",
        "f139aba52f9fa1394b4034a7954b2220 (21:47): hmm, I found this in my todo folder for selectors api. http://lists.w3.org/Archives/Public/public-webapi/2008May/0357.html Not sure how to deal with it, since I already responded to another thread on the same issue today saying the opposite",
        "f139aba52f9fa1394b4034a7954b2220 (21:48): ddd01b1de2f07d48d4953be350a7944c, as a JS library author, what seems most intuitive for you in regards to handling querySelector(null);? What the spec says, or what edb259c0e0038f38bb200bc20c8cbf7e is asking for (stringifying to &quot;null&quot;)?",
        "ddd01b1de2f07d48d4953be350a7944c (21:48): ew - stringifying sounds frightening",
        "ddd01b1de2f07d48d4953be350a7944c (21:49): querySelector(null) finds all null elements on the page? not feeling that, heh",
        "ddd01b1de2f07d48d4953be350a7944c (21:49): I'm fine with an exception",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:49): it accepts a DOMString after all",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:49): and null + &quot;x&quot; also gives &quot;nullx&quot;",
        "ddd01b1de2f07d48d4953be350a7944c (21:49): sure - and if something that isn't a DOMString is passed in an exception should be thrown",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:49): no",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:50): that's not how JS works",
        "f139aba52f9fa1394b4034a7954b2220 (21:50): no, any object is stringified using .toString()",
        "f139aba52f9fa1394b4034a7954b2220 (21:50): the spec just makes an exception for null and undefined",
        "ddd01b1de2f07d48d4953be350a7944c (21:51): then why are you asking me about null -&gt; &quot;null&quot; - it's obviously a done deal, then?",
        "f139aba52f9fa1394b4034a7954b2220 (21:51): I'm asking because edb259c0e0038f38bb200bc20c8cbf7e wants the spec to change and I'm not sure if I should.",
        "65325d50b2e25aca54bc871b89758c9c (21:51): the spec is a draft",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:52): I don't feel strongly about this issue, as there are APIs that work either way",
        "65325d50b2e25aca54bc871b89758c9c (21:52): nothing is a done deal, yet",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:52): though for new specs sticking with the default behavior makes more sense to me",
        "f139aba52f9fa1394b4034a7954b2220 (21:52): I just want to know if null should be stringified to &quot;null&quot; or &quot;&quot;",
        "f139aba52f9fa1394b4034a7954b2220 (21:52): IIRC, Opera using &quot;null&quot;, webkit uses &quot;&quot;",
        "65325d50b2e25aca54bc871b89758c9c (21:52): the way null and undefined convert to string in JS sucks, and it sucks more that DOM APIs are inconsistent about whether they treat null and/or undefined specially instead of using normal stringification rules",
        "ddd01b1de2f07d48d4953be350a7944c (21:52): going to &quot;&quot; would make sense, considering that we're expecting the behavior of qSA(null) to be the same as qSA(&quot;&quot;)",
        "65325d50b2e25aca54bc871b89758c9c (21:53): it is not a big hassle either way implementation-wise, as long as it is specified",
        "f139aba52f9fa1394b4034a7954b2220 (21:54): 65325d50b2e25aca54bc871b89758c9c, so would you prefer to apply normal stringification rules then?",
        "65325d50b2e25aca54bc871b89758c9c (21:54): I have no real preference other a desire for closure on this issue",
        "65325d50b2e25aca54bc871b89758c9c (21:55): since it is a new API, doing whatever is less error-prone makes sense",
        "f139aba52f9fa1394b4034a7954b2220 (21:55): it's a bikeshed. There can be no closure :-)",
        "ddd01b1de2f07d48d4953be350a7944c (21:55): null -&gt; &quot;&quot;, undefined -&gt; &quot;&quot;, (nothing) -&gt; &quot;&quot; fit well with what's currently specified",
        "ddd01b1de2f07d48d4953be350a7944c (21:55): and since &quot;&quot; throws an exception it'll be easy to handle",
        "a924fb58d2c25874322f4e5126f608b9 (21:56): My paint color: If the user is going to see the result, &quot;null&quot; is good. If it's just a parameter, we want null to mean nothing and that puts it with &quot;&quot;",
        "f139aba52f9fa1394b4034a7954b2220 (21:57): having null result in an exception may make it easier for debugging. Consider calling querySelctor(myVar); and getting zero results returned and not understanding that myVar was accidentally left set to null.",
        "ddd01b1de2f07d48d4953be350a7944c (21:58): f139aba52f9fa1394b4034a7954b2220: correct",
        "f139aba52f9fa1394b4034a7954b2220 (21:58): at least with an exception, it makes the error an obvious error, rather than a damn logic error that could go undetected.",
        "f139aba52f9fa1394b4034a7954b2220 (21:58): issue settled. Bikeshed painted a beautiful sky blue. :-)",
        "b07211a0c7cb119232799d2119cea90f (21:59): I say gray",
        "f139aba52f9fa1394b4034a7954b2220 (22:02): edb259c0e0038f38bb200bc20c8cbf7e, are you sure the raises thing in the IDL is optional?",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:04): yes",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:04): I'm positive it needs to be",
        "f139aba52f9fa1394b4034a7954b2220 (22:04): ok, in that case I'll remove it because it just makes the IDL more cluttered",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:05): indeed",
        "f139aba52f9fa1394b4034a7954b2220 (22:12): oh crap. I hate how we have a new mailing list. Now when I respond to old threads, I keep forgetting to change from public-webapi to public-webapps"
    ],
    "person_ids": [
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "a924fb58d2c25874322f4e5126f608b9",
        "f139aba52f9fa1394b4034a7954b2220",
        "ddd01b1de2f07d48d4953be350a7944c",
        "65325d50b2e25aca54bc871b89758c9c",
        "b07211a0c7cb119232799d2119cea90f"
    ]
}