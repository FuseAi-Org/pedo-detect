{
    "id": "4976919d6fd37dd428d6936286867c73",
    "messages": [
        "a3f19f90edf0a0893c7847d08016abe3 (01:41): 69b0d3dfe919a6b860a9fac82de52a7e, here now",
        "65325d50b2e25aca54bc871b89758c9c (01:42): f139aba52f9fa1394b4034a7954b2220: why :context instead of :scope?",
        "65325d50b2e25aca54bc871b89758c9c (01:42): (I asked by email too)",
        "03341ab0742a44ea0478cab05ca96cac (01:50): ddd01b1de2f07d48d4953be350a7944c: hey, it would really helpful if there was someway to figure out what each individual failure was testing specifically",
        "03341ab0742a44ea0478cab05ca96cac (01:51): ddd01b1de2f07d48d4953be350a7944c: I am not sure what things like FAIL: Fragment: childhood selector",
        "03341ab0742a44ea0478cab05ca96cac (01:51): ddd01b1de2f07d48d4953be350a7944c: means",
        "ddd01b1de2f07d48d4953be350a7944c (01:51): 03341ab0742a44ea0478cab05ca96cac: hmm - I wonder if I could do a stack trace or something",
        "03341ab0742a44ea0478cab05ca96cac (01:52): ddd01b1de2f07d48d4953be350a7944c: I was thinking more just what the actual call to querySelector or querySelectorAll was being passed",
        "03341ab0742a44ea0478cab05ca96cac (01:52): ddd01b1de2f07d48d4953be350a7944c: the specific string",
        "ddd01b1de2f07d48d4953be350a7944c (01:53): 03341ab0742a44ea0478cab05ca96cac: the pass/fail doesn't always associate with a direct query (most do) the one you cited, for example, is from a traversal through the document verifying the exact items that were matched were supposed to be matched",
        "03341ab0742a44ea0478cab05ca96cac (01:53): ddd01b1de2f07d48d4953be350a7944c: I see",
        "f139aba52f9fa1394b4034a7954b2220 (01:53): 65325d50b2e25aca54bc871b89758c9c, I thought it was a better name",
        "03341ab0742a44ea0478cab05ca96cac (01:53): ddd01b1de2f07d48d4953be350a7944c: perhaps that could be made more clear",
        "ddd01b1de2f07d48d4953be350a7944c (01:53): 03341ab0742a44ea0478cab05ca96cac: if a test is ever testing a selector directly then it's shown in the test result in parentheses",
        "03341ab0742a44ea0478cab05ca96cac (01:54): ddd01b1de2f07d48d4953be350a7944c: ah, I see that now",
        "f139aba52f9fa1394b4034a7954b2220 (01:54): 65325d50b2e25aca54bc871b89758c9c, I wouldn't mind changing it back to :scope, but I don't want this to become another naming debate either",
        "65325d50b2e25aca54bc871b89758c9c (01:55): f139aba52f9fa1394b4034a7954b2220: I liked :context better at first, but if we ever want to add a version of querySelector that prepends :scope/:context implicitly to each selector in the group (which I think we probably do, since it matches JS library semantics much better), queryScopedSelector would be a better name than queryContextualSelector",
        "65325d50b2e25aca54bc871b89758c9c (01:55): f139aba52f9fa1394b4034a7954b2220: other than that, don't care and was mostly curious",
        "f139aba52f9fa1394b4034a7954b2220 (01:58): 65325d50b2e25aca54bc871b89758c9c, I'm not yet convinced we need queryScopedSelector as well as this.",
        "65325d50b2e25aca54bc871b89758c9c (01:58): f139aba52f9fa1394b4034a7954b2220: I think there are two reasons we may still want it:",
        "65325d50b2e25aca54bc871b89758c9c (01:59): 1) otherwise JS libraries have to do rewriting of their incoming selectors, which is both slower and more error-prone in JS code than in native code",
        "65325d50b2e25aca54bc871b89758c9c (01:59): 2) without a way to access those syntax features directly, it becomes harder for authors to ever switch off the library wrappers to the native version, even once all browsers support it",
        "edb259c0e0038f38bb200bc20c8cbf7e (02:00): unless libraries support two versions",
        "65325d50b2e25aca54bc871b89758c9c (02:00): libraries support two versions of what?",
        "edb259c0e0038f38bb200bc20c8cbf7e (02:00): querySelector()",
        "edb259c0e0038f38bb200bc20c8cbf7e (02:00): but i've no opinion on this so i  should shut up :)",
        "65325d50b2e25aca54bc871b89758c9c (02:01): I don't understand how libraries supporting two versions makes a difference to either of my points",
        "65325d50b2e25aca54bc871b89758c9c (02:02): I guess if libraries support a non-scoped version, they don't have to do rewriting for that one, but presumably they do not want to drop their old features entirely, and authors do not want to stop using them",
        "edb259c0e0038f38bb200bc20c8cbf7e (02:05): my case was based on libraries offering two versions and authors switching to one that eventually allows them to just use querySelector",
        "edb259c0e0038f38bb200bc20c8cbf7e (02:05): anyway, like I said, I should not discuss this",
        "65325d50b2e25aca54bc871b89758c9c (02:07): it seems like neither libraries nor authors want to do that",
        "edb259c0e0038f38bb200bc20c8cbf7e (02:08): it was a rather hypothetical point, indeed",
        "f139aba52f9fa1394b4034a7954b2220 (02:14): 65325d50b2e25aca54bc871b89758c9c, would it make sense to have both queryScopedSelector and :context?",
        "f139aba52f9fa1394b4034a7954b2220 (02:14): oh, well, for scoped stylesheets in HTML5, yes. But for selectors api?",
        "65325d50b2e25aca54bc871b89758c9c (02:15): f139aba52f9fa1394b4034a7954b2220: I think so",
        "f139aba52f9fa1394b4034a7954b2220 (02:15): ok, fair enough",
        "65325d50b2e25aca54bc871b89758c9c (02:15): f139aba52f9fa1394b4034a7954b2220: the pseudo-class lets you do things that implicit scoping wouldn't",
        "f139aba52f9fa1394b4034a7954b2220 (02:15): I'll take another look at the idea over the next few days",
        "f139aba52f9fa1394b4034a7954b2220 (02:15): right",
        "65325d50b2e25aca54bc871b89758c9c (02:15): but implicit scoping is convenient and has evolved as a de facto standard in JS libraries",
        "65325d50b2e25aca54bc871b89758c9c (02:16): I think we should go along with it instead of fighting it, so long as the semantics can be defined soundly",
        "f139aba52f9fa1394b4034a7954b2220 (02:16): ok, fair enough. I&quot;ll talk to our developers about whether or not its implementable",
        "65325d50b2e25aca54bc871b89758c9c (02:16): a while back I sent a fairly simple algorithm that could be used to translate a scoped selector to a selector using :scope/:context",
        "65325d50b2e25aca54bc871b89758c9c (02:16): to public-webapi",
        "f139aba52f9fa1394b4034a7954b2220 (02:17): and then there was that issue of effectively redefining the grammar of selectors, which would probably result in some complaints from the CSSWG",
        "65325d50b2e25aca54bc871b89758c9c (02:17): 1. Initialize nesting level to 0",
        "65325d50b2e25aca54bc871b89758c9c (02:17): 2. Initialize the output string to the empty string",
        "65325d50b2e25aca54bc871b89758c9c (02:17): 3. While characters in the input string remain:",
        "65325d50b2e25aca54bc871b89758c9c (02:17): 3.a. read the current character",
        "65325d50b2e25aca54bc871b89758c9c (02:17): 3.b. if the current character is:",
        "65325d50b2e25aca54bc871b89758c9c (02:17): &quot;,&quot;: if the nesting level is 0, append &quot;, :scope &quot; to the output string",
        "65325d50b2e25aca54bc871b89758c9c (02:17): &quot;(&quot;: increase the nesting level by 1, and append &quot;(&quot; to the output string",
        "f139aba52f9fa1394b4034a7954b2220 (02:17): yeah, I remember that.",
        "65325d50b2e25aca54bc871b89758c9c (02:17): &quot;)&quot;: decrease the nesting level by 1, and append &quot;)&quot; to the output string",
        "65325d50b2e25aca54bc871b89758c9c (02:17): anything else: append the current character to the output string",
        "f139aba52f9fa1394b4034a7954b2220 (02:17): oh, where is that mail?",
        "65325d50b2e25aca54bc871b89758c9c (02:17): 3.c. advance to the next character",
        "65325d50b2e25aca54bc871b89758c9c (02:17): 4. return the output string",
        "f139aba52f9fa1394b4034a7954b2220 (02:17): I was looking for it",
        "65325d50b2e25aca54bc871b89758c9c (02:17): (sorry for the large paste)",
        "65325d50b2e25aca54bc871b89758c9c (02:17): it's in the public-webapi archives",
        "edb259c0e0038f38bb200bc20c8cbf7e (02:17): SVG in HTML: http://www.w3.org/2008/07/10-svg-minutes.html#action02",
        "f139aba52f9fa1394b4034a7954b2220 (02:17): do you have a link handy",
        "65325d50b2e25aca54bc871b89758c9c (02:18): it doesn't redefine the grammar of selectors, just defines a new syntax for the related notion of scoped/contextual selector",
        "f139aba52f9fa1394b4034a7954b2220 (02:18): found it http://lists.w3.org/Archives/Public/public-webapi/2008May/0058.html",
        "edb259c0e0038f38bb200bc20c8cbf7e (02:18): I'd suggest postponing that to Selectors API Level 2",
        "f139aba52f9fa1394b4034a7954b2220 (02:19): yeah, that might be sensibe",
        "f139aba52f9fa1394b4034a7954b2220 (02:19): 65325d50b2e25aca54bc871b89758c9c, is there any reason to rush it through in v1?",
        "65325d50b2e25aca54bc871b89758c9c (02:19): http://lists.w3.org/Archives/Public/public-webapi/2008May/0058.html",
        "edb259c0e0038f38bb200bc20c8cbf7e (02:19): unless :context is somehow fast tracked",
        "65325d50b2e25aca54bc871b89758c9c (02:19): f139aba52f9fa1394b4034a7954b2220: I don't think it is essential for v1",
        "f139aba52f9fa1394b4034a7954b2220 (02:19): ok, good.",
        "65325d50b2e25aca54bc871b89758c9c (02:19): just seems like a good idea in general",
        "f139aba52f9fa1394b4034a7954b2220 (02:20): I'll write up a draft for v2 with it included and put it in CVS later",
        "65325d50b2e25aca54bc871b89758c9c (02:20): however, I do think &lt;style scoped&gt; + queryScopedSelector would lean towards the pseudo-class being :scope instead of :context",
        "65325d50b2e25aca54bc871b89758c9c (02:20): for consistency",
        "f139aba52f9fa1394b4034a7954b2220 (02:20): also have to add other requested features like NodeList.querySelector",
        "f139aba52f9fa1394b4034a7954b2220 (02:21): but first, I have to deal with those pesky NSResolver issues",
        "f139aba52f9fa1394b4034a7954b2220 (02:21): unfortunately, I didn't have tim to look at replacing it with one of the other proposals now, and since Mozilla has started implementing it, it's a bit late to turn back now :-(",
        "f139aba52f9fa1394b4034a7954b2220 (02:22): s/tim/time/",
        "65325d50b2e25aca54bc871b89758c9c (02:22): Mozilla's implementation hasn't shipped yet",
        "65325d50b2e25aca54bc871b89758c9c (02:22): so I guess lack of your time would be the only problem",
        "65325d50b2e25aca54bc871b89758c9c (02:22): (afaik Mozilla's implementation has not even been checked in yet)",
        "f139aba52f9fa1394b4034a7954b2220 (02:23): yeah, and I'm pretty sure I can resolve the issues with the function approach anyway. Besides, they need to be solved for NSResolvers used elsewhere, so they may as well be solved here and adopted into the other places too",
        "f139aba52f9fa1394b4034a7954b2220 (02:24): since the other specs with NSResolvers leave a lot of this largely undefined",
        "65325d50b2e25aca54bc871b89758c9c (02:24): my problem with the function approach isn't really that it can do random things, but just that it is a bad idea in the first place to use a function instead of a data structure to represent namespace prefix mappings",
        "65325d50b2e25aca54bc871b89758c9c (02:25): requiring resolution of all prefixes in the selector up front should be enough to make behavior interoperable",
        "65325d50b2e25aca54bc871b89758c9c (02:25): I think the only reason we are using NSResolver is because XPath did, which doesn't seem like a particularly good reason to me",
        "f139aba52f9fa1394b4034a7954b2220 (02:26): yeah, that's a possibility",
        "f139aba52f9fa1394b4034a7954b2220 (02:27): how about I draft up the spec to replace it tomorrow and let the WG decide if we want to keep it as is, or adopt the newer approach.",
        "f139aba52f9fa1394b4034a7954b2220 (02:27): With a concrete proposal, it might make the decision process a lot easier",
        "f139aba52f9fa1394b4034a7954b2220 (02:27): since so far we've been arguing about what we've already spent a great deal of time on and is already quite mature, and something that isn't even specced yet",
        "f139aba52f9fa1394b4034a7954b2220 (02:28): It would have been easier if Mozilla had decided to ship without NSResolver support though, which is what I had hoped when I defined it to be optinal",
        "042dd99eb0ff8653814e445ca0093427 (02:29): we haven't shipped anything so i don't see what the problem is",
        "f139aba52f9fa1394b4034a7954b2220 (02:30): the problem is that time is being spent implementing and testing a feature which could be dropped",
        "f139aba52f9fa1394b4034a7954b2220 (02:30): so I'd better hurry up and make a decision to not too much time is wasted",
        "f139aba52f9fa1394b4034a7954b2220 (02:30): but in any case, the implementation experience could help make the decision easier I guess",
        "042dd99eb0ff8653814e445ca0093427 (02:30): I'm not sure if Boris has implemented the NSResolver stuff, but the whole thing only took him a week or less so not much effort has been wasted at worst",
        "042dd99eb0ff8653814e445ca0093427 (02:30): on our side",
        "f139aba52f9fa1394b4034a7954b2220 (02:30): he started on it a couple of days ago",
        "f139aba52f9fa1394b4034a7954b2220 (02:31): they're already discussing issues with in in bugzilla",
        "042dd99eb0ff8653814e445ca0093427 (02:31): er ok :-)",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:31): 65325d50b2e25aca54bc871b89758c9c: your convertor fails on \\escapes",
        "edb259c0e0038f38bb200bc20c8cbf7e (02:32): introducing the second argument to querySelector was a mistake",
        "65325d50b2e25aca54bc871b89758c9c (02:32): 69b0d3dfe919a6b860a9fac82de52a7e: good point - should be patchable",
        "f139aba52f9fa1394b4034a7954b2220 (02:32): I think the best alternative solution was to make it a DOMString like &quot;#default=http://www.w3.org/1999/xhtml svg=http://www.w3.org/2000/svg&quot; or something like that",
        "65325d50b2e25aca54bc871b89758c9c (02:32): 69b0d3dfe919a6b860a9fac82de52a7e: given how unrelated it is to normal parsing, I should probably try to write a proof that it will DTRT for all selector syntax",
        "edb259c0e0038f38bb200bc20c8cbf7e (02:32): my apologies and 10.000 dollar (monopoly currency) to Ian Hickson for saying that from the beginning",
        "65325d50b2e25aca54bc871b89758c9c (02:33): should be easy to do inductively and should catch any other errors",
        "edb259c0e0038f38bb200bc20c8cbf7e (02:34): as from a use case point of view namespace support is not at all needed at this point",
        "edb259c0e0038f38bb200bc20c8cbf7e (02:35): even for SVG and MathML it would work fine without it",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:43): 65325d50b2e25aca54bc871b89758c9c: (doesn't handle strings, either)",
        "65325d50b2e25aca54bc871b89758c9c (02:44): 69b0d3dfe919a6b860a9fac82de52a7e: acknowledged",
        "edb259c0e0038f38bb200bc20c8cbf7e (02:50): -&gt; bed",
        "f139aba52f9fa1394b4034a7954b2220 (02:51): grr. Why is it that I can't get a straight answer to my question about what Boris wants the spec to say? https://bugzilla.mozilla.org/show_bug.cgi?id=416317#c31",
        "69b0d3dfe919a6b860a9fac82de52a7e (02:54): isn't he just saying &quot;leave it up to webidl&quot;?",
        "f139aba52f9fa1394b4034a7954b2220 (03:02): yeah, maybe. I posted another comment saying that",
        "f139aba52f9fa1394b4034a7954b2220 (03:05): ok, it seems :context for DocumentFragments isn't getting much support. Unless there are really convincing use cases for it, I'm going to drop it. But even if there are, there's probably better solutions."
    ],
    "person_ids": [
        "a3f19f90edf0a0893c7847d08016abe3",
        "65325d50b2e25aca54bc871b89758c9c",
        "03341ab0742a44ea0478cab05ca96cac",
        "ddd01b1de2f07d48d4953be350a7944c",
        "f139aba52f9fa1394b4034a7954b2220",
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "042dd99eb0ff8653814e445ca0093427",
        "69b0d3dfe919a6b860a9fac82de52a7e"
    ]
}