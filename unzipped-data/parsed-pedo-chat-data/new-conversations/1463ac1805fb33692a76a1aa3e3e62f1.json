{
    "id": "1463ac1805fb33692a76a1aa3e3e62f1",
    "messages": [
        "a11aabeeceeae6b8cb5d12ea06b56554 (12:48): What does &quot;'NoneType' object is unsubscriptable&quot; mean?",
        "ab7faae5d7b250ea8606486575f8f79c (12:49): x = None; y = x[0]",
        "a11aabeeceeae6b8cb5d12ea06b56554 (12:50): When it's throwing on print repr(self.currentToken[&quot;name&quot;])?",
        "ab7faae5d7b250ea8606486575f8f79c (12:50): self.currentToken is None",
        "a11aabeeceeae6b8cb5d12ea06b56554 (12:50): Ah, just realized that",
        "a11aabeeceeae6b8cb5d12ea06b56554 (12:50): facepalms",
        "ab7faae5d7b250ea8606486575f8f79c (12:50): Don't worry, it's easy to miss when the error message tells you precisely what the error is :-p",
        "a11aabeeceeae6b8cb5d12ea06b56554 (12:53): finds a fairly major bug in his tokenizer",
        "b25b6b77a0087ff8385941e5545d32ea (12:55): ab7faae5d7b250ea8606486575f8f79c: To be fair it would be nicer if it knew what the variable name was",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:01): Where do end tags have their names lowercased?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:01): (in the tokenizer)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:02): finds a fairly major bug in the test runner",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:03): (we only ever run one test of each test with multiple content model flags)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:03): Oh well, that's not really relevant any more",
        "ab7faae5d7b250ea8606486575f8f79c (13:03): a11aabeeceeae6b8cb5d12ea06b56554: Looks like emitCurrentToken lowercases all tag names",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:04): So all tags should go through that? Or everything?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:04): Currently most doesn't go through that",
        "ab7faae5d7b250ea8606486575f8f79c (13:05): Looks like all tokens except errors and characters go through that",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:06): Down to 12 test failures\u201a\u00c4\u00b6",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:09): Hmm, spec changed with expected result of &lt;xmp&gt;foo&lt;/xmp",
        "ab7faae5d7b250ea8606486575f8f79c (13:10): nonXmlBMPRegexp = re.compile(u'[\\x00-,|/|:-@|\\\\\\\\[-\\\\\\\\^|`|\\\\\\\\{-\\xb6|\\xb8-\\xbf|\\xd7|\\xf7|...')",
        "ab7faae5d7b250ea8606486575f8f79c (13:11): Am I mistaken, or is that completely bogus?",
        "ab7faae5d7b250ea8606486575f8f79c (13:12): It's matching characters which are in the range \\0 to ',', or '|', or '/', or '|', or ..., or '\\', or '\\', or in the range '[' to '\\', ...",
        "b25b6b77a0087ff8385941e5545d32ea (13:12): ab7faae5d7b250ea8606486575f8f79c: Could be",
        "ab7faae5d7b250ea8606486575f8f79c (13:14): For example, it doesn't match ']'",
        "ab7faae5d7b250ea8606486575f8f79c (13:15): (whereas it does match '[')",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:17): wonders why spec editing stopped on the 27th",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:17): Is there any way to get more on http://html5.org/tools/web-apps-tracker?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:17): guesses the answer is hack the code and ping annevk",
        "ab7faae5d7b250ea8606486575f8f79c (13:18): a11aabeeceeae6b8cb5d12ea06b56554: Because there were 0 bugs that weren't serious enough to be issues, and therefore the spec was perfect and needed no further editing",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:18): :P",
        "b25b6b77a0087ff8385941e5545d32ea (13:19): ab7faae5d7b250ea8606486575f8f79c: Do feel free to fix it btw",
        "b25b6b77a0087ff8385941e5545d32ea (13:19): Since clearly I am a bozo",
        "ab7faae5d7b250ea8606486575f8f79c (13:19): I hate how the Google Code issues list intercepts the '/' key to focus the search box",
        "ab7faae5d7b250ea8606486575f8f79c (13:19): and therefore means I can't do find-in-page like I want to",
        "b25b6b77a0087ff8385941e5545d32ea (13:21): a11aabeeceeae6b8cb5d12ea06b56554: Issue 96 is irrelevant. The code is never run (it is used to build the incorrect regexp)",
        "b25b6b77a0087ff8385941e5545d32ea (13:21): It shouldn't block 1.0",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:22): It wasn't going to block anyway :P",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:22): So RAWTEXT and RCDATA now don't have comments?",
        "b25b6b77a0087ff8385941e5545d32ea (13:23): a11aabeeceeae6b8cb5d12ea06b56554: That's not what you said in the issue tracker :p",
        "ab7faae5d7b250ea8606486575f8f79c (13:23): b25b6b77a0087ff8385941e5545d32ea: Might try to fix it some time; just filed an issue for now",
        "b25b6b77a0087ff8385941e5545d32ea (13:23): a11aabeeceeae6b8cb5d12ea06b56554: I think that is correct",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:24): Priority-High was stuff I wanted to get in, but not block",
        "b25b6b77a0087ff8385941e5545d32ea (13:25): a11aabeeceeae6b8cb5d12ea06b56554: It was maked Release-1.0",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:25): [u'EndTag', u'xmp', False] \u201a\u00c4\u00ee how come that has a False explicitly there?",
        "b25b6b77a0087ff8385941e5545d32ea (13:26): ab7faae5d7b250ea8606486575f8f79c: Your regexp doesn't work does it? You need to escape special characters like [ surely?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:26): OK, so two of these test failures I'm pretty sure are spec bugs",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:27): The rest are tests needing updating",
        "ab7faae5d7b250ea8606486575f8f79c (13:30): b25b6b77a0087ff8385941e5545d32ea: You only need to escape ']', and '-' if it's not at the start/end of the regexp, and '^' if it's at the start",
        "ab7faae5d7b250ea8606486575f8f79c (13:31): Oh, and '\\' I guess",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:40): has a tokenizer that passes all the test cases now!",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:41): HG: changed python/src/html5lib/html5parser.py",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:41): HG: changed python/src/html5lib/inputstream.py",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:41): HG: changed python/src/html5lib/tokenizer.py",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:41): HG: changed python/tests/test_tokenizer.py",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:41): HG: changed testdata/tokenizer/contentModelFlags.test",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:41): HG: changed testdata/tokenizer/escapeFlag.test",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:41): HG: changed testdata/tokenizer/test3.test",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:41): Small commit.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:41): (There are still two test failures, actually, but they're spec bug)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:45): Oh, woops, html5parser shouldn't be in that commit",
        "b25b6b77a0087ff8385941e5545d32ea (13:48): Does anyone have a favourite way to set the idness of the &quot;id&quot; attribute",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:48): DOCTYPEs!",
        "b25b6b77a0087ff8385941e5545d32ea (13:48): thinks DOM3 Element.setIdAttribute might be the way forward",
        "b25b6b77a0087ff8385941e5545d32ea (13:49): a11aabeeceeae6b8cb5d12ea06b56554: Yeah but injecting false doctypes is bad if we want to preserve the fact that documents with no doctype have no doctype",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:49): notes that doesn't help minidom",
        "b25b6b77a0087ff8385941e5545d32ea (13:49): a11aabeeceeae6b8cb5d12ea06b56554: I think it does",
        "b25b6b77a0087ff8385941e5545d32ea (13:50): Oh.",
        "b25b6b77a0087ff8385941e5545d32ea (13:50): It only works if the element already has an attribute with the name &quot;id&quot;",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:51): WHAT!?",
        "b25b6b77a0087ff8385941e5545d32ea (13:51): Well that is out then",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:51): DOM--",
        "b25b6b77a0087ff8385941e5545d32ea (13:51): s/with the name id/with the name you are trying to set as the id attribute name/",
        "b25b6b77a0087ff8385941e5545d32ea (13:52): a11aabeeceeae6b8cb5d12ea06b56554: Well if sort of makes sense if you don;t think there should be hidden state",
        "b25b6b77a0087ff8385941e5545d32ea (13:52): Sadly, what we want right now is hidden state :(",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:55): Where does setIdAttribute come from?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:55): Ah, it is in core",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:56): I guess all we can do is loop over all elements with @id and set setIdAttribute",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:56): Or, more likely, do it when creating the element with attributes",
        "b25b6b77a0087ff8385941e5545d32ea (13:59): a11aabeeceeae6b8cb5d12ea06b56554: That is worse than the current behaviour",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:59): b25b6b77a0087ff8385941e5545d32ea: How so?",
        "b25b6b77a0087ff8385941e5545d32ea (13:59): Because it leads to surprisin, hard to predict, bugs rather than obvious &quot;this doesn't work at all&quot; bugs",
        "a11aabeeceeae6b8cb5d12ea06b56554 (13:59): b25b6b77a0087ff8385941e5545d32ea: Why?",
        "b25b6b77a0087ff8385941e5545d32ea (14:00): Speifically if someone adds a node to the document after thay have parsed it then it won't have the idness set right",
        "b25b6b77a0087ff8385941e5545d32ea (14:00): Or if they add an id attribute to an existing element",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:00): Gah. Yeah.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:01): then dtd is the only option.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:01): (w00t)",
        "b25b6b77a0087ff8385941e5545d32ea (14:01): Yes but it will cause everything to get a DTD when serialized even if it didn't start with one",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:02): Yeah.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:02): Can we parse with a DTD then replace the DTD via removeChild and document.implementation.createDocumentType and appendChild?",
        "b25b6b77a0087ff8385941e5545d32ea (14:03): I previously thouht I couldn't dislike DOM more. Now I realise that that was a mee mild distate compared to my current loathing",
        "b25b6b77a0087ff8385941e5545d32ea (14:03): *mere",
        "b25b6b77a0087ff8385941e5545d32ea (14:03): *distaste",
        "b25b6b77a0087ff8385941e5545d32ea (14:04): a11aabeeceeae6b8cb5d12ea06b56554: I have no idea if that will work or do something surprising",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:04): b25b6b77a0087ff8385941e5545d32ea: Nor do I",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:04): b25b6b77a0087ff8385941e5545d32ea: Can you think of any other fix?",
        "b25b6b77a0087ff8385941e5545d32ea (14:04): I suspect any new elements created will not get the idness set",
        "b25b6b77a0087ff8385941e5545d32ea (14:06): There is a fixed list of doctypes that trigger quirks mode, right?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:06): No",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:06): It's a list of stuff that if it starts with x\u201a\u00c4\u00b6",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:06): RTFS :P",
        "b25b6b77a0087ff8385941e5545d32ea (14:07): I am but it's slow :(",
        "b25b6b77a0087ff8385941e5545d32ea (14:10): And makes my computer very hot :(",
        "b25b6b77a0087ff8385941e5545d32ea (14:12): Anyway we could invent a new quirks-mode doctype and teach our serializer to strip it out",
        "b25b6b77a0087ff8385941e5545d32ea (14:13): It seems very ugly though :(",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:13): But then how do deal when there are DOCTYPEs in the document?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:13): How do we get them to round trip?",
        "b25b6b77a0087ff8385941e5545d32ea (14:13): I thought we could edit them now?",
        "b25b6b77a0087ff8385941e5545d32ea (14:13): Oh I see",
        "b25b6b77a0087ff8385941e5545d32ea (14:13): Erm.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:13): You can only have one DOCTYPE in a document.",
        "b25b6b77a0087ff8385941e5545d32ea (14:13): Yeah I know",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:14): I guess we could add in the internal subset idness",
        "b25b6b77a0087ff8385941e5545d32ea (14:14): Indeed",
        "b25b6b77a0087ff8385941e5545d32ea (14:14): The only quetion is what happens on serialization",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:14): Oh man, this is ugly.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:14): The seriailizer ignores any internal subset",
        "b25b6b77a0087ff8385941e5545d32ea (14:14): our serializer would be fine",
        "b25b6b77a0087ff8385941e5545d32ea (14:15): a11aabeeceeae6b8cb5d12ea06b56554: I suggest we try your approach for the no-doctype case first to see if it works",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:15): Which? Adding doctype and removing it?",
        "b25b6b77a0087ff8385941e5545d32ea (14:15): a11aabeeceeae6b8cb5d12ea06b56554: yeah",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:15): I'd try that for both cases.",
        "b25b6b77a0087ff8385941e5545d32ea (14:15): I doubt it will work but you never know",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:15): (But I won't actually, so you do it)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:16): impl dependant, I bet :P",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:16): Should I push the new tokenizer and break the parser as a whole or just wait for an even bigger push and merge?",
        "b25b6b77a0087ff8385941e5545d32ea (14:21): in what way break?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:22): The parser changes content model flag, and that doesn't exist any more.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:22): So loads parses wrong.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:27): Also a fair amount of script related changeds",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:27): *changes",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:27): The simple stuff that can be fixed has got us down to 560 test failures",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:28): (five tree builders)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:28): So 56 test failures",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:31): Quite a lot of broken tests due to no longer having comments",
        "b25b6b77a0087ff8385941e5545d32ea (14:32): a11aabeeceeae6b8cb5d12ea06b56554: Don't push yet",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:33): What's expected of &lt;script&gt; &lt;!-- &lt;/script&gt; --&gt; &lt;/script&gt;x now?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (14:35): A script whose content is &quot; &lt;!-- &quot; right?"
    ],
    "person_ids": [
        "a11aabeeceeae6b8cb5d12ea06b56554",
        "ab7faae5d7b250ea8606486575f8f79c",
        "b25b6b77a0087ff8385941e5545d32ea"
    ]
}