{
    "id": "ddcfdaa74c3cac9a59478c3ea91a5988",
    "messages": [
        "405830ce0e351e7acb00317f406b772f (02:00): and it runs all in in the order you do +=",
        "06d9f5004faf7205aca782823f1c53be (02:00): theshadowL did you enableraisingevents?",
        "8eb5d84cbdfa70d8d2df20db40d308a6 (02:00): yea",
        "405830ce0e351e7acb00317f406b772f (02:00): so if you did += first; += last (excuse the pseudocode), it would do first, then last.  Isn't that fifo?",
        "06d9f5004faf7205aca782823f1c53be (02:01): yes, your description at first was different though",
        "405830ce0e351e7acb00317f406b772f (02:01): yeah scrolling back i didn't even really answer your question",
        "06d9f5004faf7205aca782823f1c53be (02:01): (it will only return the value from the last delegate run though) that's what I based it on...",
        "06d9f5004faf7205aca782823f1c53be (02:02): the behavior you are observing is probably because you need to instance a delegate object first before any functions are assigned to it",
        "405830ce0e351e7acb00317f406b772f (02:02): well that's like saying, &quot;it works that way because it does&quot;",
        "06d9f5004faf7205aca782823f1c53be (02:02): I didn't realize that delegate objects (without the event) could have more than one function assigned",
        "06d9f5004faf7205aca782823f1c53be (02:02): no it's not",
        "405830ce0e351e7acb00317f406b772f (02:03): all i have to do is say Loop loop = null; and then i can do +=",
        "06d9f5004faf7205aca782823f1c53be (02:03): the object needs to be instanced before the += operator is called",
        "405830ce0e351e7acb00317f406b772f (02:03): that counts as instantiation?",
        "06d9f5004faf7205aca782823f1c53be (02:03): huh... good poiunt",
        "06d9f5004faf7205aca782823f1c53be (02:03): huh..",
        "06d9f5004faf7205aca782823f1c53be (02:03): uh...",
        "06d9f5004faf7205aca782823f1c53be (02:03): lol",
        "405830ce0e351e7acb00317f406b772f (02:04): yeah it doens't really matter, i was just curious",
        "405830ce0e351e7acb00317f406b772f (02:04): by your initial reaction it doesn't sound like it's normal to use multicast delegates anyway",
        "06d9f5004faf7205aca782823f1c53be (02:04): delegate syntax has changed from 1.0-2.0... so who knows",
        "405830ce0e351e7acb00317f406b772f (02:04): ahh maybe that's new",
        "06d9f5004faf7205aca782823f1c53be (02:04): tieTYT: right... except in events usually",
        "405830ce0e351e7acb00317f406b772f (02:05): nod, i've seen that used in the code vs generates for me for winforms",
        "06d9f5004faf7205aca782823f1c53be (02:05): a LOT of people say that using more than one function for a delegate is just plain stupid or pointless....",
        "405830ce0e351e7acb00317f406b772f (02:05): alright anyway thanks for the help",
        "405830ce0e351e7acb00317f406b772f (02:05): if you care about the return value it seems like it normally would be",
        "06d9f5004faf7205aca782823f1c53be (02:05): what little help i could give lol",
        "be97847377c73d525c8d6d2bc3bbc30d (02:08): tieTYT, Multicast delegates are used all over the platform, they're pretty common",
        "405830ce0e351e7acb00317f406b772f (02:09): chaka: oh.. you mean directly or indirectly by being defined as events?",
        "be97847377c73d525c8d6d2bc3bbc30d (02:10): correct.  Some places use them directly, but I'd say they're pretty common",
        "be97847377c73d525c8d6d2bc3bbc30d (02:10): (sorry, jumped on late in the convo)",
        "be97847377c73d525c8d6d2bc3bbc30d (02:11): The guys that wrote IronPython use them directly for peices of their runtime implementation.  They're not real events, perse, but it's essentially the same pattern",
        "500b8afdc35b66099d38010dc4e0efb7 (02:12): what's the best way to check if a DateTime can be validly converted to a SqlDateTime?",
        "7e6988814b7c2541fcc57d22c37e4ee8 (02:13): Tak: rtfm",
        "500b8afdc35b66099d38010dc4e0efb7 (02:13): tfm sucks",
        "7e6988814b7c2541fcc57d22c37e4ee8 (02:13): haha",
        "7e6988814b7c2541fcc57d22c37e4ee8 (02:13): dont talk like that about it",
        "7e6988814b7c2541fcc57d22c37e4ee8 (02:13): my papa wrote it",
        "500b8afdc35b66099d38010dc4e0efb7 (02:13): yes, it might hear me",
        "7e6988814b7c2541fcc57d22c37e4ee8 (02:14): Tak: rtfm again",
        "7e6988814b7c2541fcc57d22c37e4ee8 (02:14): good day sir",
        "be97847377c73d525c8d6d2bc3bbc30d (02:14): tieTYT, From what I've read, you're trying to get a return value from a MulticastDelegate, and by design you'll only get the value from the last executed delegate",
        "69e2e9b6faa43ce63a2ecee941ecc641 (02:14): alexE: I didn't know bastards had fathers ;)",
        "500b8afdc35b66099d38010dc4e0efb7 (02:14): it looks like the only &quot;sane&quot; way is to run SqlDateTime.Parse() inside a try/catch, but I'd really rather avoid that if somebody knows a trick",
        "69e2e9b6faa43ce63a2ecee941ecc641 (02:15): as long as your data is pretty clean, why not use a try/catch?",
        "500b8afdc35b66099d38010dc4e0efb7 (02:15): I'm not all that sure this particular data is pretty clean",
        "500b8afdc35b66099d38010dc4e0efb7 (02:15): I'll use a try/catch if I have to",
        "be97847377c73d525c8d6d2bc3bbc30d (02:15): Tak, I don't use sql much these days, but there's a common pattern used alot by framework objects:  bool obj.TryParse().  Does that exist on your type?",
        "69e2e9b6faa43ce63a2ecee941ecc641 (02:16): I think most of the formatting stuff throws exceptions, seems to be par for course",
        "500b8afdc35b66099d38010dc4e0efb7 (02:16): chaka: no, that would be ideal",
        "be97847377c73d525c8d6d2bc3bbc30d (02:16): ah, well then try/catch :)",
        "69e2e9b6faa43ce63a2ecee941ecc641 (02:16): chaka: wait, there's formatting stuff that uses a bool instead of exceptions?",
        "500b8afdc35b66099d38010dc4e0efb7 (02:16): most of the common types have TryParse, which will return a bool",
        "500b8afdc35b66099d38010dc4e0efb7 (02:17): nothing in System.Data.SqlTypes appears to do so, however",
        "be97847377c73d525c8d6d2bc3bbc30d (02:17): Kog, what Tak said.  See Int32.TryParse() for example",
        "69e2e9b6faa43ce63a2ecee941ecc641 (02:17): Tak: weird... never noticed that",
        "69e2e9b6faa43ce63a2ecee941ecc641 (02:17): although, that probably catches an exception somewhere heh",
        "69e2e9b6faa43ce63a2ecee941ecc641 (02:17): deeper down the line",
        "500b8afdc35b66099d38010dc4e0efb7 (02:18): actually I suspect it reimplements the Parse() code with inline error-checking",
        "500b8afdc35b66099d38010dc4e0efb7 (02:18): there would be no point (IMO) if it was just wrapping a try/catch",
        "69e2e9b6faa43ce63a2ecee941ecc641 (02:18): I sure hope so",
        "be97847377c73d525c8d6d2bc3bbc30d (02:18): I've used DateTime.TryParse() extensively, there are no exceptions thrown inside of it",
        "69e2e9b6faa43ce63a2ecee941ecc641 (02:18): Tak: a lot of the stuff in .NET is convenience fluff... I wouldn't be surprised at all",
        "69e2e9b6faa43ce63a2ecee941ecc641 (02:19): chaka: you wouldn't know if it was catching something deeper down the line unless you saw the source",
        "69e2e9b6faa43ce63a2ecee941ecc641 (02:19): (of the method itself)",
        "be97847377c73d525c8d6d2bc3bbc30d (02:19): Kog ^^:  I've reflected the method in question to check",
        "69e2e9b6faa43ce63a2ecee941ecc641 (02:20): Tak: I would hope mono does error checking instead of just wrapping another call",
        "405830ce0e351e7acb00317f406b772f (02:21): chaka: no actually i was just wondering why i have to say Del del = null; before i start using the operator += on it.  I'm just experimenting with the language atm",
        "be97847377c73d525c8d6d2bc3bbc30d (02:21): Kog, wouldn't catching all First Chance Exceptions alert you to nested try/catch blocks?",
        "be97847377c73d525c8d6d2bc3bbc30d (02:21): tieTYT, ooh, interesting",
        "be97847377c73d525c8d6d2bc3bbc30d (02:22): tieTYT, no idea why that would be :)",
        "405830ce0e351e7acb00317f406b772f (02:22): heh ok",
        "405830ce0e351e7acb00317f406b772f (02:22): i'll just accept it",
        "500b8afdc35b66099d38010dc4e0efb7 (02:25): <a href=\"http://svn.myrealbox.com/viewcvs/trunk/mcs/class/corlib/System/DateTime.cs?view=markup\">http://svn.myrealbox.com/viewcvs/trunk/mcs/class/corlib/System/DateTime.cs?view=markup</a>",
        "500b8afdc35b66099d38010dc4e0efb7 (02:25): yeah, they're doing error checking",
        "be97847377c73d525c8d6d2bc3bbc30d (02:27): love the comments",
        "500b8afdc35b66099d38010dc4e0efb7 (02:27): &quot;it could be optimized, but will make little good.&quot;",
        "be97847377c73d525c8d6d2bc3bbc30d (02:28): / LAMESPEC: This should be part of UTCpattern",
        "500b8afdc35b66099d38010dc4e0efb7 (02:28): lol",
        "be97847377c73d525c8d6d2bc3bbc30d (02:33): nice: &quot;Xbox 360 and PlayStation 2 both leak a massive 2W, or 17.52kWh each year&quot;",
        "69e2e9b6faa43ce63a2ecee941ecc641 (02:33): chaka: I suppose so, but I'm not that familiar w/ FC exceptions",
        "be97847377c73d525c8d6d2bc3bbc30d (02:33): so the lesson is: turn your consoles along with your monitors off when not using them",
        "69e2e9b6faa43ce63a2ecee941ecc641 (02:34): was someone preaching the value of leaving consoles on?",
        "69e2e9b6faa43ce63a2ecee941ecc641 (02:34): that sounds pretty stupid to me",
        "21a889a1ac9c02d0bdd8f39fe745a582 (02:34): Thank god for margarita friday lunches",
        "500b8afdc35b66099d38010dc4e0efb7 (02:34): plus the xbox360 will burn your house down",
        "69e2e9b6faa43ce63a2ecee941ecc641 (02:35): rob-wrk: can I work with you?",
        "be97847377c73d525c8d6d2bc3bbc30d (02:35): Kog, only reason I know about em is from debugging our background synchronization code.",
        "06d9f5004faf7205aca782823f1c53be (02:35): 2W?!?!?!?!?!?",
        "500b8afdc35b66099d38010dc4e0efb7 (02:35): I miss my margarita fridays :-(",
        "06d9f5004faf7205aca782823f1c53be (02:35): 2 watts is NOTHING",
        "be97847377c73d525c8d6d2bc3bbc30d (02:35): Kog and no, but theres a story on /. about how appearantly alot of people do",
        "69e2e9b6faa43ce63a2ecee941ecc641 (02:35): GoatCheez: that's more heat than you know what to do with",
        "21a889a1ac9c02d0bdd8f39fe745a582 (02:35): Kog: not an official company policy, but we do it anyways, today was a coworker's last day. usually its just beer in Isla Vista to watch the college girls bike by. ;)",
        "06d9f5004faf7205aca782823f1c53be (02:35): Kog: huh?",
        "be97847377c73d525c8d6d2bc3bbc30d (02:36): rob-wrk, that's awesome",
        "69e2e9b6faa43ce63a2ecee941ecc641 (02:36): rob-wrk: where do you work again?",
        "be97847377c73d525c8d6d2bc3bbc30d (02:36): rob-wrk, the only thing I get to do on fridays at work is review code and wait for people's checkins to do a weekly build",
        "69e2e9b6faa43ce63a2ecee941ecc641 (02:37): the only thing I do at work on fridays... is the same shit I do every other day: whatever I get told to write"
    ],
    "person_ids": [
        "405830ce0e351e7acb00317f406b772f",
        "06d9f5004faf7205aca782823f1c53be",
        "8eb5d84cbdfa70d8d2df20db40d308a6",
        "be97847377c73d525c8d6d2bc3bbc30d",
        "500b8afdc35b66099d38010dc4e0efb7",
        "7e6988814b7c2541fcc57d22c37e4ee8",
        "69e2e9b6faa43ce63a2ecee941ecc641",
        "21a889a1ac9c02d0bdd8f39fe745a582"
    ]
}