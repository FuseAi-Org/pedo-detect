{
    "id": "0692c55ca0734a4baee1c34ed7458a0a",
    "messages": [
        "85793dd1775fbc0c0562493f069bcaa2 (14:16): oh, the widget uri scheme discussion got a whole lot harder",
        "85793dd1775fbc0c0562493f069bcaa2 (14:17): there is one case where we can't avoid exposing it externally",
        "85793dd1775fbc0c0562493f069bcaa2 (14:17): cross-document messaging",
        "8d52bf87a239352ba7cc0aba1035e393 (14:18): postMessage?",
        "85793dd1775fbc0c0562493f069bcaa2 (14:18): yes",
        "8d52bf87a239352ba7cc0aba1035e393 (14:18): postMessage only needs an origin, not a URI",
        "85793dd1775fbc0c0562493f069bcaa2 (14:19): the origin attr is a URI, iirc",
        "8d52bf87a239352ba7cc0aba1035e393 (14:19): no",
        "8d52bf87a239352ba7cc0aba1035e393 (14:19): origin can be a URI *or* a non-URI string.",
        "8d52bf87a239352ba7cc0aba1035e393 (14:19): it's the latter for things like sandboxed iframes.",
        "8d52bf87a239352ba7cc0aba1035e393 (14:19): or script from data: URIs",
        "85793dd1775fbc0c0562493f069bcaa2 (14:20): The origin attribute represents, in server-sent events and cross-document messaging, the origin of the document that sent the message (typically the scheme, hostname, and port of the document, but not its path or fragment identifier).",
        "8d52bf87a239352ba7cc0aba1035e393 (14:20): of course, the other question is how one widget gets hold of another widget's window object in the first place",
        "8d52bf87a239352ba7cc0aba1035e393 (14:20): *typically*",
        "85793dd1775fbc0c0562493f069bcaa2 (14:20): 8d52bf87a239352ba7cc0aba1035e393: not between widgets",
        "85793dd1775fbc0c0562493f069bcaa2 (14:20): between web pages and widgets",
        "85793dd1775fbc0c0562493f069bcaa2 (14:20): &lt;iframe&gt; inside a widget",
        "8d52bf87a239352ba7cc0aba1035e393 (14:20): right",
        "8d52bf87a239352ba7cc0aba1035e393 (14:21): in which case things should work out perfectly nicely",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:21): .origin would just be the empty string",
        "8d52bf87a239352ba7cc0aba1035e393 (14:21): ???",
        "8d52bf87a239352ba7cc0aba1035e393 (14:21): no",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:21): for widgets, sure",
        "8d52bf87a239352ba7cc0aba1035e393 (14:21): no",
        "8d52bf87a239352ba7cc0aba1035e393 (14:21): for widgets, it would be a random string",
        "8d52bf87a239352ba7cc0aba1035e393 (14:21): that's the point",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:21): unique id becomes empty string per spec",
        "8d52bf87a239352ba7cc0aba1035e393 (14:21): whoops, where's that?",
        "85793dd1775fbc0c0562493f069bcaa2 (14:21): would you ever want to know that the origin was a widget?",
        "85793dd1775fbc0c0562493f069bcaa2 (14:22): and not some other, undiscoverable origin",
        "8d52bf87a239352ba7cc0aba1035e393 (14:22): step back, more explicit",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:22): oh sorry",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:22): it's no longer the empty string",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:22): it's &quot;null&quot; now",
        "8d52bf87a239352ba7cc0aba1035e393 (14:23): e3fb62ebfa4f36acf5cbff6a6ed0f2e0, ref?",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:23): http://www.whatwg.org/specs/web-apps/current-work/#ascii-serialization-of-an-origin",
        "8d52bf87a239352ba7cc0aba1035e393 (14:23): thx",
        "8d52bf87a239352ba7cc0aba1035e393 (14:23): woah, safari 4 beta doesn't behave that nicely on really large documents",
        "85793dd1775fbc0c0562493f069bcaa2 (14:24): e3fb62ebfa4f36acf5cbff6a6ed0f2e0 mind pointing to the multipage version?",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:24): could be that http://www.whatwg.org/specs/web-apps/current-work/#unicode-serialization-of-an-origin applies here but the result is the same",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:24): section 6.4",
        "8d52bf87a239352ba7cc0aba1035e393 (14:25): http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#origin",
        "8d52bf87a239352ba7cc0aba1035e393 (14:26): http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#posting-messages",
        "8d52bf87a239352ba7cc0aba1035e393 (14:26): e3fb62ebfa4f36acf5cbff6a6ed0f2e0, the serialization isn't relevant for postMessage",
        "8d52bf87a239352ba7cc0aba1035e393 (14:26): as postMessage refers to the same origin definition",
        "8d52bf87a239352ba7cc0aba1035e393 (14:26): http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#same-origin",
        "8d52bf87a239352ba7cc0aba1035e393 (14:27): If A and B are both opaque identifiers, and their value is equal, then return true.",
        "8d52bf87a239352ba7cc0aba1035e393 (14:27): therefore, as long as the iframe follows the pattern of just calling postMessage back with the .origin attribute it was handed in the first place, all should be fine",
        "85793dd1775fbc0c0562493f069bcaa2 (14:28): does 'null' qualify as an opaque identifier in this case?",
        "8d52bf87a239352ba7cc0aba1035e393 (14:28): null is what you get when you serialize",
        "8d52bf87a239352ba7cc0aba1035e393 (14:28): it isn't the opaque identifier itself",
        "8d52bf87a239352ba7cc0aba1035e393 (14:28): so the one thing that possibly needs clarification is whether, when &quot;.origin&quot; is passed into postMessage, an opaque identifier survives",
        "8d52bf87a239352ba7cc0aba1035e393 (14:28): That's a genuine HTML5 spec question, and needs solving there.",
        "85793dd1775fbc0c0562493f069bcaa2 (14:29): 8d52bf87a239352ba7cc0aba1035e393: the origin then is a guid",
        "8d52bf87a239352ba7cc0aba1035e393 (14:30): 85793dd1775fbc0c0562493f069bcaa2, yes",
        "8d52bf87a239352ba7cc0aba1035e393 (14:30): my point is that it doesn't need to be tied to the widget URI scheme",
        "8d52bf87a239352ba7cc0aba1035e393 (14:30): (one of the reasons why I don't like that tying is that this would be a URI scheme for which you can never write down an absolute URI -- violates principle of least surprise)",
        "85793dd1775fbc0c0562493f069bcaa2 (14:31): except if you want to have interaction between web and widget, and authoratively at least know that something is a widget",
        "8d52bf87a239352ba7cc0aba1035e393 (14:31): in that case, you'd probably want to know a bit more about the widget",
        "8d52bf87a239352ba7cc0aba1035e393 (14:31): like, from whom it came",
        "8d52bf87a239352ba7cc0aba1035e393 (14:32): Adam Barth tells me that Mozilla is playing with chrome extensions and doing interesting things with putting public key fingerprints into origins.",
        "8d52bf87a239352ba7cc0aba1035e393 (14:32): I think he'll send a note to public-webapps about that soon.",
        "85793dd1775fbc0c0562493f069bcaa2 (14:32): 8d52bf87a239352ba7cc0aba1035e393: chrome extensions as in &quot;Compatible with Google chrome&quot;?",
        "8d52bf87a239352ba7cc0aba1035e393 (14:33): as in Mozilla chrome extensions",
        "85793dd1775fbc0c0562493f069bcaa2 (14:33): or as in &quot;unspecified extensions for the browser chrome, a la jetpack&quot;",
        "8d52bf87a239352ba7cc0aba1035e393 (14:33): don't know about compatible with Google chrome, and had parsed this as unrelated to it",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:33): 8d52bf87a239352ba7cc0aba1035e393, are you saying no to me again?",
        "8d52bf87a239352ba7cc0aba1035e393 (14:33): I understood this to be the latter",
        "8d52bf87a239352ba7cc0aba1035e393 (14:33): e3fb62ebfa4f36acf5cbff6a6ed0f2e0, on what this time?",
        "8d52bf87a239352ba7cc0aba1035e393 (14:33): ;-)",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:33): is getting a bit annoyed",
        "8d52bf87a239352ba7cc0aba1035e393 (14:33): chuckles",
        "85793dd1775fbc0c0562493f069bcaa2 (14:34): what I really don't get with this origin bit is",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:34): you did read the postMessage definition right?",
        "8d52bf87a239352ba7cc0aba1035e393 (14:34): yes",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:34): and how it creates an event and sets the origin attribute?",
        "85793dd1775fbc0c0562493f069bcaa2 (14:34): the origin attribute is specified as a DOMString, then it _will_ be null for comparison purposes",
        "85793dd1775fbc0c0562493f069bcaa2 (14:34): (which is e3fb62ebfa4f36acf5cbff6a6ed0f2e0's point)",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:35): specifically: &quot;the origin attribute must be set to the Unicode serialization of the origin of the script that invoked the method&quot;",
        "8d52bf87a239352ba7cc0aba1035e393 (14:35): argh",
        "8d52bf87a239352ba7cc0aba1035e393 (14:35): overlooked that piece, and suspect that it's a bug in html5",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:36): you know, maybe I'll say no now",
        "8d52bf87a239352ba7cc0aba1035e393 (14:36): ;-)",
        "8d52bf87a239352ba7cc0aba1035e393 (14:36): look, the reason for targetOrigin is to make sure that the target window of a postMessage hasn't been navigated elsewhere",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:37): yup",
        "8d52bf87a239352ba7cc0aba1035e393 (14:37): for the origin attribute on the MessageEvent, you've got two purposes:",
        "8d52bf87a239352ba7cc0aba1035e393 (14:37): 1. feed into targetOrigin when responding. In this case, it's fine to just pass through an opaque origin",
        "8d52bf87a239352ba7cc0aba1035e393 (14:38): 2. compare to some string that you know of.  In this case, you'll actually want to do the serialization",
        "8d52bf87a239352ba7cc0aba1035e393 (14:38): so, what I'm saying is that origin is cast to DOMString too early in the spec",
        "8d52bf87a239352ba7cc0aba1035e393 (14:38): since you break the ability to pass messages back to anything that had a synthetic origin",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:38): actually, you want do that the other way around",
        "8d52bf87a239352ba7cc0aba1035e393 (14:38): why?",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:39): you're not going to reply before knowing if you trust them",
        "8d52bf87a239352ba7cc0aba1035e393 (14:39): depends on the use case",
        "8d52bf87a239352ba7cc0aba1035e393 (14:39): you might very well be exposing a public API",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:39): in that case you'd use &quot;*&quot;",
        "8d52bf87a239352ba7cc0aba1035e393 (14:39): not necessarily",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:39): why not?",
        "8d52bf87a239352ba7cc0aba1035e393 (14:40): I might very well want to send a response to the precise guy from whom the question came, to not leak their private information to a third party",
        "8d52bf87a239352ba7cc0aba1035e393 (14:40): without caring who they are",
        "8d52bf87a239352ba7cc0aba1035e393 (14:40): being able to pass through origin even when it's an opaque identifier gives me that ability",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:40): interesting point",
        "8d52bf87a239352ba7cc0aba1035e393 (14:40): casting to DOMstring earlier breaks it",
        "8d52bf87a239352ba7cc0aba1035e393 (14:40): therefore, spec bug",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:40): not necessarily",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:41): only if opaque id origins are considered relevant enough",
        "8d52bf87a239352ba7cc0aba1035e393 (14:41): (and yes, you're totally right about the &quot;compare to some known URI&quot; use case for having a string representation -- not disputing that)",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:42): so basically you want .origin to become some kind of Origin object that stringifies to &quot;null&quot; or an actual origin",
        "8d52bf87a239352ba7cc0aba1035e393 (14:43): yes",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:43): for quite a minor use case",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (14:43): feel free to go for it :)",
        "8d52bf87a239352ba7cc0aba1035e393 (14:43): lol",
        "8d52bf87a239352ba7cc0aba1035e393 (14:59): http://lists.w3.org/Archives/Public/public-html/2009May/0478.html"
    ],
    "person_ids": [
        "85793dd1775fbc0c0562493f069bcaa2",
        "8d52bf87a239352ba7cc0aba1035e393",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0"
    ]
}