{
    "id": "4f060547015b73b2de9452f4317284bc",
    "messages": [
        "1f8387eb43f131d7c309a90a4e36b5cb (18:56): Can &lt;object&gt;'s contents be thought of as accessibility fallback?  I'd dismissed that offhand earlier, but anne is bringing it up as a solution.",
        "8925426ae91d6282f262eb2ee108bdc0 (18:57): thought that's what it was already",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:57): I thought it was functionality fallback, but I may be drawing a distinction that doesn't exist.",
        "b25b6b77a0087ff8385941e5545d32ea (18:57): I thought this distinction was important for &lt;video&gt;?",
        "b25b6b77a0087ff8385941e5545d32ea (18:57): Or was that some other distinction?",
        "b25b6b77a0087ff8385941e5545d32ea (18:58): tired",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:58): I don't... I don't know.  I'm confused now.",
        "b25b6b77a0087ff8385941e5545d32ea (18:58): In any case I disagree with anne I think",
        "b25b6b77a0087ff8385941e5545d32ea (18:58): &lt;object&gt; is worse than &lt;canvas&gt;",
        "06cb330920ae58e1614c9145d983b3d6 (18:58): using canvas as an IMG seems questionable, since they're very different things (eg. progressive image rendering is very IMG-specific)",
        "b25b6b77a0087ff8385941e5545d32ea (18:59): 06cb330920ae58e1614c9145d983b3d6: It seems natural to load an image with a declarative src and then draw on it",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:59): b25b6b77a0087ff8385941e5545d32ea: In that case you can just use &lt;img&gt; and then draw it in, though.",
        "06cb330920ae58e1614c9145d983b3d6 (18:59): what would it mean? would it be immutable while it's loading (like an img), and only allow drawing ops after the load finishes?",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:00): I'd be inclined to say &quot;don't touch it until you see a load, because it'll explode&quot;.",
        "06cb330920ae58e1614c9145d983b3d6 (19:00): (eg. act as if you stuck an img on top of the canvas, then blitted the img onto the canvas and deleted the image at onload)",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:00): Alternately, interacting with it between the time you set @src and when 'load' fires will abort the load.",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:01): That counts as &quot;explode&quot;",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:01): b25b6b77a0087ff8385941e5545d32ea: If you could comment on why &lt;object&gt; is bad news, that would be nice.  I can't formulate a forceful enough objection.",
        "b25b6b77a0087ff8385941e5545d32ea (19:03): 1f8387eb43f131d7c309a90a4e36b5cb: For all the normal reasons that &lt;object&gt; is bad",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:03): I'm insufficiently familiar with why &lt;object&gt; is bad, I've just picked up the religion.",
        "06cb330920ae58e1614c9145d983b3d6 (19:03): a lot of stuff currently specced for img would seem to need to be defined for canvas (onload, &quot;fully decodable&quot; and so on)--i'd hope there's a simpler way",
        "b25b6b77a0087ff8385941e5545d32ea (19:03): It tries to do many things and none of them well",
        "b25b6b77a0087ff8385941e5545d32ea (19:04): So you don't get media-specific apis and so on",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:04): 06cb330920ae58e1614c9145d983b3d6: All those are already defined, so it would just be a matter of &quot;do [this]&quot;.",
        "06cb330920ae58e1614c9145d983b3d6 (19:05): they're defined for images, canvas isn't complicated by them",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:05): b25b6b77a0087ff8385941e5545d32ea: Is there much in the way of media-specific APIs for &lt;img&gt;?  I grok why we did &lt;video&gt;/&lt;audio&gt; instead of extending &lt;object&gt;.",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:05): 06cb330920ae58e1614c9145d983b3d6: I don't understand what distinction you're trying to draw.  All the algorithms are well-defined and can be trivially reused.",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:06): None of them depend on the name of the element.",
        "06cb330920ae58e1614c9145d983b3d6 (19:07): (let me reread your mail and think for a bit)",
        "06cb330920ae58e1614c9145d983b3d6 (19:07): (not that I'll necessarily have any ideas)",
        "06cb330920ae58e1614c9145d983b3d6 (19:07): hmm... seems like the obvious, but impossible, solution would be to put the alternate data in the children of img; impossible since img can't have children, of course",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:08): Yes, indeed.  That's why I'm turning to the idea of using the *other* image element.",
        "06cb330920ae58e1614c9145d983b3d6 (19:08): my first impression would be to define another tag which is completely synonymous with &lt;img&gt; but has children, eg. &lt;cimg&gt;, sharing 99% of the spec and (preferably) the same object type--existing only to syntactically allow it to have descendents",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:09): Didn't somebody suggest doing that for &lt;image&gt;?",
        "06cb330920ae58e1614c9145d983b3d6 (19:09): don't know",
        "8925426ae91d6282f262eb2ee108bdc0 (19:09): 1f8387eb43f131d7c309a90a4e36b5cb: I think so",
        "06cb330920ae58e1614c9145d983b3d6 (19:22): another possibility would be something like &lt;img src=foo.jpg id=foo&gt;&lt;fallback for=foo&gt;...&lt;/fallback&gt;, which degrades a bit more nicely",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:23): That seems weirder.",
        "06cb330920ae58e1614c9145d983b3d6 (19:23): (modelling label, of course)",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:27): presumably &lt;fallback&gt; wouldn't render if the element that it was for rendered correctly?",
        "06cb330920ae58e1614c9145d983b3d6 (19:27): yeah, something like that--something like &quot;hide this element by default, and show it if the target is in an error state&quot;",
        "06cb330920ae58e1614c9145d983b3d6 (19:33): degradation would require users to have a script to hide &lt;fallback&gt; when it's not supported, but image loading would be unchanged",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:53): Hixie, could you get me sample execCommand() usage in the wild?",
        "88d4d34a8064a4ff39fd5e144eea7762 (19:53): Probably I should also research some major WYSIWYG implementations.",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:12): Is there any strong technical objection against the 'beforeprint' event that IE fires?",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:14): Google docs changes the rendering of the document for printing if you hit Ctrl+P or select Print from the in-app menu, but it can't tell if you hit Print from the browser's menu.",
        "8b3687499080633e1898fa1dd209ef81 (20:14): media=print",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:15): That doesn't let you run arbitrary JS.",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:15): Unless you can have matchMedia?",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:15): Hmm...",
        "8b3687499080633e1898fa1dd209ef81 (20:15): I was about to mention that",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:20): I suggested that we implement matchMedia instead.",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:21): Now, back to writing an email summarizing a subtle technical issue with floats.",
        "8b3687499080633e1898fa1dd209ef81 (20:22): screams at CSS2.1",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:22): I'd just scream at floats.  They're defined SO BADLY.",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:22): I don't think anyone recognized at the time how complex they are.",
        "8b3687499080633e1898fa1dd209ef81 (20:23): They're not hard, if you use them as intended",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:23): No, they're always hard.  You just don't realize it.",
        "8b3687499080633e1898fa1dd209ef81 (20:23): Just don't start making float-based layouts",
        "8b3687499080633e1898fa1dd209ef81 (20:24): (Hi most of the web)",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:24): Perfectly natural-looking use-cases turn out to be subtly odd",
        "8b3687499080633e1898fa1dd209ef81 (20:24): dropcaps!",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:24): For example, I'm almost certain the spec doesn't cover the case exercised by: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/859",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:25): (Remove the / in front of the float to swap behavior.)",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:25): The float drops to the second line, some of the content following it jumps to the previous line, while some of the content that was previous on the same line as it drops to the line below it.",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:25): s/previous/previously/",
        "06cb330920ae58e1614c9145d983b3d6 (20:25): sounds like some kind of dance routine",
        "8b3687499080633e1898fa1dd209ef81 (20:25): I'm pretty certain I can find undefined things in most of CSS2.1",
        "8b3687499080633e1898fa1dd209ef81 (20:26): Even if they're not explicitly called out",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:26): Oh, indeed.",
        "8b3687499080633e1898fa1dd209ef81 (20:26): Hence the scream"
    ],
    "person_ids": [
        "1f8387eb43f131d7c309a90a4e36b5cb",
        "8925426ae91d6282f262eb2ee108bdc0",
        "b25b6b77a0087ff8385941e5545d32ea",
        "06cb330920ae58e1614c9145d983b3d6",
        "88d4d34a8064a4ff39fd5e144eea7762",
        "8b3687499080633e1898fa1dd209ef81"
    ]
}