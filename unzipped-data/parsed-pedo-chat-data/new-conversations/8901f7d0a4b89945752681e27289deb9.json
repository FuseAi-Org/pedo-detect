{
    "id": "8901f7d0a4b89945752681e27289deb9",
    "messages": [
        "6d05f0c2942adc25946a4b02b37ffa00 (13:37): why is multiple file upload missing? multiple file upload is crucial",
        "ab7faae5d7b250ea8606486575f8f79c (13:58): now has a streaming HTML-to-XHTML web service, but it takes about 6.5 seconds to convert the 3MB HTML5 spec, which is better than html5lib but not great :-(",
        "ab7faae5d7b250ea8606486575f8f79c (13:59): (It's CPU-bound now, and I can't think of any obvious ways to improve it that don't involve getting a faster CPU)",
        "6d05f0c2942adc25946a4b02b37ffa00 (14:01): do you use Validator.nu?",
        "47223c0fa41aa7e167a2d1fd2740cbb8 (14:01): yoyo 6d05f0c2942adc25946a4b02b37ffa00",
        "ab7faae5d7b250ea8606486575f8f79c (14:01): I use its parser and serialiser",
        "6d05f0c2942adc25946a4b02b37ffa00 (14:02): 47223c0fa41aa7e167a2d1fd2740cbb8, hey",
        "6d05f0c2942adc25946a4b02b37ffa00 (14:02): should really go to work; woke up midday due to jetlag",
        "47223c0fa41aa7e167a2d1fd2740cbb8 (14:05): 6d05f0c2942adc25946a4b02b37ffa00: wow, you need an excuse for that?",
        "47223c0fa41aa7e167a2d1fd2740cbb8 (14:05): got to work at 2 today",
        "7f9405da4034bf43083e64b57302a8e6 (14:06): ab7faae5d7b250ea8606486575f8f79c: HTML-to-XHTML ? why ?",
        "b25b6b77a0087ff8385941e5545d32ea (14:06): 7f9405da4034bf43083e64b57302a8e6: Because takkaria is slow ;)",
        "b25b6b77a0087ff8385941e5545d32ea (14:07): (or rather because html5lib is slow and the validator.nu parser doen't have a way of binding to python and takkaria doesn't have a stable hubbub release yet)",
        "7f9405da4034bf43083e64b57302a8e6 (14:07): ???",
        "fefe4c60d912e295e59fd874577ca7f9 (14:08): b25b6b77a0087ff8385941e5545d32ea: we're working on that (slowly)",
        "b25b6b77a0087ff8385941e5545d32ea (14:08): Which means that parsing html in python is slow whereas parsing xml is fast",
        "b25b6b77a0087ff8385941e5545d32ea (14:09): So html-&gt;xml using validator.nu followed by xml parsing in python might be faster than html5lib",
        "7f9405da4034bf43083e64b57302a8e6 (14:10): yay",
        "b25b6b77a0087ff8385941e5545d32ea (14:10): fefe4c60d912e295e59fd874577ca7f9: I was being tounge in cheek abot blaming you :) Although I am very much looking forward to hubbub",
        "ab7faae5d7b250ea8606486575f8f79c (14:10): 7f9405da4034bf43083e64b57302a8e6: What b25b6b77a0087ff8385941e5545d32ea said :-)",
        "fefe4c60d912e295e59fd874577ca7f9 (14:10): b25b6b77a0087ff8385941e5545d32ea: aye",
        "6d05f0c2942adc25946a4b02b37ffa00 (14:14): 47223c0fa41aa7e167a2d1fd2740cbb8, well, usually when I'm in Oslo I try to work 10-6 since I'm not here that often and most people work those hours",
        "47223c0fa41aa7e167a2d1fd2740cbb8 (14:14): 6d05f0c2942adc25946a4b02b37ffa00: it's 4am and i'm still alive",
        "47223c0fa41aa7e167a2d1fd2740cbb8 (14:14): s/alive/at the office ;)",
        "6d05f0c2942adc25946a4b02b37ffa00 (14:15): ouch",
        "6d05f0c2942adc25946a4b02b37ffa00 (14:15): also, friday beer and general shutdown today is at 5PM",
        "47223c0fa41aa7e167a2d1fd2740cbb8 (14:15): 6d05f0c2942adc25946a4b02b37ffa00: ah",
        "47223c0fa41aa7e167a2d1fd2740cbb8 (14:15): 6d05f0c2942adc25946a4b02b37ffa00: i've just been trapped in MSVC hell",
        "6d05f0c2942adc25946a4b02b37ffa00 (14:15): anyway, got to go",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:23): ab7faae5d7b250ea8606486575f8f79c: what was the problem with HTML2XML and escapes?",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:24): whoa!",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:24): that's a weird bug",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:29): just a break statement missing",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:30): I'm amazed the bug was there for so long without getting noticed",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:31): ab7faae5d7b250ea8606486575f8f79c: fixed in SVN",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:32): ab7faae5d7b250ea8606486575f8f79c: thanks",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:33): well, it didn't render output ill-formed, so I guess an XML serializer can do something very bogus and still not get caught by an XML parser",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:33): so now ab7faae5d7b250ea8606486575f8f79c has found a bug in my XML serializer but still not a bug causing ill-formedness :-)",
        "6d05f0c2942adc25946a4b02b37ffa00 (14:46): the spec even says &quot;There must be no more than one file in the list of selected files.&quot; :/",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:52): ab7faae5d7b250ea8606486575f8f79c: javadocs about default policy also fixed in SVN. thanks",
        "6d05f0c2942adc25946a4b02b37ffa00 (14:54): Hixie, fwiw, I agree with you on string comparison; also note that it's not exactly a same origin check as you need an additional check for the path component which sicking neglected to mention",
        "6d05f0c2942adc25946a4b02b37ffa00 (14:55): maybe s/neglected/forgot/",
        "6d05f0c2942adc25946a4b02b37ffa00 (14:56): (that is, making sure the path component is not specified at all so that Access-Control-Allow-Origin: http://example.com/ fails)",
        "ab7faae5d7b250ea8606486575f8f79c (15:14): b8810fee2f4a71f849f3f7409546d1d9: If your criteria is limited to ill-formedness bugs and doesn't count other bugs, then the implementation is trivial, since you could write &quot;String serialize(Document doc) { return &quot;&lt;foo/&gt;&quot;; }&quot; and it would never be ill-formed :-)",
        "ab7faae5d7b250ea8606486575f8f79c (15:16): b8810fee2f4a71f849f3f7409546d1d9: Is there an easy way I can compile a new htmlparser-....jar with the fixed code?",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:18): ab7faae5d7b250ea8606486575f8f79c: no. I'll build a new jar.",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:41): ab7faae5d7b250ea8606486575f8f79c: new version released: http://about.validator.nu/htmlparser/",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:42): (wow. now I've actually had to make a new release because of an XML serializer bug ab7faae5d7b250ea8606486575f8f79c found...)",
        "6d05f0c2942adc25946a4b02b37ffa00 (15:42): is there some way to instantiate Validator.nu and get a Python bound libxml tree as output?",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:44): 6d05f0c2942adc25946a4b02b37ffa00: locally, you can invoke java -cp htmlparser-1.1.1.jar nu.validator.htmlparser.tools.HTML2XML and pipe the input HTML to it, pipe the XML out and parse it with libxml in Python",
        "6d05f0c2942adc25946a4b02b37ffa00 (15:45): it seems that DreamHost has JDK so it might be worth looking into that",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:45): hopefully later you could use the C++ translator with a type mapper that maps to the Python C API types instead of NSPR/XPCOM types",
        "6d05f0c2942adc25946a4b02b37ffa00 (15:45): for Anolis, that is",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:46): 6d05f0c2942adc25946a4b02b37ffa00: Didn't ab7faae5d7b250ea8606486575f8f79c just make a network service that is equivalent to HTML2XML?",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:46): (and that saves the JVM startup overhead)",
        "6d05f0c2942adc25946a4b02b37ffa00 (15:47): it does involve downloading 3MB in case of HTML5",
        "6d05f0c2942adc25946a4b02b37ffa00 (15:47): twice",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:47): good point",
        "ab7faae5d7b250ea8606486575f8f79c (15:47): b8810fee2f4a71f849f3f7409546d1d9: Thanks!",
        "ab7faae5d7b250ea8606486575f8f79c (15:47): 6d05f0c2942adc25946a4b02b37ffa00: You really don't want to start up a new JVM each time you want to parse a document",
        "6d05f0c2942adc25946a4b02b37ffa00 (15:47): though maybe ab7faae5d7b250ea8606486575f8f79c is working on Anolis now in which case I don't have to :)",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:48): you could also try compiling nu.validator.htmlparser.tools.HTML2XML with GCJ to avoid the JVM overhead",
        "ab7faae5d7b250ea8606486575f8f79c (15:48): but you could run the web service thing (which is just a trivial wrapper around Jetty and the parser/serialiser) locally",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:49): ab7faae5d7b250ea8606486575f8f79c: on dreamhost, doing so requires dreamhost PS",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:49): ab7faae5d7b250ea8606486575f8f79c: not allowed on regular accounts",
        "ab7faae5d7b250ea8606486575f8f79c (15:49): b8810fee2f4a71f849f3f7409546d1d9: Oh, that could be a problem",
        "ab7faae5d7b250ea8606486575f8f79c (15:49): 6d05f0c2942adc25946a4b02b37ffa00: It's much less than 3MB if you compress it :-)",
        "ab7faae5d7b250ea8606486575f8f79c (15:49): but then it'll get CPU-bound more easily",
        "6d05f0c2942adc25946a4b02b37ffa00 (15:50): why would the JVM not be on by default btw?",
        "ab7faae5d7b250ea8606486575f8f79c (15:50): Without compression, it takes about 6 seconds (on my very limited CPU) which is 500KB/s which isn't really much",
        "ab7faae5d7b250ea8606486575f8f79c (15:51): so you shouldn't really need to worry about bandwidth usage",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:51): 6d05f0c2942adc25946a4b02b37ffa00: IIRC, Dreamhost default accounts allow you to run Java programs by default but you aren't allowed to leave the processes sitting in the RAM",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:52): and leaving the process waiting is the whole point of avoiding the JVM startup overhead",
        "ab7faae5d7b250ea8606486575f8f79c (15:52): (Hmm, 25% of the runtime is in sun.nio.cs.UTF_8$Encoder.encodeArrayLoop)",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:53): ab7faae5d7b250ea8606486575f8f79c: do you have ICU4J in classpath?",
        "6d05f0c2942adc25946a4b02b37ffa00 (15:53): ok, Java support indeed there",
        "ab7faae5d7b250ea8606486575f8f79c (15:53): There's the HotSpot overhead too, since it's really slow the first time you try to pass a document through the process",
        "ab7faae5d7b250ea8606486575f8f79c (15:53): b8810fee2f4a71f849f3f7409546d1d9: Hmm... No",
        "6d05f0c2942adc25946a4b02b37ffa00 (15:53): but I suppose I can use the service from ab7faae5d7b250ea8606486575f8f79c",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:53): ab7faae5d7b250ea8606486575f8f79c: just wondering if the IBM UTF-8 impl is any faster",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:54): wonders how many distributed moving parts the spec generation now has...",
        "6d05f0c2942adc25946a4b02b37ffa00 (15:54): but is Validator.nu much faster than the libxml HTML parser? that's currently being used and already it's slow :/",
        "ab7faae5d7b250ea8606486575f8f79c (15:55): b8810fee2f4a71f849f3f7409546d1d9: It still says it's spending lots of time in sun.nio.cs.UTF_8$Encoder.encodeArrayLoop",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:55): ab7faae5d7b250ea8606486575f8f79c: ok. I guess it's not picking up the ICU4J code automatically  :-(",
        "ab7faae5d7b250ea8606486575f8f79c (15:55): I presume it is actually using ICU4J now, since it's got some calls to com.ibm.icu.charset.UConverterDataReader.readMBCSTable too",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:56): ab7faae5d7b250ea8606486575f8f79c: from the name, that looks like a static method that runs on initial class loading",
        "ab7faae5d7b250ea8606486575f8f79c (15:56): b8810fee2f4a71f849f3f7409546d1d9: Oh, okay",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:57): 6d05f0c2942adc25946a4b02b37ffa00: I haven't benchmarked the Validator.nu parser against libxml2",
        "ab7faae5d7b250ea8606486575f8f79c (16:04): 6d05f0c2942adc25946a4b02b37ffa00: On my computer, parsing/reserialising the spec with libxml2 (via a Python script) takes about 0.55 seconds and with validator.nu (via (local) HTTP) takes about 0.75 seconds",
        "6d05f0c2942adc25946a4b02b37ffa00 (16:06): so it won't go faster",
        "6d05f0c2942adc25946a4b02b37ffa00 (16:06): but since libxml2 html can't be used...",
        "ab7faae5d7b250ea8606486575f8f79c (16:08): If the UTF-8 encoding took zero time then it'd be faster than libxml2 :-)",
        "6d05f0c2942adc25946a4b02b37ffa00 (16:09): I should also figure out how to make Python run faster on DreamHost",
        "ab7faae5d7b250ea8606486575f8f79c (16:21): b8810fee2f4a71f849f3f7409546d1d9: http://about.validator.nu/htmlparser/ - &quot;Fixed JavaDocs about XML violatation policy defaults.&quot; - s/violatation/violation/",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:22): ab7faae5d7b250ea8606486575f8f79c: thanks. fixed"
    ],
    "person_ids": [
        "6d05f0c2942adc25946a4b02b37ffa00",
        "ab7faae5d7b250ea8606486575f8f79c",
        "47223c0fa41aa7e167a2d1fd2740cbb8",
        "7f9405da4034bf43083e64b57302a8e6",
        "b25b6b77a0087ff8385941e5545d32ea",
        "fefe4c60d912e295e59fd874577ca7f9",
        "b8810fee2f4a71f849f3f7409546d1d9"
    ]
}