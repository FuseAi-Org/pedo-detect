{
    "id": "f17fe9a2d04d3d1c4c80b737fef99d91",
    "messages": [
        "cc097e0d7183ae8436e7df709553c8c0 (12:48): a9b326df4e6da61c5b6f5e1058be83a2: the &lt;/rt&gt; tags can be omitted too",
        "a9b326df4e6da61c5b6f5e1058be83a2 (12:48): http://news.cnet.com/8301-30685_3-20000423-264.html",
        "a9b326df4e6da61c5b6f5e1058be83a2 (12:48): &quot;Web guru Tim Bray takes Google Android job&quot;",
        "a9b326df4e6da61c5b6f5e1058be83a2 (12:50): cc097e0d7183ae8436e7df709553c8c0: in HTML5 ruby?",
        "cc097e0d7183ae8436e7df709553c8c0 (12:50): a9b326df4e6da61c5b6f5e1058be83a2: yes",
        "a9b326df4e6da61c5b6f5e1058be83a2 (12:51): I don't understand.. what would be the semantics of that?",
        "cc097e0d7183ae8436e7df709553c8c0 (12:52): the same; the rt element is closed at &lt;/ruby&gt; in that example",
        "cc097e0d7183ae8436e7df709553c8c0 (13:00): b8810fee2f4a71f849f3f7409546d1d9: no (re location.href)",
        "65325d50b2e25aca54bc871b89758c9c (13:00): I was surprised to learn that drawImage() with a &quot;copy&quot; composite operation is no faster than with the default &quot;src-over&quot; operation",
        "65325d50b2e25aca54bc871b89758c9c (13:00): (at least in Safari)",
        "65325d50b2e25aca54bc871b89758c9c (13:02): (drawImage is drawing a canvas that happens to contain all 100% opaque pixels in this case, but I would not expect the implementation to specifically check for that case)",
        "cc097e0d7183ae8436e7df709553c8c0 (13:05): http://software.hixie.ch/utilities/js/live-dom-viewer/?%3C!DOCTYPE%20html%3E%0A%3Ciframe%3E%3C%2Fiframe%3E%3Cscript%3E%0Aw(window%5B0%5D.location.href)%0A%3C%2Fscript%3E vs http://software.hixie.ch/utilities/js/live-dom-viewer/?%3C!DOCTYPE%20html%3E%0A%3Ciframe%3E%3C%2Fiframe%3E%3Cscript%3E%0Aw(window%5B0%5D.location.href)%3B%0A%3C%2Fscript%3E",
        "cc097e0d7183ae8436e7df709553c8c0 (13:05): ...is interesting in chrome",
        "a9b326df4e6da61c5b6f5e1058be83a2 (13:05): cc097e0d7183ae8436e7df709553c8c0: about the ruby thing, I misread what you wrote. had thought you were saying the rt element could be omitted",
        "cc097e0d7183ae8436e7df709553c8c0 (13:06): also if i replace the ; with a space",
        "cc097e0d7183ae8436e7df709553c8c0 (13:06): weird bug",
        "ab7faae5d7b250ea8606486575f8f79c (13:07): 65325d50b2e25aca54bc871b89758c9c: Drawing something that might contain alpha?",
        "ab7faae5d7b250ea8606486575f8f79c (13:07): (I know that at least Firefox has separate compositing paths for images that are known to be solid RGB)",
        "ab7faae5d7b250ea8606486575f8f79c (13:08): ((or Cairo does, anyway))",
        "65325d50b2e25aca54bc871b89758c9c (13:08): I was testing in Safari, and I believe we don't ever assume a canvas backing store is all RGB",
        "ab7faae5d7b250ea8606486575f8f79c (13:08): Ah, so doing drawImage(canvas) rather than drawImage(image)?",
        "ab7faae5d7b250ea8606486575f8f79c (13:11): About ImageData: If the fastest possible unpremultiplying-image-copy code is still slow enough to be a problem, could browsers do higher-level optimisations like having getImageData do a direct copy of the image data and only perform the unpremultiplication if the user accesses .data?",
        "ab7faae5d7b250ea8606486575f8f79c (13:11): (and then putImageData could do a direct copy with no premultiplying if it knows the user didn't fiddle with .data at all)",
        "ab7faae5d7b250ea8606486575f8f79c (13:12): (so it can be used for blitting between regions on a canvas or between multiple canvases, doing nothing more computationally complex than memcpy)",
        "65325d50b2e25aca54bc871b89758c9c (13:12): I think that would slow down doing poking at the contents of ImageData",
        "65325d50b2e25aca54bc871b89758c9c (13:12): by at least the branch to do the check for lazy un-premult",
        "65325d50b2e25aca54bc871b89758c9c (13:13): even then, it would be overall slower for cases where you actually do modify the ImageData",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:13): cc097e0d7183ae8436e7df709553c8c0: I guess window.location in Gecko is broken, then",
        "ab7faae5d7b250ea8606486575f8f79c (13:13): I presume anyone who cares about performance would do &quot;var d = imagedata.data; d[i]...&quot; rather than doing the .data lookup every time",
        "ab7faae5d7b250ea8606486575f8f79c (13:13): even if it's doing nothing more complex than a normal property lookup",
        "cc097e0d7183ae8436e7df709553c8c0 (13:13): b8810fee2f4a71f849f3f7409546d1d9: i get 'about:blank' in gecko",
        "65325d50b2e25aca54bc871b89758c9c (13:14): ab7faae5d7b250ea8606486575f8f79c: so you're assuming the lazy un-pre-multiply would be on accessing the data property?",
        "cc097e0d7183ae8436e7df709553c8c0 (13:15): b8810fee2f4a71f849f3f7409546d1d9: or the document's url if it's known when the script runs",
        "65325d50b2e25aca54bc871b89758c9c (13:15): ab7faae5d7b250ea8606486575f8f79c: it would still mean you have to do the original copy and un-premultiply as a second pass",
        "ab7faae5d7b250ea8606486575f8f79c (13:15): 65325d50b2e25aca54bc871b89758c9c: Yes, so it's fast if you don't look at the data at all, but if you do then it'll have a one-time conversion cost and then pixel access will be as fast as usual",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:15): cc097e0d7183ae8436e7df709553c8c0: oh. I get &quot;&quot; for window.location.href and &quot;about:blank&quot; for window.document.documentURI",
        "65325d50b2e25aca54bc871b89758c9c (13:16): ab7faae5d7b250ea8606486575f8f79c: that one-time conversion cost is going to be a lot for a large image - comparable to the cost of getImageData now, but you have the original cost of the raw copy on top of that",
        "65325d50b2e25aca54bc871b89758c9c (13:16): ab7faae5d7b250ea8606486575f8f79c: as it is, if you just want to pass image data around and *not* directly poke at pixels, you are better off passing a HTMLCanvasElement than an Image Data",
        "ab7faae5d7b250ea8606486575f8f79c (13:16): Is the raw copy significant in comparison to that?",
        "ab7faae5d7b250ea8606486575f8f79c (13:17): Looks like Firefox actually already does a raw copy from the canvas into the ImageData, and then unpremultiplies as a separate stage within getImageData, rather than doing copy+unpremultiply simultaneously",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:17): boohoo. Live DOM saving is broken",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:18): cc097e0d7183ae8436e7df709553c8c0: http://bit.ly/9GBt2V",
        "ab7faae5d7b250ea8606486575f8f79c (13:18): Looks like Firefox also uses a 64KB lookup table for unpremultiplication, which sounds a bit weird to me",
        "65325d50b2e25aca54bc871b89758c9c (13:18): ab7faae5d7b250ea8606486575f8f79c: that might partly explain why its getImageData is so slow",
        "ab7faae5d7b250ea8606486575f8f79c (13:19): (https://bugzilla.mozilla.org/show_bug.cgi?id=519400)",
        "ab7faae5d7b250ea8606486575f8f79c (13:19): goes away",
        "cc097e0d7183ae8436e7df709553c8c0 (13:20): b8810fee2f4a71f849f3f7409546d1d9: seems it's different for data: urls",
        "cc097e0d7183ae8436e7df709553c8c0 (13:21): b8810fee2f4a71f849f3f7409546d1d9: about:blank and data: gives empty string in gecko, it seems",
        "cc097e0d7183ae8436e7df709553c8c0 (13:21): b8810fee2f4a71f849f3f7409546d1d9: but src=document gives 'about:blank'",
        "b8810fee2f4a71f849f3f7409546d1d9 (13:27): cc097e0d7183ae8436e7df709553c8c0: wow. that's weird."
    ],
    "person_ids": [
        "cc097e0d7183ae8436e7df709553c8c0",
        "a9b326df4e6da61c5b6f5e1058be83a2",
        "65325d50b2e25aca54bc871b89758c9c",
        "ab7faae5d7b250ea8606486575f8f79c",
        "b8810fee2f4a71f849f3f7409546d1d9"
    ]
}