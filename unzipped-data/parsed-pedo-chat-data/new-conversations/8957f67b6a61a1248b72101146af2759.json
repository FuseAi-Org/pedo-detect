{
    "id": "8957f67b6a61a1248b72101146af2759",
    "messages": [
        "edb259c0e0038f38bb200bc20c8cbf7e (22:45): does anyone know how the document.all hiding works in Mozilla?",
        "1adba86c435b5fe0f7ea043370b1636b (22:46): a bit",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:47): http://developer.mozilla.org/en/docs/DOM:document.all does not exist",
        "1adba86c435b5fe0f7ea043370b1636b (22:48): do you have specific questions, or are you just looking for a comprehensive spec? :)",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:49): I wonder if document.all returns some quirky object that &quot;booleanizes&quot; to &quot;false&quot;",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:49): or if it's some other trickery",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:50): hsivonen: yeah, they never did reply to http://lists.w3.org/Archives/Public/www-style/2007Nov/0274.html",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:50): and whether &quot;booleanizes&quot; is an actual JS concept or specifically added",
        "1adba86c435b5fe0f7ea043370b1636b (22:50): other trickery",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:50): sends a proposal to solve the inline/block problem",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:50): but it basically requires us to stop allowing &lt;ol&gt; and co in paragraphs",
        "1adba86c435b5fe0f7ea043370b1636b (22:50): I believe it hooks gets of document.all and returns &quot;undefined&quot; if it's in a &quot;detecting&quot; context",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:52): interesting",
        "1adba86c435b5fe0f7ea043370b1636b (22:52): hmm",
        "1adba86c435b5fe0f7ea043370b1636b (22:52): http://lxr.mozilla.org/seamonkey/source/dom/src/base/nsDOMClassInfo.cpp#7889",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:53): 69b0d3dfe919a6b860a9fac82de52a7e, you could make &lt;ol&gt; and &lt;ul&gt; imply &lt;p&gt; around them too",
        "1adba86c435b5fe0f7ea043370b1636b (22:54): as I read that, it makes document.all exist if you try to get .length, .item(), or something that matches an id from it, but not exist otherwise",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:54): that file seems to beat HTML 5 in bytes",
        "1adba86c435b5fe0f7ea043370b1636b (22:55): yeah, it's got a lot of icky DOM magic built into it :)",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:56): edb259c0e0038f38bb200bc20c8cbf7e: but then you could never use &lt;p&gt; in &lt;li&gt;",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:56): or &lt;hx&gt; in &lt;li&gt;",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:56): etc",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:57): sorry, what I meant was that &lt;aside&gt; TEXT &lt;ol&gt; is like &lt;aside&gt; &lt;p&gt; TEST &lt;/p&gt; &lt;ol&gt;",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:57): right, that means not allowing &lt;ol&gt; in &lt;p&gt;",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:58): yes, but you marked that example as non-conforming",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:58): &lt;aside&gt; TEXT &lt;ul&gt; &lt;li&gt; &lt;p&gt; TEXT",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:58): to be more specific",
        "edb259c0e0038f38bb200bc20c8cbf7e (22:59): oh, or that because of the &lt;em&gt; on the line before?",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:59): an &lt;ol&gt; is either inline or block",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:59): if it's inline, it can't contain blocks",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:59): if it's inside a paragraph, it's inline",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:00): if we allow &lt;ol&gt; inside paragraphs, then &lt;aside&gt; text &lt;ol&gt;... looks the same as &lt;aside&gt; &lt;p&gt; text &lt;ol&gt;...",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:00): (assuming we do implied &lt;p&gt;s)",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:01): (i think doing implied &lt;p&gt;s around only elements that can't be blocks would be even more confusing)",
        "edb259c0e0038f38bb200bc20c8cbf7e (23:01): &lt;aside&gt; the way people use IMHO doesn't seem humble at all most of the time",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:01): heh",
        "1adba86c435b5fe0f7ea043370b1636b (23:02): that's completely wrong and you're stupid, IMHO",
        "edb259c0e0038f38bb200bc20c8cbf7e (23:02): &lt;aside&gt; TEXT &lt;ul&gt; &lt;li&gt; TEXT &lt;p&gt; TEXT",
        "edb259c0e0038f38bb200bc20c8cbf7e (23:02): why is the &lt;p&gt; non-conforming with implied paragraphs",
        "edb259c0e0038f38bb200bc20c8cbf7e (23:02): ?",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:04): if we assume that &lt;ul&gt; can be inline, and if we assume that implied paragraphs wrap all potentially inline elements in a run, then the &lt;ul&gt; in that example is inline and inside a paragraph. Elements that are inline can't contain blocks.",
        "edb259c0e0038f38bb200bc20c8cbf7e (23:06): ok, my proposal (on top of implied paragraphs) was to make &lt;ul&gt;, etc. block elements",
        "69b0d3dfe919a6b860a9fac82de52a7e (23:06): that's what i said. remove the ability for &lt;ol&gt; to be inside &lt;p&gt;."
    ],
    "person_ids": [
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "1adba86c435b5fe0f7ea043370b1636b",
        "69b0d3dfe919a6b860a9fac82de52a7e"
    ]
}