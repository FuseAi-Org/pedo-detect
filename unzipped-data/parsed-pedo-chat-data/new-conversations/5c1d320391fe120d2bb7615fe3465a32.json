{
    "id": "5c1d320391fe120d2bb7615fe3465a32",
    "messages": [
        "4b58ff16c795126113b9eebb79a1cd1c (14:54): But learning is why I'm doing this, so that's good.",
        "ad20763cbd34183802c9f62add51442b (14:54): heh",
        "ef6cd31f7ed044ca3c1266af1b551312 (15:03): hm",
        "ef6cd31f7ed044ca3c1266af1b551312 (15:03): how would i insert a DWORD into a data buffer?",
        "c24781797c98640feb74dfa85104daaf (15:04): What type of &quot;data buffer&quot; and what is a DWORD?",
        "f1cb29d811ce345a29f43b6f0f6a394b (15:12): +squiggly: have you looked at the struct module yet?",
        "ef6cd31f7ed044ca3c1266af1b551312 (15:15): +rorry, the documentation is confusing",
        "f1cb29d811ce345a29f43b6f0f6a394b (15:16): +squiggly: ok, what don't you understand?",
        "ef6cd31f7ed044ca3c1266af1b551312 (15:17): +what is this 'v1, v2, ...' stuff",
        "f1cb29d811ce345a29f43b6f0f6a394b (15:18): +the values you want to pack",
        "f1cb29d811ce345a29f43b6f0f6a394b (15:19): +struct.pack('l',1) #=&gt; '\\x01\\x00\\x00\\x00'",
        "f1cb29d811ce345a29f43b6f0f6a394b (15:19): +that packs the value '1' into a C long int (a 32-bit int, which may or may not be a DWORD -- i can't remember what that is)",
        "c24781797c98640feb74dfa85104daaf (15:19): +squiggly: why don't you start by explaining what exactly it is you want to do?",
        "ef6cd31f7ed044ca3c1266af1b551312 (15:20): +Well, I'm kind of making it up as I go along",
        "c24781797c98640feb74dfa85104daaf (15:20): +DWORD is not a C type anyway.",
        "ef6cd31f7ed044ca3c1266af1b551312 (15:20): +So that might present a bit of a problem",
        "ef6cd31f7ed044ca3c1266af1b551312 (15:20): +unsigned 32bit int, tp",
        "f1cb29d811ce345a29f43b6f0f6a394b (15:20): +and i disclaim any knowledge of specific standard bits wrt C types before some language lawyer shoots me",
        "c24781797c98640feb74dfa85104daaf (15:20): +IIRC, it's a typedef of unsigned long on Win32.",
        "ef6cd31f7ed044ca3c1266af1b551312 (15:20): +I'm interested in writing a client that can connect to the Battle.net service",
        "5ff358a817dc7af43e6d438a1f402bee (15:21): +DWORD is 32bit",
        "ef6cd31f7ed044ca3c1266af1b551312 (15:21): +I did it earlier in Visual Basic, so I understand the protocol",
        "5ff358a817dc7af43e6d438a1f402bee (15:21): +masm :)",
        "ef6cd31f7ed044ca3c1266af1b551312 (15:21): +Python is a little overwhelming O_O",
        "ef6cd31f7ed044ca3c1266af1b551312 (15:22): +getting late, and since nobody wants to help me... sleepytime",
        "ef6cd31f7ed044ca3c1266af1b551312 (15:22): +night everyone :)",
        "678526de893af57721bbdb456049ea68 (15:32): +I need a platform independent package (biased towards Linux) for playing raw audio streams. Does anyone here know of a good candidate?  Pymedia looks interesting, but doesn't seem to build on AMD64",
        "239e3d28c3c254bc8636cf9094ed77c8 (15:34): +JDahl: sorry - haven't a clue",
        "019cedf410539bd96b1f7edd14a6e594 (15:35): JDahl, there is pyao, but it does not seem to be maintained anymore. <a href=\"http://www.andrewchatham.com/pyogg/\">http://www.andrewchatham.com/pyogg/</a>",
        "678526de893af57721bbdb456049ea68 (15:36): +what about pygame? I think sdl works on basically any platform nowadays",
        "c24781797c98640feb74dfa85104daaf (15:36): +JDahl: there's always ossaudiodev, though it's not all that platform independent (though biased towards Linux :)).",
        "678526de893af57721bbdb456049ea68 (15:37): +(I mean, isn't pygame based on libsdl?)",
        "c24781797c98640feb74dfa85104daaf (15:37): +<a href=\"http://pysdl.sourceforge.net/\">http://pysdl.sourceforge.net/</a> perhaps.",
        "678526de893af57721bbdb456049ea68 (15:38): +thanks! for some reason I hadn't spotted pysdl - that might cut it",
        "c24781797c98640feb74dfa85104daaf (15:40): +Well, the SF page says it's &quot;... now unmaintained&quot; and recommends pygame, so ...",
        "678526de893af57721bbdb456049ea68 (15:40): +oh",
        "c24781797c98640feb74dfa85104daaf (15:40): +Pygame should probably work.",
        "c24781797c98640feb74dfa85104daaf (15:41): +At least it supports the most popular platforms.",
        "678526de893af57721bbdb456049ea68 (15:43): +and it's included in Debian!",
        "c24781797c98640feb74dfa85104daaf (15:44): +`apt-cache show python-pyao' might also cut it.",
        "c24781797c98640feb74dfa85104daaf (15:45): +If audio output is all you need.",
        "678526de893af57721bbdb456049ea68 (15:45): +yes, I only need to play simple uncoded audiostreams",
        "c24781797c98640feb74dfa85104daaf (15:46): +Hmm.  &quot;Cross-platform&quot; apparently does not include Windows *shrugs*.  I suppose you want that too.",
        "678526de893af57721bbdb456049ea68 (15:47): +tp76, I certainly wouldn't mind Windows compatibility, but it's not critical",
        "c24781797c98640feb74dfa85104daaf (15:51): +I suppose you could write your own library.  It's just a few pages of C code required to interface with OSS (Unix) and waveOut (Windows).  Oh well.  Good luck ;-)",
        "2a655a0e14a4584229ba4aeef43b9039 (15:52): /dev/null&quot;)",
        "10120f397a0f4db70d1aeb2d81229e70 (15:52): +no!! don't use oss, use alsa instead",
        "c24781797c98640feb74dfa85104daaf (15:53): +ALSA emulates OSS anyway.  OSS is also simpler.  He just wants to write some audio data to the device.",
        "10120f397a0f4db70d1aeb2d81229e70 (15:55): +emulate like in &quot;module snd_pcm_oss not found&quot;?",
        "678526de893af57721bbdb456049ea68 (15:57): +the audio playback in pygame works flawlessly, whereas pyao can't open the device",
        "c24781797c98640feb74dfa85104daaf (15:57): +Sure, if you don't compile it with OSS emulation.  I'm also not sure if ALSA works on BSD.",
        "019cedf410539bd96b1f7edd14a6e594 (15:57): +of course not",
        "c24781797c98640feb74dfa85104daaf (15:58): +Exactly.",
        "c24781797c98640feb74dfa85104daaf (15:58): +So OSS."
    ],
    "person_ids": [
        "4b58ff16c795126113b9eebb79a1cd1c",
        "ad20763cbd34183802c9f62add51442b",
        "ef6cd31f7ed044ca3c1266af1b551312",
        "c24781797c98640feb74dfa85104daaf",
        "f1cb29d811ce345a29f43b6f0f6a394b",
        "5ff358a817dc7af43e6d438a1f402bee",
        "678526de893af57721bbdb456049ea68",
        "239e3d28c3c254bc8636cf9094ed77c8",
        "019cedf410539bd96b1f7edd14a6e594",
        "2a655a0e14a4584229ba4aeef43b9039",
        "10120f397a0f4db70d1aeb2d81229e70"
    ]
}