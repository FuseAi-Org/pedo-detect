{
    "id": "06fd07b9eea3e227b9d43832fd1d04a9",
    "messages": [
        "b8810fee2f4a71f849f3f7409546d1d9 (20:04): edb259c0e0038f38bb200bc20c8cbf7e: are you sure all browsers regressed xml loading instead of the test breaking?",
        "b8810fee2f4a71f849f3f7409546d1d9 (20:05): 1f8387eb43f131d7c309a90a4e36b5cb: did you test J?\u00a7gerMonkey or something older for 32-bit arithmetic?",
        "b8810fee2f4a71f849f3f7409546d1d9 (20:05): 1f8387eb43f131d7c309a90a4e36b5cb: I'd expect trunk to do 32-bit math faster than beta6 or earlier",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:05): b8810fee2f4a71f849f3f7409546d1d9: I have no idea.  I'm using b7.",
        "b8810fee2f4a71f849f3f7409546d1d9 (20:06): 1f8387eb43f131d7c309a90a4e36b5cb: odd",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:06): The function in question is this:",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:06): None",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:06): var lsw = (x &amp; 0xFFFF) + (y &amp; 0xFFFF);",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:06): var msw = (x &gt;&gt; 16) + (y &gt;&gt; 16) + (lsw &gt;&gt; 16);",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:06): return (msw &lt;&lt; 16) | (lsw &amp; 0xFFFF);",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:06): And I tried replacing it with just:",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:07): return ( (x &amp; 0xFFFFFFFF) + (y &amp; 0xFFFFFFFF) ) &amp; 0xFFFFFFFF;",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:07): Which, come to think of it, is probably incorrect anyway.",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:07): It didn't change the md5 for the strings I was testing, at least.",
        "edb259c0e0038f38bb200bc20c8cbf7e (20:08): b8810fee2f4a71f849f3f7409546d1d9, good point, no",
        "b8810fee2f4a71f849f3f7409546d1d9 (20:08): 1f8387eb43f131d7c309a90a4e36b5cb: the latter could overflow out of 32 bits for the intermediate value, right?",
        "edb259c0e0038f38bb200bc20c8cbf7e (20:08): makes a local test",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:08): b8810fee2f4a71f849f3f7409546d1d9: Yes.",
        "f69d55844584e567962289a5226442b4 (20:08): wow",
        "f69d55844584e567962289a5226442b4 (20:09): ((x|0) + (y|0))|0",
        "b8810fee2f4a71f849f3f7409546d1d9 (20:09): 1f8387eb43f131d7c309a90a4e36b5cb: I think the original correctly lets overflow wrap around",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:10): b8810fee2f4a71f849f3f7409546d1d9: Yes, it does.",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:10): b8810fee2f4a71f849f3f7409546d1d9: My version is incorrect as written.",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:10): f69d55844584e567962289a5226442b4: How does |0 work?  Do bitwise operators automatically truncate to 32 bits or something?",
        "f69d55844584e567962289a5226442b4 (20:10): yes",
        "f69d55844584e567962289a5226442b4 (20:11): convert to `long`",
        "f69d55844584e567962289a5226442b4 (20:11): ~~x too",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:11): Ah, kk.  Didn't realize that, so I using a more generically correct version.",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:12): Let me try out a correct variant.",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:14): All right, it's back to a wash with &quot;var tmp = ~~x + ~~y; return (tmp&gt;&gt;&gt;32) || tmp;&quot;",
        "f69d55844584e567962289a5226442b4 (20:14): (tmp&gt;&gt;&gt;32)?",
        "f69d55844584e567962289a5226442b4 (20:15): it always 0",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:16): No, x+y can be greater than 32 bits.",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:16): Frex, if both of them are 2^32 - 1.",
        "edb259c0e0038f38bb200bc20c8cbf7e (20:16): b8810fee2f4a71f849f3f7409546d1d9, hmm yeah, all browsers do it incrementally",
        "edb259c0e0038f38bb200bc20c8cbf7e (20:17): better fix my post",
        "f69d55844584e567962289a5226442b4 (20:18): 1f8387eb43f131d7c309a90a4e36b5cb read es spec",
        "f69d55844584e567962289a5226442b4 (20:18): x &gt;&gt;&gt; 32 &lt;=&gt; x &gt;&gt;&gt; 0",
        "f69d55844584e567962289a5226442b4 (20:19): x &gt;&gt;&gt; y &lt;=&gt; long(x) &gt;&gt;&gt; long(y)&amp;31",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:19): Oh, hrm, you're right.  I guess I need to explicitly use numeric comparisons then.",
        "b8810fee2f4a71f849f3f7409546d1d9 (20:22): edb259c0e0038f38bb200bc20c8cbf7e: you might be interested in the xml-dev threads on MicroXML"
    ],
    "person_ids": [
        "b8810fee2f4a71f849f3f7409546d1d9",
        "1f8387eb43f131d7c309a90a4e36b5cb",
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "f69d55844584e567962289a5226442b4"
    ]
}