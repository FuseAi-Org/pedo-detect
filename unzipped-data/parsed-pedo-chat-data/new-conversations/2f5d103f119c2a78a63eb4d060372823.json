{
    "id": "2f5d103f119c2a78a63eb4d060372823",
    "messages": [
        "69b0d3dfe919a6b860a9fac82de52a7e (04:22): 042dd99eb0ff8653814e445ca0093427: http://junkyard.damowmow.com/326",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:23): er, doesn't work in firefox",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:23): hold on",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:23): (or try it in webkit)",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:25): aha, my bad",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:25): ok fixed",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:25): 042dd99eb0ff8653814e445ca0093427: is this http://junkyard.damowmow.com/326 what you had in mind?",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:25): ab7faae5d7b250ea8606486575f8f79c: in case you haven't already tested this, there's lack of interop when it comes to the last argument of arc() being omitted",
        "042dd99eb0ff8653814e445ca0093427 (04:25): yeah",
        "042dd99eb0ff8653814e445ca0093427 (04:26): well no",
        "042dd99eb0ff8653814e445ca0093427 (04:26): yes and no",
        "042dd99eb0ff8653814e445ca0093427 (04:26): Ithat's cool, and I guess it is what a kaleidoscope does",
        "042dd99eb0ff8653814e445ca0093427 (04:26): but my dream was different",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:26): then i don't understand your dream :-)",
        "042dd99eb0ff8653814e445ca0093427 (04:26): neither do I",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:27): hehe",
        "b07211a0c7cb119232799d2119cea90f (04:27): the kaleidoscope is cool",
        "042dd99eb0ff8653814e445ca0093427 (04:27): what I had in my dream, IIRC, was a changing triangular image that was being tiled across the plane, where there's a reflection along each edge",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:28): there's something very pretty about http://junkyard.damowmow.com/326",
        "042dd99eb0ff8653814e445ca0093427 (04:28): you could obviously do it with an explicit loop",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:28): 042dd99eb0ff8653814e445ca0093427: ooo, interesting",
        "042dd99eb0ff8653814e445ca0093427 (04:29): what I meant in my blog is that we have builtin support for tiling rectangles",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:29): 042dd99eb0ff8653814e445ca0093427: sounds like what we'd really want to get that kind of effect is a programmable Pattern object",
        "042dd99eb0ff8653814e445ca0093427 (04:29): not just in canvas but in toolkits generally",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:29): 042dd99eb0ff8653814e445ca0093427: with a callback that does the actual painting in some way (maybe it's passed a context with a clipping path set)",
        "042dd99eb0ff8653814e445ca0093427 (04:29): but we don't have more advanced tessellation operations",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:29): yeah",
        "042dd99eb0ff8653814e445ca0093427 (04:29): Quartz has something like that",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:30): you'd have to give the pattern the extent it is expected to render over too, i guess",
        "042dd99eb0ff8653814e445ca0093427 (04:30): I'm not sure what the right way would be to do it",
        "042dd99eb0ff8653814e445ca0093427 (04:30): but",
        "042dd99eb0ff8653814e445ca0093427 (04:30): don't take my dreams as requirements",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:30): oh don't worry",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:31): i'm just noodling, as DanC says",
        "ab7faae5d7b250ea8606486575f8f79c (04:32): 69b0d3dfe919a6b860a9fac82de52a7e: I have (non-online) tests for missing arguments, which seem to cover that case - FF3/O9.5 throw an exception (of the wrong type), S3 throws an exception for &lt;= 2 arc arguments and executes the command for &gt;= 3, so it's just Safari's problem",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:33): k",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:33): tries to decypher ab7faae5d7b250ea8606486575f8f79c's arc() feedback",
        "ab7faae5d7b250ea8606486575f8f79c (04:33): About the case where the arc is larger than 2pi?",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:34): about the case with rounding near 2pi",
        "ab7faae5d7b250ea8606486575f8f79c (04:34): Okay",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:34): or rather, the case where the angles are close to each other",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:34): the problem being i don't understand your suggested text since it seems to be mostly what's there already and i'm having to figure out what you added/changed",
        "ab7faae5d7b250ea8606486575f8f79c (04:40): I think just the second sentence is new, to handle the cases where the arc is wound around more than 2pi",
        "ab7faae5d7b250ea8606486575f8f79c (04:42): (by making those cases draw the entire circle, rather than making the arc jump back to zero length when the angle difference exceeds 2pi)",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:42): check the new definition",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:42): is it ok?",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:42): http://www.whatwg.org/specs/web-apps/current-work/#arcx-",
        "ab7faae5d7b250ea8606486575f8f79c (04:45): needs to work out a better way of describing how he thinks algorithms should be tweaked to work differently",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:46): just say what's wrong :-)",
        "ab7faae5d7b250ea8606486575f8f79c (04:47): I did, in my third paragraph :-)",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:47): indeed",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:47): and that's what i used :-)",
        "ab7faae5d7b250ea8606486575f8f79c (04:49): The new definition seems wrong, but I need to work out precisely how it's wrong...",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:49): really? hm.",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:50): i suppose it needs to define start and end points",
        "ab7faae5d7b250ea8606486575f8f79c (04:50): It's at least wrong in that it doesn't define the start and end points, if the angle difference is &gt;=2pi",
        "ab7faae5d7b250ea8606486575f8f79c (04:52): tries to remember which way clocks turn",
        "69b0d3dfe919a6b860a9fac82de52a7e (04:52): yeah i'll just hoist the point definition from the next para up one",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:02): i go to look up convertToIntegerTiesToEven to make sure you're not making stuff up about what IEEE754r says",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:02): and the first hit",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:02): is the e-mail you sent",
        "ab7faae5d7b250ea8606486575f8f79c (05:04): I think I looked at http://www.validlab.com/754R/drafts/archive/2006-10-04.pdf via http://en.wikipedia.org/wiki/IEEE_754r so it might be good to double-check with a more reliable source",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:06): i don't find it in wikipedia",
        "ab7faae5d7b250ea8606486575f8f79c (05:09): Hmm, the spec change doesn't solve the problem I suggested in my email (since arc(x, y, r, 0, 2*pi-epsilon, true) will draw an almost-zero-length arc, and it's possible that 2*Math.PI == 2*pi-epsilon), but neither does the solution I suggested, and actually I'm not sure any decent solution is possible",
        "ab7faae5d7b250ea8606486575f8f79c (05:10): At least with the new spec you can write arc(x, y, r, 0, 2*Math.PI, false) and be sure it's going to draw a circle, which wasn't possible before now",
        "ab7faae5d7b250ea8606486575f8f79c (05:10): so I think that should be alright",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:11): don't know how to distinguish the case of 0..2pi-e and 0..-e in any sane way, given that we don't want to distinguish between 0..2pi-x and 0..-x",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:11): where e &lt;&lt; x",
        "ab7faae5d7b250ea8606486575f8f79c (05:15): I'm sure I came to a different conclusion when I last thought about this, but now when I draw lots of little arcs I can't work out any way it could work sensibly in all cases",
        "ab7faae5d7b250ea8606486575f8f79c (05:16): so the spec sounds as sensible as it could be",
        "ab7faae5d7b250ea8606486575f8f79c (05:16): though not as compatible with existing implementations as it could be",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:16): k",
        "ab7faae5d7b250ea8606486575f8f79c (05:17): If it said &quot;if anticlockwise and start-end &gt; 2pi, or if clockwise and end-start &gt; 2pi&quot;, instead of &quot;if abs(start-end) &gt; 2pi&quot;, then it would match the behaviour of Firefox and Safari",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:18): what do firefox and safari do for anticlockwise and end-start &gt; 2pi?",
        "ab7faae5d7b250ea8606486575f8f79c (05:19): They draw the arc from (start mod 2pi) anticlockwise to (end mod 2pi)",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:20): seems dumb to do something different for 0..2pi+e than for -(2pi+e)..0",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:21): well, i guess not",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:21): hmm",
        "ab7faae5d7b250ea8606486575f8f79c (05:22): Firefox and Safari will need to be changed to match the spec anyway, because they handle arc(x,y,r, 0, 4*Math.PI, false) by drawing a 4pi arc (which is kind of crazy) instead of a 2pi arc, so I suppose it doesn't hurt if the spec requires some extra changes too",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:23): i'm changing it to not do a whole circle",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:23): for those cases",
        "ab7faae5d7b250ea8606486575f8f79c (05:25): They don't do something different for 0..2pi+e than for -(2pi+e)..0",
        "ab7faae5d7b250ea8606486575f8f79c (05:25): since that's just uniformly rotating the whole arc by -(2pi+e)",
        "ab7faae5d7b250ea8606486575f8f79c (05:26): The issue is that for 0..3pi clockwise they draw a circle, and for 0..3pi anticlockwise they draw a semicircle",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:28): The issue is that for 0..3pi clockwise they draw a circle, and for 3pi..0 clockwise they draw a semicircle, and that makes sense to me for some reason, and i want the spec to require that",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:28): no?",
        "ab7faae5d7b250ea8606486575f8f79c (05:32): That doesn't make more or less sense to me than any other thing the spec could require - it just has the advantage of matching most deployed implementations",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:32): yeah i agree that it doesn't make any more objective sense",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:33): though for some reason it does have some weird feeling of rightness to me",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:33): anyway",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:33): the spec says that now",
        "ab7faae5d7b250ea8606486575f8f79c (05:34): The most sensible solution would be &quot;if clockwise and end &lt; start, or if anticlockwise and end &gt; start, throw an exception because you're being silly and trying to draw the arc in the wrong direction&quot;",
        "ab7faae5d7b250ea8606486575f8f79c (05:34): Actually you could just skip the clockwise/anticlockwise flag entirely, and have it depend solely on the relative angles",
        "ab7faae5d7b250ea8606486575f8f79c (05:34): But that doesn't work so well for compatibility with existing code/implementations",
        "ab7faae5d7b250ea8606486575f8f79c (05:48): notices that he has trouble thinking coherently, and goes to bed",
        "69b0d3dfe919a6b860a9fac82de52a7e (05:49): n"
    ],
    "person_ids": [
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "042dd99eb0ff8653814e445ca0093427",
        "b07211a0c7cb119232799d2119cea90f",
        "ab7faae5d7b250ea8606486575f8f79c"
    ]
}