{
    "id": "f95cd021a353d0e56153a49d97c90146",
    "messages": [
        "88d4d34a8064a4ff39fd5e144eea7762 (21:37): discovers that units like em throw a monkey wrench into his algorithm, because they can't be directly compared to computed values",
        "88d4d34a8064a4ff39fd5e144eea7762 (21:39): also discovers that &quot;specified value&quot; already means something in CSS, so he probably shouldn't reuse it",
        "88d4d34a8064a4ff39fd5e144eea7762 (21:57): Maybe this is why no one allows CSS values for the fontSize command.  It would be horribly confusing.",
        "88d4d34a8064a4ff39fd5e144eea7762 (21:58): If you allow em values or similar.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:10): 88d4d34a8064a4ff39fd5e144eea7762: Just compute the ems as well.  They compute down to px.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:11): (Percentages still wont' work, though.)",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:11): (You need used values for that.)",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:11): 1f8387eb43f131d7c309a90a4e36b5cb, what do you mean?",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:11): (Which is what getComputedStyle returns, due to the terms changing after that API was created.)",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:11): What should it mean if someone does document.execCommand(&quot;fontSize&quot;, null, &quot;2em&quot;)?",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:11): It should set the font-size to 2em.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:11): That is, twice the font-size of the parent.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:12): And the meaning of that from a user perspective is more or less random, right?",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:12): Because users select visible text, not elements.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:12): No, it's twice as large as the surrounding text.  If you select text with disparate sizes, they'll all grow twice as big.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:13): What if you select the element &lt;span style=&quot;font-size: 2em&quot;&gt;Foo&lt;/span&gt;?",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:13): Then the size doesn't change?",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:13): (Well, assuming the font-size wasn't set already.)",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:13): Yes.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:13): And is that supposed to be even remotely comprehensible to the user?",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:13): At least, if you do the obvious thing from an API perspective.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:13): Alternately, compute 2em against the target element, then apply it.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:13): Because if you run the exact same command with one less letter selected, the size doubles.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:14): Yeah, that's a reasonabl critique.  So isntead just compute 2em into px, then apply it.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:14): So then it just always means &quot;double the size&quot;?  That's not what a length of 2em normally means.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:14): Authors who try to use em lengths for fontSize will not be expecting that at all.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:14): So, both options will be completely perplexing for one of your target audiences?",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:15): Yes, so let's just not allow it.  No current browser allows anything for fontSize other than 1 to 7 anyway.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:15): Okay.  Were you just seeing if there was something comprehensible you could do?",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:15): I was pretty sure there wasn't, is the thing, after I thought about it.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:15): Initially I thought &quot;let's allow CSS sizes!&quot;",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:15): kk",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:16): Note that the numbered sized are defined in terms of ems anyway, so your problem of &quot;",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:16): No they aren't.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:16): They're defined proportional to the user's font size preference.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:16): &lt;font size=4&gt; will always be the same size no matter what the parent's size is.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:17): That's very useful, but unfortunately CSS doesn't expose those semantics.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:17): Ah, okay, then it's relative to rems.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:17): Nope.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:17): rems change with the root element.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:17): &lt;font size&gt; does not.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:18): For document.execCommand(&quot;fontSize&quot;, null, &quot;7&quot;) in styleWithCSS mode, WebKit outputs &lt;span style=&quot;font-size: -webkit-xxx-large&quot;&gt;.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:18): Gecko just outputs &lt;font&gt; regardless of mode, for fontSize.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:20): ...oh, huh.  I never quite grasped the implications of the definition for the font-size keywords.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:21): Yeah, I didn't either until I just researched it yesterday.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:21): I wonder if that's intentional?",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:21): It's incredibly annoying when you have things like &lt;font size=7&gt; not mapping to anything in CSS.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:21): If what's intentional?",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:21): That it's relative to the default size, not the root size.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:22): I wondered whether it's intentional that rem is relative to the root size instead of default size.  Being relative to default size seems considerably more useful.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:22): Yes, that's intentional.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:22): If the author specifies an absolute font-size, do UAs scale it up along with the user default preferences?",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:22): tests",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:22): Why?",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:23): So that when you build em-based layouts, you have a unit that doesn't require adjustment if it's used within, say, a heading.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:23): Just set the base em size on root, and use rems everywhere.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:23): Yeah, but why can't you key it off the user default size instead of the root element size?",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:24): Because you'd want to scale up the whole page for some reason?",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:24): So the author can get an em size that they want.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:28): This is the kind of pain that's the reason I think &lt;font&gt; should remain invalid, by the way, even though &lt;u&gt; and similar should be valid.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:29): What, just that one value of &lt;font&gt; isn't representable in CSS?",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:30): Plus the fact that size=1 maps to xx-small but size=2 maps to small, plus the crazy legacy parsing.  And that's just for size.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:30): color is also terrible.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:30): I haven't attempted to plumb the depths of name yet.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:30): That way lies madness.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:30): font-face is horrible enough in actual CSS.",
        "88d4d34a8064a4ff39fd5e144eea7762 (22:30): Really?  Is &lt;font name&gt; very different from font-face?",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:31): I dunno how @name works - it's actually probably better, given that it's well-delineated.  font-face is horrible, because it has some ridiculous specialized parsing mode.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:31): Such that &quot;font-face: i am a single font name;&quot; works.",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:40): 1f8387eb43f131d7c309a90a4e36b5cb: so is there an answer to how we chain selectors to the end of shadow pseudo elements? I may have missed a discussion or two",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:40): 1f8387eb43f131d7c309a90a4e36b5cb: for example video::-webkit-timeline:disabled",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:40): No, there hasn't been any real activity on that. :/",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:41): how about video:part(-webkit-timeline):disabled?",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:41): That's the same thing (assuming you meant ::part()).",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:42): do I? :)",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:42): Yes.  video:part() is still selecting the &lt;video&gt;.",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:42): :(",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:42): video::part() is selecting something else.",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:42): I thought things like nth-child select children?",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:43): Nope.  p:nth-child(1) selects the &lt;p&gt; if it's the first child.",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:43): declares himself a CSS ignoramus",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:43): Pseudoclasses are just like classes, except they're based on information that the UA provides rather than the document itself.",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:43): so tell me how to fix this :)",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:43): now!",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:43): Sure!  It's an easy 3-step process.",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:44): nooo, not the 3-step process",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:44): 1) Start a thread on www-style saying that you want to implement something.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:44): 2) ...",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:44): 3) double rainbow",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:44): yay",
        "3a11d663baf9dd49fd3266d53d9bec5c (22:44): 3) Nothing happened, goto 1",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:44): Nonono, *that* 3 only happens when no implementors care.",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:44): 1) throw some sh*t together in webkit",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:44): Which is what has happened every time so far.",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:44): 2) let www-style sort it out",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:45): 3) reimplement it the right way",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:45): I say develop a magical new way to context-switch and target a pseudo-element.",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:45): so it's really a selector",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:45): &quot;video %timeline:disabled&quot; or something, so you can chain down the pseudos.",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:45): I really want it to just key off the ids",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:45): since shadow DOM subtree ids are unique to the subtree",
        "3a11d663baf9dd49fd3266d53d9bec5c (22:46): 1f8387eb43f131d7c309a90a4e36b5cb, &quot;we want to reserve punctuation&quot;? :)",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:46): how about video &lt;3timeline:disabled",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:46): Or!  Let % be a combinator.  &quot;video % timeline&quot; means &quot;find a &lt;video&gt;, then drop into the shadow subtree and find a &lt;timeline&gt;.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:46): See, I dunno what's a good idea here.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:46): I've got like 5 possible approaches.",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:47): I like combinators",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:47): Combinators are good, because they keep your selectors linear.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:47): I like the analogy with &quot;video &gt; timeline&quot; - one selects light children, the other selects shadow children.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:48): video ] timeline",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:48): (Note: bad idea.)",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:52): we should use emoticons",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:53): video :) timeline",
        "3a11d663baf9dd49fd3266d53d9bec5c (22:53): video :( timeline",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:53): Let's just use pseudo-elements and let selectors extend past them.",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:54): Wait, no, that doesn't work.  &gt;_&lt;",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:54): 1f8387eb43f131d7c309a90a4e36b5cb: I am now on step 2",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:54): It still leaves us being inconsistent.",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:54): yeah, I already do some gnarly stuff in CSS parser to let unknown pseudo elements slide through",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:55): In &quot;video::timeline thumb&quot;, which is timeline a :: but &quot;thumb&quot; treated like a real element?",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:56): Bah, pseudoelements are just a broken form of combinator.  We can't use them.  &gt;_&lt;",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:56): s/which is/why does/  s/a ::/need a ::/",
        "3a11d663baf9dd49fd3266d53d9bec5c (22:58): video::shadow(timeline thumb)",
        "1f8387eb43f131d7c309a90a4e36b5cb (22:58): Nesting is the refuge of the weak.",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:58): why is step 2 taking so long. I sent an email to www-style like 5 minutes ago",
        "e9fe2a8ed6a64844a5c024b6f688d024 (22:59): 1f8387eb43f131d7c309a90a4e36b5cb: that sounds like a fortune cookie",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:01): e9fe2a8ed6a64844a5c024b6f688d024, you get cooler fortune cookies than me.",
        "e9fe2a8ed6a64844a5c024b6f688d024 (23:04): dhyatt says the restrictions are silly",
        "1f8387eb43f131d7c309a90a4e36b5cb (23:04): Agreed that the restriction is silly, but just lifting the restriction doesn't solve the problem fully.",
        "e9fe2a8ed6a64844a5c024b6f688d024 (23:04): reply to mail then",
        "1f8387eb43f131d7c309a90a4e36b5cb (23:05): That's what I'm doing right now!",
        "e9fe2a8ed6a64844a5c024b6f688d024 (23:05): faster!",
        "e9fe2a8ed6a64844a5c024b6f688d024 (23:05): :P"
    ],
    "person_ids": [
        "88d4d34a8064a4ff39fd5e144eea7762",
        "1f8387eb43f131d7c309a90a4e36b5cb",
        "e9fe2a8ed6a64844a5c024b6f688d024",
        "3a11d663baf9dd49fd3266d53d9bec5c"
    ]
}