{
    "id": "35701b539c7654a19ac9872929d55731",
    "messages": [
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:48): Weeee\u201a\u00c4\u00b6 23 tests failing now",
        "ab7faae5d7b250ea8606486575f8f79c (19:49): Delete those tests, then you'll pass 100%",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:54): 14% perf. regression from throwing parse errors",
        "ab7faae5d7b250ea8606486575f8f79c (19:55): In a document that has no parse errors?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:55): Yeah",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:55): (i.e., the spec)",
        "b07211a0c7cb119232799d2119cea90f (19:56): ouch",
        "b07211a0c7cb119232799d2119cea90f (19:57): I'm not sure hubbub is ever going to have parse error reporting",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:58): 12.0s is still a massive improvement over the 48s it was a week ago",
        "b07211a0c7cb119232799d2119cea90f (19:58): sure :)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (20:00): runs with profiler",
        "a11aabeeceeae6b8cb5d12ea06b56554 (20:00): (This takes it back to around 50s :P)",
        "ab7faae5d7b250ea8606486575f8f79c (20:02): You need to multithread your tokeniser",
        "a11aabeeceeae6b8cb5d12ea06b56554 (20:03): Multi-threading in PHP? :P",
        "ab7faae5d7b250ea8606486575f8f79c (20:03): Shouldn't be too hard to just split the input document into n pieces, and speculatively parse the last n-1, and discards any results that are invalidated by the tokeniser state at the end of the previous section",
        "b25b6b77a0087ff8385941e5545d32ea (20:08): ab7faae5d7b250ea8606486575f8f79c: presumably you would end up being wrong a lot of the time",
        "b25b6b77a0087ff8385941e5545d32ea (20:08): Which seems bad",
        "ab7faae5d7b250ea8606486575f8f79c (20:09): b25b6b77a0087ff8385941e5545d32ea: You could scan forwards to the next '&gt;' and assume you're now going to be in the data state, which is likely to be right quite often",
        "b07211a0c7cb119232799d2119cea90f (20:10): is it?",
        "ab7faae5d7b250ea8606486575f8f79c (20:10): and if you were in a &lt;script&gt; or something then you make sure you've kept enough state so you can sync up once you've reached the &lt;/script&gt;",
        "b25b6b77a0087ff8385941e5545d32ea (20:10): Hmm. You're making this sound surprisingly reasonable",
        "ab7faae5d7b250ea8606486575f8f79c (20:10): Really?",
        "ab7faae5d7b250ea8606486575f8f79c (20:10): That wasn't my intent",
        "b25b6b77a0087ff8385941e5545d32ea (20:10): Which suggests that you're misleading me somehow",
        "ab7faae5d7b250ea8606486575f8f79c (20:13): b07211a0c7cb119232799d2119cea90f: I suppose it should be fairly easy to instrument a tokeniser to report how often it sees '&gt;' when it's in the data state (and PCDATA, and no escape flag)",
        "ab7faae5d7b250ea8606486575f8f79c (20:17): Does Python have a multiprocessing thing nowadays that isn't unbearably hard to use efficiently?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (20:17): ab7faae5d7b250ea8606486575f8f79c: Yes, multiprocessing",
        "ab7faae5d7b250ea8606486575f8f79c (20:17): Ah, sounds good",
        "ab7faae5d7b250ea8606486575f8f79c (20:17): Maybe html5lib should do this! :-)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (20:18): Will all zero users of php-html5lib kill me if I make 23 test cases fail?",
        "4d647473081c3ad729446a01a377813b (20:19): we should make error reporting optional in the tests",
        "4d647473081c3ad729446a01a377813b (20:19): or flag tests that rely on error reporting",
        "ab7faae5d7b250ea8606486575f8f79c (20:19): That's easy",
        "ab7faae5d7b250ea8606486575f8f79c (20:19): if 'ParseError' in expected_tokens: it relies on error reporting",
        "4d647473081c3ad729446a01a377813b (20:19): it seems to me that the PHP parser is not intended for building a validator so it should just not do it and be fast :)",
        "ab7faae5d7b250ea8606486575f8f79c (20:20): and you could just strip out all the ParseErrors when comparing your tokeniser against the test result",
        "4d647473081c3ad729446a01a377813b (20:20): yeah, I guess that's the best way",
        "4d647473081c3ad729446a01a377813b (20:20): you still want to test error handling",
        "a11aabeeceeae6b8cb5d12ea06b56554 (20:21): Yeah, that's what it currently does, for a few more minutes at least",
        "a11aabeeceeae6b8cb5d12ea06b56554 (20:22): 4d647473081c3ad729446a01a377813b: I'd disagree that it is irrelevant. You might want to only allow valid comments on my blog. Oh, wait, you already do.",
        "4d647473081c3ad729446a01a377813b (20:23): i wouldn't mind syntax errors actually",
        "b07211a0c7cb119232799d2119cea90f (20:23): a11aabeeceeae6b8cb5d12ea06b56554: testcases failing is bad, mmkay",
        "4d647473081c3ad729446a01a377813b (20:23): i'd just validate the tree",
        "4d647473081c3ad729446a01a377813b (20:23): validate the tree based on some whitelists",
        "ab7faae5d7b250ea8606486575f8f79c (20:23): Someone should make a blog comment CAPTCHA system which presents you with a random word (just in plain text) and requires you to use it in a grammatically-correct sentence in your comment",
        "a11aabeeceeae6b8cb5d12ea06b56554 (20:24): b07211a0c7cb119232799d2119cea90f: All failures are due to the parse errors, and one of them is somewhat questionable (I'd argue that the test case relies on impl. specific behaviour)",
        "47223c0fa41aa7e167a2d1fd2740cbb8 (20:46): ab7faae5d7b250ea8606486575f8f79c: heheh",
        "a11aabeeceeae6b8cb5d12ea06b56554 (20:47): ab7faae5d7b250ea8606486575f8f79c: How do you determine whether a sentence is grammatically correct?",
        "ab7faae5d7b250ea8606486575f8f79c (20:52): a11aabeeceeae6b8cb5d12ea06b56554: Mechanical Turk",
        "db5363ce314db484defaf0f851894ea3 (21:01): But... couldm",
        "db5363ce314db484defaf0f851894ea3 (21:02): But... couldn't a bot be programmed to generate a non-sensicial but grammatically correct sentence after doing a dictionary lookup of the word in question?",
        "db5363ce314db484defaf0f851894ea3 (21:03): Or, just quote a sentence example straight out of said dictionary? :P",
        "47223c0fa41aa7e167a2d1fd2740cbb8 (21:08): db5363ce314db484defaf0f851894ea3: sssh",
        "47223c0fa41aa7e167a2d1fd2740cbb8 (21:08): db5363ce314db484defaf0f851894ea3: although that captcha might be fairly good for filtering out most reddit/digg/youtube commenters :D",
        "db5363ce314db484defaf0f851894ea3 (21:09): =D"
    ],
    "person_ids": [
        "a11aabeeceeae6b8cb5d12ea06b56554",
        "ab7faae5d7b250ea8606486575f8f79c",
        "b07211a0c7cb119232799d2119cea90f",
        "b25b6b77a0087ff8385941e5545d32ea",
        "4d647473081c3ad729446a01a377813b",
        "47223c0fa41aa7e167a2d1fd2740cbb8",
        "db5363ce314db484defaf0f851894ea3"
    ]
}