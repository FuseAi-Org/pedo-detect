{
    "id": "b289d7bbc1b47d2cc00d3a1989078481",
    "messages": [
        "edb259c0e0038f38bb200bc20c8cbf7e (13:56): I wonder if the new encoding sniffer works for &lt;meta&gt; 512 bytes &lt;meta&gt; 512 bytes &lt;meta&gt; ...",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:00): edb259c0e0038f38bb200bc20c8cbf7e: &quot;the new&quot;?",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:02): the one that works together with the parser",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:02): and has this confident flag",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:02): edb259c0e0038f38bb200bc20c8cbf7e: is there a spec change?",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:02): edb259c0e0038f38bb200bc20c8cbf7e: or is this about html5lib?",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:02): there was a spec change",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:03): r955",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:06): what? did Hixie remove the magic 512 boundary?",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:06): just when I got it working",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:07): I think that boundary is still there for authors",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:08): actually",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:10): i think he did",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:10): is rather miffed",
        "73eaf221abca1b8244e34b0b9e76ac46 (14:15): b8810fee2f4a71f849f3f7409546d1d9: you can perhaps use the code to emit a warning, suggesting that encoding declarations should be as early as possible in the source to improve perf (and interop?)",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:16): perhaps",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:16): I'm going to stop chasing encoding and tokenization spec changes for a while",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:17): I'd love to see a realistic spec on how much data to feed to chardet",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:18): that is, should I buffer the entire stream or n first bytes",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:19): i think guessing 512 bytes is reasonable",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:19): if you then later encounter a different encoding you'd have to switch",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:20): edb259c0e0038f38bb200bc20c8cbf7e: Gecko seems to run chardet on the first buffer the html parser gets from the channel but I have no idea how big that buffer is",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:21): hopes someone else finds out so that I don't need to find out using a debugger",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:21): what does IE do?",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:21): will a future WebKit use the ICU detector once it is ported to C?",
        "73eaf221abca1b8244e34b0b9e76ac46 (14:33): so the spec allows first a preparse, then a real parse, and then a real parse again if the first real parse found conflicting encoding information?",
        "73eaf221abca1b8244e34b0b9e76ac46 (14:35): e.g. &lt;style&gt;&lt;meta charset=utf-8&gt;&lt;/style&gt;&lt;meta charset=windows-1252&gt;",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:36): it seems to allow only a single preparse (optional) and only a single reparse",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:36): 73eaf221abca1b8244e34b0b9e76ac46: but is the first &quot;real&quot; parse running scripts?",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:39): I don't trust that the current spec is the last word on this topic",
        "73eaf221abca1b8244e34b0b9e76ac46 (14:40): why is the preparse specced at all, if it yealds the same result as not preparsing (modulo perf)?",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:40): It would be nice if the people in charge of the relevant code in Trident, Gecko, WebKit and Presto just disclosed what exactly it is they do and what they want to do",
        "73eaf221abca1b8244e34b0b9e76ac46 (14:42): or wait, it doesn't yeald the same result. not preparsing doesn't catch encoding declarations in cdata elements",
        "73eaf221abca1b8244e34b0b9e76ac46 (14:42): so if it's optional and different how can we achieve interop?",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:43): would be interested in learning Hixie's thinking here",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:44): where does svn keep passwords? does the working copy have any private data?",
        "ab7faae5d7b250ea8606486575f8f79c (14:46): If you checked out from a http://name:password@... then it'll store that in .svn/entries, which (I've found) becomes annoying when you don't notice",
        "ab7faae5d7b250ea8606486575f8f79c (14:47): If you don't do that, I think it's up to the SVN client how it asks you for passwords or remembers the previous entries, and it shouldn't store that in the working copy anywhere",
        "ab7faae5d7b250ea8606486575f8f79c (14:48): (No idea where it does store it, though)",
        "edb259c0e0038f38bb200bc20c8cbf7e (14:48): can you make it store it?",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:48): ab7faae5d7b250ea8606486575f8f79c: thanks",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:49): I guess I'll sanitize the svn-specific directories then",
        "ab7faae5d7b250ea8606486575f8f79c (14:49): I guess it also depends if it's http:// vs svn+ssh://, since the SVN client will log in in different ways and would differ on whether/how it saves passwords",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:50): the Java http://java.sun.com/j2se/1.4.2/docs/api/java/io/InputStream.html#mark(int) contract doesn't allow saying that the mark should never become invalid...",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:50): which totally sucks considering arbitrary rewinding",
        "ab7faae5d7b250ea8606486575f8f79c (14:50): 'svn export' seems to be a convenient way of removing the .svn directories",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:51): OTOH, if the underlying stream *does* support arbitrary rewinding, implementing my own is bad for perf",
        "b8810fee2f4a71f849f3f7409546d1d9 (14:52): do browsers act on a meta charset even if there's a &lt;body&gt; first?"
    ],
    "person_ids": [
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "b8810fee2f4a71f849f3f7409546d1d9",
        "73eaf221abca1b8244e34b0b9e76ac46",
        "ab7faae5d7b250ea8606486575f8f79c"
    ]
}