{
    "id": "6d6b77115d2f4ed056d9e5a105fd50be",
    "messages": [
        "a3f19f90edf0a0893c7847d08016abe3 (18:16): b25b6b77a0087ff8385941e5545d32ea, the prototype stuff doesn't really match reality",
        "a3f19f90edf0a0893c7847d08016abe3 (18:16): better solutions welcome",
        "a3f19f90edf0a0893c7847d08016abe3 (18:16): i suspect the TC 39 people will have opinions on the best way to map mixins/multiple inheritance to the single inheritance prototype chain",
        "a3f19f90edf0a0893c7847d08016abe3 (18:16): also, [Supplemental] isn't defined in web idl (yet)",
        "a3f19f90edf0a0893c7847d08016abe3 (18:17): i'm still not sure i like its intended use (basically like partial classes in c# or something, i think)",
        "6d05f0c2942adc25946a4b02b37ffa00 (18:28): is on his way to file 10 new bugs",
        "6d05f0c2942adc25946a4b02b37ffa00 (18:28): all legit though :)",
        "62e4527eccd82b7072b1558747adee7d (18:35): didn't realize that Anne was a he",
        "6d05f0c2942adc25946a4b02b37ffa00 (18:37): heh, you're not the first :)",
        "62e4527eccd82b7072b1558747adee7d (18:37): I guess that's what I get for assuming gender based on someone's name across cultures.",
        "b25b6b77a0087ff8385941e5545d32ea (18:38): 62e4527eccd82b7072b1558747adee7d: To be fair it works most of the time",
        "62e4527eccd82b7072b1558747adee7d (18:39): True. Though I should do better about it, as I am dating a woman named Kevan.",
        "f139aba52f9fa1394b4034a7954b2220 (18:39): 6d05f0c2942adc25946a4b02b37ffa00, would you find it more acceptable if I removed step 4 from this http://dev.w3.org/2006/webapi/selectors-api2/#parsing-a-scoped-selector",
        "b25b6b77a0087ff8385941e5545d32ea (18:39): Obviously Anne just needs to be more aggressive and macho in public to assert his masculinity",
        "b25b6b77a0087ff8385941e5545d32ea (18:39): ;)",
        "f139aba52f9fa1394b4034a7954b2220 (18:40): so that authors can still do queryScopedSelector(&quot;div div&quot;) and have it be equivalent to :reference div div, but then have to do queryScopedSelector(&quot;:reference+p&quot;) or equivalent to use any other combinator?",
        "f139aba52f9fa1394b4034a7954b2220 (18:41): though, that wouldn't be ideal since it would significantly, though not entirely, decrease the value of having the new methods",
        "6d05f0c2942adc25946a4b02b37ffa00 (18:41): somewhat, though I don't really like the idea of having additional methods to start with",
        "f139aba52f9fa1394b4034a7954b2220 (18:42): that's why I tried to find a solution without new methods before. But then people bitched about adding a flag and special selector parsing, which I still think are bogus arguments",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:42): No, we bitched about having a special flag that you only needed in a single instance, and that would often still return the right results when you omitted it in test cases.",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:43): I'm still generally okay with the flag.  (Also, I think you pitched it as &quot;here's a special form of the descendant combinator&quot;, when really it's &quot;here's a flag you need to use if your first selector opens with the descendant combinator&quot;).",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:43): (Which seems to have annoyed fantasai.)",
        "f139aba52f9fa1394b4034a7954b2220 (18:43): 1f8387eb43f131d7c309a90a4e36b5cb, you said you would have preferred to always require the syntactic flag to be used for scoped selectors, but still preferred new methods over that. Other people, including 6d05f0c2942adc25946a4b02b37ffa00, are bitching about messing with the selector parsing",
        "6d05f0c2942adc25946a4b02b37ffa00 (18:43): starts to wonder how other people implemented appcache",
        "6d05f0c2942adc25946a4b02b37ffa00 (18:43): it's full of holes",
        "f139aba52f9fa1394b4034a7954b2220 (18:44): I didn't intend to pitch it as a special descendant combinator. It was always a global flag that could be used for any scoped selector, but could be omitted when it was redundant",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:44): f139aba52f9fa1394b4034a7954b2220: Hmm, why is :reference needed at all if you're doing a special method?",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:45): f139aba52f9fa1394b4034a7954b2220: Yeah, I get that, but it *really* looked like you were intending it as a special descendant combinator in your original email.",
        "f139aba52f9fa1394b4034a7954b2220 (18:45): what do you mean?",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:45): f139aba52f9fa1394b4034a7954b2220: In what circumstances is :reference ever needed if you have queryScopedSelector()?",
        "b25b6b77a0087ff8385941e5545d32ea (18:45): officially has no opinion on Selectors but wonders why querySelectorAll(selector, {&quot;scope&quot;:true, &quot;namespaces&quot;:{/*some namespace map*/}) wouldn't be a good API",
        "b25b6b77a0087ff8385941e5545d32ea (18:45): +}",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:47): b25b6b77a0087ff8385941e5545d32ea: if the map can have arbitrary JS getters, it would have all the same problems as XPath NSResolver",
        "6d05f0c2942adc25946a4b02b37ffa00 (18:47): b25b6b77a0087ff8385941e5545d32ea, namespaces are evil?",
        "f139aba52f9fa1394b4034a7954b2220 (18:47): in many cases, like document.querySelectorAll(&quot;.foo:reference&quot;, list) to filter a node list, or document.querySelectorAll(&quot;h1+p:reference&gt;span&quot;, list), which is equivalent to running elm.querySelectorAll(&quot;h1+p:reference&gt;span&quot;) on each element in the list.",
        "6d05f0c2942adc25946a4b02b37ffa00 (18:47): b25b6b77a0087ff8385941e5545d32ea, also, no other API is like that",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:47): b25b6b77a0087ff8385941e5545d32ea: in terms of protecting engine state from JS-caused changes",
        "b25b6b77a0087ff8385941e5545d32ea (18:47): b8810fee2f4a71f849f3f7409546d1d9: You could define it to run all the getters once at the start",
        "b25b6b77a0087ff8385941e5545d32ea (18:47): or, as Hixie put it &quot;structured clone&quot;",
        "f139aba52f9fa1394b4034a7954b2220 (18:48): the latter basically does filtering and node list selection in one go",
        "b25b6b77a0087ff8385941e5545d32ea (18:48): (or .toJSON I guess)",
        "b25b6b77a0087ff8385941e5545d32ea (18:48): 6d05f0c2942adc25946a4b02b37ffa00: I was assuming namespaces as a requirement not supporting them philosophically",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:48): f139aba52f9fa1394b4034a7954b2220: Okay, I see its use in the latter case, though question if it might not be easier to run simply by speccing an appropriate behavior on NodeLists.  The former, though, seems like a hack for filterSelector.",
        "b25b6b77a0087ff8385941e5545d32ea (18:48): I agree that no other API is like that",
        "b25b6b77a0087ff8385941e5545d32ea (18:49): It's a pity becuase it is the obvious way to define extensible APIs in javascript",
        "f139aba52f9fa1394b4034a7954b2220 (18:49): b25b6b77a0087ff8385941e5545d32ea, using {&quot;scope&quot;:true, ...} wouldn't work because it provides absolutely no detectable way for scripts to know if it's supported or not.",
        "b25b6b77a0087ff8385941e5545d32ea (18:49): (insofar as javascrip has an obvious way to do that)",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:49): mumbles about hard-wiring svg:, html:, math: and xbl:",
        "f139aba52f9fa1394b4034a7954b2220 (18:50): 1f8387eb43f131d7c309a90a4e36b5cb, it saves introducing a new method just for filtering, which would be completely redundant",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:51): I think that's a worthwhile method to add.",
        "f139aba52f9fa1394b4034a7954b2220 (18:51): why?",
        "b25b6b77a0087ff8385941e5545d32ea (18:51): f139aba52f9fa1394b4034a7954b2220: Hmm. querySelectorAll.hasFeature(&quot;scope&quot;)?",
        "b25b6b77a0087ff8385941e5545d32ea (18:51): jokes",
        "f139aba52f9fa1394b4034a7954b2220 (18:51): haha",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:51): Because it's better to be explicit about &quot;I need to filter this list of nodes according to this selector&quot; rather than having to remember the idiom for using querySelectorAll to do the same.",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:52): comes from a programming tradition that always emphasizes new functions over overloading via idiom.",
        "f139aba52f9fa1394b4034a7954b2220 (18:53): 1f8387eb43f131d7c309a90a4e36b5cb, there weren't really any significant use cases for filtering provided anyway. That basically came as a freebie when i addressed the other use cases for querySelector on node lists.",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:53): Hmm?  No significant uses?  Every use of $().filter() in jQuery is a use-case.",
        "b25b6b77a0087ff8385941e5545d32ea (18:54): tends to agree that filtering a NodeList of selectors seems nicest by using a method on NodeList",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:54): Sorry if it sounds like I'm advocating &quot;just dump jQuery into js&quot;.  ^_^",
        "b25b6b77a0087ff8385941e5545d32ea (18:54): s/of selectos/of Nodes/",
        "f139aba52f9fa1394b4034a7954b2220 (18:54): 1f8387eb43f131d7c309a90a4e36b5cb, they weren't provided",
        "f139aba52f9fa1394b4034a7954b2220 (18:55): also NodeList.filterSelector() doesn't address the use cases where all you have is an Array",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:55): f139aba52f9fa1394b4034a7954b2220: I don't particularly think they'd've had to be, but okay.  Notice, though, that your use of :reference is requiring hacks around it.",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:56): f139aba52f9fa1394b4034a7954b2220: Yeah, but there are other ways to address mapping a function over an Array.",
        "f139aba52f9fa1394b4034a7954b2220 (18:56): with the :reference technique, it doesn't matter what format your collection is in. Just pass it as the refNodes parameter to querySelectorAll() and it will work.",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:57): Well, assuming that querySelectorAll recognizes your format.",
        "b25b6b77a0087ff8385941e5545d32ea (18:57): I guess Array.prototype.filter.call(ArrayLike, function(e) {return e.matchesSelector(s)}) will always work",
        "b25b6b77a0087ff8385941e5545d32ea (18:57): for filtering",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:58): thinks that this might be the wrong place to solve the &quot;JS has too many types of collections&quot; problem.",
        "f139aba52f9fa1394b4034a7954b2220 (18:58): I defined it to recognise NodeList, HTMLCollection, Array and objects with indexable properties (though I think I may need to clarify the latter somehow). Basically, any object that can be enumerated to obtain Element nodes from",
        "b25b6b77a0087ff8385941e5545d32ea (18:59): But not for getting the tree-ordered-union of the matches to a selector using each element in ArrayLike as the contextNode",
        "1f8387eb43f131d7c309a90a4e36b5cb (18:59): b25b6b77a0087ff8385941e5545d32ea: Yeah, but converting Array-&gt;NodeList would be fine there.",
        "f139aba52f9fa1394b4034a7954b2220 (18:59): b25b6b77a0087ff8385941e5545d32ea, yeah, the :reference technique also gives you the tree ordered result set as a bonus",
        "f139aba52f9fa1394b4034a7954b2220 (19:00): 1f8387eb43f131d7c309a90a4e36b5cb, converting Array to NodeList is out of scope of Selectors API, and the use cases have been addressed much more elegantly already anyway",
        "b25b6b77a0087ff8385941e5545d32ea (19:00): 1f8387eb43f131d7c309a90a4e36b5cb: Is it possible to convert Array-&gt;NodeList?",
        "b25b6b77a0087ff8385941e5545d32ea (19:00): Also, where is &quot;there&quot;?",
        "f139aba52f9fa1394b4034a7954b2220 (19:01): b25b6b77a0087ff8385941e5545d32ea, not yet. The functionality was requested in selectors api discussions",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:01): f139aba52f9fa1394b4034a7954b2220: Grah, I know.  This is one of those forest-for-the-trees things, though.  You're solving the problem of &quot;JS has too many collections&quot; yourself, but your solution isn't ideal, and everyone else still has to solve the same problem over again later.  It makes me sad.",
        "b25b6b77a0087ff8385941e5545d32ea (19:01): Why?",
        "b25b6b77a0087ff8385941e5545d32ea (19:02): tends to agree with 1f8387eb43f131d7c309a90a4e36b5cb",
        "b25b6b77a0087ff8385941e5545d32ea (19:02): (the why&gt; was aimed at f139aba52f9fa1394b4034a7954b2220)",
        "f139aba52f9fa1394b4034a7954b2220 (19:02): b25b6b77a0087ff8385941e5545d32ea, do you mean why is converting Array to NodeList out of scope?",
        "f139aba52f9fa1394b4034a7954b2220 (19:03): or something else?",
        "b25b6b77a0087ff8385941e5545d32ea (19:03): (and it's more like &quot;DOM has too many collections and JS has no way of treating them all equally)",
        "73eaf221abca1b8244e34b0b9e76ac46 (19:03): f139aba52f9fa1394b4034a7954b2220: time for food btw?",
        "f139aba52f9fa1394b4034a7954b2220 (19:03): 73eaf221abca1b8244e34b0b9e76ac46, sure",
        "73eaf221abca1b8244e34b0b9e76ac46 (19:03): f139aba52f9fa1394b4034a7954b2220: my card is working now",
        "b25b6b77a0087ff8385941e5545d32ea (19:03): f139aba52f9fa1394b4034a7954b2220: No, why do people want it?",
        "f139aba52f9fa1394b4034a7954b2220 (19:03): cool",
        "73eaf221abca1b8244e34b0b9e76ac46 (19:03): or it should be",
        "73eaf221abca1b8244e34b0b9e76ac46 (19:03): f139aba52f9fa1394b4034a7954b2220: you're still at the office?",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:03): b25b6b77a0087ff8385941e5545d32ea: Apparently, so we can coerce things into a single reasonable collection type and just deal with that.",
        "b25b6b77a0087ff8385941e5545d32ea (19:04): Oh, but NodeLists are the most unreasonable collection type...",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:04): Then do NodeList-&gt;Array, and define it over Arrays.  Same diff.",
        "b25b6b77a0087ff8385941e5545d32ea (19:04): (or Array-like type anyway)",
        "f139aba52f9fa1394b4034a7954b2220 (19:04): oh, they wanted it to address this case, so they could have NodeList.filterSelector() and have an easy way to make a NodeList out of any collection, since JS libraries tend to store things as arrays",
        "b25b6b77a0087ff8385941e5545d32ea (19:05): I think people should carefully consider the effect of ES5 array extras before deciding that it is necessary to do explicit conversions to NodeLists all the time",
        "f139aba52f9fa1394b4034a7954b2220 (19:05): it would have signicantly improved the situation if NodeList was binded to Array in JS, which would have worked if only NodeLists were static from the start",
        "f139aba52f9fa1394b4034a7954b2220 (19:07): personally, I think it's much more useful to define NodeList.toArray() natively, so authors don't have to deal with liveness issues and the inflexibility of NodeLists for pretty much anything",
        "b25b6b77a0087ff8385941e5545d32ea (19:07): That seems reasonable.",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:07): Can we do that?  That would be great.",
        "b25b6b77a0087ff8385941e5545d32ea (19:08): Seems like it should be Web DOM Core rather than Selectors API that does it though",
        "b25b6b77a0087ff8385941e5545d32ea (19:09): (not that we should block progress on that)",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:09): So lets get it going.  Today.  Right now.",
        "a924fb58d2c25874322f4e5126f608b9 (19:09): Don't we have the equivalent already?",
        "f139aba52f9fa1394b4034a7954b2220 (19:10): 1f8387eb43f131d7c309a90a4e36b5cb, yeah, that functinality has been floating around for going into Web DOM Core for a while. If I'm not mistaken, I think gsnedders is editing that spec now, who took over from 73eaf221abca1b8244e34b0b9e76ac46",
        "b25b6b77a0087ff8385941e5545d32ea (19:11): f139aba52f9fa1394b4034a7954b2220: You might be mistaken, I don't think he has committed to it",
        "b25b6b77a0087ff8385941e5545d32ea (19:11): Danm",
        "b25b6b77a0087ff8385941e5545d32ea (19:11): Or some transposition of that anyway",
        "a924fb58d2c25874322f4e5126f608b9 (19:11): Array.prototype.slice.call(nodelist, 0) or some similar invocation",
        "b25b6b77a0087ff8385941e5545d32ea (19:12): a924fb58d2c25874322f4e5126f608b9: Yead that would work",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:12): Now just make it non-sucky in syntax.",
        "a924fb58d2c25874322f4e5126f608b9 (19:12): Well, it seems like an even more general solution would be to create an Array method that takes an Array-like and gives out an Array",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:13): Yup.  Anything with a .length and is indexable should work.",
        "a924fb58d2c25874322f4e5126f608b9 (19:13): Which is really what all these do",
        "b25b6b77a0087ff8385941e5545d32ea (19:14): Array.toArray(object) would be kind of odd",
        "b8810fee2f4a71f849f3f7409546d1d9 (19:14): is new Array(indexable) already reserved for something else?",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:14): Array.fromArraylike(object)",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:15): suspects that his text editor is adding BOMs to his UTF8 files now.",
        "a924fb58d2c25874322f4e5126f608b9 (19:15): b8810fee2f4a71f849f3f7409546d1d9: new Array(object) is already used",
        "b25b6b77a0087ff8385941e5545d32ea (19:15): b8810fee2f4a71f849f3f7409546d1d9: It might work as long as indexable doesn't have a valueOf or toString that can be converted to a number iirc",
        "a924fb58d2c25874322f4e5126f608b9 (19:16): It's identical to [object]",
        "a924fb58d2c25874322f4e5126f608b9 (19:16): Unless the object is a number, in which case it's [] with length=the number",
        "b8810fee2f4a71f849f3f7409546d1d9 (19:16): a924fb58d2c25874322f4e5126f608b9: :-(",
        "b25b6b77a0087ff8385941e5545d32ea (19:17): Oh, yeah it seems my memory was wrong",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:21): Hrm.  What sort of craziness would justify having EF+BB+BF at the start of a file?",
        "ab7faae5d7b250ea8606486575f8f79c (19:22): Sounds quite like a BOM",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:23): Yeah, it's some kind of BOM.  But it's not EF+FF, like I would expect.",
        "ab7faae5d7b250ea8606486575f8f79c (19:23): Sounds quite like a UTF-8 BOM",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:23): should remember that UTF-8 is gloriously crazy in how it encodes things.",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:23): kk, time to change the preferences of my text editor then.",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:24): Ah, there's the offending setting.",
        "ab7faae5d7b250ea8606486575f8f79c (19:24): 1f8387eb43f131d7c309a90a4e36b5cb: Try something like http://rishida.net/scripts/uniview/conversion to convert U+FEFF into UTF-8 code units or vice versa",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:25): I'm good now, ab7faae5d7b250ea8606486575f8f79c.",
        "ab7faae5d7b250ea8606486575f8f79c (19:26): If you expected it to be something like FE+FF, how would you expect UTF-8 to be distinguished from UTF-16BE?",
        "ab7faae5d7b250ea8606486575f8f79c (19:26): Oh, you said EF+FF instead",
        "ab7faae5d7b250ea8606486575f8f79c (19:26): I have no idea how you'd expect that :-p",
        "1f8387eb43f131d7c309a90a4e36b5cb (19:26): Man, I dunno."
    ],
    "person_ids": [
        "a3f19f90edf0a0893c7847d08016abe3",
        "6d05f0c2942adc25946a4b02b37ffa00",
        "62e4527eccd82b7072b1558747adee7d",
        "b25b6b77a0087ff8385941e5545d32ea",
        "f139aba52f9fa1394b4034a7954b2220",
        "1f8387eb43f131d7c309a90a4e36b5cb",
        "b8810fee2f4a71f849f3f7409546d1d9",
        "73eaf221abca1b8244e34b0b9e76ac46",
        "a924fb58d2c25874322f4e5126f608b9",
        "ab7faae5d7b250ea8606486575f8f79c"
    ]
}