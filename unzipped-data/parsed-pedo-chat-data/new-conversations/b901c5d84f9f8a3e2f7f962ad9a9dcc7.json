{
    "id": "b901c5d84f9f8a3e2f7f962ad9a9dcc7",
    "messages": [
        "2a1540413abd4e414b080432d15b0f05 (00:59): ahigerd: thanks for the time and help, I'm going to give this whirl",
        "cdf4ad80dc66a41f951abab3fde0d774 (00:59): I was only helping you with that class because you said you didn't want to use QList. :P",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:00): vertigo: You can take out the QIODevice::Unbuffered if you like; it's not actually supported -- throws a warning at runtime",
        "37eac6dfa76c7958c3535b552c9d8399 (01:01): aep: a few comments",
        "37eac6dfa76c7958c3535b552c9d8399 (01:02): (for int array[33] version)",
        "021b7bf3ff2076c746a1ed6f90658a06 (01:02): hm?",
        "37eac6dfa76c7958c3535b552c9d8399 (01:02): I'd use memcpy rather than a for loop",
        "37eac6dfa76c7958c3535b552c9d8399 (01:02): (and std::copy if using a container)",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:02): pjfloyd: Custom container. Neither method would work. :P",
        "37eac6dfa76c7958c3535b552c9d8399 (01:03): for operator=, no need to use operator[] on rhs, just use memcpy again",
        "021b7bf3ff2076c746a1ed6f90658a06 (01:03): cool my whole programm is crap",
        "021b7bf3ff2076c746a1ed6f90658a06 (01:03): just segfaults",
        "37eac6dfa76c7958c3535b552c9d8399 (01:04): for operator[]",
        "37eac6dfa76c7958c3535b552c9d8399 (01:04): const int for the argument serves no purpose (at least, the const)",
        "37eac6dfa76c7958c3535b552c9d8399 (01:04): and size_t would be better",
        "021b7bf3ff2076c746a1ed6f90658a06 (01:04): i use qlist now",
        "782d9ed4bd6ff7ddd65fbfe746aec691 (01:04): does QToolIcon support SVG images?",
        "021b7bf3ff2076c746a1ed6f90658a06 (01:05): becouse i dont understand ahigerds code",
        "37eac6dfa76c7958c3535b552c9d8399 (01:05): personally I'd also put an assert in operator[] as well",
        "021b7bf3ff2076c746a1ed6f90658a06 (01:05): but how can i define a wlist with fixed size?",
        "021b7bf3ff2076c746a1ed6f90658a06 (01:05): otherwise my programm segfaults all the time",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:06): aep: You wouldn't understand QList's code too :P",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:06): aep: When creating your list, use .append() to populate it",
        "021b7bf3ff2076c746a1ed6f90658a06 (01:06): heh",
        "37eac6dfa76c7958c3535b552c9d8399 (01:07): aep: is the array fixed size?",
        "021b7bf3ff2076c746a1ed6f90658a06 (01:07): i want a fixed size array yes",
        "021b7bf3ff2076c746a1ed6f90658a06 (01:07): the content is never more then 33 ints",
        "2a1540413abd4e414b080432d15b0f05 (01:08): ahigerd: works great!  I changed the start(0) for the timer to start(1) so it didn't eat all the cpu, but other than that its exactly what I was looking for, thanks again",
        "f5800c2caf3b800efb1d6d13450a97b5 (01:08): <a href=\"http://hit-radio.us\">http://hit-radio.us</a>:2006/listen.pls , we have channel #Radio @ undernet cia)",
        "37eac6dfa76c7958c3535b552c9d8399 (01:08): I'd go for a std::vector or QValueVector in that case",
        "021b7bf3ff2076c746a1ed6f90658a06 (01:09): unbelievable. even with qlist the data gets lost",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:09): pjfloyd: Qt4. QList does what it needs to do.",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:09): aep: That would indicate the problem is with your program and not the data structure, eh?",
        "37eac6dfa76c7958c3535b552c9d8399 (01:09): OK then a std::vector",
        "021b7bf3ff2076c746a1ed6f90658a06 (01:09): ahigerd,yes , i have to excuse ;)",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:09): pjfloyd: QList&lt;int&gt; and QVector&lt;int&gt; have the same performance and have been benchmarked to outperform STL",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:10): (It's a special case of QList -- if the template type is the same size as a pointer, it stores it directly.)",
        "37eac6dfa76c7958c3535b552c9d8399 (01:11): yeah, but I prefer portability (and am unimpressed with other people's benchmarks with other peoples standard libraries)",
        "37eac6dfa76c7958c3535b552c9d8399 (01:11): static const int VectorSize = 33;",
        "37eac6dfa76c7958c3535b552c9d8399 (01:11): then in the constructor init list",
        "37eac6dfa76c7958c3535b552c9d8399 (01:11): v(VectorSize, 0) to size &amp; initialize to zero#",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:11): When you're using a Qt program, you're actually LESS portable if you use STL because then you've got to worry about versioning on yet another library.",
        "37eac6dfa76c7958c3535b552c9d8399 (01:13): No compilers of the last 5 years are so have any real standard library issues",
        "37eac6dfa76c7958c3535b552c9d8399 (01:14): But interfacing standard library containers with non-Qt libraries is usually a lot easier than with QTL",
        "37eac6dfa76c7958c3535b552c9d8399 (01:14): (e.g., something like BGL)",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:14): Linking to non-Qt libraries is, once again, asking for non-portability, and I might add that Qt will compile on Red Hat 7.",
        "021b7bf3ff2076c746a1ed6f90658a06 (01:15): got the error. gonne beat the guy that named the cards",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:17): Besides, what's so non-portable about using data structures in a portable library you're already using?",
        "37eac6dfa76c7958c3535b552c9d8399 (01:18): Nothing. But there are approximately ZERO third party libraries in the world of numerical analysis that are Qt based",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:19): One or two. &gt;.&gt;",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:19): I cite QWT.",
        "37eac6dfa76c7958c3535b552c9d8399 (01:19): QWT has nothing to do with numerical analysis",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:20): pjfloyd: *blinks, looks again* Oh, huh. I was mistaken; QWT is the output library you want to use on such an analysis backend.",
        "37eac6dfa76c7958c3535b552c9d8399 (01:20): I'm talking: FEM, BEM, poisson solvers, LU decomp and so on",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:21): Well, as long as you can call QList::fromStdList I guess I don't care so much.",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:21): And QList::toStdList as well",
        "da2deeb03d2d8acc218537f0f25eb2d1 (01:22): how can one converts QString to char * ?",
        "37eac6dfa76c7958c3535b552c9d8399 (01:22): Not very interesting with large matrices, though",
        "da2deeb03d2d8acc218537f0f25eb2d1 (01:23): qstring.tostdstring().c_str() ? :/",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:23): Crako: myString.toLatin1().data()",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:23): Or .toLocal8Bit()",
        "da2deeb03d2d8acc218537f0f25eb2d1 (01:23): ok",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:23): er, .toLocal8Bit().data()",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:23): Or .toUtf8().data()",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:23): Depending on which conversion you want",
        "37eac6dfa76c7958c3535b552c9d8399 (01:23): note that they will be to _const_ char*",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:23): Yes.",
        "da2deeb03d2d8acc218537f0f25eb2d1 (01:23): ok",
        "4be6b68648bc479e35d197763aa6fb6e (01:24): and that it only lives until the QByteArray returned by to.*() something lives",
        "caacdffd7a4aa3937fabe8e185e5165e (01:25): qPrintable(QString)",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:27): qPrintable works if you're happy with .toLocal8Bit",
        "c6627dd066c1b6131ac651dd57605c4d (01:34): <a href=\"http://www.bagdadsoftware.de&quot;\">http://www.bagdadsoftware.de&quot;</a>)",
        "782d9ed4bd6ff7ddd65fbfe746aec691 (01:37): QToolButton quitButton( QIconSet( QPixmap(&quot;/opt/kde/share/icons/crystalsvg/22x22/actions/button_ok.png&quot;) ), &quot;Submit&quot;, &quot;Submit entry&quot;, &amp;app, &quot;quit()&quot;, &amp;toolBar, &quot;submitButton&quot; );",
        "782d9ed4bd6ff7ddd65fbfe746aec691 (01:37): what's wrong here?",
        "782d9ed4bd6ff7ddd65fbfe746aec691 (01:37): it doesn't connect to slot",
        "2a655a0e14a4584229ba4aeef43b9039 (01:38): /dev/null&quot;)",
        "782d9ed4bd6ff7ddd65fbfe746aec691 (01:38): ah, it must be SLOT(quit())",
        "cdf4ad80dc66a41f951abab3fde0d774 (01:43): Yeah, it is",
        "d29d567972e1e13b8bd390e5395b685d (03:10): +yep.. hopefully they didn't make it less useful",
        "d29d567972e1e13b8bd390e5395b685d (03:10): +less verbose anyway",
        "7f1f8018ee6238f734df7d2512166a52 (03:32): -Is that a fish...? A malformed Pac-Man...?",
        "d29d567972e1e13b8bd390e5395b685d (03:36): +we shall never know",
        "c3d2c5877d99abb4effb032f04d316e9 (03:50): -anyone programming qt in vim? I have a sweet macro up for share",
        "7753159079a19bec612906be6fcfaf1f (03:52): +C# for qt?",
        "7753159079a19bec612906be6fcfaf1f (03:52): +metellius, what is your problem with vim?",
        "7780ad7003f15ffc3b31177513eac4f9 (03:52): +metellius: ya man.. i got it",
        "c3d2c5877d99abb4effb032f04d316e9 (03:52): -no problem, I just want to share a useful keyboard macro :)",
        "7780ad7003f15ffc3b31177513eac4f9 (03:52): +er i would like to have it",
        "7753159079a19bec612906be6fcfaf1f (03:52): +ohh good! =)",
        "7780ad7003f15ffc3b31177513eac4f9 (03:52): +i use vim :&gt;",
        "7753159079a19bec612906be6fcfaf1f (03:52): +vim seven",
        "7753159079a19bec612906be6fcfaf1f (03:53): +=P",
        "c3d2c5877d99abb4effb032f04d316e9 (03:53): -noremap &lt;C-i&gt; mjyiwgg/include&lt;CR&gt;o#include &lt;&lt;C-r&gt;&quot;&gt;&lt;Esc&gt;`j",
        "c3d2c5877d99abb4effb032f04d316e9 (03:53): -inoremap &lt;C-i&gt; &lt;Esc&gt;mjyiwgg/include&lt;CR&gt;o#include &lt;&lt;C-r&gt;&quot;&gt;&lt;Esc&gt;`ja",
        "c3d2c5877d99abb4effb032f04d316e9 (03:53): -press &lt;C-i&gt; to add the current word as a #include &lt;wordhere&gt;",
        "7780ad7003f15ffc3b31177513eac4f9 (03:53): +to the top of the file?",
        "c3d2c5877d99abb4effb032f04d316e9 (03:53): -yeah.",
        "7780ad7003f15ffc3b31177513eac4f9 (03:53): +cool",
        "c3d2c5877d99abb4effb032f04d316e9 (03:54): -only problem is, it will fail if there is no #include from before, but that shouldn't matter too much",
        "c3d2c5877d99abb4effb032f04d316e9 (03:55): -and while we're on vim-topic:",
        "c3d2c5877d99abb4effb032f04d316e9 (03:55): -inoremap &lt;C-h&gt; &lt;C-r&gt;%&lt;Esc&gt;VU:s/\\./_/&lt;CR&gt;yypkI#ifndef &lt;Esc&gt;jI#define &lt;Esc&gt;Go#endif&lt;Esc&gt;O",
        "c3d2c5877d99abb4effb032f04d316e9 (03:56): -creates header protection",
        "c3d2c5877d99abb4effb032f04d316e9 (03:56): -(or whatever it's called)",
        "7780ad7003f15ffc3b31177513eac4f9 (04:17): +metellius: cool, thanks",
        "40b6c383711ac222fc6b8eb71daa500f (04:28): +hey what's up",
        "caacdffd7a4aa3937fabe8e185e5165e (04:36): +bool operator &lt; (const botData &amp;other) const {",
        "caacdffd7a4aa3937fabe8e185e5165e (04:36): +\t\treturn (memcmp(id.data(), other.id.data(), id.size() &lt; other.id.size() ? id.size() : other.id.size()) == 1) ? FALSE : TRUE;",
        "caacdffd7a4aa3937fabe8e185e5165e (04:36): +\t};",
        "caacdffd7a4aa3937fabe8e185e5165e (04:36): +\tis this operator for qSort is ok? QByteArray comparison",
        "4be6b68648bc479e35d197763aa6fb6e (04:46): -JtRip: What's wrong with the built in one?",
        "d29d567972e1e13b8bd390e5395b685d (04:47): +JtRip: plus, you shouldn't compare the result of memcmp to 1.. the man page doesn't give exact return values",
        "4be6b68648bc479e35d197763aa6fb6e (04:49): -besides. Do you want &quot;foo bar&quot; to be the same as &quot;foo&quot;",
        "4be6b68648bc479e35d197763aa6fb6e (04:49): -because as far as I can tell this is what this one does",
        "4be6b68648bc479e35d197763aa6fb6e (04:50): -no wait",
        "4be6b68648bc479e35d197763aa6fb6e (04:50): -maybe not",
        "4be6b68648bc479e35d197763aa6fb6e (04:50): -or something",
        "d29d567972e1e13b8bd390e5395b685d (04:52): +I think you're right... but it's broken in other ways",
        "4be6b68648bc479e35d197763aa6fb6e (04:52): -bool operator&lt;(const botData &amp;other) const { return id.data() &lt; other.id.data(); }",
        "4be6b68648bc479e35d197763aa6fb6e (04:52): -should be fine",
        "40b6c383711ac222fc6b8eb71daa500f (04:57): +does qt have an html/browser widget/control?",
        "caacdffd7a4aa3937fabe8e185e5165e (05:01): +blockd, i know, itested but i allways get 1 if a &gt; b ;)",
        "caacdffd7a4aa3937fabe8e185e5165e (05:01): +agb, build one?",
        "d29d567972e1e13b8bd390e5395b685d (05:02): +JtRip: so?",
        "d29d567972e1e13b8bd390e5395b685d (05:02): +JtRip: no need to test it.. read the manual or a C reference",
        "caacdffd7a4aa3937fabe8e185e5165e (05:02): +kk",
        "caacdffd7a4aa3937fabe8e185e5165e (05:02): +&gt; 0 now ;)",
        "d29d567972e1e13b8bd390e5395b685d (05:02): +it doesn't guarantee that it will always be one",
        "caacdffd7a4aa3937fabe8e185e5165e (05:03): +ya, i have read it",
        "caacdffd7a4aa3937fabe8e185e5165e (05:04): +agb, id.data() is the pointer, how it can be compared?",
        "caacdffd7a4aa3937fabe8e185e5165e (05:05): +blanky, browser? QTextBrowser maybe?",
        "40b6c383711ac222fc6b8eb71daa500f (05:05): +yeah one that lets me browse the web",
        "40b6c383711ac222fc6b8eb71daa500f (05:05): +of course, not as versatile, but lets me go to forums and what not",
        "caacdffd7a4aa3937fabe8e185e5165e (05:06): +ya know, it can't work suck good",
        "caacdffd7a4aa3937fabe8e185e5165e (05:06): +for example",
        "caacdffd7a4aa3937fabe8e185e5165e (05:06): +javascript support is kinda difficult",
        "40b6c383711ac222fc6b8eb71daa500f (05:09): +lol okay thanks man",
        "caacdffd7a4aa3937fabe8e185e5165e (05:09): +try to xombine qhttp and qtextbrowser ;)",
        "caacdffd7a4aa3937fabe8e185e5165e (05:09): +combine*",
        "4be6b68648bc479e35d197763aa6fb6e (05:11): -JtRip: ah",
        "4be6b68648bc479e35d197763aa6fb6e (05:11): -my bad",
        "4be6b68648bc479e35d197763aa6fb6e (05:11): -bool operator&lt;(const botData &amp;other) const { return id &lt; other.id; }",
        "caacdffd7a4aa3937fabe8e185e5165e (05:13): +agb it compares only first byte",
        "caacdffd7a4aa3937fabe8e185e5165e (05:13): +:/",
        "caacdffd7a4aa3937fabe8e185e5165e (05:15): +it is the same as to compare char * ;)",
        "caacdffd7a4aa3937fabe8e185e5165e (05:15): +*char1 &lt; *char2 will test only one char",
        "caacdffd7a4aa3937fabe8e185e5165e (05:23): +blanky, heres a joke: ==1 works ~40% faster then &gt;0",
        "caacdffd7a4aa3937fabe8e185e5165e (05:23): +o.O"
    ],
    "person_ids": [
        "2a1540413abd4e414b080432d15b0f05",
        "cdf4ad80dc66a41f951abab3fde0d774",
        "37eac6dfa76c7958c3535b552c9d8399",
        "021b7bf3ff2076c746a1ed6f90658a06",
        "782d9ed4bd6ff7ddd65fbfe746aec691",
        "f5800c2caf3b800efb1d6d13450a97b5",
        "da2deeb03d2d8acc218537f0f25eb2d1",
        "4be6b68648bc479e35d197763aa6fb6e",
        "caacdffd7a4aa3937fabe8e185e5165e",
        "c6627dd066c1b6131ac651dd57605c4d",
        "2a655a0e14a4584229ba4aeef43b9039",
        "d29d567972e1e13b8bd390e5395b685d",
        "7f1f8018ee6238f734df7d2512166a52",
        "c3d2c5877d99abb4effb032f04d316e9",
        "7753159079a19bec612906be6fcfaf1f",
        "7780ad7003f15ffc3b31177513eac4f9",
        "40b6c383711ac222fc6b8eb71daa500f"
    ]
}