{
    "id": "184d36c2df317887ef3cd565418f4de8",
    "messages": [
        "587bf8b858e15d03428e1415c33c38ef (18:12): hmm... I thought I understood this &quot;Character encoding overrides&quot; table, but I tried to explain it to somebody, and they noticed &quot;Any bytes that are treated differently due to this encoding aliasing must be considered parse errors. &quot; right above it.",
        "587bf8b858e15d03428e1415c33c38ef (18:12): byte 128 is different in ISO-8859-1 and Windows-1252, no?",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:13): 587bf8b858e15d03428e1415c33c38ef: I think the parse error part should be taken away. Implementing it for something like GBK has a very unfavorable cost/benefit ratio",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:14): (yes, 128 is different in ISO-8859-1 and Windows-1252)",
        "587bf8b858e15d03428e1415c33c38ef (18:15): I understood the whole point of mapping  ISO-8859-1 to Windows-125 was to map byte 128 to the euro character. no?",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:16): yeah (well, the rest of the C1 range, too)",
        "587bf8b858e15d03428e1415c33c38ef (18:18): hmm. I'm totally lost.",
        "587bf8b858e15d03428e1415c33c38ef (18:18): oh well.",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:20): apart from the parse error requirement (which I want to abolish) it's really just an alias table",
        "3f2e2531201cfbf853f16f668132eaf2 (18:20): 587bf8b858e15d03428e1415c33c38ef: Lost in the details of what an implementation should do, or lost in trying to understand the purpose of what the spec says?",
        "587bf8b858e15d03428e1415c33c38ef (18:21): both, philip.",
        "587bf8b858e15d03428e1415c33c38ef (18:21): why the table at all, or at least why the iso-8859-1 row, if not for the euro character?",
        "587bf8b858e15d03428e1415c33c38ef (18:21): and what is an implementation to do with byte 128 in a page labelled iso-8859-1?",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:22): 587bf8b858e15d03428e1415c33c38ef: Turn it into euro",
        "587bf8b858e15d03428e1415c33c38ef (18:22): b8810fee2f4a71f849f3f7409546d1d9, that's your advice, or your reading of the spec?",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:22): 587bf8b858e15d03428e1415c33c38ef: my remark about the C1 range was just pointing out that it isn't just the euro",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:22): 587bf8b858e15d03428e1415c33c38ef: both",
        "3f2e2531201cfbf853f16f668132eaf2 (18:22): b8810fee2f4a71f849f3f7409546d1d9: If the page was iso-8859-1, and there wasn't the mapping to windows-1252, what would happen?",
        "587bf8b858e15d03428e1415c33c38ef (18:23): didn't we establish that it's a parser error, since  128 is different in ISO-8859-1 and Windows-1252?",
        "3f2e2531201cfbf853f16f668132eaf2 (18:23): 0x80 seems to be undefined in ISO-8859-1, so would it just turn into U+FFFD or something?",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:23): 587bf8b858e15d03428e1415c33c38ef: yes, it's a parse error per spec. (not per Validator.nu, though)",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:23): 3f2e2531201cfbf853f16f668132eaf2: no, ISO-8859-1 would map it to U+0080",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:24): 3f2e2531201cfbf853f16f668132eaf2: that is, officially the C1 range mapping to Unicode is just zero-extension",
        "587bf8b858e15d03428e1415c33c38ef (18:24): is getting conflicting data about whether iso-8859-1 maps 0x80 to a character",
        "587bf8b858e15d03428e1415c33c38ef (18:25): wikipedia says &quot;Code values 00\u201a\u00c4\u00ec1F, 7F\u201a\u00c4\u00ec9F are not assigned to characters by ISO/IEC 8859-1.&quot;",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:25): 587bf8b858e15d03428e1415c33c38ef: ftp://ftp.unicode.org/Public/MAPPINGS/ISO8859/8859-1.TXT",
        "587bf8b858e15d03428e1415c33c38ef (18:25): ah... &quot;In 1992, the IANA registered the character map ISO_8859-1:1987, more commonly known by its preferred MIME name of ISO-8859-1 (note the extra hyphen over ISO 8859-1), a superset of ISO 8859-1, for use on the Internet. This map assigns the C0 and C1 control characters to the code values 00\u201a\u00c4\u00ec1F, 7F, and 80\u201a\u00c4\u00ec9F. It thus provides for 256 characters via every possible 8-bit value.&quot;",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:25): 0x80 0x0080 # &lt;control&gt;",
        "3f2e2531201cfbf853f16f668132eaf2 (18:26): b8810fee2f4a71f849f3f7409546d1d9: Ah, right",
        "3f2e2531201cfbf853f16f668132eaf2 (18:26): ISO/IEC 8859-1:1997 says &quot;The shaded positions in the code table correspond to bit combinations that do not represent graphic characters. Their use is outside the scope of ISO/IEC 8859; it is specified in other International Standards, for example ISO/IEC 6429.&quot;",
        "587bf8b858e15d03428e1415c33c38ef (18:27): ok, so it's a parse error; does the spec require displaying a euro character in the case of a parse error?",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:28): 587bf8b858e15d03428e1415c33c38ef: yes",
        "587bf8b858e15d03428e1415c33c38ef (18:29): or abort, right?",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:31): 587bf8b858e15d03428e1415c33c38ef: oh, right, aborting is allowed too, but market forces take care of that for browsers",
        "587bf8b858e15d03428e1415c33c38ef (18:32): ok",
        "587bf8b858e15d03428e1415c33c38ef (18:32): then the parse error stuff seems to be a no-op; what cost did you mean when you said &quot;Implementing it for something like GBK has a very unfavorable cost/benefit ratio&quot;?",
        "587bf8b858e15d03428e1415c33c38ef (18:33): ah... perhaps you meant detecting this error",
        "587bf8b858e15d03428e1415c33c38ef (18:33): &quot;Conformance checkers must report at least one parse error condition to the user if one or more parse error conditions exist in the document&quot;",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:33): 587bf8b858e15d03428e1415c33c38ef: detecting it for GBK would be troublesome",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:34): 587bf8b858e15d03428e1415c33c38ef: bad for perf, more code, no practical benefit",
        "587bf8b858e15d03428e1415c33c38ef (18:36): thinks he understands now... maybe...",
        "3f2e2531201cfbf853f16f668132eaf2 (18:36): b8810fee2f4a71f849f3f7409546d1d9: The benefit is that it would stop someone from taking a conforming HTML5 page that declares itself to be GBK, passing it through &quot;iconv -f GBK -t UTF-8&quot;, and unexpectedly getting errors",
        "3f2e2531201cfbf853f16f668132eaf2 (18:36): s/The/A/",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:37): 3f2e2531201cfbf853f16f668132eaf2: using the Validator.nu parser connected to the bundled serializer solves the problem",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:38): (although in this case, GBK is the superset)",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:38): I keep forgetting the number of the GBxxxx subset",
        "587bf8b858e15d03428e1415c33c38ef (18:39): 3f2e2531201cfbf853f16f668132eaf2, implementing a check for this error goes beyond detecting garbled GBK... it's a matter of finding all byte sequences that GBK maps to something different from what, for example, GB2312 maps it to",
        "3f2e2531201cfbf853f16f668132eaf2 (18:39): b8810fee2f4a71f849f3f7409546d1d9: That requires hugely more effort to discover and install and learn how to use than existing tools that are well known and ought to work perfectly well",
        "3f2e2531201cfbf853f16f668132eaf2 (18:39): b8810fee2f4a71f849f3f7409546d1d9: Oops, yes, I meant GB2312",
        "3f2e2531201cfbf853f16f668132eaf2 (18:40): 587bf8b858e15d03428e1415c33c38ef: I think GBK is meant to be an exact superset of GB2312, so any valid GB2312 bytestream will decode identically under GBK; I'm not positive about that but I really hope it's true :-)",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:41): 3f2e2531201cfbf853f16f668132eaf2: the kind of people who use iconv in Europe and the Americas should know to use Windows-1252 when they see ISO-8859-1. Presumably, anyone who'd use iconv in China should know to specify GBK...",
        "3f2e2531201cfbf853f16f668132eaf2 (18:42): b8810fee2f4a71f849f3f7409546d1d9: (Anyway, serialisers don't preserve human-significant aspects of the document, like attribute ordering and whitespace inside elements, so they're not at all equivalent to a charset-converting tool)",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:42): 3f2e2531201cfbf853f16f668132eaf2: true.",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:42): 3f2e2531201cfbf853f16f668132eaf2: but if you're working with someone else's &quot;garbage out&quot;, you can't assume validity",
        "3f2e2531201cfbf853f16f668132eaf2 (18:45): b8810fee2f4a71f849f3f7409546d1d9: You can pass it through a validator to see if it's valid, and if it's not then reject it, otherwise pass it through iconv to standardise the charset without disturbing the source document any more than is absolutely necessary",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:47): 3f2e2531201cfbf853f16f668132eaf2: I think supporting that use case isn't worth the trouble of detecting the situation in an efficient manner.",
        "3f2e2531201cfbf853f16f668132eaf2 (18:47): kind of like how Youtube complains if your video is too long but otherwise standardises it to ugly FLV, except for HTML documents instead of video",
        "3f2e2531201cfbf853f16f668132eaf2 (18:47): or, alternatively, like a better analogy, that I can't think of",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:47): 3f2e2531201cfbf853f16f668132eaf2: YouTube engineer have built in a lot of knowledge about video encoding craziness",
        "3f2e2531201cfbf853f16f668132eaf2 (18:47): or, even better, not like an analogy at all",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:48): 3f2e2531201cfbf853f16f668132eaf2: anyone offering a similar service for HTML should at minimum look up the aliases in the spec",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:48): s/engineer/engineers/",
        "b8810fee2f4a71f849f3f7409546d1d9 (18:49): afk",
        "3f2e2531201cfbf853f16f668132eaf2 (18:54): b8810fee2f4a71f849f3f7409546d1d9: Hmm, good point :-("
    ],
    "person_ids": [
        "587bf8b858e15d03428e1415c33c38ef",
        "b8810fee2f4a71f849f3f7409546d1d9",
        "3f2e2531201cfbf853f16f668132eaf2"
    ]
}