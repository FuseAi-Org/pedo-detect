{
    "id": "5d13efa8f33291df8c9bbd883e668cb7",
    "messages": [
        "1881cc8f8e3d760c178be2131736b797 (02:06): I'm having a hard time with converting str to unicode. How do I tell python that the default encoding is utf-8, so that I don't have to always add a 'utf-8' argument to unicode?",
        "89cc9a7e0210039958feedf07e97745e (02:06): mystr.decode(&quot;utf-8&quot;)",
        "89cc9a7e0210039958feedf07e97745e (02:07): oh sorry",
        "89cc9a7e0210039958feedf07e97745e (02:07): grr i should read before i write",
        "1881cc8f8e3d760c178be2131736b797 (02:07): *G*",
        "89cc9a7e0210039958feedf07e97745e (02:07): i think i've wondered that myself in the past",
        "89cc9a7e0210039958feedf07e97745e (02:07): but just put up with it hehe",
        "357381b021008d2a9fb24c8dd3ce4c7d (02:08): shawarma: you can set it in site.py - sys.setdefaultencoding",
        "357381b021008d2a9fb24c8dd3ce4c7d (02:08): shwarma: but it's not recommended",
        "89cc9a7e0210039958feedf07e97745e (02:08): can you not do that in the program itself?",
        "1881cc8f8e3d760c178be2131736b797 (02:08): so... I'm out of luck?",
        "1881cc8f8e3d760c178be2131736b797 (02:09): Maybe I'm going about this the wrong way. I'm stil lnew to python. :-)",
        "357381b021008d2a9fb24c8dd3ce4c7d (02:09): basiclaly",
        "357381b021008d2a9fb24c8dd3ce4c7d (02:09): *basically",
        "357381b021008d2a9fb24c8dd3ce4c7d (02:09): better to be explicit about the encoding",
        "89cc9a7e0210039958feedf07e97745e (02:09): you could always write a wrapper function",
        "2bed0f7df931083c71cbe381c5a9427d (02:10): shawarma: how do the strings get into your program?",
        "ff80b3efd6817f9bb4d0c3449f6221c5 (02:10): hmm strange",
        "1881cc8f8e3d760c178be2131736b797 (02:10): My db returns a string that is actually utf-8 encoded, but when converting it to a unicode object, python thinks it's ascii and throws up.",
        "89cc9a7e0210039958feedf07e97745e (02:10): def toUnicode (mystr): unicode(mystr, mydefaultencoding)",
        "89cc9a7e0210039958feedf07e97745e (02:10): with a return of course",
        "89cc9a7e0210039958feedf07e97745e (02:10): mydefaultencoding being some global var",
        "2bed0f7df931083c71cbe381c5a9427d (02:10): shawarma: maybe your db api can be told to convert it",
        "89cc9a7e0210039958feedf07e97745e (02:11): ah",
        "89cc9a7e0210039958feedf07e97745e (02:11): is that MySQLdb?",
        "1881cc8f8e3d760c178be2131736b797 (02:11): Greatred: Yes, sir.",
        "89cc9a7e0210039958feedf07e97745e (02:11): ahah, i had that problem recently",
        "1881cc8f8e3d760c178be2131736b797 (02:11): Greatred: Well...it's dMySQLdb, but behind django.",
        "89cc9a7e0210039958feedf07e97745e (02:11): i don't know if it's the right thing to do, but i found setting db.charset = &quot;utf-8&quot; worked",
        "1881cc8f8e3d760c178be2131736b797 (02:11): MySQLdb. Not dMySQLdb.",
        "89cc9a7e0210039958feedf07e97745e (02:11): where db is your connection obj",
        "1881cc8f8e3d760c178be2131736b797 (02:11): Greatred: Oh!",
        "ff80b3efd6817f9bb4d0c3449f6221c5 (02:11): if I send a variable from a function to another via parameters, will the functions the second function calls inherit that variable?",
        "89cc9a7e0210039958feedf07e97745e (02:12): it's undocumented as far as i could see :|",
        "1881cc8f8e3d760c178be2131736b797 (02:12): minisu: no.",
        "2bed0f7df931083c71cbe381c5a9427d (02:12): in your connect call, add use_unicode=True",
        "ff80b3efd6817f9bb4d0c3449f6221c5 (02:12): it seems like that is the case...",
        "89cc9a7e0210039958feedf07e97745e (02:12): but worked beautifully",
        "ff80b3efd6817f9bb4d0c3449f6221c5 (02:12): very strange *goes testing*",
        "2bed0f7df931083c71cbe381c5a9427d (02:12): and charset='utf-8'",
        "89cc9a7e0210039958feedf07e97745e (02:12): ah, charset is a param to the constructor?",
        "1881cc8f8e3d760c178be2131736b797 (02:12): deltab: aha.. i'll se if I can find that option in Django somewhere. Does it return unicode objects instead of str?",
        "2bed0f7df931083c71cbe381c5a9427d (02:12): <a href=\"http://blog.zabiello.com/pages/en/mysqldb-client-encoding\">http://blog.zabiello.com/pages/en/mysqldb-client-encoding</a>",
        "2bed0f7df931083c71cbe381c5a9427d (02:12): yes",
        "1881cc8f8e3d760c178be2131736b797 (02:13): deltab: Wicked.",
        "89cc9a7e0210039958feedf07e97745e (02:13): woo \\o/",
        "89cc9a7e0210039958feedf07e97745e (02:13): i never saw charset param documented",
        "ff80b3efd6817f9bb4d0c3449f6221c5 (02:13): just me beeing stupid.. sorry",
        "2bed0f7df931083c71cbe381c5a9427d (02:14): me neither; but I realised it was the right place for the conversion to be done",
        "89cc9a7e0210039958feedf07e97745e (02:14): it makes sense",
        "89cc9a7e0210039958feedf07e97745e (02:15): it amused me to find that mysqldb was returning me unicode objects where it had basically done a latin-1 decoding",
        "89cc9a7e0210039958feedf07e97745e (02:16): and i was getting utf-8 byte codes for each character (if you see what i mean)",
        "01de343334dd60bdbdda3bd70277a85b (02:17): Can't I do in python anything that I can do in PHP or C/++/#",
        "c0da332a84a46067b1e62c9ae2699088 (02:17): nzk: well, they're all turing-complete, so yes.",
        "01de343334dd60bdbdda3bd70277a85b (02:18): So why not just everyone use python?",
        "89cc9a7e0210039958feedf07e97745e (02:18): it's slower",
        "01de343334dd60bdbdda3bd70277a85b (02:18): What does turning mean",
        "89cc9a7e0210039958feedf07e97745e (02:18): for one thing",
        "89cc9a7e0210039958feedf07e97745e (02:18): turing*",
        "c0da332a84a46067b1e62c9ae2699088 (02:18): nzk: <a href=\"http://en.wikipedia.org/wiki/Turing-complete\">http://en.wikipedia.org/wiki/Turing-complete</a>",
        "89cc9a7e0210039958feedf07e97745e (02:19): also, the rubyites would throw a wobbly and the perlites would attack us with sharp pointy regexs",
        "c0da332a84a46067b1e62c9ae2699088 (02:19): nzk: because python is dynamically typed, which some people dislike",
        "c0da332a84a46067b1e62c9ae2699088 (02:19): nzk: and it's slow compared to C/Java",
        "89cc9a7e0210039958feedf07e97745e (02:19): it has its downsides for things like static checking, yes",
        "01de343334dd60bdbdda3bd70277a85b (02:19): ...Dynamically? Perlites? Huh",
        "357381b021008d2a9fb24c8dd3ce4c7d (02:19): but not slow compared to PHP or Ruby",
        "c0da332a84a46067b1e62c9ae2699088 (02:19): nzk: and it's not as web-centric as php",
        "01de343334dd60bdbdda3bd70277a85b (02:20): Ahh I see",
        "01de343334dd60bdbdda3bd70277a85b (02:20): Python is a good starter language though right?",
        "89cc9a7e0210039958feedf07e97745e (02:20): yep",
        "89cc9a7e0210039958feedf07e97745e (02:20): horses for courses etc",
        "c0da332a84a46067b1e62c9ae2699088 (02:20): nzk: <a href=\"http://en.wikipedia.org/wiki/Dynamic_typing#Static_and_dynamic_typing\">http://en.wikipedia.org/wiki/Dynamic_typing#Static_and_dynamic_typing</a>",
        "01de343334dd60bdbdda3bd70277a85b (02:20): ...Horses for courses?",
        "c0da332a84a46067b1e62c9ae2699088 (02:20): nzk: yes, it's a excellent first language",
        "2bed0f7df931083c71cbe381c5a9427d (02:21): dynamically type checked is more accurate",
        "89cc9a7e0210039958feedf07e97745e (02:21): it's a pretty good language even when you're experienced, imo",
        "01de343334dd60bdbdda3bd70277a85b (02:22): Does anyone know any good excercises for learning python quickly? What I'm doing now is writing out my favorite movie quotes...",
        "89cc9a7e0210039958feedf07e97745e (02:22): followed a tute already?",
        "cb70db32d4138f5b12fc7045343d9ce2 (02:22): nzk: diveintopython.org ?",
        "01de343334dd60bdbdda3bd70277a85b (02:23): Experiences programmers?",
        "01de343334dd60bdbdda3bd70277a85b (02:23): I cant program for my life",
        "89cc9a7e0210039958feedf07e97745e (02:23): it's good for both inexperienced and experienced",
        "89cc9a7e0210039958feedf07e97745e (02:23): i've found that, anyway",
        "89cc9a7e0210039958feedf07e97745e (02:24): well, i was fairly experienced before i started on python, but i think it's a good language to learn as a starter anyway",
        "01de343334dd60bdbdda3bd70277a85b (02:24): Ahh I see",
        "01de343334dd60bdbdda3bd70277a85b (02:24): I've tried to learn many languages, but for some reason I just neverhave enough motivation",
        "89cc9a7e0210039958feedf07e97745e (02:25): ah",
        "89cc9a7e0210039958feedf07e97745e (02:25): open up a python prompt and have a play :)",
        "01de343334dd60bdbdda3bd70277a85b (02:25): ...prompt?",
        "89cc9a7e0210039958feedf07e97745e (02:25): i've been using python for a few years and i still use that to test small ideas",
        "89cc9a7e0210039958feedf07e97745e (02:25): you in windows or unix?",
        "01de343334dd60bdbdda3bd70277a85b (02:26): I am in a distribution of linus's minix",
        "2bed0f7df931083c71cbe381c5a9427d (02:26): when you run python it will prompt you with &gt;&gt;&gt;",
        "89cc9a7e0210039958feedf07e97745e (02:26): ahh",
        "89cc9a7e0210039958feedf07e97745e (02:26): open up a terminal and enter: python",
        "01de343334dd60bdbdda3bd70277a85b (02:26): Commonly known as linux",
        "2bed0f7df931083c71cbe381c5a9427d (02:26): you can then type in python code which will be executed immediately",
        "01de343334dd60bdbdda3bd70277a85b (02:28): I like IDEs more :(",
        "89cc9a7e0210039958feedf07e97745e (02:28): it's not about IDE/text editor",
        "01de343334dd60bdbdda3bd70277a85b (02:29): What I really want to do is make a graphical python app"
    ],
    "person_ids": [
        "1881cc8f8e3d760c178be2131736b797",
        "89cc9a7e0210039958feedf07e97745e",
        "357381b021008d2a9fb24c8dd3ce4c7d",
        "2bed0f7df931083c71cbe381c5a9427d",
        "ff80b3efd6817f9bb4d0c3449f6221c5",
        "01de343334dd60bdbdda3bd70277a85b",
        "c0da332a84a46067b1e62c9ae2699088",
        "cb70db32d4138f5b12fc7045343d9ce2"
    ]
}