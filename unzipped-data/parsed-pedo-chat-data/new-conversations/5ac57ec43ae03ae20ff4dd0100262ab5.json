{
    "id": "5ac57ec43ae03ae20ff4dd0100262ab5",
    "messages": [
        "69b0d3dfe919a6b860a9fac82de52a7e (12:48): wow, json allows duplicate names in an object",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:48): i had no idea",
        "69b0d3dfe919a6b860a9fac82de52a7e (12:48): (well, they're a SHOULD NOT, but that's it)",
        "3262d25e4e685127b5a139f82985d289 (13:11): I can only see trouble coming out of such a thing.",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:11): i expect it's a mistake, people seem to say SHOULD in specs when they mean MUST all the time",
        "ab7faae5d7b250ea8606486575f8f79c (13:11): Do they say &quot;SHOULD&quot; or &quot;should&quot;?",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:11): SHOULD in this case",
        "ab7faae5d7b250ea8606486575f8f79c (13:13): likes the HTML5 style of SHOULD/MUST/etc usage, since it makes it clear what behaviour needs to be tested",
        "ab7faae5d7b250ea8606486575f8f79c (13:16): Sometimes I think other specifications are mostly written for users (who want to know how they can expect their implementations to behave) and implementors (who want to know how their implementations should behave), neither of whom care much about the difference between 'should' and 'must'",
        "ab7faae5d7b250ea8606486575f8f79c (13:16): whereas something like HTML5 is also written for test writers, who do care about subtle differences between conformance requirements",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:17): in practice, both of those groups (users and implementors) are hurt by the should/must confusion",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:17): but yes, in general you are right",
        "ab7faae5d7b250ea8606486575f8f79c (13:19): I'd expect they're hurt mostly by the lack of defined error handling when there's duplicate names, rather than by the use of should/must",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:26): i just mean they're hurt by lack of interop in general",
        "ab7faae5d7b250ea8606486575f8f79c (13:27): That seems largely independent of any should/must confusion",
        "ab7faae5d7b250ea8606486575f8f79c (13:28): e.g. the JSON spec requires quotes around keys, but lots of JSON implementations let you turn that off because it saves some bytes and it works in some parsers",
        "ab7faae5d7b250ea8606486575f8f79c (13:28): and it seems they don't really care about interoperability",
        "b25b6b77a0087ff8385941e5545d32ea (13:28): should/must confusion that prevents you writing tests hampers interop",
        "b25b6b77a0087ff8385941e5545d32ea (13:29): (also: in the case of JSON there is/was a clause that said roughly 'implementations may have any other behaviour they like'. Which rather undermines the rest of the specification)",
        "ab7faae5d7b250ea8606486575f8f79c (13:32): On an unrelated topic: Automated tests are great, but running them on a wide variety of web browsers is time-consuming. What we could do is sign up to an online ad system that lets you put arbitrary HTML in your ads, and then immediately get hundreds of thousands of testers with no effort and very low financial cost",
        "b25b6b77a0087ff8385941e5545d32ea (13:33): Then we'd have to pay to write tests",
        "b25b6b77a0087ff8385941e5545d32ea (13:34): It would be much better to create our own ad network so that we could inject html tests into other people's ads, and make money at the same time",
        "ab7faae5d7b250ea8606486575f8f79c (13:34): (and the HTML we put in the ads would be executing the tests and then sending the results (plus UA strings etc) back to the central server)",
        "ab7faae5d7b250ea8606486575f8f79c (13:34): b25b6b77a0087ff8385941e5545d32ea: Uh, not quite sure what you mean",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:35): gets into his flame-proof bunker and sends an e-mail to the list",
        "b25b6b77a0087ff8385941e5545d32ea (13:35): ab7faae5d7b250ea8606486575f8f79c: Instead of running the tests on some other ad network, set up our own ad network",
        "b25b6b77a0087ff8385941e5545d32ea (13:35): Sell ads on the network -&gt; make money",
        "ab7faae5d7b250ea8606486575f8f79c (13:36): b25b6b77a0087ff8385941e5545d32ea: But that would be extremely hard",
        "b25b6b77a0087ff8385941e5545d32ea (13:36): Also run tests on the network -&gt; get useful data",
        "ab7faae5d7b250ea8606486575f8f79c (13:36): and would take years to build up",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:36): abarth has done tests on an ad network",
        "ab7faae5d7b250ea8606486575f8f79c (13:36): and to get on enough sites to get significant numbers of visitors",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:36): you might want to speak to him",
        "73eaf221abca1b8244e34b0b9e76ac46 (13:36): http://blog.whatwg.org/media/vim-checker.png is a 404 (referenced from http://blog.whatwg.org/vim-checker )",
        "b25b6b77a0087ff8385941e5545d32ea (13:36): ab7faae5d7b250ea8606486575f8f79c: Hard yes, extremely hard presumably not. And we have 'till 2022 :)",
        "ab7faae5d7b250ea8606486575f8f79c (13:37): was inspired by abarth's work on this :-)",
        "ab7faae5d7b250ea8606486575f8f79c (13:40): 69b0d3dfe919a6b860a9fac82de52a7e: Haven't you seen any World War 2 movies? Bunkers are the worst place to be if you're expecting flames, because someone will break down the door and you'll be trapped and will burn to death and it won't be very nice at all",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:40): crap",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:40): where should i hide then?",
        "ab7faae5d7b250ea8606486575f8f79c (13:40): You could go scuba diving",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:40): goes scuba diving in a hurry",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:41): ahblblublublbolbullblubloblub?",
        "3262d25e4e685127b5a139f82985d289 (13:42): Say, I'm peering at the JSON specification via http://www.ietf.org/rfc/rfc4627.txt and it mentions in section 1.1 that it uses &quot;MUST&quot; and &quot;SHOULD&quot; as described in RFC2119. This leads me to believe that Mr. Crockford definitely intended such specific uses of those terms... Sorry if this is a crazy blast from the past here.",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:43): a lot of spec writers put that boilerplate there without really understanding it, sad to say",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:43): dunno if this is the case is doug's case",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:44): but if he really meant SHOULD there, that's mighty odd",
        "73eaf221abca1b8244e34b0b9e76ac46 (13:45): &quot; The names within an object SHOULD be unique.&quot;",
        "ab7faae5d7b250ea8606486575f8f79c (13:45): HTML5 had the same boilerplate and then proceeded to use the terms in ways that were not described in RFC2119",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:45): indeed",
        "ab7faae5d7b250ea8606486575f8f79c (13:45): so it's a common problem :-)",
        "3262d25e4e685127b5a139f82985d289 (13:46): That is pretty funny! Yet frustratrating at times, I'm sure.",
        "b25b6b77a0087ff8385941e5545d32ea (13:46): 69b0d3dfe919a6b860a9fac82de52a7e: Just skimming your new email; is it really necessary to do &lt;span item id=a&gt;&lt;span property=&quot;com.example.name&quot;&gt;a&lt;/span&gt;&lt;/span&gt; rather than something like &lt;span id=a property=&quot;com.example.name&gt;a&lt;/span&gt;?",
        "73eaf221abca1b8244e34b0b9e76ac46 (13:47): ab7faae5d7b250ea8606486575f8f79c: in HTML5's case it was more because of RFC2119 not expecting the classes of products that HTML5 was having, right?",
        "ab7faae5d7b250ea8606486575f8f79c (13:47): is thinking of the use of phrases like &quot;must only&quot;, which have meaning only in English and not in RFC2119",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:47): b25b6b77a0087ff8385941e5545d32ea: you need the item=&quot;&quot; attribute to declare the new group of name-value pairs",
        "b25b6b77a0087ff8385941e5545d32ea (13:48): 69b0d3dfe919a6b860a9fac82de52a7e: At the very least it would be good if &lt;span item property&gt; acted like &lt;span item&gt;&lt;span property&gt;",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:48): b25b6b77a0087ff8385941e5545d32ea: you can't do item=&quot;&quot; property=&quot;&quot; on the same element in this case, because when you do that it means the new group is the value of the given property on whatever the corresponding &quot;parent&quot; item is",
        "73eaf221abca1b8244e34b0b9e76ac46 (13:48): ab7faae5d7b250ea8606486575f8f79c: ah, ok",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:49): b25b6b77a0087ff8385941e5545d32ea: e.g. &lt;span item=&quot;vcard&quot;&gt; &lt;span property=&quot;agent&quot; item=&quot;vcard&quot;&gt; &lt;span property=&quot;...&quot;&gt;...&lt;/span&gt; &lt;/span&gt; &lt;/span&gt;",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:49): b25b6b77a0087ff8385941e5545d32ea: the middle one there is saying that &quot;agent&quot; is a property of the outer item, whose value is itself an item.",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:49): luckily, that's basically as complex as this stuff gets.",
        "b25b6b77a0087ff8385941e5545d32ea (13:49): 69b0d3dfe919a6b860a9fac82de52a7e: Hmm. I will think about this more when I have understood the proposal beter, but my initial reaction is that people will get this wrong and be surprised",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:50): i don't think the case of those bulbs will be a common case",
        "b25b6b77a0087ff8385941e5545d32ea (13:51): OK.",
        "b25b6b77a0087ff8385941e5545d32ea (13:51): I'll see what other people say",
        "3262d25e4e685127b5a139f82985d289 (13:54): 69b0d3dfe919a6b860a9fac82de52a7e: Do you mean that if, in your example, the second tag didn't have the the item attribute explicitly set, it would still have item=&quot;vcard&quot; like its parent?",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:55): if the second tag didn't have the item attribute explicitly set, the third one would set a &quot;...&quot; property on the first one, instead of the second",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:55): so the first one would have two properties, &quot;agent&quot; and &quot;...&quot;",
        "69b0d3dfe919a6b860a9fac82de52a7e (13:55): instead of the first one having a property &quot;agent&quot; which itself has a property &quot;...&quot;",
        "ab7faae5d7b250ea8606486575f8f79c (14:02): Reversed domain names aren't sufficient for people with shared hosting on a single domain",
        "ab7faae5d7b250ea8606486575f8f79c (14:02): which seems a bit of a pain",
        "69b0d3dfe919a6b860a9fac82de52a7e (14:02): why not?",
        "69b0d3dfe919a6b860a9fac82de52a7e (14:02): just stick your path components on the end",
        "ab7faae5d7b250ea8606486575f8f79c (14:02): If everyone on Geocities uses com.geocities.* then there's no convention to avoid conflicts",
        "69b0d3dfe919a6b860a9fac82de52a7e (14:03): if everyone on Geocities uses microdata, I will hand in my spec editor's badge.",
        "ab7faae5d7b250ea8606486575f8f79c (14:03): If two people on Geocities use com.geocities.* then there's no convention to avoid conflicts",
        "ab7faae5d7b250ea8606486575f8f79c (14:03): and s/Geocities/something like Geocities that isn't dead yet/",
        "69b0d3dfe919a6b860a9fac82de52a7e (14:03): so buy a domain",
        "69b0d3dfe919a6b860a9fac82de52a7e (14:03): it's like $5 a year",
        "69b0d3dfe919a6b860a9fac82de52a7e (14:03): or hope for the best and use com.geocities.philip.foo",
        "69b0d3dfe919a6b860a9fac82de52a7e (14:04): (or use a uri, those are still allowed too, for teh crazy people who think uris are better!)",
        "ab7faae5d7b250ea8606486575f8f79c (14:08): I haven't read the spec so I don't know what it suggests; I'm just thinking that if it suggests a convention, it should suggest a convention that can work for independent people who share a domain name, even if it's something vague like adding a unique-in-that-domain identifier onto the end",
        "69b0d3dfe919a6b860a9fac82de52a7e (14:08): the spec doesn't have any informative text on that topic yet",
        "69b0d3dfe919a6b860a9fac82de52a7e (14:09): i'll make a note to add something to the intro section though",
        "69b0d3dfe919a6b860a9fac82de52a7e (14:09): thanks",
        "ab7faae5d7b250ea8606486575f8f79c (14:12): If I want to write a page containing data about two cats, and say that cat A is the parent of cat B, and cat B is a child of cat A, can I do that nicely?",
        "69b0d3dfe919a6b860a9fac82de52a7e (14:13): not yet. I have considered a a &lt;ref&gt; element to do that in a future version, but none of the use cases I had actually needed it, so I punted on it for now.",
        "ab7faae5d7b250ea8606486575f8f79c (14:13): It looks like the new microdata stuff is purely tree-shaped and can't do graphs, and there isn't any way for one item to refer to another",
        "ab7faae5d7b250ea8606486575f8f79c (14:13): since items don't have identifiers",
        "69b0d3dfe919a6b860a9fac82de52a7e (14:13): items have id=&quot;&quot; attributes like any other html element",
        "69b0d3dfe919a6b860a9fac82de52a7e (14:13): but yes, there's no way to make arbitrary graphs yet",
        "ab7faae5d7b250ea8606486575f8f79c (14:15): Hmm, I suppose the API could be extended to expose $item-&gt;id() and $microdata-&gt;get_item_by_id('...')",
        "ab7faae5d7b250ea8606486575f8f79c (14:15): but then it won't work if I put each cat on a separate page, and want them to refer to each other",
        "ab7faae5d7b250ea8606486575f8f79c (14:15): (i.e. being in separate items of @docs)",
        "69b0d3dfe919a6b860a9fac82de52a7e (14:16): none of the use cases needed that",
        "ab7faae5d7b250ea8606486575f8f79c (14:16): so one would have to refer to items by a full URI instead",
        "69b0d3dfe919a6b860a9fac82de52a7e (14:16): but yeah, if we really wanted to support that, we could just have &lt;ref&gt; support cross-document references too",
        "69b0d3dfe919a6b860a9fac82de52a7e (14:17): usemap=&quot;&quot; showed that wasn't too hot, though",
        "69b0d3dfe919a6b860a9fac82de52a7e (14:23): ok i just checked in a brief intro section. bed time now. I'm sure when I wake up I'll have record amounts of mail.",
        "69b0d3dfe919a6b860a9fac82de52a7e (14:23): nn",
        "b25b6b77a0087ff8385941e5545d32ea (14:27): 69b0d3dfe919a6b860a9fac82de52a7e: It would be nice if the corresponding item algorithm was written in priority order rahter than reverse priority order",
        "b25b6b77a0087ff8385941e5545d32ea (14:27): also: gn",
        "ab7faae5d7b250ea8606486575f8f79c (14:39): 69b0d3dfe919a6b860a9fac82de52a7e: s/desireable/desirable/",
        "ab7faae5d7b250ea8606486575f8f79c (14:42): 69b0d3dfe919a6b860a9fac82de52a7e: &quot;Properties can also have values that are URLs. This is achieved using the a element and its href attribute.&quot; - but the example uses &lt;img src&gt; instead"
    ],
    "person_ids": [
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "3262d25e4e685127b5a139f82985d289",
        "ab7faae5d7b250ea8606486575f8f79c",
        "b25b6b77a0087ff8385941e5545d32ea",
        "73eaf221abca1b8244e34b0b9e76ac46"
    ]
}