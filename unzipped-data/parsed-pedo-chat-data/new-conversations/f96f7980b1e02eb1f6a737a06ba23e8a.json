{
    "id": "f96f7980b1e02eb1f6a737a06ba23e8a",
    "messages": [
        "ac495561e6015364214b354ab23f7d2d (05:28): bug #329292 added a safe-browsing extension for evaluation..  looking at the current tree, I don't see the extension.. has the code been folded into the m-c proper?",
        "898fc6ecff9a5867e6455f37fba81580 (05:29): Anyone around that understands the indexedDB API?",
        "ac495561e6015364214b354ab23f7d2d (05:29): if so,  how do I trace it from evaluation to being folded into m-c proper?",
        "898fc6ecff9a5867e6455f37fba81580 (05:29): ac495561e6015364214b354ab23f7d2d: It got folded in and since rewritten at least twice some time ago",
        "ac495561e6015364214b354ab23f7d2d (05:30): 898fc6ecff9a5867e6455f37fba81580  oh.. twice?  how do I find trace out the changes?  the first mention was in the CVS-era..",
        "67b8dbbd954f99b0be64bce6b421d195 (05:31): 898fc6ecff9a5867e6455f37fba81580: hi",
        "898fc6ecff9a5867e6455f37fba81580 (05:32): ac495561e6015364214b354ab23f7d2d: I suggest searching the tree for safebrowsing and url-classifier",
        "ac495561e6015364214b354ab23f7d2d (05:32): 898fc6ecff9a5867e6455f37fba81580:  ok. thanks",
        "898fc6ecff9a5867e6455f37fba81580 (05:32): khuey: Transactions are confusing me, how do they know when to commit?",
        "67b8dbbd954f99b0be64bce6b421d195 (05:33): 898fc6ecff9a5867e6455f37fba81580: they commit automatically",
        "898fc6ecff9a5867e6455f37fba81580 (05:33): When?",
        "67b8dbbd954f99b0be64bce6b421d195 (05:33): 898fc6ecff9a5867e6455f37fba81580: when your script finishes executing after the last request completes",
        "59e570bef8ead953686ff65207d2dfbc (05:34): khuey, you may wish to repeat this question https://bugzilla.mozilla.org/show_bug.cgi?id=709448#c7",
        "898fc6ecff9a5867e6455f37fba81580 (05:34): How does it know when I've started my last request?",
        "67b8dbbd954f99b0be64bce6b421d195 (05:34): 898fc6ecff9a5867e6455f37fba81580: you can only start a request while there are outstanding requests running",
        "67b8dbbd954f99b0be64bce6b421d195 (05:34): 898fc6ecff9a5867e6455f37fba81580: or you in are in the onfinish handler for the last request",
        "67b8dbbd954f99b0be64bce6b421d195 (05:35): after that, you can't start any more requests against that transaction, and it commits",
        "898fc6ecff9a5867e6455f37fba81580 (05:35): Oh. Well that sucks",
        "67b8dbbd954f99b0be64bce6b421d195 (05:35): 898fc6ecff9a5867e6455f37fba81580: and by onfinish, I mean onsuccess, of course",
        "67b8dbbd954f99b0be64bce6b421d195 (05:35): 59e570bef8ead953686ff65207d2dfbc: hmm?",
        "67b8dbbd954f99b0be64bce6b421d195 (05:36): 898fc6ecff9a5867e6455f37fba81580: what is the problem?",
        "898fc6ecff9a5867e6455f37fba81580 (05:37): khuey: It takes me multiple XHR requests to retrieve the data that I want to insert into the db but from what you're saying I have to wait till all the requests complete before opening a transaction to insert all the data at once",
        "67b8dbbd954f99b0be64bce6b421d195 (05:37): 898fc6ecff9a5867e6455f37fba81580: if you want that data to be inserted atomically, yes",
        "898fc6ecff9a5867e6455f37fba81580 (05:37): Hrm. I need to rethink this app",
        "898fc6ecff9a5867e6455f37fba81580 (05:38): khuey: Thanks",
        "67b8dbbd954f99b0be64bce6b421d195 (05:38): 898fc6ecff9a5867e6455f37fba81580: sure, np",
        "67b8dbbd954f99b0be64bce6b421d195 (05:38): 59e570bef8ead953686ff65207d2dfbc: is it ready to land?",
        "59e570bef8ead953686ff65207d2dfbc (05:38): I think so",
        "59e570bef8ead953686ff65207d2dfbc (05:39): I haven't really been reading that bug but I fixed the bitrot",
        "898fc6ecff9a5867e6455f37fba81580 (05:39): really wishes he could spend more than an hour at a time working on this",
        "67b8dbbd954f99b0be64bce6b421d195 (05:39): do you have commit accsess?",
        "59e570bef8ead953686ff65207d2dfbc (05:39): khuey, should I just land it?",
        "59e570bef8ead953686ff65207d2dfbc (05:40): I'm assuming you wanted it landed asap which is why you asked if it could land",
        "67b8dbbd954f99b0be64bce6b421d195 (05:40): 59e570bef8ead953686ff65207d2dfbc: yeah, it's breaking one of google's properties",
        "67b8dbbd954f99b0be64bce6b421d195 (05:40): 59e570bef8ead953686ff65207d2dfbc: if it's ready to go landing it would be appreciated :-)",
        "59e570bef8ead953686ff65207d2dfbc (05:40): okay, since I'm not doing anything",
        "59e570bef8ead953686ff65207d2dfbc (05:42): my inbound tree is somewhat out of date :/",
        "bc91032d3084d3b9765c37b5965f5f20 (06:02): 68ad46d16b05645111d6dcb1b0cddc41: ping",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:02): bc91032d3084d3b9765c37b5965f5f20: pong",
        "bc91032d3084d3b9765c37b5965f5f20 (06:02): hi 68ad46d16b05645111d6dcb1b0cddc41",
        "bc91032d3084d3b9765c37b5965f5f20 (06:03): 68ad46d16b05645111d6dcb1b0cddc41: I have a question to FFs 4x4 CSSMatrix implementation",
        "bc91032d3084d3b9765c37b5965f5f20 (06:03): 68ad46d16b05645111d6dcb1b0cddc41: Normally a 3x2 matrix looks like follows transformed to a 3x3 matrix:",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:03): bc91032d3084d3b9765c37b5965f5f20: We don't implement the CSSMatrix interface at all currently",
        "bc91032d3084d3b9765c37b5965f5f20 (06:04): 68ad46d16b05645111d6dcb1b0cddc41: but the backwend to support the 3D transformation functions, correct?",
        "bc91032d3084d3b9765c37b5965f5f20 (06:04): 68ad46d16b05645111d6dcb1b0cddc41: So you have something like a internal 4x4 matrix implementation",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:04): bc91032d3084d3b9765c37b5965f5f20: indeed",
        "bc91032d3084d3b9765c37b5965f5f20 (06:05): 68ad46d16b05645111d6dcb1b0cddc41: ok, to the 3x3 matrix:",
        "bc91032d3084d3b9765c37b5965f5f20 (06:05): a c e",
        "bc91032d3084d3b9765c37b5965f5f20 (06:05): b d f",
        "bc91032d3084d3b9765c37b5965f5f20 (06:05): 0 0 1",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:05): yep",
        "bc91032d3084d3b9765c37b5965f5f20 (06:05): when we transform it to 4x4 in Webkit, it will look like:",
        "bc91032d3084d3b9765c37b5965f5f20 (06:05): a b 0 0",
        "bc91032d3084d3b9765c37b5965f5f20 (06:05): c d 0 0",
        "bc91032d3084d3b9765c37b5965f5f20 (06:05): 0 0 1 0",
        "bc91032d3084d3b9765c37b5965f5f20 (06:05): e f 0 1",
        "bc91032d3084d3b9765c37b5965f5f20 (06:06): 68ad46d16b05645111d6dcb1b0cddc41: the same for your implementation?",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:06): bc91032d3084d3b9765c37b5965f5f20: yes",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:06): (except you transposed the matrix there)",
        "bc91032d3084d3b9765c37b5965f5f20 (06:06): 68ad46d16b05645111d6dcb1b0cddc41: aha, that is the point!",
        "bc91032d3084d3b9765c37b5965f5f20 (06:07): 68ad46d16b05645111d6dcb1b0cddc41: how does a matrix3d(..) look like for you?",
        "bc91032d3084d3b9765c37b5965f5f20 (06:07): m11 &amp; m21 &amp; m31 &amp; m41 \\\\",
        "bc91032d3084d3b9765c37b5965f5f20 (06:07): m12 &amp; m22 &amp; m32 &amp; m42 \\\\",
        "bc91032d3084d3b9765c37b5965f5f20 (06:07): m13 &amp; m23 &amp; m33 &amp; m43 \\\\",
        "bc91032d3084d3b9765c37b5965f5f20 (06:07): m14 &amp; m24 &amp; m34 &amp; m44",
        "bc91032d3084d3b9765c37b5965f5f20 (06:07): ?",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:07): no, the transpose of that",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:08): m11, m12, m13, m14",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:08): m21.. etc",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:08): where m41, m42 are the 'translation' components",
        "bc91032d3084d3b9765c37b5965f5f20 (06:08): 68ad46d16b05645111d6dcb1b0cddc41: ok, the problem is, it looks the same for us!",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:08): what is the actual problem here?",
        "bc91032d3084d3b9765c37b5965f5f20 (06:08): 68ad46d16b05645111d6dcb1b0cddc41: that can't work if we use the transpsoe for calculations",
        "bc91032d3084d3b9765c37b5965f5f20 (06:09): If it looks like",
        "bc91032d3084d3b9765c37b5965f5f20 (06:09): m11 &amp; m21 &amp; m31 &amp; m41 \\\\",
        "bc91032d3084d3b9765c37b5965f5f20 (06:09): m12 &amp; m22 &amp; m32 &amp; m42 \\\\",
        "bc91032d3084d3b9765c37b5965f5f20 (06:09): m13 &amp; m23 &amp; m33 &amp; m43 \\\\",
        "bc91032d3084d3b9765c37b5965f5f20 (06:09): m14 &amp; m24 &amp; m34 &amp; m44",
        "bc91032d3084d3b9765c37b5965f5f20 (06:09): for both of us",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:09): why not?",
        "bc91032d3084d3b9765c37b5965f5f20 (06:09): but webkit uses the transpose for calculations, shouldn't there be a problem?",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:10): as I said, I believe ours is the transpose of the layout you just said",
        "bc91032d3084d3b9765c37b5965f5f20 (06:11): do you have experience with matrix3d? I mean with examples? I wouldn't be surprised if it looks different to webkit",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:11): Yes, we have tests for it",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:11): AryehGregor is writing more at the moment too",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:12): we get the same behavior as webkit for everything tested so far",
        "bc91032d3084d3b9765c37b5965f5f20 (06:12): 68ad46d16b05645111d6dcb1b0cddc41: ok, thanks. Then I have to check what we are doing internaly so that the behavior matches",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:13): bc91032d3084d3b9765c37b5965f5f20: The 3d transforms spec defines the matrix orientation used in matrix3d()",
        "bc91032d3084d3b9765c37b5965f5f20 (06:15): 68ad46d16b05645111d6dcb1b0cddc41: but just for matrix3d, not in general",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:15): bc91032d3084d3b9765c37b5965f5f20: The internal format shouldn't matter",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:15): as long as your matrix operations are all consistant",
        "bc91032d3084d3b9765c37b5965f5f20 (06:15): 68ad46d16b05645111d6dcb1b0cddc41: that depends",
        "bc91032d3084d3b9765c37b5965f5f20 (06:15): for instance if you do matrix3d() and translate",
        "bc91032d3084d3b9765c37b5965f5f20 (06:15): afterwards",
        "bc91032d3084d3b9765c37b5965f5f20 (06:16): and don't respect the transpose",
        "bc91032d3084d3b9765c37b5965f5f20 (06:16): that is how translate looks like:",
        "bc91032d3084d3b9765c37b5965f5f20 (06:16): TransformationMatrix&amp; TransformationMatrix::translate(double tx, double ty)",
        "bc91032d3084d3b9765c37b5965f5f20 (06:16): {",
        "bc91032d3084d3b9765c37b5965f5f20 (06:16): m_matrix[3][0] += tx * m_matrix[0][0] + ty * m_matrix[1][0];",
        "bc91032d3084d3b9765c37b5965f5f20 (06:16): m_matrix[3][1] += tx * m_matrix[0][1] + ty * m_matrix[1][1];",
        "bc91032d3084d3b9765c37b5965f5f20 (06:16): m_matrix[3][2] += tx * m_matrix[0][2] + ty * m_matrix[1][2];",
        "bc91032d3084d3b9765c37b5965f5f20 (06:16): m_matrix[3][3] += tx * m_matrix[0][3] + ty * m_matrix[1][3];",
        "bc91032d3084d3b9765c37b5965f5f20 (06:16): return *this;",
        "bc91032d3084d3b9765c37b5965f5f20 (06:16): }",
        "bc91032d3084d3b9765c37b5965f5f20 (06:16): was kicked by killer (Stop flooding!)",
        "bc91032d3084d3b9765c37b5965f5f20 (06:17): 68ad46d16b05645111d6dcb1b0cddc41: sorry",
        "bc91032d3084d3b9765c37b5965f5f20 (06:18): 68ad46d16b05645111d6dcb1b0cddc41: just two lines:",
        "ac495561e6015364214b354ab23f7d2d (06:18): bc91032d3084d3b9765c37b5965f5f20 try pastebinning next time :)",
        "bc91032d3084d3b9765c37b5965f5f20 (06:18): m_matrix[3][0] += tx * m_matrix[0][0] + ty * m_matrix[1][0];",
        "bc91032d3084d3b9765c37b5965f5f20 (06:18): \u00ac\u2020 \u00ac\u2020m_matrix[3][1] += tx * m_matrix[0][1] + ty * m_matrix[1][1];",
        "bc91032d3084d3b9765c37b5965f5f20 (06:18): ac495561e6015364214b354ab23f7d2d: yeah :/",
        "bc91032d3084d3b9765c37b5965f5f20 (06:19): 68ad46d16b05645111d6dcb1b0cddc41: we use [3][0] for tx [3][1] for ty and [3][2] for tz",
        "bc91032d3084d3b9765c37b5965f5f20 (06:19): 68ad46d16b05645111d6dcb1b0cddc41: \u201a\u00c4\u00b6 transposed, but still set matrix3d the same way like you",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:19): bc91032d3084d3b9765c37b5965f5f20: No, thats the same as us",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:20): [3][0] is the same as _41",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:20): which is the 'x translation' value",
        "bc91032d3084d3b9765c37b5965f5f20 (06:20): 68ad46d16b05645111d6dcb1b0cddc41: ouch, you are right, xy",
        "bc91032d3084d3b9765c37b5965f5f20 (06:24): 68ad46d16b05645111d6dcb1b0cddc41: Yes, the sorting of setting the variables in the source confused me. Thanks a lot for your patience.",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:24): bc91032d3084d3b9765c37b5965f5f20: Anytime :)",
        "771afa492e59bc492dae796126df6b7a (06:43): hi, does anyone know where to ask question about BrowserID?",
        "9139b5bbff3c9c6a37be5d2af014270f (06:44): 771afa492e59bc492dae796126df6b7a: #identity",
        "771afa492e59bc492dae796126df6b7a (06:44): 9139b5bbff3c9c6a37be5d2af014270f: thanks",
        "a3f19f90edf0a0893c7847d08016abe3 (06:45): lsblakk|afk (or anyone), how do I get OS X 10.7 builds and talos runs out of try? I used &quot;try: -b do -p macosx,macosx64 -u none -t paint&quot; but only got OS X debug, OS X64 opt and OS X64 debug builds, and no talos runs"
    ],
    "person_ids": [
        "ac495561e6015364214b354ab23f7d2d",
        "898fc6ecff9a5867e6455f37fba81580",
        "67b8dbbd954f99b0be64bce6b421d195",
        "59e570bef8ead953686ff65207d2dfbc",
        "bc91032d3084d3b9765c37b5965f5f20",
        "68ad46d16b05645111d6dcb1b0cddc41",
        "771afa492e59bc492dae796126df6b7a",
        "9139b5bbff3c9c6a37be5d2af014270f",
        "a3f19f90edf0a0893c7847d08016abe3"
    ]
}