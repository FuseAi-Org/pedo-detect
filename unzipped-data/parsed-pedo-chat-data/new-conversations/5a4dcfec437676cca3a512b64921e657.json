{
    "id": "5a4dcfec437676cca3a512b64921e657",
    "messages": [
        "247e385cfa14fc8d32629a58097e14f3 (05:51): Reboot&quot;)",
        "efbed42ef061477edc51ff6474790560 (05:56): is it possible to send a file attachment in the email with smtplib?",
        "8bece2647a39db763401c1e98abe5854 (05:58): DaHood: of course",
        "8bece2647a39db763401c1e98abe5854 (05:58): DaHood: it just requires that you use the correct mime encoding.",
        "8bece2647a39db763401c1e98abe5854 (05:58): :)",
        "8bece2647a39db763401c1e98abe5854 (05:58): DaHood: smtplib is for sending mail over smtp",
        "8bece2647a39db763401c1e98abe5854 (05:58): DaHood: to 'attach' a file, you really just need to put a correct mime encoded body in the mail",
        "88bd395210fbbe34781f8f6281e44550 (05:59): Does anybody know of any torrent modules for Python?",
        "efbed42ef061477edc51ff6474790560 (06:00): Jerub, thanks. At the moment i don't really know how to do this, but i will play with the smtplib module a bit. I also noticed another module named &quot;email&quot;. Maybe is it easier to send the attachment with this module?",
        "efbed42ef061477edc51ff6474790560 (06:05): Jerub, i also found an example code of how to send attachments. I think i'll study this snippet for a start report back if i have any questions. Thanks ( <a href=\"http://www.redcor.ch/intranet_zope_plone/tutorial/faq/SendingMailWithAttachmentsViaPython\">http://www.redcor.ch/intranet_zope_plone/tutorial/faq/SendingMailWithAttachmentsViaPython</a> )",
        "a721c72d02c6a86cb1695b3132347abe (06:08): Where are the return values of os.system() ? I cant find them :(",
        "4df9fe5dce598667185a3bbb1abc4b8c (06:08): I am trying to use gtkmozembed, and the example in the pygtkmozembed docs is seg faulting for me.  Any ideas on what can cause this and how I can go about debugging this?  <a href=\"http://paste.ubuntu-nl.org/19065\">http://paste.ubuntu-nl.org/19065</a>",
        "efbed42ef061477edc51ff6474790560 (06:30): hmm, I just realized that the MimeWriter module is considered as deprecated, so that example is not what i am looking for. Finally, I'll read all the docs about the email package... I thought that sending attachments would be a matter of 3-4 lines of code, but this operation seems to be a bit more complicated because of its nature",
        "676aac87c91c20d6feb8dfe9e2917b3f (06:32): hello all",
        "a721c72d02c6a86cb1695b3132347abe (06:33): is there anyway to catch a compile error through os.system, or any command a like?",
        "676aac87c91c20d6feb8dfe9e2917b3f (06:33): try:",
        "676aac87c91c20d6feb8dfe9e2917b3f (06:34): except SyntaxError ?",
        "a721c72d02c6a86cb1695b3132347abe (06:34): except Exception &lt;--- this name is arbitrary? I mean, it has to make sense, but is it?",
        "a721c72d02c6a86cb1695b3132347abe (06:36): Dont know, I guess I will look at os.mkdir so I understand how the exception builds the message when os.mkdir() fails",
        "676aac87c91c20d6feb8dfe9e2917b3f (06:36): os generally throws OSError",
        "4df9fe5dce598667185a3bbb1abc4b8c (06:36): I am trying to use gtkmozembed, and the example in the pygtkmozembed docs is seg faulting for me.  Any ideas on what can cause this and how I can go about debugging this?  <a href=\"http://paste.ubuntu-nl.org/19065\">http://paste.ubuntu-nl.org/19065</a>",
        "176972e0ebd1bd58b6290de5003431ef (06:38): say for example i have file with  line start with 1st position and it can continue with white space to next line .. how can i read that file and create list of lines ??",
        "676aac87c91c20d6feb8dfe9e2917b3f (06:38): i have a list comprehension question",
        "a721c72d02c6a86cb1695b3132347abe (06:38): os.system() returns 0 when ok, any other value when failed? where is that info???? I've looked for the return codes of the functions but.... [small_letters] the docs sucks! [/small_letters]",
        "676aac87c91c20d6feb8dfe9e2917b3f (06:38): if anyone is keen",
        "8bece2647a39db763401c1e98abe5854 (06:53): danf_1979: the assumption is made that you know about unix programming.",
        "8bece2647a39db763401c1e98abe5854 (06:53): parks: just ask.",
        "7d4f2dfb33788b0659a19e2db78f99d0 (06:53): hah",
        "ab117edb6a2139b003d97bbe8648e8b3 (06:57): danf_1979: os.system() returns whatever the program you called returned...",
        "ab117edb6a2139b003d97bbe8648e8b3 (06:57): returning 0 on success is a UNIX thing",
        "ab117edb6a2139b003d97bbe8648e8b3 (06:57): the manpages for most system apps tell you what the return values are anyway",
        "a721c72d02c6a86cb1695b3132347abe (06:59): gxti, thanks for that tip!",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:07): jerub",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:07): yeah i was getting the data together",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:08): now im fixing an oracle reports",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:08): reports developer, what alovely tool",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:09): <a href=\"http://rafb.net/paste/results/H0clSy69.html\">http://rafb.net/paste/results/H0clSy69.html</a> basically i want all the rows from data, but only the cols that map to colmap based on index, except where colmap's value is 'ignore'",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:13): danf_1979 the &quot;any other value&quot; is the programs exit code",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:22): [r for r in [[b for (i, b) in enumerate(x) if colmap[i] != 'ignore']] for x in data]",
        "8bece2647a39db763401c1e98abe5854 (07:22): parks: what the heck.",
        "8bece2647a39db763401c1e98abe5854 (07:22): why are you creating a list with a single list inside it?",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:24): huh?",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:24): the pastebin code is missing the ,'s in the data list",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:24): its a list of 7 lists",
        "8bece2647a39db763401c1e98abe5854 (07:24): [[b for (i, b) in enumerate(x) if colmap[i] != 'ignore']]",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:25): yeah",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:25): dunno",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:25): if i dont do that",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:25): i get different results",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:25): eg",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:25): &gt;&gt;&gt; [r for r in [b for (i, b) in enumerate(x) if colmap[i] != 'ignore'] for x in data]",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:25): ['4405', '4405', '6.73%', '6.73%', '', '', '20-Jun-06', '20-Jun-06', '0732324000', '0732324000'] &lt;- wrong",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:26): &gt;&gt;&gt; [r for r in [[b for (i, b) in enumerate(x) if colmap[i] != 'ignore']] for x in data]",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:26): [['4405', '6.73%', '', '20-Jun-06', '0732324000'], ['4405', '6.73%', '', '20-Jun-06', '0732324000']] &lt;- correct",
        "8bece2647a39db763401c1e98abe5854 (07:26): ah! then this is what you want:",
        "8bece2647a39db763401c1e98abe5854 (07:26): [[b for (i, b) in enumerate(x) if colmap[i] != 'ignore'] for x in data]",
        "8bece2647a39db763401c1e98abe5854 (07:26): or, better",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:26): cools, gives the same result",
        "8bece2647a39db763401c1e98abe5854 (07:27): [[col for (label, col) in zip(colmap, row)] for row in data]",
        "8bece2647a39db763401c1e98abe5854 (07:27): oh",
        "8bece2647a39db763401c1e98abe5854 (07:27): [[col for (label, col) in zip(colmap, row) if label != 'ignore'] for row in data]",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:27): yeah",
        "8bece2647a39db763401c1e98abe5854 (07:28): that allows you to turn it into a list of dicts trivially, doing:",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:28): yeah",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:28): thanks jerub",
        "8bece2647a39db763401c1e98abe5854 (07:28): [dict((label, col) for (label, col) in zip(colmap, row) if label != 'ignore') for row in data]",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:30): interestingly, the enumerate fails when put into the code, yet the zip one works",
        "676aac87c91c20d6feb8dfe9e2917b3f (07:31): sweet",
        "4f36d8a5250ed2fa316415b89d74a94e (07:38): How can I change a method in a class from outside the class?",
        "2bed0f7df931083c71cbe381c5a9427d (07:40): C.m = f",
        "4f36d8a5250ed2fa316415b89d74a94e (07:41): mython's regularity ceases not to amaze me",
        "4f36d8a5250ed2fa316415b89d74a94e (07:41): python's, even",
        "203a66a9a3b53863a5b821bbc1a63539 (07:45): is there function to append string by placing string in front of it? I'm using python 2.3",
        "daa08b04a71644cbce3e6e7e5aeeb58e (07:47): use +",
        "203a66a9a3b53863a5b821bbc1a63539 (07:47): alright",
        "203a66a9a3b53863a5b821bbc1a63539 (07:47): I quess that's the simplest way :)",
        "daa08b04a71644cbce3e6e7e5aeeb58e (07:47): yes",
        "4f36d8a5250ed2fa316415b89d74a94e (08:07): what does one use to get xml with namespaces and xpath in python? xml.dom.minidom is not quite there",
        "d5938dbcd81ab0dc7529fe844e12afb7 (08:15): greets folks.",
        "efbed42ef061477edc51ff6474790560 (08:31): if there were no examples in the &quot;email&quot; module documentation, personally, it would have taken me a week to send a multipart email message with text and attachments. Examples rule!"
    ],
    "person_ids": [
        "247e385cfa14fc8d32629a58097e14f3",
        "efbed42ef061477edc51ff6474790560",
        "8bece2647a39db763401c1e98abe5854",
        "88bd395210fbbe34781f8f6281e44550",
        "a721c72d02c6a86cb1695b3132347abe",
        "4df9fe5dce598667185a3bbb1abc4b8c",
        "676aac87c91c20d6feb8dfe9e2917b3f",
        "176972e0ebd1bd58b6290de5003431ef",
        "7d4f2dfb33788b0659a19e2db78f99d0",
        "ab117edb6a2139b003d97bbe8648e8b3",
        "4f36d8a5250ed2fa316415b89d74a94e",
        "2bed0f7df931083c71cbe381c5a9427d",
        "203a66a9a3b53863a5b821bbc1a63539",
        "daa08b04a71644cbce3e6e7e5aeeb58e",
        "d5938dbcd81ab0dc7529fe844e12afb7"
    ]
}