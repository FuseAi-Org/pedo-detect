{
    "id": "fe554b3daeddfb32f61ea8f5bf81a004",
    "messages": [
        "dd83f96fa74f05bcbcf275c4352ab4f4 (05:53): see, now I'm regretting nsAutoTune.",
        "6ddd17cf35914b23199f7316be5ba65b (05:58): I'm regretting nsAutoFella... wait, what?",
        "6ddd17cf35914b23199f7316be5ba65b (06:00): 28f9b1cae5ae23caa8471696342f6f0c: &quot;auto&quot; may mean &quot;inline&quot; in Mozilla Bizarro world",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:01): 6ddd17cf35914b23199f7316be5ba65b: It's only inline while the inline storage is big enough though, then it switches to allocated",
        "6ddd17cf35914b23199f7316be5ba65b (06:02): 68ad46d16b05645111d6dcb1b0cddc41: sure... still not &quot;auto&quot; by any sensible/standard meaning of the word :)",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:02): automatically switching between inline and allocated?",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:02): I guess it's a bit of a jump",
        "6ddd17cf35914b23199f7316be5ba65b (06:03): 68ad46d16b05645111d6dcb1b0cddc41: to me, &quot;auto&quot; is like &quot;automatic variable&quot;, ie. has block scope",
        "6ddd17cf35914b23199f7316be5ba65b (06:03): that's the use in e.g. &quot;MutexAutoLock&quot;",
        "6ddd17cf35914b23199f7316be5ba65b (06:04): and 4 different people in quick succession tried to tell me that the storage in nsAutoTArray/nsAutoString is stack-allocated",
        "6ddd17cf35914b23199f7316be5ba65b (06:04): which indicates pretty clearly to me it's a bad name",
        "042dd99eb0ff8653814e445ca0093427 (06:08): the storage is allocated in the same scope as the variable itself",
        "042dd99eb0ff8653814e445ca0093427 (06:09): which is the stack, if the variable is a stack variable",
        "6ddd17cf35914b23199f7316be5ba65b (06:10): 042dd99eb0ff8653814e445ca0093427: yep",
        "6ddd17cf35914b23199f7316be5ba65b (06:11): 042dd99eb0ff8653814e445ca0093427: but that doesn't say &quot;auto&quot; to me",
        "8676f40c7c07987dc4274b0a98f6e07e (06:11): so is nsStackString a better name?",
        "8676f40c7c07987dc4274b0a98f6e07e (06:11): or would that confuse people in the cases where it's used in the heap",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:11): nsInitiallyInlineString",
        "8676f40c7c07987dc4274b0a98f6e07e (06:11): That seems to imply the &quot;inline&quot; keyword which is about compilation rather than storage...",
        "68ad46d16b05645111d6dcb1b0cddc41 (06:12): too many meanings, not enough words :)",
        "8676f40c7c07987dc4274b0a98f6e07e (06:12): C++ already uses |static| for quite a few different things, too",
        "8676f40c7c07987dc4274b0a98f6e07e (06:12): also |extern|",
        "449d752b727504f176e505984dbea2e4 (06:12): the hardest problem in CS is naming",
        "449d752b727504f176e505984dbea2e4 (06:12): that, and cache management",
        "042dd99eb0ff8653814e445ca0093427 (06:13): those are the only problems in CS",
        "449d752b727504f176e505984dbea2e4 (06:13): now, time to figure out why my code is failing to live up to its name",
        "6ddd17cf35914b23199f7316be5ba65b (06:14): dbaron: nsStackString is even worse than nsAutoString",
        "042dd99eb0ff8653814e445ca0093427 (06:14): nsAutoTArray etc may not be great names, but I'm not sure how you'd make them better",
        "6ddd17cf35914b23199f7316be5ba65b (06:14): dbaron: nsInlineString isn't bad, IMO",
        "6ddd17cf35914b23199f7316be5ba65b (06:14): inline storage is sufficiently different from inline functions that I don't mind the reuse",
        "449d752b727504f176e505984dbea2e4 (06:14): 042dd99eb0ff8653814e445ca0093427: mozilla::AutoTArray? :-)",
        "042dd99eb0ff8653814e445ca0093427 (06:14): for &quot;stuff that goes away when the variable goes out of scope&quot; it sounds OK to me",
        "bb9601a05027b9c842f2d3a82835186b (06:15): mozilla::Array",
        "6ddd17cf35914b23199f7316be5ba65b (06:15): js::Vector uses the word &quot;inline&quot; extensively",
        "6ddd17cf35914b23199f7316be5ba65b (06:15): e.g. usingInlineStorage",
        "6ddd17cf35914b23199f7316be5ba65b (06:15): 042dd99eb0ff8653814e445ca0093427: for &quot;stuff that goes away when the variable goes out of scope&quot;, &quot;auto&quot; is perfect",
        "449d752b727504f176e505984dbea2e4 (06:16): LLVM uses &quot;small&quot;",
        "449d752b727504f176e505984dbea2e4 (06:16): e.g., SmallVector",
        "042dd99eb0ff8653814e445ca0093427 (06:16): well, that's probably what motivated &quot;nsAutoString&quot;",
        "042dd99eb0ff8653814e445ca0093427 (06:17): anyway, if you want to go around renaming things, there are much more obvious improvements to be made",
        "449d752b727504f176e505984dbea2e4 (06:17): like nsISupports? *snark*",
        "449d752b727504f176e505984dbea2e4 (06:18): pretends he hasn't already been /ignore'd",
        "042dd99eb0ff8653814e445ca0093427 (06:19): heck, if you want to rename nsAutoTArray and nsTArray to mozilla::InlineArray and mozilla::Array everywhere, that seems fine too",
        "6ddd17cf35914b23199f7316be5ba65b (06:20): suspects parallelizing code is also a hard CS problem",
        "942f66399dbed7df5031f8453b9b94da (06:30): 6ddd17cf35914b23199f7316be5ba65b, I suspect the CS point of view is to use haskell and let the compiler parallelize it :)",
        "a38ec82c62af264c0a0768d1a2dcec22 (06:31): :D",
        "273b79ac2d0d1e9dd5857cbc7fb8b28a (06:33): 942f66399dbed7df5031f8453b9b94da: I have this urge to yell &quot;troll&quot; :P",
        "34171b8ea3c68516dffe90f90a3c5de7 (06:43): shakes his fist at the lack of DWARF documentation",
        "449d752b727504f176e505984dbea2e4 (06:43): shakes his fist at debugging code with no symbols",
        "28f9b1cae5ae23caa8471696342f6f0c (06:48): i think 6ddd17cf35914b23199f7316be5ba65b would argue that that is worse",
        "28f9b1cae5ae23caa8471696342f6f0c (06:48): oh, oops, ignore me",
        "6ddd17cf35914b23199f7316be5ba65b (06:48): is feeling mellow",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (07:06): 6ddd17cf35914b23199f7316be5ba65b: yeah, I don't see what's particularly wrong with &quot;auto&quot;.  &quot;Inline&quot; is arguably better, but the problem isn't &quot;auto&quot; but that people think &quot;auto&quot; means &quot;stack.&quot;",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (07:06): For no good reason.",
        "6ddd17cf35914b23199f7316be5ba65b (07:06): eab22ddafe9ed99f3735e412bf7ae3e3: automatic variables",
        "6ddd17cf35914b23199f7316be5ba65b (07:06): that's a good reason",
        "6ddd17cf35914b23199f7316be5ba65b (07:07): but there's no sane way to get from &quot;auto&quot; to &quot;inline storage&quot;",
        "6ddd17cf35914b23199f7316be5ba65b (07:07): anyway, I've gotta run",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (07:07): 6ddd17cf35914b23199f7316be5ba65b: Ah, that is a good reason.",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (07:07): had never heard of &quot;automatic variable&quot;.",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (07:07): 6ddd17cf35914b23199f7316be5ba65b: cya",
        "6ddd17cf35914b23199f7316be5ba65b (07:08): http://en.wikipedia.org/wiki/Automatic_variable",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (07:08): yeah, I just looked it up",
        "54e41c406ca8e1a8af656c42c41fba05 (07:10): eab22ddafe9ed99f3735e412bf7ae3e3: they don't teach that term anymore?",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (07:10): 54e41c406ca8e1a8af656c42c41fba05: Not at Stanford, anyway!",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (07:10): Everyone knows &quot;local variable&quot;.",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (07:10): The |auto| keyword seems to have gone the way of |register|.",
        "54e41c406ca8e1a8af656c42c41fba05 (07:11): Ah, register, I knew it well",
        "51c1edab440268cdb0754ff0c4584a9f (07:11): they are both still valid :-P",
        "54e41c406ca8e1a8af656c42c41fba05 (07:12): It was on the way out even back in the mid 80's for &quot;good&quot; compilers - but still handy even if the compiler ignored it generally since it guarantees nothing will take a pointer to the var",
        "54e41c406ca8e1a8af656c42c41fba05 (07:12): And that's useful to an optimizer (especially as 'noalias' got shot down many moons ago)",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (07:14): What's the right way to tell if I have a pointer to a chrome docshell?",
        "54e41c406ca8e1a8af656c42c41fba05 (07:15): &quot;automatic variable&quot; as a term might be more often heard in compiler courses - not sure if they teach compiler construction to undergrads now; they didn't use to - my bet is it's a grad-level subject",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (07:15): Ah, mItemType.",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (07:15): 54e41c406ca8e1a8af656c42c41fba05: We didn't use that term in any of the three compilers courses I took, either.  :)",
        "54e41c406ca8e1a8af656c42c41fba05 (07:16): Hmm.  Odd.  'local var' has slightly different connotations to me",
        "54e41c406ca8e1a8af656c42c41fba05 (07:16): oh well",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (07:16): But you have a very small sample size here.",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (07:21): 28f9b1cae5ae23caa8471696342f6f0c: time to dual-boot.  :)",
        "28f9b1cae5ae23caa8471696342f6f0c (07:21): NEVAH",
        "28f9b1cae5ae23caa8471696342f6f0c (07:24): anyone know if try will do a linux pgo?",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (07:25): 28f9b1cae5ae23caa8471696342f6f0c: if you ask politely.",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (07:25): 28f9b1cae5ae23caa8471696342f6f0c: https://wiki.mozilla.org/Build:TryChooser#What_if_I_want_PGO_for_my_build",
        "28f9b1cae5ae23caa8471696342f6f0c (07:29): ugh",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (07:50): http://pastebin.mozilla.org/1392477",
        "eab22ddafe9ed99f3735e412bf7ae3e3 (07:50): 28f9b1cae5ae23caa8471696342f6f0c ^",
        "58ffac207e90187bacf159efe4ca45f3 (07:55): is anyone using bzexport on windows? I get problems with it not finding the json module"
    ],
    "person_ids": [
        "dd83f96fa74f05bcbcf275c4352ab4f4",
        "6ddd17cf35914b23199f7316be5ba65b",
        "68ad46d16b05645111d6dcb1b0cddc41",
        "042dd99eb0ff8653814e445ca0093427",
        "8676f40c7c07987dc4274b0a98f6e07e",
        "449d752b727504f176e505984dbea2e4",
        "bb9601a05027b9c842f2d3a82835186b",
        "942f66399dbed7df5031f8453b9b94da",
        "a38ec82c62af264c0a0768d1a2dcec22",
        "273b79ac2d0d1e9dd5857cbc7fb8b28a",
        "34171b8ea3c68516dffe90f90a3c5de7",
        "28f9b1cae5ae23caa8471696342f6f0c",
        "eab22ddafe9ed99f3735e412bf7ae3e3",
        "54e41c406ca8e1a8af656c42c41fba05",
        "51c1edab440268cdb0754ff0c4584a9f",
        "58ffac207e90187bacf159efe4ca45f3"
    ]
}