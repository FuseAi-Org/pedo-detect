{
    "id": "801a33f8ace964aae4ae333863748acd",
    "messages": [
        "eca88ce0deea1275223afe139b2595e2 (19:02): a11aabeeceeae6b8cb5d12ea06b56554: Test cases pass first. Profiling (and not until that) and then optimization later.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:16): eca88ce0deea1275223afe139b2595e2: Peh. I was just taking the same solution as Python for this :)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:16): eca88ce0deea1275223afe139b2595e2: Also: parsing the spec fails.",
        "eca88ce0deea1275223afe139b2595e2 (19:16): It... errors?",
        "eca88ce0deea1275223afe139b2595e2 (19:16): Wow.",
        "eca88ce0deea1275223afe139b2595e2 (19:17): That means our test-coverage is not good enough.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:17): Fatal error: Call to a member function cloneNode() on a non-object in /Users a11aabeeceeae6b8cb5d12ea06b56554/Documents/Stuff I'm Working On/html5lib/php/library/HTML5/TreeConstructer.php on line 3037",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:17): The non-object is int(300)",
        "eca88ce0deea1275223afe139b2595e2 (19:17): Huh. That should never happen.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:17): Well it does. :D",
        "eca88ce0deea1275223afe139b2595e2 (19:18): Oh, hey, that's the marker",
        "eca88ce0deea1275223afe139b2595e2 (19:18): Ok, so we need to figure out why that algorithm is failing",
        "eca88ce0deea1275223afe139b2595e2 (19:18): Do you have a minimal test-case?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:18): No.",
        "ab7faae5d7b250ea8606486575f8f79c (19:18): curl http://www.whatwg.org/specs/web-apps/current-work/ -o html5lib/testdata/treeconstruction/tests13.dat",
        "ab7faae5d7b250ea8606486575f8f79c (19:18): That'll encourage people to optimise their implementations",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:18): eca88ce0deea1275223afe139b2595e2: that.",
        "eca88ce0deea1275223afe139b2595e2 (19:18): Heh",
        "eca88ce0deea1275223afe139b2595e2 (19:18): Will do.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:19): wonders if we should actually do that\u201a\u00c4\u00b6",
        "eca88ce0deea1275223afe139b2595e2 (19:19): I wish we had better names for our test-cases",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:19): What could be better than a number? :P",
        "ab7faae5d7b250ea8606486575f8f79c (19:20): I wouldn't object to regrouping and renaming the tests",
        "eca88ce0deea1275223afe139b2595e2 (19:20): It's just that, some of the test-cases make assumptions about the naming of the tests",
        "eca88ce0deea1275223afe139b2595e2 (19:21): a11aabeeceeae6b8cb5d12ea06b56554: It would be super-uber-awesome if you could find a minimal test-case that tickles the bug.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:21): No, it would be super-?\u00baber-awesome.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:21): uber isn't a word, damnit!",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:25): Last token emitted is with stream at Line  4667, column 5",
        "b25b6b77a0087ff8385941e5545d32ea (19:26): would positivly welcome renaming the tests but doesn't want to actually spend time doing it",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:26): &lt;dfn title=&quot;dom-uda-protocol&quot;&gt;",
        "eca88ce0deea1275223afe139b2595e2 (19:31): Is it conceptually clean for me to refer to elements in the SVG namespace as 'svg:foo'? I know that prefixes can change, but this is the most convenient representation",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:33): eca88ce0deea1275223afe139b2595e2: &lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;protocol&lt;/code&gt; &lt;/table&gt;",
        "eca88ce0deea1275223afe139b2595e2 (19:34): Awesome",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:37): eca88ce0deea1275223afe139b2595e2: s/protocol//",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:39): has no idea which test file to put the test in",
        "eca88ce0deea1275223afe139b2595e2 (19:40): There's a bunch of foster parenting tests in... erm... 7, I think",
        "eca88ce0deea1275223afe139b2595e2 (19:40): (this is why we need better names)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:41): Yeah, I think 7 is best.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:42): runs it against Python to make sure something agrees with the parse tree",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:43): gets auth failed :\\",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:43): eca88ce0deea1275223afe139b2595e2: Pushed",
        "eca88ce0deea1275223afe139b2595e2 (19:44): Awesome",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:45): Have fun with your test suite which throws a fatal error :P",
        "eca88ce0deea1275223afe139b2595e2 (19:45): I'm finishing XForeign support first",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:45): notes the spec is a good test document because it is so huge and does so much",
        "ab7faae5d7b250ea8606486575f8f79c (19:46): notes the spec is a bad test document because it's very repetitive and is valid",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:46): eca88ce0deea1275223afe139b2595e2: I take it you're fixing the fact that HTML elements should go into the HTML namespace?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:46): ab7faae5d7b250ea8606486575f8f79c: But it does everything that's valid, more or less :P",
        "ab7faae5d7b250ea8606486575f8f79c (19:47): a11aabeeceeae6b8cb5d12ea06b56554: That seems unlikely :-p",
        "eca88ce0deea1275223afe139b2595e2 (19:47): a11aabeeceeae6b8cb5d12ea06b56554: I assume that's the default behavior. I suppose I could fix that trivially though",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:47): Well, it's almost infinitely long :P",
        "ab7faae5d7b250ea8606486575f8f79c (19:47): a11aabeeceeae6b8cb5d12ea06b56554: Why is that relevant?",
        "ab7faae5d7b250ea8606486575f8f79c (19:48): a11aabeeceeae6b8cb5d12ea06b56554: I could make a document that's infinitely long and consists entirely of whitespace, and it wouldn't test much behaviour",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:48): ab7faae5d7b250ea8606486575f8f79c: Indeed",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:48): ab7faae5d7b250ea8606486575f8f79c: But you'd need an infinitely long document to try every possible valid character stream",
        "ab7faae5d7b250ea8606486575f8f79c (19:49): a11aabeeceeae6b8cb5d12ea06b56554: An infinitely long document could only test precisely one character stream",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:49): eca88ce0deea1275223afe139b2595e2: It _should_ just mean changing to createElementNS",
        "eca88ce0deea1275223afe139b2595e2 (19:49): Right, but because the tokenizer+parser are finite state machines",
        "ab7faae5d7b250ea8606486575f8f79c (19:49): a11aabeeceeae6b8cb5d12ea06b56554: You'd need infinitely many documents if you want to test infinitely many character streams",
        "eca88ce0deea1275223afe139b2595e2 (19:49): We don't need an infinite input stream to test all state combinations",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:50): ab7faae5d7b250ea8606486575f8f79c: Indeed.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:50): eca88ce0deea1275223afe139b2595e2: If we implement both as finite state machines exactly to spec, yes :P",
        "ab7faae5d7b250ea8606486575f8f79c (19:50): a11aabeeceeae6b8cb5d12ea06b56554: But the interesting state in an implementation is finite, so a finite set of finite test cases could test all the interesting cases",
        "b25b6b77a0087ff8385941e5545d32ea (19:51): ab7faae5d7b250ea8606486575f8f79c: And your're going to autogenreate tests to cover them all, right? ;)",
        "ab7faae5d7b250ea8606486575f8f79c (19:51): (By &quot;interesting&quot;, I mean that e.g. &quot;&lt;br&gt;&lt;br&gt;&quot; might be interesting but &quot;&lt;br&gt;&lt;br&gt;&lt;br&gt;&quot; is very unlikely to be)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:51): eca88ce0deea1275223afe139b2595e2: Though it may well make &lt;foo:bar&gt; throw an error",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:51): sighs",
        "ab7faae5d7b250ea8606486575f8f79c (19:51): b25b6b77a0087ff8385941e5545d32ea: That's what I did for the tokeniser :-)",
        "ab7faae5d7b250ea8606486575f8f79c (19:51): (or at least attempted to)",
        "ab7faae5d7b250ea8606486575f8f79c (19:51): b25b6b77a0087ff8385941e5545d32ea: and if I ever got around to finishing my tree-constructor implementation, I suppose I could generate tests for that too",
        "eca88ce0deea1275223afe139b2595e2 (19:51): I think it would be possible to programatically generate tree-constructer tests",
        "a11aabeeceeae6b8cb5d12ea06b56554 (19:52): ab7faae5d7b250ea8606486575f8f79c: It's OCaml, right?",
        "b25b6b77a0087ff8385941e5545d32ea (19:52): ab7faae5d7b250ea8606486575f8f79c: I know and I know, respectively",
        "ab7faae5d7b250ea8606486575f8f79c (19:52): a11aabeeceeae6b8cb5d12ea06b56554: Yes",
        "eca88ce0deea1275223afe139b2595e2 (20:16): a11aabeeceeae6b8cb5d12ea06b56554: I'm looking at your new SPACECHARACTERS token type, and I'm thinking that's not actually a good idea.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (20:16): eca88ce0deea1275223afe139b2595e2: It's what Python does.",
        "eca88ce0deea1275223afe139b2595e2 (20:16): It diverges from spec, and anywhere we matched just CHARACTERS, we have to match against both",
        "eca88ce0deea1275223afe139b2595e2 (20:16): Sure.",
        "eca88ce0deea1275223afe139b2595e2 (20:17): The way I would personally implement it, though, would be as an advisory extra flag placed in the token",
        "a11aabeeceeae6b8cb5d12ea06b56554 (20:17): eca88ce0deea1275223afe139b2595e2: Diverging from spec is not a problem.",
        "eca88ce0deea1275223afe139b2595e2 (20:17): Adding a new token type is a fairly large divergence",
        "69b0d3dfe919a6b860a9fac82de52a7e (20:20): heycam: what i was going to say is that it looks like style.filter also needs this magic (specifically it needs to return a string that masquerades as undefined)",
        "69b0d3dfe919a6b860a9fac82de52a7e (20:20): othermaciej: the way i specced document.all was to say it ToBoolean()s to false, but is otherwise a normal HTMLCollection",
        "69b0d3dfe919a6b860a9fac82de52a7e (20:21): othermaciej: is that not enough? I couldn't work out how to make it masquerade as 'undefined' for the purposes of the JS spec",
        "b25b6b77a0087ff8385941e5545d32ea (20:21): 69b0d3dfe919a6b860a9fac82de52a7e: So instanceof and typeof will work like any other HTMLCollection?",
        "b25b6b77a0087ff8385941e5545d32ea (20:21): has no idea if that is a problem",
        "69b0d3dfe919a6b860a9fac82de52a7e (20:22): yeh"
    ],
    "person_ids": [
        "eca88ce0deea1275223afe139b2595e2",
        "a11aabeeceeae6b8cb5d12ea06b56554",
        "ab7faae5d7b250ea8606486575f8f79c",
        "b25b6b77a0087ff8385941e5545d32ea",
        "69b0d3dfe919a6b860a9fac82de52a7e"
    ]
}