{
    "id": "389c4893a021db07e8d8ad0a7a96f183",
    "messages": [
        "dd645dc2e489d8d6015dd173a3f9c682 (21:12): how do you flatten a list?",
        "661f9c2c3a0e121fc2294c880521c3d4 (21:12): hot it with a hammer!!",
        "661f9c2c3a0e121fc2294c880521c3d4 (21:12): *hit",
        "110b7271a8ded2bc0764898de97d07d7 (21:13): samu2: Depends on how uneven it is. Is it just a list of lists, and all objects are list objects?",
        "110b7271a8ded2bc0764898de97d07d7 (21:13): If so: &gt;&gt;&gt; sum([[1,2],[3,4],[5,6]], [])",
        "110b7271a8ded2bc0764898de97d07d7 (21:13): [1, 2, 3, 4, 5, 6]",
        "dd645dc2e489d8d6015dd173a3f9c682 (21:13): yeah, just list of lists",
        "dae98baa0621c887471f0f62ce9547ee (21:18): heh...I keep forgetting that I'm in #python, so every time I check this channel I see code and think to myself &quot;hey, that's python!!&quot;",
        "b4b8ece4670c357660a103dd5e52cca3 (21:20): heh. What's an example of aolspeak?",
        "661f9c2c3a0e121fc2294c880521c3d4 (21:20): lol is",
        "661f9c2c3a0e121fc2294c880521c3d4 (21:21): do it a bunch of times and youll get a warning",
        "dae98baa0621c887471f0f62ce9547ee (21:21): &quot;lol wot u mean????&quot; is a fine example",
        "b65441e6715a3ada8b18837e67cb01d8 (21:29): hey :) what's the python 2.4 version of &quot;apply()&quot; ?",
        "10120f397a0f4db70d1aeb2d81229e70 (21:30): runa: apply(f,args)==f(*args)",
        "b65441e6715a3ada8b18837e67cb01d8 (21:30): ahum. where can I read more about that?",
        "3613fbfec191bde6ead3934d207784bb (21:31): I'm trying to figure out how to use regexp in python, but it wont work. :-) I've translated this PHP: preg_match(&quot;/uid:([\\d]+)/&quot;, $string, $match); into the following in python: match = re.match(&quot;uid:([\\d]+)&quot;, string), but it keeps returning 'None'",
        "3613fbfec191bde6ead3934d207784bb (21:31): Is there anythiung wrong with my python?",
        "d232ac3a9a7e24b2ff049b1c551b4055 (21:32): oliverp: hehe... what is the string you are using?",
        "110b7271a8ded2bc0764898de97d07d7 (21:32): Yes. Don't use regexps.",
        "110b7271a8ded2bc0764898de97d07d7 (21:32): if string.startswith('uid:'):",
        "110b7271a8ded2bc0764898de97d07d7 (21:32): uid, value = string.split(':')",
        "110b7271a8ded2bc0764898de97d07d7 (21:32): value = int(value)",
        "d232ac3a9a7e24b2ff049b1c551b4055 (21:33): Erwin: yeah, but that could through an exception if it's not the right syntax...",
        "10120f397a0f4db70d1aeb2d81229e70 (21:33): runa: in the tutorial, &quot;Unpacking Argument Lists&quot;",
        "b65441e6715a3ada8b18837e67cb01d8 (21:33): tnx",
        "110b7271a8ded2bc0764898de97d07d7 (21:33): kibab: And? Catch it, handle it. With the regexp you don't know why it matched.",
        "d232ac3a9a7e24b2ff049b1c551b4055 (21:33): oliverp: I'm not sure if this is the problem... but why put \\d in the brackets?",
        "3613fbfec191bde6ead3934d207784bb (21:33): Erwin, thats just an example though, the actual expression is like 200 chars",
        "3af55941e5590d3b835d818108c40f2d (21:34): i know how to make a child window apear in a parent window but how do you make a child window make another child window in a parent window? using the WXlibarys",
        "3613fbfec191bde6ead3934d207784bb (21:34): kibab, old habbit. maybe I shouldn't? :)",
        "d232ac3a9a7e24b2ff049b1c551b4055 (21:34): Erwin: you can figure out exactly why it matched with groups, etc.  There are many problems where the regex is the best solution.... not saying this is one in particular...",
        "110b7271a8ded2bc0764898de97d07d7 (21:34): kibab: There are few problems where the regexps is the best solution",
        "3613fbfec191bde6ead3934d207784bb (21:35): oh nvm. something was wrong with my regexp, not the python part.",
        "10120f397a0f4db70d1aeb2d81229e70 (21:35): oliverp: re.match(x,s)==re.search(&quot;^&quot;+x,s)",
        "110b7271a8ded2bc0764898de97d07d7 (21:35): Also, always use r'...' for strings with regexps",
        "110b7271a8ded2bc0764898de97d07d7 (21:35): That makes r'\\d' really be two chars, always, regardless of what \\d might be as an escape char in strings",
        "d232ac3a9a7e24b2ff049b1c551b4055 (21:37): Erwin: I don't really agree :) ... unless you need a full blown parser, regex's are very powerful and allow you to pull out pieces of strings that would otherwise take many lines of python (even good python) to extract.",
        "d232ac3a9a7e24b2ff049b1c551b4055 (21:38): Erwin: of course... it's really based on the problem domain",
        "c1996108081f74a79f9f8a7173927d6c (21:38): is there a function that converts a string like &quot;false&quot; to False?",
        "110b7271a8ded2bc0764898de97d07d7 (21:39): &quot;like&quot; false?",
        "10120f397a0f4db70d1aeb2d81229e70 (21:39): not bool(&quot;false&quot;) ;)",
        "110b7271a8ded2bc0764898de97d07d7 (21:39): What else do you want to convert? &quot;untrue&quot;, &quot;not true&quot; ?",
        "110b7271a8ded2bc0764898de97d07d7 (21:39): only eval(&quot;False&quot;) will give you False"
    ],
    "person_ids": [
        "dd645dc2e489d8d6015dd173a3f9c682",
        "661f9c2c3a0e121fc2294c880521c3d4",
        "110b7271a8ded2bc0764898de97d07d7",
        "dae98baa0621c887471f0f62ce9547ee",
        "b4b8ece4670c357660a103dd5e52cca3",
        "b65441e6715a3ada8b18837e67cb01d8",
        "10120f397a0f4db70d1aeb2d81229e70",
        "3613fbfec191bde6ead3934d207784bb",
        "d232ac3a9a7e24b2ff049b1c551b4055",
        "3af55941e5590d3b835d818108c40f2d",
        "c1996108081f74a79f9f8a7173927d6c"
    ]
}