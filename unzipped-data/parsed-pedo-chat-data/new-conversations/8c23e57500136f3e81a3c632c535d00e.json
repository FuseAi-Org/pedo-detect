{
    "id": "8c23e57500136f3e81a3c632c535d00e",
    "messages": [
        "b25b6b77a0087ff8385941e5545d32ea (23:51): 88d4d34a8064a4ff39fd5e144eea7762: That isn't a &quot;WebKit&quot; thing since different WebKit based browsers have different scripting engines",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:51): Oh, right.",
        "88d4d34a8064a4ff39fd5e144eea7762 (23:51): I guess I'm just not testing Safari, then.  :)",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:05): I just constructed a test case in IE9 where a Node object has a non-null parent, but is not equal to any child of that parent.",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:05): . . .",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:06): Is it just me, or do these insane type of bugs really mostly occur in IE?",
        "8925426ae91d6282f262eb2ee108bdc0 (00:07): is going to remain silent because he bashes IE far too often",
        "8b3687499080633e1898fa1dd209ef81 (00:07): The others fix them? :)",
        "1f58faf0d058f303f30239a369808167 (00:16): Or people try harder to find bugs in IE",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:17): I'm running the exact same test suite on all browsers.",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:17): I generally review the results and try to get some idea of what's causing the failures in all browsers, in case it's a bug in the test or spec.",
        "353fa4cc248867e98de9cab7d122c320 (00:17): it's not impossible to get that sort of crazy in WebKit (although i think we've fixed all the issues of that sorts i'm aware of)",
        "353fa4cc248867e98de9cab7d122c320 (00:18): if that makes you feel any better",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:18): 353fa4cc248867e98de9cab7d122c320, I found a case the other day where WebKit will produce a range with an offset longer than the length of the corresponding node.",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:18): But that sort of bug is at least comprehensible.",
        "8b3687499080633e1898fa1dd209ef81 (00:19): Though potentially scary",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:19): data:text/html,&lt;!doctype html&gt;&lt;body&gt;&lt;script&gt;var text = document.createTextNode(&quot;Abcdef&quot;); var range = document.createRange(); range.setStart(text, 0); range.setEnd(text, 2); text.splitText(1); document.body.textContent = range.startContainer.data + range.startOffset + range.endContainer.data + range.endOffset;&lt;/script&gt;",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:19): Didn't test in Safari, but in Chrome it outputs &quot;A0A2&quot;.",
        "f139aba52f9fa1394b4034a7954b2220 (00:24): 88d4d34a8064a4ff39fd5e144eea7762, what's the test case that shows the bug in IE?",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:25): http://software.hixie.ch/utilities/js/live-dom-viewer/saved/895",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:25): Subject to the proviso that you'll have to extract the contents using some other browser and then paste them into IE, because otherwise it will trigger the XSS filter.",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:26): It outputs &quot;false&quot; twice.",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:26): Hmm, Chrome behaves oddly here too.",
        "f139aba52f9fa1394b4034a7954b2220 (00:27): ok. I'll run it in a sec, just got to try and load windows 7 in a virtual machine without it slowing everything else down",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:28): Chrome doesn't output the w()'s unless you add w(&quot;foo&quot;) or something before the for loop.",
        "8b3687499080633e1898fa1dd209ef81 (00:28): That's really annoying",
        "8b3687499080633e1898fa1dd209ef81 (00:28): Aryeh, don't you know anyone at Google who could fix that? ^^",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:28): 8b3687499080633e1898fa1dd209ef81, fix what?",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:29): I don't know anyone more at Google than you do.",
        "8b3687499080633e1898fa1dd209ef81 (00:29): The w() thing",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:29): Also, what's the story with getting DOM Range into the W3C these days?",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:29): I don't know, it's a random glitch of some kind, no idea what causes it and no real desire to investigate.",
        "8b3687499080633e1898fa1dd209ef81 (00:29): I'm wondering if I should wait until I can publish under a reasonable license",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:30): Why don't you do like with HTML5 and just keep a separate version under a reasonable license?",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:30): Also, why do you expect that the W3C will ever publish anything under a reasonable license?",
        "8b3687499080633e1898fa1dd209ef81 (00:31): I'm not yet *that* cynical",
        "8b3687499080633e1898fa1dd209ef81 (00:31): Also,  busy",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:32): christ these alt=&quot;&quot; polls are confusing",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:32): even more confusing that usual",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:34): Do you view it as cynical to think that the W3C will refuse to publish specs under a reasonable license, when they have repeatedly refused to do so for HTML5?",
        "8b3687499080633e1898fa1dd209ef81 (00:35): I like to AGF sometimes",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:36): The W3C is acting in good faith, they just have a different idea of what constitutes a reasonable license.",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:36): Viz., they don't believe in forking.  Or at least some parts of the W3C don't, and so far they've prevailed.",
        "ab7faae5d7b250ea8606486575f8f79c (00:38): The W3C should publish the spec under an open license and let the people who don't believe in forking fork the spec and release their version under a more restrictive license",
        "ab7faae5d7b250ea8606486575f8f79c (00:39): That way everyone can be happy",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:40): I encourage you to propose that solution to the PSIG.",
        "8b3687499080633e1898fa1dd209ef81 (00:41): Call it option pi",
        "f139aba52f9fa1394b4034a7954b2220 (00:41): 88d4d34a8064a4ff39fd5e144eea7762, the problem doesn't seem to be as bad as you thought.  The problem is that this returns false: w(range.startContainer == range.startContainer);",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:41): Oh, that's fine, then.",
        "f139aba52f9fa1394b4034a7954b2220 (00:42): which is still quite insane having an object that is not equal to itself, but at least is not a malformed DOM",
        "b25b6b77a0087ff8385941e5545d32ea (00:42): ab7faae5d7b250ea8606486575f8f79c: Well the current situation is that the people who write the specs publish them under open licenses and then W3C forks the specs and releases them under restrictive licenses",
        "06cb330920ae58e1614c9145d983b3d6 (00:43): b25b6b77a0087ff8385941e5545d32ea: ... why bother? that's a no-op",
        "06cb330920ae58e1614c9145d983b3d6 (00:43): since you can always fork from the open original, heh",
        "8b3687499080633e1898fa1dd209ef81 (00:44): Not with a W3C logo",
        "06cb330920ae58e1614c9145d983b3d6 (00:45): that should be a trademark/logo licensing thing, not a license on the spec itself",
        "353fa4cc248867e98de9cab7d122c320 (00:46): you also couldn't take the W3C contributions, which they view as significant",
        "ab7faae5d7b250ea8606486575f8f79c (00:47): f139aba52f9fa1394b4034a7954b2220: What about &quot;var s = range.startContainer; w(s == s)&quot;?",
        "ab7faae5d7b250ea8606486575f8f79c (00:47): f139aba52f9fa1394b4034a7954b2220: (Maybe the object is equal to itself, but the 'startContainer' getter returns a new object each time)",
        "ab7faae5d7b250ea8606486575f8f79c (00:47): f139aba52f9fa1394b4034a7954b2220: (which sounds fairly sane to me)",
        "b25b6b77a0087ff8385941e5545d32ea (00:47): 353fa4cc248867e98de9cab7d122c320: Well we seem to, at least with HTML5. Maybe that wouldn't be permitted for less high profile specs",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:48): there haven't been any significant contributions",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:48): so that rather neatly solves that",
        "f139aba52f9fa1394b4034a7954b2220 (00:49): ab7faae5d7b250ea8606486575f8f79c, s==s returns true",
        "88d4d34a8064a4ff39fd5e144eea7762 (00:51): ab7faae5d7b250ea8606486575f8f79c, a new object that points to the same thing in the DOM?  That doesn't sound at all sane to me.",
        "b25b6b77a0087ff8385941e5545d32ea (00:54): 69b0d3dfe919a6b860a9fac82de52a7e: If you have a moment, can you explain to me whether http://software.hixie.ch/utilities/js/live-dom-viewer/saved/897 can be explained by the current spec. Try also uncommenting the commented line.",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:55): i have no idea what's going on there",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:56): what am i looking for in particular?",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:56): i get a different result each time i add a space to the source, in chrome",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:56): oh it seems to just be the initial load that's acting differently",
        "69b0d3dfe919a6b860a9fac82de52a7e (00:57): b25b6b77a0087ff8385941e5545d32ea: dunno what i'm looking for, please elaborate :-)",
        "b25b6b77a0087ff8385941e5545d32ea (00:59): 69b0d3dfe919a6b860a9fac82de52a7e: It seems that setting document.domain on the parent also affects the about:blank iframe so that one can still access e.g. the &lt;body&gt; in the iframe",
        "b25b6b77a0087ff8385941e5545d32ea (01:00): But messing with the parent dom seems to prevent this",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:00): currently the spec cannot explain that, no",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:01): though it probably wouldn't be too much work to fix that, if you can work out exactly what the rules are for the propagation",
        "69b0d3dfe919a6b860a9fac82de52a7e (01:01): should about:blank just use the origin of the parent directly rather than copying it when created?",
        "b25b6b77a0087ff8385941e5545d32ea (01:02): I don't think it is that simple otherwise setting innerHTML on the parent wouldn't affect the abillity to access the child",
        "b25b6b77a0087ff8385941e5545d32ea (01:02): I will look at this more tomorrow"
    ],
    "person_ids": [
        "b25b6b77a0087ff8385941e5545d32ea",
        "88d4d34a8064a4ff39fd5e144eea7762",
        "8925426ae91d6282f262eb2ee108bdc0",
        "8b3687499080633e1898fa1dd209ef81",
        "1f58faf0d058f303f30239a369808167",
        "353fa4cc248867e98de9cab7d122c320",
        "f139aba52f9fa1394b4034a7954b2220",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "ab7faae5d7b250ea8606486575f8f79c",
        "06cb330920ae58e1614c9145d983b3d6"
    ]
}