{
    "id": "fbc2a42c68873d0e57c599add26e7b6c",
    "messages": [
        "f139aba52f9fa1394b4034a7954b2220 (14:50): I implemented the text/html content sniffing algorithm in JavaScript http://html5.lachy.id.au/content-sniffing/",
        "f139aba52f9fa1394b4034a7954b2220 (14:50): also checked it into google code",
        "c3fb53c6c6b7a0afb097cd0b6f6d06aa (14:52): f139aba52f9fa1394b4034a7954b2220: should the [invalid] sequence '&lt;??&gt;' really be text/html?",
        "f139aba52f9fa1394b4034a7954b2220 (14:53): that's what the algorithm says",
        "f139aba52f9fa1394b4034a7954b2220 (14:53): in the spec",
        "f139aba52f9fa1394b4034a7954b2220 (14:53): I wondered about that too, but I figured it would be better to implement exactly what the spec says and then provide feedback about it",
        "f139aba52f9fa1394b4034a7954b2220 (14:54): wait, why wouldn't &lt;??&gt; be text/html?",
        "f139aba52f9fa1394b4034a7954b2220 (14:55): if anything, it should always be text/html, since it's not well formed XML and thus can't be a feed",
        "f139aba52f9fa1394b4034a7954b2220 (14:55): i.e. &lt;??&gt;&lt;feed&gt; probably shouldn't be Atom",
        "cc097e0d7183ae8436e7df709553c8c0 (15:13): f139aba52f9fa1394b4034a7954b2220: that's a good environment to run testcases",
        "cc097e0d7183ae8436e7df709553c8c0 (15:13): for browsers",
        "f139aba52f9fa1394b4034a7954b2220 (15:13): yep",
        "f139aba52f9fa1394b4034a7954b2220 (15:14): it would probably be a good idea to integrate it into the live dom viewer later",
        "cc097e0d7183ae8436e7df709553c8c0 (15:14): similar to http://html5.org/parsing-tests/testrunner.htm and http://simon.html5.org/test/html/serializing/001.htm",
        "cc097e0d7183ae8436e7df709553c8c0 (15:15): though you could use json as the format for the tests",
        "f139aba52f9fa1394b4034a7954b2220 (15:16): right, that shouldn't be too hard to do",
        "cc097e0d7183ae8436e7df709553c8c0 (15:16): though i wonder if you have to have a server involved to actually test what browsers do",
        "cc097e0d7183ae8436e7df709553c8c0 (15:17): i.e. the relevant sniffing only occurs for resources served over the wire",
        "f139aba52f9fa1394b4034a7954b2220 (15:17): yeah, but that's not too hard to do",
        "cc097e0d7183ae8436e7df709553c8c0 (15:17): true",
        "f139aba52f9fa1394b4034a7954b2220 (15:18): I tried a few simple test cases with data: URIs and Firefox didn't sniff them",
        "cc097e0d7183ae8436e7df709553c8c0 (15:18): right, data: are never sniffed",
        "cc097e0d7183ae8436e7df709553c8c0 (15:18): afaik",
        "f139aba52f9fa1394b4034a7954b2220 (15:19): so we'd probably need to load from the server into an iframe or something",
        "cc097e0d7183ae8436e7df709553c8c0 (15:19): exactly",
        "cc097e0d7183ae8436e7df709553c8c0 (15:19): slightly annoying but certainly doable :)",
        "f139aba52f9fa1394b4034a7954b2220 (15:20): I think I have a PHP script somewhere that will echo whatever data you pass, using whatever MIME specified,",
        "cc097e0d7183ae8436e7df709553c8c0 (15:20): we could perhaps also use ab7faae5d7b250ea8606486575f8f79c's appoach with creating tests",
        "cc097e0d7183ae8436e7df709553c8c0 (15:21): hmm",
        "cc097e0d7183ae8436e7df709553c8c0 (15:21): might be better to just find all the edge cases",
        "ab7faae5d7b250ea8606486575f8f79c (15:26): http://canvex.lazyilluminati.com/misc/dom-viewer/reflect.cgi?%3Cscript%3Ealert('Hello%20world')%3C/script%3E echoes stuff but it's probably not so useful since it always does text/html",
        "ab7faae5d7b250ea8606486575f8f79c (15:27): (There's a reflect-xhtml.cgi for XHTML)",
        "f139aba52f9fa1394b4034a7954b2220 (15:27): I've got one that does the same thing, though I'm going to make it check for a content-type parameter in the query string and use that",
        "ab7faae5d7b250ea8606486575f8f79c (15:29): http://canvex.lazyilluminati.com/misc/dom-viewer/reflect.c - I don't really fancy modifying that to actually parse the query string at all, so it's probably more sensible to use PHP :-)",
        "f139aba52f9fa1394b4034a7954b2220 (15:29): the only problem with something like that is that it creates a huge security risk",
        "c3fb53c6c6b7a0afb097cd0b6f6d06aa (15:29): f139aba52f9fa1394b4034a7954b2220: the spec doesn't define text/plain when it lacks angle brackets?",
        "f139aba52f9fa1394b4034a7954b2220 (15:29): virtuelv, no, why would it?",
        "c3fb53c6c6b7a0afb097cd0b6f6d06aa (15:30): goes back and reads the proposal again",
        "f139aba52f9fa1394b4034a7954b2220 (15:30): c3fb53c6c6b7a0afb097cd0b6f6d06aa, it's the algorithm that sniffs content delivered as text/html to see if it's a feed.  If it's not a known feed format, it's text/html",
        "f139aba52f9fa1394b4034a7954b2220 (15:30): seel http://www.whatwg.org/specs/web-apps/current-work/multipage/section-content-type-sniffing.html#content-type3",
        "f139aba52f9fa1394b4034a7954b2220 (15:46): ab7faae5d7b250ea8606486575f8f79c, cc097e0d7183ae8436e7df709553c8c0, http://html5.lachy.id.au/output",
        "cc097e0d7183ae8436e7df709553c8c0 (15:49): f139aba52f9fa1394b4034a7954b2220: you need to do stipslashes()",
        "f139aba52f9fa1394b4034a7954b2220 (15:50): oh crap, that should be off by default on my server.",
        "f139aba52f9fa1394b4034a7954b2220 (15:51): hmm. I'll have to add stripslashes for now, since I can't remember how to do it in .htaccess or php.ini or whatever it is",
        "cc097e0d7183ae8436e7df709553c8c0 (15:51): i can't get &quot;&lt;rss&gt;&quot; to be echoed",
        "cc097e0d7183ae8436e7df709553c8c0 (15:52): in firefox",
        "cc097e0d7183ae8436e7df709553c8c0 (15:53): and safari",
        "cc097e0d7183ae8436e7df709553c8c0 (15:54): no wait it works in safari",
        "cc097e0d7183ae8436e7df709553c8c0 (15:55): f139aba52f9fa1394b4034a7954b2220: you also need an id on the &lt;datalist&gt; :)",
        "f139aba52f9fa1394b4034a7954b2220 (15:55): oops :-)",
        "f139aba52f9fa1394b4034a7954b2220 (15:59): where can I find an Atom test file?",
        "cc097e0d7183ae8436e7df709553c8c0 (16:00): in the rfc :)",
        "f139aba52f9fa1394b4034a7954b2220 (16:00): never mind, found one",
        "cc097e0d7183ae8436e7df709553c8c0 (16:01): hmm, ie doesn't add attributes to the root node from misplaced &lt;html&gt; tags",
        "f139aba52f9fa1394b4034a7954b2220 (16:01): it appears that Firefox will only sniff as the result of a GET request, not a POST",
        "f139aba52f9fa1394b4034a7954b2220 (16:04): Firefox needs to see the Atom xmlns and there needs to be at least a title and link element in it for it to be sniffed as a feed.",
        "f139aba52f9fa1394b4034a7954b2220 (16:04): http://html5.lachy.id.au/output?type=text%2Fhtml&amp;data=%3Cfeed+xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2005%2FAtom%22%3E%0D%0A++%3Ctitle%3EExample+Feed%3C%2Ftitle%3E%0D%0A++%3Clink+href%3D%22http%3A%2F%2Fexample.org%2F%22%2F%3E%0D%0A%3C%2Ffeed%3E%0D%0A",
        "cc097e0d7183ae8436e7df709553c8c0 (16:06): doesn't opera sniff for feeds?",
        "f139aba52f9fa1394b4034a7954b2220 (16:06): it doesn't appear to",
        "f139aba52f9fa1394b4034a7954b2220 (16:06): maybe it needs more content in it",
        "f139aba52f9fa1394b4034a7954b2220 (16:07): nope, it doesn't (at least not for Atom)",
        "cc097e0d7183ae8436e7df709553c8c0 (16:08): not for rss 2.0 either",
        "f139aba52f9fa1394b4034a7954b2220 (16:09): hmm. How do I turn off AddDefaultCharset for just that one file?",
        "f139aba52f9fa1394b4034a7954b2220 (16:10): I've tried putting it in a &lt;Files&gt; directive, but it doesn't seem to to work",
        "cc097e0d7183ae8436e7df709553c8c0 (16:11): AddDefaultCharset Off in the same folder should work (for all files in that folder)",
        "f139aba52f9fa1394b4034a7954b2220 (16:11): yeah, but it's in the root directory, so I don't want it to do that",
        "cc097e0d7183ae8436e7df709553c8c0 (16:12): dunno",
        "cc097e0d7183ae8436e7df709553c8c0 (16:12): perhaps opera only does sniffing for following &lt;link&gt;s",
        "f139aba52f9fa1394b4034a7954b2220 (16:13): oh well, I'll just turn it off for everything now and fix it later",
        "f139aba52f9fa1394b4034a7954b2220 (16:14): maybe, try it",
        "cc097e0d7183ae8436e7df709553c8c0 (16:14): but it's a php file, and AddDefaultCharset doesn't apply to php",
        "cc097e0d7183ae8436e7df709553c8c0 (16:14): php sends its own headers",
        "f139aba52f9fa1394b4034a7954b2220 (16:15): http://html5.lachy.id.au/output?type=text%2Fhtml&amp;data=%3Clink+rel%3D%22alternate%22+type%3D%22application%2Fatom%2Bxml%22+href%3D%22http%3A%2F%2Fhtml5.lachy.id.au%2Foutput%3Ftype%3Dtext%252Fhtml%26data%3D%253Cfeed%2Bxmlns%253D%2522http%253A%252F%252Fwww.w3.org%252F2005%252FAtom%2522%253E%250D%250A%2B%2B%253Ctitle%253EExample%2BFeed%253C%252Ftitle%253E%250D%250A%2B%2B%253Clink%2Bhref%253D%2522http%",
        "f139aba52f9fa1394b4034a7954b2220 (16:15): 253A%252F%252Fexample.org%252F%2522%252F%253E%250D%250A%253C%252Ffeed%253E%250D%250A%22%3E%0D%0A%3Cp%3ETest",
        "f139aba52f9fa1394b4034a7954b2220 (16:15): AddDefaultCharset applies based on the MIME type I think",
        "f139aba52f9fa1394b4034a7954b2220 (16:16): so all text/* responses get ; charset=...",
        "cc097e0d7183ae8436e7df709553c8c0 (16:16): yeah but php will still send its own headers",
        "cc097e0d7183ae8436e7df709553c8c0 (16:16): php overrides apache",
        "f139aba52f9fa1394b4034a7954b2220 (16:17): indeed, but it's not.  I'm using headers(&quot;Content-Type: $type&quot;); in the php, so it should send exactly what's in the text box, but it doesn't",
        "cc097e0d7183ae8436e7df709553c8c0 (16:17): it does afaict",
        "f139aba52f9fa1394b4034a7954b2220 (16:18): yeah, it does now, cause I turned off AddDefaultCharset already",
        "f139aba52f9fa1394b4034a7954b2220 (16:18): but if I turn it on again, it won't",
        "cc097e0d7183ae8436e7df709553c8c0 (16:19): can you turn it on again, please?",
        "f139aba52f9fa1394b4034a7954b2220 (16:20): done",
        "cc097e0d7183ae8436e7df709553c8c0 (16:20): oh, indeed. that's not how my server behaves though",
        "cc097e0d7183ae8436e7df709553c8c0 (16:21): perhaps a different version of php or different settings",
        "f139aba52f9fa1394b4034a7954b2220 (16:21): which version of Apache does your server run?",
        "cc097e0d7183ae8436e7df709553c8c0 (16:21): 1.3 iirc",
        "f139aba52f9fa1394b4034a7954b2220 (16:21): I'm using PHP 5, Apache 1.3 I think",
        "cc097e0d7183ae8436e7df709553c8c0 (16:21): php 4",
        "cc097e0d7183ae8436e7df709553c8c0 (16:21): ok, so then php 5 pays attention to apache settings",
        "f139aba52f9fa1394b4034a7954b2220 (16:21): I'll try it with PHP4...",
        "cc097e0d7183ae8436e7df709553c8c0 (16:23): hmm, perhaps i was wrong",
        "f139aba52f9fa1394b4034a7954b2220 (16:24): nope, still does it",
        "f139aba52f9fa1394b4034a7954b2220 (16:24): I've turn default charset off again",
        "f139aba52f9fa1394b4034a7954b2220 (16:38): cc097e0d7183ae8436e7df709553c8c0, for the HTML status updating, I think it would be easiest if we just use HTTP basic authentication and using a .htpasswd file, which grants access to the confirmation script for Hixie (or whoever else is authorised)",
        "cc097e0d7183ae8436e7df709553c8c0 (16:40): f139aba52f9fa1394b4034a7954b2220: ok",
        "f139aba52f9fa1394b4034a7954b2220 (16:41): we just need to write the script that commits the changes to the DB, and then make a few minor changes to the existing update script and we're done",
        "cc097e0d7183ae8436e7df709553c8c0 (17:01): f139aba52f9fa1394b4034a7954b2220: great",
        "a11aabeeceeae6b8cb5d12ea06b56554 (17:04): f139aba52f9fa1394b4034a7954b2220: it's all the magic_quotes settings",
        "f139aba52f9fa1394b4034a7954b2220 (17:04): a11aabeeceeae6b8cb5d12ea06b56554, thanks, I do have the instructions for it written down somewhere. I just have to find them and set it up",
        "a11aabeeceeae6b8cb5d12ea06b56554 (17:05): http://uk2.php.net/magic_quotes",
        "a11aabeeceeae6b8cb5d12ea06b56554 (17:05): (a &quot;feature&quot; that's gone in PHP6)",
        "b8810fee2f4a71f849f3f7409546d1d9 (17:06): interpreter/compiler-level settings that change programming language semantics suck big time",
        "f139aba52f9fa1394b4034a7954b2220 (17:07): yeah, PHP already sucks and fixing PHP by turning off silly &quot;features&quot; just needs to be done",
        "a11aabeeceeae6b8cb5d12ea06b56554 (17:11): according to the PHP devs, &lt;span title=&quot;this &gt; that&quot;&gt; is invalid HTML.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (17:12): the only way I could get them to fix the bug in strip_tags() which claims to only work with valid HTML anyway was to quote both HTML5, HTML 4.01, and SGML.",
        "f139aba52f9fa1394b4034a7954b2220 (17:14): PHP devs often don't know HTML very well at all",
        "f139aba52f9fa1394b4034a7954b2220 (17:14): try to get them to fix the ampersand bug, for instance!",
        "f139aba52f9fa1394b4034a7954b2220 (17:15): the one where they generate and output &quot;...&amp;PHPSESSID=...&quot; instead of using &amp;amp;",
        "a924fb58d2c25874322f4e5126f608b9 (17:16): Or just get them to handle multiple selects/checkboxes without hacking the names",
        "f139aba52f9fa1394b4034a7954b2220 (17:17): yeah, that too",
        "a924fb58d2c25874322f4e5126f608b9 (17:17): Although that's not html-specific, they mangle it the same way with parsing ini files",
        "a11aabeeceeae6b8cb5d12ea06b56554 (17:17): f139aba52f9fa1394b4034a7954b2220: oh, that's a config option. duh :P",
        "f139aba52f9fa1394b4034a7954b2220 (17:18): a11aabeeceeae6b8cb5d12ea06b56554, I know, but it should be default!",
        "a11aabeeceeae6b8cb5d12ea06b56554 (17:18): but backwards compatibility!11!!!!elevnty!",
        "f139aba52f9fa1394b4034a7954b2220 (17:18): they should have fixed it for PHP5, which isn't backwards compatible anyway",
        "f139aba52f9fa1394b4034a7954b2220 (17:18): or even PHP6",
        "a11aabeeceeae6b8cb5d12ea06b56554 (17:18): yes, they're backwards compatible!11!!1!",
        "a11aabeeceeae6b8cb5d12ea06b56554 (17:18): It's stupid.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (17:19): They refuse to fix things in the name of BC, yet totally break it anyway.",
        "f139aba52f9fa1394b4034a7954b2220 (17:19): yeah, I know. I should just learn python and how to get it running on my server",
        "a11aabeeceeae6b8cb5d12ea06b56554 (17:21): yeah, I've been meaning to learn python too.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (17:22): far more general use, too",
        "ab7faae5d7b250ea8606486575f8f79c (17:31): Python's going to break backward compatibility too, but at least they're intending to fix lots of small mistakes at the same time, which seems good as long as you only do it once a decade",
        "f139aba52f9fa1394b4034a7954b2220 (17:48): woo hoo! My first python script running on my server :-) http://lachy.id.au/temp/test"
    ],
    "person_ids": [
        "f139aba52f9fa1394b4034a7954b2220",
        "c3fb53c6c6b7a0afb097cd0b6f6d06aa",
        "cc097e0d7183ae8436e7df709553c8c0",
        "ab7faae5d7b250ea8606486575f8f79c",
        "a11aabeeceeae6b8cb5d12ea06b56554",
        "b8810fee2f4a71f849f3f7409546d1d9",
        "a924fb58d2c25874322f4e5126f608b9"
    ]
}