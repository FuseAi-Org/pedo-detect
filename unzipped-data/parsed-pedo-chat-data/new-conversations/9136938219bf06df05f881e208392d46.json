{
    "id": "9136938219bf06df05f881e208392d46",
    "messages": [
        "01f580dd98e27f3054f9acd8ccdae68a (02:00): So I know of no syntax OTOH that gets you what you want. But I _think_ (again, OTOH; you'll have to test it ;) ) that if the set of packages you want is always the same, then you could make a python file like &quot;commons.py&quot; in which you import all the sub-packages of asdf. Then if you do 'from commons import *', I think that pulls in all the contents of all the packages you imported.",
        "d0889b0e928f2073f9876555e42fc081 (02:00): pianoboy3333: set __all__ to be a list of symbols to import. But, really, honestly, don't use 'import *'.",
        "d0889b0e928f2073f9876555e42fc081 (02:00): just use 'from asdf import foo, bar, qwer'",
        "d0889b0e928f2073f9876555e42fc081 (02:00): or, better yet, just do 'import asdf'",
        "71478f54c7ba58e67f6db029828be538 (02:01): Yhg1s: but asdf is a package import, so doing import asdf won't get me far... will it?",
        "d0889b0e928f2073f9876555e42fc081 (02:01): pianoboy3333: of course it will. It will import the package.",
        "d0889b0e928f2073f9876555e42fc081 (02:01): if you want the package to automatically import any submodules, have it do so (in __init__.py)",
        "176490d220d6029597ae87d3f6167f02 (02:02): I get this strange error: TypeError: object does not support item assignment, its a float within a tuple and I can print it and all..",
        "71478f54c7ba58e67f6db029828be538 (02:02): Yhg1s: I see...",
        "71478f54c7ba58e67f6db029828be538 (02:02): Yhg1s: so just state all the files in there, ok, thanks",
        "01f580dd98e27f3054f9acd8ccdae68a (02:02): *nod* When you import '*', the contract between you and the module-writer reads &quot;I'm trusting you to NEVER add more functions to this module.&quot; In large projects, it's a great way to shoot yourself in the foot a few months down the road. ;)",
        "d0889b0e928f2073f9876555e42fc081 (02:02): pianoboy3333: the only way to do it with 'import *' is to specify the full list in __all__ in __init__.py, anyway.",
        "01f580dd98e27f3054f9acd8ccdae68a (02:02): ydo: What were you trying to do? It sounds like you attempted to de-reference the tuple and change a value within it.",
        "71478f54c7ba58e67f6db029828be538 (02:02): right, so I'll just state it all in __init__.py",
        "176490d220d6029597ae87d3f6167f02 (02:03): mtomczak: exactly why can't I do that?",
        "d0889b0e928f2073f9876555e42fc081 (02:03): ydo: you can't assign to items of a tuple.",
        "d0889b0e928f2073f9876555e42fc081 (02:03): because tuples are immutable.",
        "d0889b0e928f2073f9876555e42fc081 (02:03): (they can't be changed.)",
        "176490d220d6029597ae87d3f6167f02 (02:03): so I need to change all my code to lists instead?",
        "176490d220d6029597ae87d3f6167f02 (02:03): *sigh*",
        "d0889b0e928f2073f9876555e42fc081 (02:03): I have no idea what you are trying to do, so that's hard to answer.",
        "a059b12f09e80da3a6a5957eda4374ed (02:04): <a href=\"http://deadbeefbabe.org/paste/2071\">http://deadbeefbabe.org/paste/2071</a> anyone?",
        "d0889b0e928f2073f9876555e42fc081 (02:04): if you want to modify a tuple, yes, use a list instead. You only have to changes places that actually try to change the tuple though.",
        "4d089c892b5ad20ef3732ac9b0c9905a (02:04): I'm doing a countdown timer. The time from now to the end time should be endtime-currtime, shouldn't it?",
        "4d089c892b5ad20ef3732ac9b0c9905a (02:04): and might I get any funny errors because the numbers are too big (I'm using second since the epoch)",
        "176490d220d6029597ae87d3f6167f02 (02:04): I've ported this neural net code from an old c++ code I've written years ago.. it and used STL pairs, so I though I use tuples, I've quite new to python",
        "d0889b0e928f2073f9876555e42fc081 (02:04): ribo: your sqlite3 seems not to have built quite correctly.",
        "d0889b0e928f2073f9876555e42fc081 (02:04): ydo: just build a new tuple, then.",
        "a059b12f09e80da3a6a5957eda4374ed (02:04): hrm",
        "a059b12f09e80da3a6a5957eda4374ed (02:05): ok",
        "01f580dd98e27f3054f9acd8ccdae68a (02:05): ydo: Whenever you need to mutate a tuple, you can do myTuple=list(myTuple). Change the value, then do myTuple=tuple(myTuple).",
        "176490d220d6029597ae87d3f6167f02 (02:05): true",
        "d0889b0e928f2073f9876555e42fc081 (02:05): or do 'newtuple = oldtuple[0], oldtuple[1]', replacing one of the two with the changed value.",
        "d0889b0e928f2073f9876555e42fc081 (02:05): (or both.)",
        "d0889b0e928f2073f9876555e42fc081 (02:05): not very readable if it isn't just pairs, though.",
        "b8d04ab79ccd15341b47f95972daf9e9 (02:05): Oh, you can access tuples like that?",
        "b8d04ab79ccd15341b47f95972daf9e9 (02:06): i=sometuple[1]?",
        "d0889b0e928f2073f9876555e42fc081 (02:06): yes. they are just sequences.",
        "176490d220d6029597ae87d3f6167f02 (02:06): so why are tuples immutable?",
        "d0889b0e928f2073f9876555e42fc081 (02:06): ydo: because that's their raison d'etre.",
        "d0889b0e928f2073f9876555e42fc081 (02:06): ydo: also so you can use them for dict keys and other places that require that they do not change (Python uses them internally quite a lot.)",
        "176490d220d6029597ae87d3f6167f02 (02:06): ok",
        "d0889b0e928f2073f9876555e42fc081 (02:06): if they were mutable, they would be lists.",
        "176490d220d6029597ae87d3f6167f02 (02:06): true",
        "176490d220d6029597ae87d3f6167f02 (02:08): oh, you can unpack lists too, cool",
        "176490d220d6029597ae87d3f6167f02 (02:10): but if I have a list of tuples like [(unit1,w1),(unit2,w2)] I can use for (unit,w) in thelist:... can I unpack the inner list? hmm",
        "176490d220d6029597ae87d3f6167f02 (02:10): when using list of lists instead I mean",
        "01f580dd98e27f3054f9acd8ccdae68a (02:11): ydo: yes.",
        "176490d220d6029597ae87d3f6167f02 (02:11): how?",
        "4d089c892b5ad20ef3732ac9b0c9905a (02:11): <a href=\"http://deadbeefbabe.org/paste/2072\">http://deadbeefbabe.org/paste/2072</a>",
        "4d089c892b5ad20ef3732ac9b0c9905a (02:11): That's a snippet of code",
        "4d089c892b5ad20ef3732ac9b0c9905a (02:12): How does one variable, starttime, get set from inside the function, while the other one, endtime, doesn't?",
        "d0889b0e928f2073f9876555e42fc081 (02:12): mtomczak: 'for unit, w in thelist:'",
        "d0889b0e928f2073f9876555e42fc081 (02:12): eh,",
        "d0889b0e928f2073f9876555e42fc081 (02:13): ydo: exactly the same way.",
        "d0889b0e928f2073f9876555e42fc081 (02:13): ydo: although the parentheses are optional.",
        "d0889b0e928f2073f9876555e42fc081 (02:13): Jonty: neither gets set.",
        "d0889b0e928f2073f9876555e42fc081 (02:14): Jonty: variables you assign to inside functions are local to that function. Even when you have a global variable of the same name. If you want to modify the global 'starttime' and 'endtime', use 'global starttime, endtime' at the top of the function.",
        "9c20ec32e72accec26c2014d9a62b3a6 (02:14): I remember being all disappointed that I couldn't use lists as dictionary keys, but then I thought to myself: hey, tuples.",
        "4d089c892b5ad20ef3732ac9b0c9905a (02:14): Thanks, Yhg1s",
        "4d089c892b5ad20ef3732ac9b0c9905a (02:15): Great, it works how I wanted it to as well.",
        "4d089c892b5ad20ef3732ac9b0c9905a (02:15): now all my troubles lie with JavaScript, so I'll leave you lot alone",
        "b8d04ab79ccd15341b47f95972daf9e9 (02:15): I know this is a bit of a stretch, but would anyone be willing to shell out like $8 so I can buy a domain name for my Python-related website? :)",
        "176490d220d6029597ae87d3f6167f02 (02:16): is it &quot;in&quot; that do the unpacking? hmm is, &quot;in&quot; is some sort of operator really?",
        "b358acd7f61ced73084a1e5a130c9ac5 (02:17): Hi: Is there a way to run python scripts in a safe mode, (untrusted scripts especially) ensuring they can't do damage to the file system for instance?",
        "b8d04ab79ccd15341b47f95972daf9e9 (02:17): It was worth a shot. :/",
        "d0889b0e928f2073f9876555e42fc081 (02:19): oxalate: not really. Zope has a mechanism which scans the Python code for anything that looks harmful, but I don't know how easily it is separated from the rest.",
        "82d4a5f22b7123eb2f0887a0de55481c (02:20): the exec code, {'__builtins__':{}} mode will likely prevent accidental breakage, if not malicious",
        "c8eef4fe46ca32f6b28a91d7abc35383 (02:20): how old is Python?",
        "d0889b0e928f2073f9876555e42fc081 (02:20): definately not malicious.",
        "0943e71655d98690e7762a71ea0373b9 (02:20): how my sister",
        "d0889b0e928f2073f9876555e42fc081 (02:21): ldlework: the first public release (0.9.0, posted in alt.sources) was February 1991.",
        "b358acd7f61ced73084a1e5a130c9ac5 (02:21): Yhg1s I see. Though I'd prefer to use python, can you recommend a &quot;safe&quot; (perhaps inherently so) scripting language?",
        "d0889b0e928f2073f9876555e42fc081 (02:21): oxalate: not really, no, sorry.",
        "d0889b0e928f2073f9876555e42fc081 (02:21): ldlework: the 1.0 release is dated January 24 1994.",
        "2d2b21e9fdcc177dace2e48afb8ea9a3 (02:22): im getting an error with this <a href=\"http://docs.python.org/lib/module-pipes.html\">http://docs.python.org/lib/module-pipes.html</a>",
        "5f3f3f58d83afac58433711ababf86ed (02:22): yay!  postgresql is working with SSL+kerberos",
        "5f3f3f58d83afac58433711ababf86ed (02:22): this is goodness :)",
        "2d2b21e9fdcc177dace2e48afb8ea9a3 (02:23): example",
        "d0889b0e928f2073f9876555e42fc081 (02:23): Littlebob: use the subprocess module instead.",
        "2d2b21e9fdcc177dace2e48afb8ea9a3 (02:23): ?",
        "2d2b21e9fdcc177dace2e48afb8ea9a3 (02:24): ahh found it",
        "176490d220d6029597ae87d3f6167f02 (02:26): thank you guys, my net seems to run correctly now",
        "f9fd1ec837bc12464dfb2b873991fa4e (02:30): I just installed mod_python does anyone have some python script I can use to test it",
        "f9fd1ec837bc12464dfb2b873991fa4e (02:30): O oops",
        "f9fd1ec837bc12464dfb2b873991fa4e (02:30): python.web",
        "f9fd1ec837bc12464dfb2b873991fa4e (02:30): sry",
        "71478f54c7ba58e67f6db029828be538 (02:33): I have a bash-like program with a prompt, how should I go about checking input, a big if statment?",
        "71478f54c7ba58e67f6db029828be538 (02:34): There are no switches in python...",
        "09cdcffa653d97e1998c96117e64aa98 (02:34): howdy",
        "09cdcffa653d97e1998c96117e64aa98 (02:34): the new programming python book is quit good",
        "09cdcffa653d97e1998c96117e64aa98 (02:34): i just bought it and im impressede",
        "9405ec6ac89e51a6b8ba29b9f5fb85d1 (02:40): how should i",
        "b6482332eaf81d2af7e6889e7f7882bb (02:40): Does python have some way to call a function as asm or inline asm?",
        "9405ec6ac89e51a6b8ba29b9f5fb85d1 (02:40): convert string to the numeric value from sys.stdin.readline() ?",
        "e8cb5d78731d0b117f529734f7c2d6a4 (02:43): skraelings001, eh?",
        "09cdcffa653d97e1998c96117e64aa98 (02:44): AI_coder, yes, through the C interface",
        "09cdcffa653d97e1998c96117e64aa98 (02:44): AI_coder, put your asm calls in C modules, and call he C functions from python",
        "d0889b0e928f2073f9876555e42fc081 (02:45): AI_coder: in other words, no, not directly."
    ],
    "person_ids": [
        "01f580dd98e27f3054f9acd8ccdae68a",
        "d0889b0e928f2073f9876555e42fc081",
        "71478f54c7ba58e67f6db029828be538",
        "176490d220d6029597ae87d3f6167f02",
        "a059b12f09e80da3a6a5957eda4374ed",
        "4d089c892b5ad20ef3732ac9b0c9905a",
        "b8d04ab79ccd15341b47f95972daf9e9",
        "9c20ec32e72accec26c2014d9a62b3a6",
        "b358acd7f61ced73084a1e5a130c9ac5",
        "82d4a5f22b7123eb2f0887a0de55481c",
        "c8eef4fe46ca32f6b28a91d7abc35383",
        "0943e71655d98690e7762a71ea0373b9",
        "2d2b21e9fdcc177dace2e48afb8ea9a3",
        "5f3f3f58d83afac58433711ababf86ed",
        "f9fd1ec837bc12464dfb2b873991fa4e",
        "09cdcffa653d97e1998c96117e64aa98",
        "9405ec6ac89e51a6b8ba29b9f5fb85d1",
        "b6482332eaf81d2af7e6889e7f7882bb",
        "e8cb5d78731d0b117f529734f7c2d6a4"
    ]
}