{
    "id": "da3720276049cf4d99927ea64a662326",
    "messages": [
        "839bc7ed2771b6f3310f45a914979e59 (09:17): what are the rules for using codeproject codes?",
        "8957ea37f6e852bf3104f9db7d9e1e3c (09:18): `m0, download and use with different variable names :)",
        "21a889a1ac9c02d0bdd8f39fe745a582 (09:19): sadly that is often the case.",
        "839bc7ed2771b6f3310f45a914979e59 (09:25): Hmm I will just place authors name and his url",
        "3428cf496526a43f89daf493ae013e1d (09:28): `m0: always read the code and some times a license will be in there",
        "3428cf496526a43f89daf493ae013e1d (09:28): `m0: and if there isn't i usually mention the author and a link to where i got it.",
        "839bc7ed2771b6f3310f45a914979e59 (09:29): I am having difficulties finding the algorithm",
        "839bc7ed2771b6f3310f45a914979e59 (09:29): its a graph traversal algorithm called Ant Colony Optimization",
        "839bc7ed2771b6f3310f45a914979e59 (09:29): I can't somehow find written documentation about the algorithm of the Ant Traversal",
        "839bc7ed2771b6f3310f45a914979e59 (09:30): I am going to sleep now, thanks for the advice guys",
        "839bc7ed2771b6f3310f45a914979e59 (09:30): good night",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (09:50): hrmmm",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (09:51): uh, what happens when you attempt to access an undefined xml attribute via the XmlAttributeCollection[int] indexer or XmlAttributeCollection[string] indexer?",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (09:51): i can't find a method to return whether a named attribute exists in the current xml element...",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (09:52): oh nvm",
        "3428cf496526a43f89daf493ae013e1d (09:52): i think i'm all confused",
        "3428cf496526a43f89daf493ae013e1d (09:52): now",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (09:52): i had",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (09:53): foreach (XmlNode N in D.DocumentElement.GetElementsByTagName(&quot;Group&quot;)) { } instead of foreach (XmlElement E in D.DocumentElement.GetElementsByTagName(&quot;Group&quot;)) { }",
        "3428cf496526a43f89daf493ae013e1d (09:53): pfft",
        "3428cf496526a43f89daf493ae013e1d (09:53): wake up",
        "3428cf496526a43f89daf493ae013e1d (09:53): playa",
        "3428cf496526a43f89daf493ae013e1d (09:53): we need quality",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (09:53): lol",
        "3428cf496526a43f89daf493ae013e1d (09:53): ;)",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (09:53): well",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (09:54): .GetElementsByTagName() returns an XmlNodeList",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (09:54): so i thought iterating over it would give me XmlNodes",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (09:54): but i guess not",
        "3428cf496526a43f89daf493ae013e1d (09:54): dude..",
        "3428cf496526a43f89daf493ae013e1d (09:54): hmm",
        "3428cf496526a43f89daf493ae013e1d (09:54): i dunno",
        "3428cf496526a43f89daf493ae013e1d (09:54): poor me",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (09:54): i know i know",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (09:54): XmlNode is the base of all the other stuff",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (09:55): but anyway, XmlElement has .HasAttribute()",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (10:00): hmm",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (10:01): whats the same as &quot;A = B + 1;&quot;? ... &quot;A = ++B;&quot; or &quot;A = B++;&quot;",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (10:01): ?",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (10:01): i think its the first one... A = ++B;",
        "3428cf496526a43f89daf493ae013e1d (10:02): TIAS!  ;)",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (10:02): TIAS?",
        "3428cf496526a43f89daf493ae013e1d (10:02): try it and see!",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (10:02): ugh",
        "5022cf57fb9482c659ea223f7e36b50d (10:11): words to live by",
        "5022cf57fb9482c659ea223f7e36b50d (10:11): WTLB",
        "5022cf57fb9482c659ea223f7e36b50d (10:11): hey what's going on?",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (10:11): TMA",
        "5022cf57fb9482c659ea223f7e36b50d (10:11): any good news from OSCON?",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (10:11): Too Many Acronyms",
        "5022cf57fb9482c659ea223f7e36b50d (10:11): any that pertains to mono?",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (10:12): kog went",
        "5022cf57fb9482c659ea223f7e36b50d (10:12): or postgresql?",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (10:12): and got in a fight with php",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238 (10:12): php won",
        "5022cf57fb9482c659ea223f7e36b50d (10:12): these are my favorite OS projects now because they directly leverage what i learn at the day job :)",
        "5022cf57fb9482c659ea223f7e36b50d (10:12): used to be perl and java but java's sort of not OSS",
        "5022cf57fb9482c659ea223f7e36b50d (10:12): more free as in beer",
        "5022cf57fb9482c659ea223f7e36b50d (10:12): okay so i am only one awake, my bad",
        "3428cf496526a43f89daf493ae013e1d (10:15): heh",
        "3428cf496526a43f89daf493ae013e1d (10:15): i'm awake"
    ],
    "person_ids": [
        "839bc7ed2771b6f3310f45a914979e59",
        "8957ea37f6e852bf3104f9db7d9e1e3c",
        "21a889a1ac9c02d0bdd8f39fe745a582",
        "3428cf496526a43f89daf493ae013e1d",
        "11fcd5cb44b5fee3cc0ae7f2d1a6a238",
        "5022cf57fb9482c659ea223f7e36b50d"
    ]
}