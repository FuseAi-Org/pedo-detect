{
    "id": "5bb90005d82a49d0b296c1d6d667125c",
    "messages": [
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:03): b246ff693d453c3b1a3049752da2bc75, yes?",
        "b246ff693d453c3b1a3049752da2bc75 (10:03): hey",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:03): b246ff693d453c3b1a3049752da2bc75, you being on the other end of the world and me going to bed at reasonable hours does not make this easy",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:03): oh, you're here :)",
        "b246ff693d453c3b1a3049752da2bc75 (10:03): so, i was thinking of implementing parts of cssom view",
        "b246ff693d453c3b1a3049752da2bc75 (10:03): particularly, the API to query media rules",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:04): cool!",
        "b246ff693d453c3b1a3049752da2bc75 (10:04): i didn't know you'd written that spec",
        "b246ff693d453c3b1a3049752da2bc75 (10:04): http://webkit.org/specs/MediaQueriesExtensions.html",
        "b246ff693d453c3b1a3049752da2bc75 (10:04): was what i was going to do (see section 6)",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:04): aah, I saw that and wanted to e-mail you about it :)",
        "b246ff693d453c3b1a3049752da2bc75 (10:04): but your approach is better",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:04): ta",
        "b246ff693d453c3b1a3049752da2bc75 (10:05): now.. i have comments",
        "b246ff693d453c3b1a3049752da2bc75 (10:05): not on that one",
        "b246ff693d453c3b1a3049752da2bc75 (10:05): but we need the point mapping APIs to be able to take transforms into account",
        "b246ff693d453c3b1a3049752da2bc75 (10:05): we already have implemented some methods for mapping a point from a node into page coordinates",
        "b246ff693d453c3b1a3049752da2bc75 (10:05): (custom methods, currently only on iphone)",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:06): doesn't it take transforms into account autometically?",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:06): i'd assume hit testing does not assume nothing is transformed...",
        "b246ff693d453c3b1a3049752da2bc75 (10:07): in our case we need to be able to map an arbitrary x,y point into page coords",
        "b246ff693d453c3b1a3049752da2bc75 (10:07): sure, hit testing gets extremely complicated with transforms (especially 3d)",
        "b246ff693d453c3b1a3049752da2bc75 (10:07): we make sure elementAtPoint and so on works",
        "b246ff693d453c3b1a3049752da2bc75 (10:09): e3fb62ebfa4f36acf5cbff6a6ed0f2e0: trying to find the documentation on what we implement",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:10): kk, when you say arbitrary x,y point into page coords do you mean arbitrary x,y point on the viewport into coords for the canvas or something?",
        "b246ff693d453c3b1a3049752da2bc75 (10:10): right",
        "b246ff693d453c3b1a3049752da2bc75 (10:10): and the other way around",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:10): interesting",
        "b246ff693d453c3b1a3049752da2bc75 (10:10): see the end of the CSS Transforms spec",
        "b246ff693d453c3b1a3049752da2bc75 (10:11): now on w3.org!!",
        "b246ff693d453c3b1a3049752da2bc75 (10:11): we add a Point class",
        "b246ff693d453c3b1a3049752da2bc75 (10:11): and then add this to Window:  Point convertPointFromPageToNode(in Node node, in Point point);",
        "b246ff693d453c3b1a3049752da2bc75 (10:11): Point convertPointFromNodeToPage(in Node node, in Point point);",
        "b246ff693d453c3b1a3049752da2bc75 (10:12): your CSSOM View api is one way only",
        "b246ff693d453c3b1a3049752da2bc75 (10:12): and also does bounding rects",
        "b246ff693d453c3b1a3049752da2bc75 (10:13): are remember that with rotations, things are not rects",
        "b246ff693d453c3b1a3049752da2bc75 (10:13): or you want more accurate than a rect",
        "b246ff693d453c3b1a3049752da2bc75 (10:13): you want a quad",
        "b246ff693d453c3b1a3049752da2bc75 (10:13): make sense?",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:13): I think I still follow, yes",
        "b246ff693d453c3b1a3049752da2bc75 (10:14): so, do you think you could add in methods to allow us to do conversion",
        "b246ff693d453c3b1a3049752da2bc75 (10:14): ?",
        "b246ff693d453c3b1a3049752da2bc75 (10:15): it would be nice to have Point and Rect interfaces",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:15): would it be ClientPoint, effectively?",
        "b246ff693d453c3b1a3049752da2bc75 (10:15): could be",
        "b246ff693d453c3b1a3049752da2bc75 (10:15): doesn't matter that much",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:15): actually, probably not",
        "b246ff693d453c3b1a3049752da2bc75 (10:16): it's just Point, nothing clienty about it :)",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:16): I suppose in convertPointFromNodeToPage it is relative to the element",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:16): the definition of getClientRects() still works for transforms right?",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:17): i.e. there's still a bounding box",
        "b246ff693d453c3b1a3049752da2bc75 (10:17): yes",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:17): euh, border box",
        "b246ff693d453c3b1a3049752da2bc75 (10:17): but that isn't always useful when there are transforms",
        "b246ff693d453c3b1a3049752da2bc75 (10:17): eg. rotate(45deg)",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:17): yeah, so we need new sets of methods?",
        "b246ff693d453c3b1a3049752da2bc75 (10:17): i think so",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:17): getClientCoordinates() or something?",
        "b246ff693d453c3b1a3049752da2bc75 (10:18): we have one internally on the phone that returns a list of four points",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:18): and have ClientCoordinates class which takes a list of points",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:18): four is always enough?",
        "b246ff693d453c3b1a3049752da2bc75 (10:18): it's important to do it in one method call because there can be a lot of ugly math involved (building up a set of matrix multiplication)",
        "b246ff693d453c3b1a3049752da2bc75 (10:19): to JS though we only provide the method for a single point",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:21): so you only have the APIs you listed above, nothing like getClientRects() ?",
        "b246ff693d453c3b1a3049752da2bc75 (10:22): yes",
        "b246ff693d453c3b1a3049752da2bc75 (10:22): correct",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:22): and you're saying that having something like getClientRects() that takes into account transforms would be painful so you rather have the Point API?",
        "b246ff693d453c3b1a3049752da2bc75 (10:23): basically, we need something like convertPointFromPageToNode",
        "b246ff693d453c3b1a3049752da2bc75 (10:23): and the other way around too",
        "b246ff693d453c3b1a3049752da2bc75 (10:24): getClientRects is from Node To Page",
        "b246ff693d453c3b1a3049752da2bc75 (10:24): make sense?",
        "b246ff693d453c3b1a3049752da2bc75 (10:25): and we're sort of implementing this in public webkit at the moment, so there is a little time pressure :)",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:25): yes, I'm just wondering whether we want your approach or a simple extension of what we have now",
        "b246ff693d453c3b1a3049752da2bc75 (10:25): we don't particularly like our approach",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:25): e.g. now we have elementFromPoint() and getClientRects()",
        "b246ff693d453c3b1a3049752da2bc75 (10:25): but we needed to implement something for iPhone 2.0",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:26): we could have elementFromPagePoint() and getClientCoords() or something like that",
        "b246ff693d453c3b1a3049752da2bc75 (10:26): yep, sounds good.",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:26): or maybe just getBoundingClientCoords(); will you ever have multiple boxes?",
        "b246ff693d453c3b1a3049752da2bc75 (10:26): although, it isn't just about getting the element",
        "b246ff693d453c3b1a3049752da2bc75 (10:26): say, you want to position an object under the mouse",
        "b246ff693d453c3b1a3049752da2bc75 (10:27): but that object is in a complicated set of nested transforms",
        "b246ff693d453c3b1a3049752da2bc75 (10:27): what you need to know is, what top/left (or translate) do I need to put the object in the right place",
        "b246ff693d453c3b1a3049752da2bc75 (10:29): or, the other way around",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:29): so you have a viewport coordinate and an element and you want to know how far they are apart?",
        "b246ff693d453c3b1a3049752da2bc75 (10:30): you want something at the top level of the document to track the position of something deeply nested and transformed",
        "b246ff693d453c3b1a3049752da2bc75 (10:30): you have a viewport coordinate and you want to know what that corresponds to in the coordinate system of a child",
        "b246ff693d453c3b1a3049752da2bc75 (10:30): note that SVG, the greatest specification ever to have been written, has something like this too",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:31): ooh, can't we juse reuse that API?",
        "b246ff693d453c3b1a3049752da2bc75 (10:31): looking it up",
        "b246ff693d453c3b1a3049752da2bc75 (10:36): http://www.w3.org/TR/SVG11/types.html#InterfaceSVGLocatable",
        "b246ff693d453c3b1a3049752da2bc75 (10:36): e3fb62ebfa4f36acf5cbff6a6ed0f2e0: that has the helpful functions, like getTransformToElement and getScreenCTM",
        "b246ff693d453c3b1a3049752da2bc75 (10:36): that would be enough",
        "b246ff693d453c3b1a3049752da2bc75 (10:37): since you can get the inverse to do the reverse mapping",
        "b246ff693d453c3b1a3049752da2bc75 (10:37): however, there is a small snag with 3d transforms, in that you can't always describe the transform as a matrix (if there has been flattening)",
        "b246ff693d453c3b1a3049752da2bc75 (10:37): that's why we pass points",
        "b246ff693d453c3b1a3049752da2bc75 (10:37): ie. the matrix might be impossible to generate, but we can apply the same logic of the transform to the point to get the result",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:38): so they won't work?",
        "b246ff693d453c3b1a3049752da2bc75 (10:38): i think they are a great idea in general, and work perfectly for 2d stuff",
        "b246ff693d453c3b1a3049752da2bc75 (10:40): but don't always work for 3d",
        "b246ff693d453c3b1a3049752da2bc75 (10:41): e3fb62ebfa4f36acf5cbff6a6ed0f2e0: what if we talked about it internally and sent you a proposal?",
        "b246ff693d453c3b1a3049752da2bc75 (10:41): to www-style or something",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:41): the only problem is that they return SVGMatrix",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:41): yeah, that'd be great",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:41): please tag it cssom-view",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:42): [cssom-view] fancy new features or something",
        "b246ff693d453c3b1a3049752da2bc75 (10:42): we were hoping you'd have an solution right away",
        "b246ff693d453c3b1a3049752da2bc75 (10:42): but obviously you are useless",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:42): haha",
        "b246ff693d453c3b1a3049752da2bc75 (10:42): the good news is that we are equally useless",
        "b246ff693d453c3b1a3049752da2bc75 (10:42): meanwhile, i want you to fix the CSSOM asap",
        "b246ff693d453c3b1a3049752da2bc75 (10:42): it's horrible",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:42): wow yeah, I agree, wanna take over?",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:43): is sort of heads down changing Web security policies",
        "b246ff693d453c3b1a3049752da2bc75 (10:44): no, i don't",
        "b246ff693d453c3b1a3049752da2bc75 (10:44): i don't even want to do the specs that I'm actually implementing :)",
        "b246ff693d453c3b1a3049752da2bc75 (10:44): if I had my way i would erase everything and start over",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:45): yeah, would be much neater if bytes actually consisted of 10 bits",
        "b246ff693d453c3b1a3049752da2bc75 (10:45): actually, i was thinking 0 bits",
        "b246ff693d453c3b1a3049752da2bc75 (10:45): much much easier",
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0 (10:49): true, if we could go that far back maybe make sure humans are perfect right from the start so we don't have to go through all this comittee trouble"
    ],
    "person_ids": [
        "e3fb62ebfa4f36acf5cbff6a6ed0f2e0",
        "b246ff693d453c3b1a3049752da2bc75"
    ]
}