{
    "id": "4c7634026e60e7484672c7c00fc4bc30",
    "messages": [
        "888beb991ba060dc6d525b29fc1e80af (20:46): can someone help me with a few questions with canvas context?",
        "3f2e2531201cfbf853f16f668132eaf2 (20:46): Quite possibly",
        "888beb991ba060dc6d525b29fc1e80af (20:46): im trying to make a simple game engine and have objects that act as 'views'",
        "888beb991ba060dc6d525b29fc1e80af (20:47): and also objects that act as 'layers'",
        "888beb991ba060dc6d525b29fc1e80af (20:47): similar to cocoa nsview/uiview and calayers",
        "888beb991ba060dc6d525b29fc1e80af (20:47): basically a view object can have sub layers, and a layer object can have sublayers",
        "888beb991ba060dc6d525b29fc1e80af (20:48): oops view can have subviews*",
        "888beb991ba060dc6d525b29fc1e80af (20:48): follow me so far?",
        "3f2e2531201cfbf853f16f668132eaf2 (20:49): Hmm, not really",
        "3f2e2531201cfbf853f16f668132eaf2 (20:49): (I have no idea what Cocoa views are)",
        "888beb991ba060dc6d525b29fc1e80af (20:50): its just to manage groups of objects that are getting rendered",
        "3f2e2531201cfbf853f16f668132eaf2 (20:50): Ah",
        "888beb991ba060dc6d525b29fc1e80af (20:50): if you dont make an object or a view or layer it wont get rendered in the canvas redraw",
        "3f2e2531201cfbf853f16f668132eaf2 (20:50): What's the difference between views and layers?",
        "888beb991ba060dc6d525b29fc1e80af (20:50): the main canvas will automatically have a view added at init",
        "888beb991ba060dc6d525b29fc1e80af (20:50): views have much more overhead",
        "888beb991ba060dc6d525b29fc1e80af (20:51): but basically a view is noting but a container without its layer",
        "888beb991ba060dc6d525b29fc1e80af (20:51): its layer is where the context lives",
        "888beb991ba060dc6d525b29fc1e80af (20:52): right now my 'layer' object could have the same properties, but over time the layer is going to stay lightweight and view will be more bloaty",
        "3f2e2531201cfbf853f16f668132eaf2 (20:52): Hmm, sort of almost makes sense",
        "888beb991ba060dc6d525b29fc1e80af (20:52): like if something responds to touch, it needs to be a view, etc",
        "888beb991ba060dc6d525b29fc1e80af (20:52): layer is basically just a lightweight context to draw",
        "888beb991ba060dc6d525b29fc1e80af (20:53): but my question is. i want to kind of make things optimized, so say i have a layer, and it has 10 sublayers(array)",
        "888beb991ba060dc6d525b29fc1e80af (20:54): i want to render all these 10 sublayers to a context and save it to that layers context property",
        "888beb991ba060dc6d525b29fc1e80af (20:54): and that wouldnt get re rendered until something changed, like one of those layers was moved outside of the group. or the alpha was changed",
        "888beb991ba060dc6d525b29fc1e80af (20:54): make sense?",
        "888beb991ba060dc6d525b29fc1e80af (20:55): so basically that group of 10 layers has the overhead of redrawing 1 ctx on each redraw, not having to re render the stack of layers per redraw",
        "3f2e2531201cfbf853f16f668132eaf2 (20:57): Sounds like you ought to be able to do that simply by drawing those layers onto a new hidden canvas, and then draw that canvas back in a single call whenever you need it",
        "888beb991ba060dc6d525b29fc1e80af (20:58): thats what i was wondering about",
        "888beb991ba060dc6d525b29fc1e80af (20:58): are there any docs on creating an offscreen context for rendering into?",
        "3f2e2531201cfbf853f16f668132eaf2 (20:58): (though that probably only works if either there's no semi-transparency (and no funny composite modes), or you're always drawing those layers onto a black (or transparent) background, or something like that)",
        "3f2e2531201cfbf853f16f668132eaf2 (20:59): Just do &quot;var c = document.createElement('canvas'); c.width = 256; c.height = 256; c.getContext('2d')&quot;",
        "888beb991ba060dc6d525b29fc1e80af (20:59): i already have a main canvas tho",
        "3f2e2531201cfbf853f16f668132eaf2 (20:59): You can create as many as you want",
        "888beb991ba060dc6d525b29fc1e80af (21:00): ok",
        "888beb991ba060dc6d525b29fc1e80af (21:00): so manybe i should just create one beforehand and leave it so i dont have to use the dom and make one each time",
        "3f2e2531201cfbf853f16f668132eaf2 (21:00): (There's no way to have multipled contexts on a single canvas, but you can just have multiple canvases)",
        "888beb991ba060dc6d525b29fc1e80af (21:00): i can just clear it when im done'",
        "888beb991ba060dc6d525b29fc1e80af (21:01): my question is when you save a context are you saving the pixel data? or a pointer to that context?",
        "3f2e2531201cfbf853f16f668132eaf2 (21:01): Creating a new canvas element should be a cheap operation (compared to all the drawing), so you shouldn't need to worry too much about optimising it",
        "888beb991ba060dc6d525b29fc1e80af (21:02): bcause if i redraw into this context later i dont want to currupt that ctx i saved on a previous draw",
        "3f2e2531201cfbf853f16f668132eaf2 (21:02): Depends what you mean by &quot;save a context&quot;",
        "888beb991ba060dc6d525b29fc1e80af (21:03): if i take 10 images, and render them to a context of an offscreen canvas",
        "3f2e2531201cfbf853f16f668132eaf2 (21:03): If you use drawImage to draw one canvas onto another canvas's context, then it copies the pixels and they will never change even if you change the first canvas's pixels",
        "888beb991ba060dc6d525b29fc1e80af (21:03): and save that to a property of one of my layers or whataver",
        "888beb991ba060dc6d525b29fc1e80af (21:04): but that offscreen context will be used to draw into by everything when i need to composite a view/layer",
        "888beb991ba060dc6d525b29fc1e80af (21:04): so what i save out of it at the end needs to stay how it was",
        "3f2e2531201cfbf853f16f668132eaf2 (21:04): You can save a reference to the context (with normal JS variable assignment), but that's just a reference and not a clone of all its pixels",
        "888beb991ba060dc6d525b29fc1e80af (21:05): thats where im confused how to go about it",
        "3f2e2531201cfbf853f16f668132eaf2 (21:05): so you have to create a new off-screen canvas (with its own new context) if you want to do some more off-screen drawing without disturbing the first off-screen canvas",
        "888beb991ba060dc6d525b29fc1e80af (21:05): that is obviously important i can retrieve the pixels after i render all the stuff",
        "888beb991ba060dc6d525b29fc1e80af (21:05): so every layer/view i have is going to have its own offscreen context to draw into?",
        "888beb991ba060dc6d525b29fc1e80af (21:06): canvas*",
        "888beb991ba060dc6d525b29fc1e80af (21:06): that seems like way too much overhead",
        "3f2e2531201cfbf853f16f668132eaf2 (21:06): Every layer/view that you want to cache all of its pixel data will have to have its own offscreen canvas",
        "888beb991ba060dc6d525b29fc1e80af (21:07): there is no way to copy the pixels?",
        "888beb991ba060dc6d525b29fc1e80af (21:07): this is targeting mobile platforms im afraid that wont work well",
        "3f2e2531201cfbf853f16f668132eaf2 (21:07): You copy the pixels by creating an offscreen canvas and copying the pixels onto it :-)",
        "3f2e2531201cfbf853f16f668132eaf2 (21:07): You have to store the pixels *somewhere*, and a canvas is the most efficient place to store them",
        "3f2e2531201cfbf853f16f668132eaf2 (21:08): and if that's too inefficient, you have to stop storing all those pixels",
        "888beb991ba060dc6d525b29fc1e80af (21:09): hmm.",
        "888beb991ba060dc6d525b29fc1e80af (21:09): ok i will have to try it out i guess",
        "3f2e2531201cfbf853f16f668132eaf2 (21:11): (Storing pixels on a canvas will use 4 bytes of memory per pixel, plus a tiny overhead for the canvas element itself)",
        "3f2e2531201cfbf853f16f668132eaf2 (21:11): (It's also possible to use getImageData to get an array of pixels, which is probably either 4 bytes per pixel or dozens of bytes per pixel depending on the implementation)",
        "3f2e2531201cfbf853f16f668132eaf2 (21:12): (and there's toDataURL to get a base64-encoded PNG version of the pixels, whose size depends on the compression, but you have to stick it into an Image before you can use it and then it'll probably use 4 bytes per pixel)",
        "3f2e2531201cfbf853f16f668132eaf2 (21:13): (So just using a canvas is the most efficient approach)",
        "888beb991ba060dc6d525b29fc1e80af (21:14): ok cool",
        "888beb991ba060dc6d525b29fc1e80af (21:14): thx",
        "888beb991ba060dc6d525b29fc1e80af (21:14): just to be clear, there isnt something like this already available right?",
        "888beb991ba060dc6d525b29fc1e80af (21:14): like a pure html 5 animation and rendering library?",
        "3f2e2531201cfbf853f16f668132eaf2 (21:15): The only one I know of is http://glimr.rubyforge.org/cake/canvas.html",
        "3f2e2531201cfbf853f16f668132eaf2 (21:15): but I've never used it myself",
        "3f2e2531201cfbf853f16f668132eaf2 (21:15): and there might be others I'm unaware of",
        "888beb991ba060dc6d525b29fc1e80af (21:15): k",
        "888beb991ba060dc6d525b29fc1e80af (21:22): looks cool",
        "888beb991ba060dc6d525b29fc1e80af (21:38): ahh i hate how non oo js is",
        "b25b6b77a0087ff8385941e5545d32ea (21:39): Nah javascript is pretty infinite",
        "b25b6b77a0087ff8385941e5545d32ea (21:39): At least the web has an ininite amount of javascript",
        "b25b6b77a0087ff8385941e5545d32ea (21:40): That gives the impression of having been writtn by an infinite number of monkeys",
        "3f2e2531201cfbf853f16f668132eaf2 (21:40): In many cases I don't think it's just an impression",
        "b25b6b77a0087ff8385941e5545d32ea (21:42): considers making some serious point about object orientation in javascript, but decides it isn't worth the bother",
        "3f2e2531201cfbf853f16f668132eaf2 (21:42): Serious points are rarely worth the bother",
        "888beb991ba060dc6d525b29fc1e80af (21:43): i try and use this code that i picked up (still learning js)",
        "888beb991ba060dc6d525b29fc1e80af (21:43): and it uses all prototypes",
        "3f2e2531201cfbf853f16f668132eaf2 (21:43): In fact, the word &quot;serious&quot; comes from the Latin phrase meaning &quot;not worth the bother&quot;",
        "888beb991ba060dc6d525b29fc1e80af (21:43): but it seems to be making my life more difficult using that style",
        "b25b6b77a0087ff8385941e5545d32ea (21:45): 888beb991ba060dc6d525b29fc1e80af: It takes some getting used to. I don't have a strong opinion on whether it is good or bad",
        "b25b6b77a0087ff8385941e5545d32ea (21:46): Although I think javascript has a worse prototype system than other prototype-based languages",
        "888beb991ba060dc6d525b29fc1e80af (21:46): well my objects need references outside of their scope and i dont see a way to do that",
        "b25b6b77a0087ff8385941e5545d32ea (21:46): What do you mean &quot;references outside of their scope&quot;?",
        "888beb991ba060dc6d525b29fc1e80af (21:47): like create instance of object A, which inside needs to create an object B",
        "888beb991ba060dc6d525b29fc1e80af (21:47): http://pastie.org/626318",
        "0a39f78bcb297ab0ebe8a29c28bfed89 (21:47): Title: #626318 - Pastie (at pastie.org)",
        "b25b6b77a0087ff8385941e5545d32ea (21:48): function a() {this.b = new b()}; funcion b() {}; a()",
        "b25b6b77a0087ff8385941e5545d32ea (21:49): am I missing something?",
        "b25b6b77a0087ff8385941e5545d32ea (21:49): new a()",
        "b25b6b77a0087ff8385941e5545d32ea (21:49): rather than just a();",
        "888beb991ba060dc6d525b29fc1e80af (21:49): i dont want function b to be inside of a",
        "888beb991ba060dc6d525b29fc1e80af (21:49): because i want b to be an object also",
        "888beb991ba060dc6d525b29fc1e80af (21:49): which doesnt have to be creatd by a or part of a at all",
        "888beb991ba060dc6d525b29fc1e80af (21:49): and wouldprefer no to call it by a.b",
        "b25b6b77a0087ff8385941e5545d32ea (21:51): function A() {var this_b = b;}; function B() {}; var b = new B(); var a = new A();",
        "b25b6b77a0087ff8385941e5545d32ea (21:51): I feel like I am missing something...",
        "888beb991ba060dc6d525b29fc1e80af (21:52): prototypes?",
        "888beb991ba060dc6d525b29fc1e80af (21:52): in my pastie it doesnt work using them",
        "b25b6b77a0087ff8385941e5545d32ea (21:53): Right, you don't need to init the prototype yourself",
        "b25b6b77a0087ff8385941e5545d32ea (21:53): Can you post a simpler example that doesn't work?",
        "888beb991ba060dc6d525b29fc1e80af (21:53): that example doesnt work",
        "888beb991ba060dc6d525b29fc1e80af (21:53): this.CreateCanvasLayer() fails",
        "0a39f78bcb297ab0ebe8a29c28bfed89 (21:55): bugmail: [Bug 7546] &quot;HTML 5&quot; Editor's draft misnamed and suboptimal for HTML content authors unless refactored into HTML (main) and DOM API (appendix). &lt;http://lists.w3.org/Archives/Public/public-html-bugzilla/2009Sep/0738.html&gt;",
        "b25b6b77a0087ff8385941e5545d32ea (21:58): 888beb991ba060dc6d525b29fc1e80af: I don't understand why CreateCanvasLayer would be on ASCanvasManager.prototype",
        "888beb991ba060dc6d525b29fc1e80af (21:58): because i put it there?",
        "888beb991ba060dc6d525b29fc1e80af (21:59): when i create that object it needs to have another object as part of it?",
        "888beb991ba060dc6d525b29fc1e80af (21:59): another object that can be created outside of that function",
        "b25b6b77a0087ff8385941e5545d32ea (21:59): It is confusing because you would expect the this object to be an ASCanvasManager instance but actually it will be an instance of the CreateCanvasLayer object",
        "b25b6b77a0087ff8385941e5545d32ea (22:00): or rther s/an instance of/ it's constructor will be/",
        "b25b6b77a0087ff8385941e5545d32ea (22:00): or whatever",
        "888beb991ba060dc6d525b29fc1e80af (22:00): yea",
        "888beb991ba060dc6d525b29fc1e80af (22:00): maybe i am using prototypes wrong",
        "b25b6b77a0087ff8385941e5545d32ea (22:07): 888beb991ba060dc6d525b29fc1e80af: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/240 might be somehing like what you want",
        "0a39f78bcb297ab0ebe8a29c28bfed89 (22:07): Title: Live DOM Viewer (at software.hixie.ch)",
        "888beb991ba060dc6d525b29fc1e80af (22:09): whats that",
        "b25b6b77a0087ff8385941e5545d32ea (22:12): The code at the top is a simplification of your pastie code but written in a different way",
        "b25b6b77a0087ff8385941e5545d32ea (22:12): The log output is at the bottom",
        "b25b6b77a0087ff8385941e5545d32ea (22:13): Most of the stuff in the middle is irrelevant for our purposes",
        "b25b6b77a0087ff8385941e5545d32ea (22:13): (But I made it copy the code to the rendered view to make it easier to read)",
        "888beb991ba060dc6d525b29fc1e80af (22:18): oh",
        "0a39f78bcb297ab0ebe8a29c28bfed89 (22:25): bugmail: [Bug 7471] JimJJewett gmail: Make explicit reasons for *not* exposing aspect ratio/clipping. (Security vs simplification). Deals with http://www.w3.org/AudioVideo/2007/12/SMIL-AudioVideoControlConcepts.html#L2398 note1 &lt;http://lists.w3.org/Archives/Public/public-html-bugzilla/2009Sep/0740.html&gt; ** [Bug 7470] JimJJewett gmail: The implications of these tables should also appear at element level -- e.g, td model or dom should mention aria- -- u",
        "888beb991ba060dc6d525b29fc1e80af (22:44): ok i have an object with its own canvas and context2d",
        "888beb991ba060dc6d525b29fc1e80af (22:44): and how can i draw that objects context in my main draw loop?",
        "888beb991ba060dc6d525b29fc1e80af (22:44): i know drawImage() but thats all",
        "0a39f78bcb297ab0ebe8a29c28bfed89 (22:53): planet: Introducing Google Chrome Frame &lt;http://feedproxy.google.com/~r/blogspot/Dcni/~3/TnHTr9Tv5CM/introducing-google-chrome-frame.html&gt; ** Introducing Google Chrome Frame &lt;http://blog.chromium.org/2009/09/introducing-google-chrome-frame.html&gt;",
        "0a39f78bcb297ab0ebe8a29c28bfed89 (22:55): bugmail: [Bug 7473] JimJJewett gmail: Mention explicitly that the mapping for foreign content -- including adopted MathML or SVG -- is left to those working groups. (Otherwise, I would have expected some strong native semantics for math to math) &lt;http://lists.w3.org/Archives/Public/public-html-bugzilla/2009Sep/0741.html&gt;"
    ],
    "person_ids": [
        "888beb991ba060dc6d525b29fc1e80af",
        "3f2e2531201cfbf853f16f668132eaf2",
        "b25b6b77a0087ff8385941e5545d32ea",
        "0a39f78bcb297ab0ebe8a29c28bfed89"
    ]
}