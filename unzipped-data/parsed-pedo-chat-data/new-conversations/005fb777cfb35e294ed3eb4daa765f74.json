{
    "id": "005fb777cfb35e294ed3eb4daa765f74",
    "messages": [
        "7fa647c6749a47a3c7039c25ab351a0b (20:06): is there a way to address visual selection start and end in s/// --- given visually selected text1\\ntext2\\ntext3 I want to wrap them into tags by :'&lt;,'&gt;s/VSTART\\(.*\\)VEND/&lt;blah&gt;\\1&lt;/blah&gt;",
        "7fa647c6749a47a3c7039c25ab351a0b (20:06): VSTART and VEND are visual selection start and end markers",
        "7fa647c6749a47a3c7039c25ab351a0b (20:07): does vim have these markers?",
        "7fa647c6749a47a3c7039c25ab351a0b (20:07): if not, can this be emulated with g?",
        "878b627b013f0c465ec2be26325ce80d (20:08): in vim7 there is",
        "74f24a0bc98f0bb5b9de4a19acfaa1f8 (20:08): is there command to  undo window manipulations like :split, :vsplit, :only?",
        "7fa647c6749a47a3c7039c25ab351a0b (20:10): jamessan, I'm using vim7, how in particular?",
        "878b627b013f0c465ec2be26325ce80d (20:10): avds: so, you could do :'&lt;,'&gt;s@\\%V.*\\%V@&lt;blah&gt;&amp;&lt;/blah&gt;@",
        "7fa647c6749a47a3c7039c25ab351a0b (20:11): oh, nice, \\%V it is then",
        "7fa647c6749a47a3c7039c25ab351a0b (20:11): thanks",
        "7fa647c6749a47a3c7039c25ab351a0b (20:13): vim7 is SO NICE",
        "7fa647c6749a47a3c7039c25ab351a0b (20:14): oh, but it doesn't quite do what I want",
        "7fa647c6749a47a3c7039c25ab351a0b (20:14): I want a multi-line match",
        "7fa647c6749a47a3c7039c25ab351a0b (20:14): currently I get &lt;blah&gt;text1&lt;/blah&gt;\\n&lt;blah&gt;text2&lt;/blah&gt; etc",
        "7fa647c6749a47a3c7039c25ab351a0b (20:15): with '&lt;,'&gt;s@\\%V.*\\%V@&lt;blah&gt;&amp;&lt;/blah&gt;@",
        "7fa647c6749a47a3c7039c25ab351a0b (20:15): but I want to get &lt;blah&gt;text1\\ntext2&lt;/blah&gt;",
        "7fa647c6749a47a3c7039c25ab351a0b (20:15): \\n is newline",
        "878b627b013f0c465ec2be26325ce80d (20:16): it worked fine for me when I had a multiline visual selection",
        "878b627b013f0c465ec2be26325ce80d (20:17): ah, for block selection it'll perform the operation on each line",
        "878b627b013f0c465ec2be26325ce80d (20:18): for line or character selection it'll perform it on the two ends",
        "878b627b013f0c465ec2be26325ce80d (20:18): that actually makes sense",
        "7fa647c6749a47a3c7039c25ab351a0b (20:18): I use V",
        "7fa647c6749a47a3c7039c25ab351a0b (20:18): how do you make a visual selection with keyboard?",
        "878b627b013f0c465ec2be26325ce80d (20:18): hrm, ok. so block and line have the substitutions performed on each line",
        "5ef382098221da582785caed3b8d84c3 (20:18): how do i turn on case insensitivity for further matches?",
        "5ef382098221da582785caed3b8d84c3 (20:18): with /[search]",
        "1dba936eb9afcdae7d12168442487415 (20:19): hum, the server shutdowned before I got the answer to my question, so I ask it again :",
        "1dba936eb9afcdae7d12168442487415 (20:19): is there a way to get the &lt;bang&gt; value in a user defined function without adding a &lt;bang&gt; parameter to the function itself ? something like : command! -bang MyCmd call DoSomething(), and in DoSomething() something like if &lt;bang&gt;| .. ?",
        "5ef382098221da582785caed3b8d84c3 (20:19): i keep manually doing /\\c[search]",
        "7fa647c6749a47a3c7039c25ab351a0b (20:19): myren, :set ignorecase",
        "7fa647c6749a47a3c7039c25ab351a0b (20:19): jamessan, how do you make a visual selection with keyboard?",
        "878b627b013f0c465ec2be26325ce80d (20:19): avds: v V or &lt;C-v&gt;",
        "7fa647c6749a47a3c7039c25ab351a0b (20:20): for V it does per-line substitutions",
        "878b627b013f0c465ec2be26325ce80d (20:20): yes",
        "7fa647c6749a47a3c7039c25ab351a0b (20:20): I mean, how did work for you",
        "7fa647c6749a47a3c7039c25ab351a0b (20:20): how did you make the selection?",
        "878b627b013f0c465ec2be26325ce80d (20:20): which is what I last said :)  I was incorrect the first time when I said only block would have it performed line-wise",
        "7fa647c6749a47a3c7039c25ab351a0b (20:20): ok, so it doesn't work",
        "7fa647c6749a47a3c7039c25ab351a0b (20:20): :(",
        "878b627b013f0c465ec2be26325ce80d (20:20): it does work, just not how you want it to",
        "878b627b013f0c465ec2be26325ce80d (20:21): use a character-wise visual selection instead of line-wise",
        "7fa647c6749a47a3c7039c25ab351a0b (20:21): yes, from my viewpoint this means it doesn't work",
        "7fa647c6749a47a3c7039c25ab351a0b (20:21): v?",
        "878b627b013f0c465ec2be26325ce80d (20:21): v, yes",
        "7fa647c6749a47a3c7039c25ab351a0b (20:21): nah, same thing",
        "7fa647c6749a47a3c7039c25ab351a0b (20:21): when I cross line boundaries",
        "878b627b013f0c465ec2be26325ce80d (20:22): oh, for some reason I thought it was working differently for me",
        "7fa647c6749a47a3c7039c25ab351a0b (20:23): can we possible use any multi-line modifiers?",
        "7fa647c6749a47a3c7039c25ab351a0b (20:23): like in perl",
        "7fa647c6749a47a3c7039c25ab351a0b (20:23): so that line ends will be ignored",
        "878b627b013f0c465ec2be26325ce80d (20:23): at any rate, it makes sense because :s works on a per-line basis. so, for each line it finds the visual selection and replaces it",
        "4bc0fc924644276798a2be9256621e9b (20:24): guys for C programming, are these sufficient ?",
        "4bc0fc924644276798a2be9256621e9b (20:24): set cindent",
        "4bc0fc924644276798a2be9256621e9b (20:24): set shiftwidth=2",
        "4bc0fc924644276798a2be9256621e9b (20:24): set tabstop=2",
        "4bc0fc924644276798a2be9256621e9b (20:24): syntax on",
        "4bc0fc924644276798a2be9256621e9b (20:24): set number",
        "878b627b013f0c465ec2be26325ce80d (20:24): albacker: don't mess with tabstop",
        "4bc0fc924644276798a2be9256621e9b (20:24): it was working ok, but it doesnt autoindent anymore now !?",
        "4bc0fc924644276798a2be9256621e9b (20:24): might it be from that ?",
        "7fa647c6749a47a3c7039c25ab351a0b (20:24): albacker, filetype plugin indent on",
        "4bc0fc924644276798a2be9256621e9b (20:24): avds,  ?",
        "7fa647c6749a47a3c7039c25ab351a0b (20:25): albacker, if it doesn't say anything to you, look it up in help",
        "7fa647c6749a47a3c7039c25ab351a0b (20:25): :help filetype",
        "878b627b013f0c465ec2be26325ce80d (20:26): avds: I thought using \\%V\\_.*\\%V might work, but that causes results that don't seem logical to me",
        "4bc0fc924644276798a2be9256621e9b (20:26): avds, should i add set filetype on in my .vimrc or set filetype plugin on",
        "7fa647c6749a47a3c7039c25ab351a0b (20:26): both with one line",
        "7fa647c6749a47a3c7039c25ab351a0b (20:27): albacker, filetype plugin indent on",
        "fb2c4f3e688db2a676f292cd15961a59 (20:27): albacker: it's not set filetype, it's :filteype plugin indent on",
        "878b627b013f0c465ec2be26325ce80d (20:27): no set filetype. just filetype indent on",
        "878b627b013f0c465ec2be26325ce80d (20:27): (with or without plugin)",
        "4bc0fc924644276798a2be9256621e9b (20:28): k, thnx",
        "7fa647c6749a47a3c7039c25ab351a0b (20:28): jamessan, \\_.* looks reasonable",
        "a2101ed7fe1237a7cb5b984ca6301793 (20:28): question: I can substitue some string by that string plus a \\r , but then how can one remove any \\r with the substitute command?",
        "7fa647c6749a47a3c7039c25ab351a0b (20:28): but the result is strange",
        "7fa647c6749a47a3c7039c25ab351a0b (20:30): jamessan, still, it is almost correct",
        "878b627b013f0c465ec2be26325ce80d (20:30): avds: yeah, I think the strange behavior is a bug",
        "7fa647c6749a47a3c7039c25ab351a0b (20:30): probably",
        "fb2c4f3e688db2a676f292cd15961a59 (20:30): Leafw: :he sub-replace-special",
        "7fa647c6749a47a3c7039c25ab351a0b (20:30): would you mind reporting it?",
        "7fa647c6749a47a3c7039c25ab351a0b (20:31): jamessan, would you mind reporting it?",
        "a2101ed7fe1237a7cb5b984ca6301793 (20:31): Zathrus : thank you",
        "4bc0fc924644276798a2be9256621e9b (20:31): guys i get this",
        "4bc0fc924644276798a2be9256621e9b (20:31): <a href=\"http://en.wikipedia.org/wiki/Blacksun_reseach_facility\">http://en.wikipedia.org/wiki/Blacksun_reseach_facility</a>",
        "4bc0fc924644276798a2be9256621e9b (20:31): oh :\\",
        "878b627b013f0c465ec2be26325ce80d (20:31): Leafw: you geenrally want to use \\r on the rhs of :s and \\n on the lhs.  if you need to match a \\r (which should show up as ^M), use &lt;C-v&gt;&lt;C-m&gt;",
        "878b627b013f0c465ec2be26325ce80d (20:31): avds: sure",
        "4bc0fc924644276798a2be9256621e9b (20:31): int xchat_plugin_init (xchat_plugin *plugin_handle,",
        "4bc0fc924644276798a2be9256621e9b (20:31): char **plugin_name,",
        "4bc0fc924644276798a2be9256621e9b (20:31): instead of",
        "4bc0fc924644276798a2be9256621e9b (20:31): int xchat_plugin_init(xchat_plugin *plugin_handle,",
        "4bc0fc924644276798a2be9256621e9b (20:31): char **plugin_name,",
        "a2101ed7fe1237a7cb5b984ca6301793 (20:32): thank you jamessan!",
        "4bc0fc924644276798a2be9256621e9b (20:32): what should be done to tab the char**plugin_name like the second example..",
        "878b627b013f0c465ec2be26325ce80d (20:32): albacker: :he 'cinoptions",
        "74f24a0bc98f0bb5b9de4a19acfaa1f8 (20:46): is there a undo for window operarions like :vsplit :split :only ?",
        "fb2c4f3e688db2a676f292cd15961a59 (20:47): mdanjou: no",
        "74f24a0bc98f0bb5b9de4a19acfaa1f8 (20:48): I wrote one and bound it to &lt;C-W&gt;u, but it is a bit buggy...",
        "1dba936eb9afcdae7d12168442487415 (21:00): is there a way to set more than one completion scheme in a user command definition, for instance first argument should be completed using 'file', the second with 'custom,Something', and if not, is it possible to return a standard completion inside a custom completion (for instance, return files, inside the custom completion function if it is the first argument) ?",
        "4bc0fc924644276798a2be9256621e9b (21:04): how do i apply this :  cino=(0 &gt;",
        "878b627b013f0c465ec2be26325ce80d (21:07): albacker: ?",
        "4bc0fc924644276798a2be9256621e9b (21:07): i was reading throught coptions-values :\\",
        "4bc0fc924644276798a2be9256621e9b (21:08): jamessan,",
        "4bc0fc924644276798a2be9256621e9b (21:08): &gt;N    Amount added for &quot;normal&quot; indent.  Used after a line that should",
        "878b627b013f0c465ec2be26325ce80d (21:08): and you want 'cino' to be &quot;(0&quot;?",
        "4bc0fc924644276798a2be9256621e9b (21:08): increase the indent (lines starting with &quot;if&quot;, an opening brace,",
        "4bc0fc924644276798a2be9256621e9b (21:08): etc.).  (default 'shiftwidth').",
        "4bc0fc924644276798a2be9256621e9b (21:08): cino=\t\t    cino=&gt;2\t\tcino=&gt;2s &gt;",
        "4bc0fc924644276798a2be9256621e9b (21:08): if (cond)\t      if (cond)\t\t  if (cond)",
        "4bc0fc924644276798a2be9256621e9b (21:08): {\t\t      {\t\t\t  {",
        "4bc0fc924644276798a2be9256621e9b (21:08): foo;\t\tfoo;\t\t\t  foo;",
        "4bc0fc924644276798a2be9256621e9b (21:08): }\t\t      }\t\t\t  }",
        "878b627b013f0c465ec2be26325ce80d (21:08): albacker: don't paste",
        "fb2c4f3e688db2a676f292cd15961a59 (21:08): ow.",
        "4bc0fc924644276798a2be9256621e9b (21:08): sorry.. i just wanted you to show how it looks like here..",
        "4bc0fc924644276798a2be9256621e9b (21:08): there are three blocks of code.",
        "878b627b013f0c465ec2be26325ce80d (21:08): albacker: all you had to do was point me to the section",
        "4bc0fc924644276798a2be9256621e9b (21:09): cinoptions-values",
        "878b627b013f0c465ec2be26325ce80d (21:09): albacker: the default value for &gt; is your shiftwidth. if that's what you want, you don't have to set it",
        "5ef382098221da582785caed3b8d84c3 (21:09): is there any way to search for the word currently under the cursor?",
        "fb2c4f3e688db2a676f292cd15961a59 (21:10): myren: *",
        "fb2c4f3e688db2a676f292cd15961a59 (21:10): myren: # searches backwards",
        "878b627b013f0c465ec2be26325ce80d (21:10): and # (for backwards)",
        "4bc0fc924644276798a2be9256621e9b (21:10): jamessan, i was searching how to do what you told me before..",
        "878b627b013f0c465ec2be26325ce80d (21:10): heh",
        "878b627b013f0c465ec2be26325ce80d (21:11): albacker: yes, and &gt; doesn't affect your specific example from earlier. (0 is what you want, which you seem to have found",
        "4bc0fc924644276798a2be9256621e9b (21:11): cin=(0",
        "4bc0fc924644276798a2be9256621e9b (21:11): do i put set cino=(0 in my .vimrc ?",
        "878b627b013f0c465ec2be26325ce80d (21:12): it's probably better as an autocmd for the c FileType &quot;autocmd FileType c setl cino=(0&quot; or put in ~/.vim/after/ftplugin/c.vim",
        "4bc0fc924644276798a2be9256621e9b (21:13): i dont have a ~/.vim dir.",
        "5ef382098221da582785caed3b8d84c3 (21:18): is there any way to, uh, highlight? the active word?",
        "5ef382098221da582785caed3b8d84c3 (21:18): when i search it highlights matches",
        "5ef382098221da582785caed3b8d84c3 (21:18): is there any way to just pull in the current word into the search without actually searching for the next occurence of the term?",
        "d7d3854aad52a8a277b92bae706f039d (21:18): what's the vim key binding to wrap the visually selected block to the current set textwidth again?-)",
        "4f121933e01ce1faf5dbbc2de44e632a (21:26): yaarg: gq",
        "d7d3854aad52a8a277b92bae706f039d (21:26): aha!",
        "d7d3854aad52a8a277b92bae706f039d (21:26): thanks",
        "4f121933e01ce1faf5dbbc2de44e632a (21:28): myren: you could make an autocommand to do that if you don't mind losing last search pattern",
        "5ef382098221da582785caed3b8d84c3 (21:30): Nyoxi: fine by me.  :)",
        "5ef382098221da582785caed3b8d84c3 (21:30): i probably will",
        "4f121933e01ce1faf5dbbc2de44e632a (21:30): or make it to use :match maybe",
        "5ef382098221da582785caed3b8d84c3 (21:30): since i also dislike how it looks for exact word matches",
        "5ef382098221da582785caed3b8d84c3 (21:30): foo wont match foo_bar",
        "5ef382098221da582785caed3b8d84c3 (21:30): or fooBar",
        "1dba936eb9afcdae7d12168442487415 (21:32): I am looking for a function that returns the basename of a file, (%) is there something like this or would I have to use a system ?",
        "4f121933e01ce1faf5dbbc2de44e632a (21:32): goutnet: :he expand(",
        "1dba936eb9afcdae7d12168442487415 (21:33): thxs :)"
    ],
    "person_ids": [
        "7fa647c6749a47a3c7039c25ab351a0b",
        "878b627b013f0c465ec2be26325ce80d",
        "74f24a0bc98f0bb5b9de4a19acfaa1f8",
        "5ef382098221da582785caed3b8d84c3",
        "1dba936eb9afcdae7d12168442487415",
        "4bc0fc924644276798a2be9256621e9b",
        "fb2c4f3e688db2a676f292cd15961a59",
        "a2101ed7fe1237a7cb5b984ca6301793",
        "d7d3854aad52a8a277b92bae706f039d",
        "4f121933e01ce1faf5dbbc2de44e632a"
    ]
}