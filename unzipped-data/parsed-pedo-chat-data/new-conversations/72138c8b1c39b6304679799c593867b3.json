{
    "id": "72138c8b1c39b6304679799c593867b3",
    "messages": [
        "b8810fee2f4a71f849f3f7409546d1d9 (20:53): jgraham: It would help the Open part if one of the two interoperable impls is available under a GPL-compatible license and could be distributed as binary under the GPL",
        "b8810fee2f4a71f849f3f7409546d1d9 (20:53): (this definition implies stuff about patents)",
        "edb259c0e0038f38bb200bc20c8cbf7e (20:53): so Apple is gonna compete with Twitter/Facebook",
        "edb259c0e0038f38bb200bc20c8cbf7e (20:53): fun times",
        "b8810fee2f4a71f849f3f7409546d1d9 (20:55): I guess now I should watch the Stevenote, too",
        "1f8387eb43f131d7c309a90a4e36b5cb (20:55): I'll just let blogs do my summarizing for me later.",
        "b8810fee2f4a71f849f3f7409546d1d9 (20:56): boo. requires proprietary plug-in",
        "edb259c0e0038f38bb200bc20c8cbf7e (20:56): iTunes is turned into Twitter/Facebook basically",
        "b8810fee2f4a71f849f3f7409546d1d9 (20:56): when WebM streaming is known to work",
        "edb259c0e0038f38bb200bc20c8cbf7e (20:57): seems sort of walled garden variant though -- called Ping",
        "1f8387eb43f131d7c309a90a4e36b5cb (21:07): edb259c0e0038f38bb200bc20c8cbf7e: Pinged you with the email I sent internally about the CSSOM Values API.",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:07): thanks for that",
        "1f8387eb43f131d7c309a90a4e36b5cb (21:10): I suppose the .m accessor means that every property that allows component values in multiple orders needs a defined &quot;canonical&quot; ordering so that we can number them?",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:10): m is gone",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:10): per your suggestion",
        "1f8387eb43f131d7c309a90a4e36b5cb (21:10): d'oh.  How do you get at the subvalues of textShadow, then?",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:11): textShadow[&quot;somethingwedefine&quot;]",
        "1f8387eb43f131d7c309a90a4e36b5cb (21:11): Oh, okay.  And then I guess .margin['top']?",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:11): basically when a css value is mapped  it implements the interface directly",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:11): if it's a list it will get a .list accessor that gives you a list",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:12): so backgroundImage.list and margin.top or some such, indeed",
        "1f8387eb43f131d7c309a90a4e36b5cb (21:12): I liked the terseness of .l, by the way.",
        "1f8387eb43f131d7c309a90a4e36b5cb (21:13): And, for that matter, the .r, .g, .b, and .a of the Color interface.",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:13): we can tweak details later, but from experience with Selectors API it seems that people prefer libraries to provide shortcuts, and the core APIs to be unambiguous",
        "1f8387eb43f131d7c309a90a4e36b5cb (21:15): Does the textShadow['blur'] thing mean that we'd have to define the names of the subvalues when we define the property, even if we aren't defining subproperties yet?",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:15): yes",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:15): if you want a proper API for the property",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:15): boris suggested we might not need a proper API for each property, but I think opinions are spread on that",
        "1f8387eb43f131d7c309a90a4e36b5cb (21:16): I think we'd want as much as possible.  But we can certainly start small and build it out as we go.",
        "1f8387eb43f131d7c309a90a4e36b5cb (21:16): I'd be kind of afraid that .list may collide with some property name in the future.  .l had the advantage of that being impossible.",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:17): you mean we'd have a 'foo' shorthand and 'foo-list'?",
        "1f8387eb43f131d7c309a90a4e36b5cb (21:17): Maybe?",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:18): and 'foo' also happens to be a comma or space-separated list... hmm",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:18): could happen I suppose",
        "1f8387eb43f131d7c309a90a4e36b5cb (21:18): I think that for the basic workhorse properties it's totally fine to be terse.",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:18): but we can work around it, but we can also rename",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:19): I rather not focus too much on the specifics but more on the overall design right now",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:19): specifics are pretty flexible",
        "1f8387eb43f131d7c309a90a4e36b5cb (21:19): Right, but we'll probably bikeshed on that somewhat anyway, since we're interested in making new DOM APIs not suck from the beginning.  ^_^",
        "1f8387eb43f131d7c309a90a4e36b5cb (21:22): edb259c0e0038f38bb200bc20c8cbf7e: Any idea how you want to handle function values yet?  Presumably some generic function interface that can return contents or individual arguments as strings, but also specialized interfaces for specific functions like gradients?",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:23): I'm not sure generic is needed",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:23): e.g. url() will just be CSSURLComponent.url (maybe absoluteURL at some point)",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:24): rgba()/rgb()/hsl()/hsla() are all CSSColorComponentValue",
        "1f8387eb43f131d7c309a90a4e36b5cb (21:24): How would you easily be able to distinguish between, say, .backgroundImage being a url and a gradient?",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:24): you can .backgroundImage.type",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:24): which gives you the type of value",
        "1f8387eb43f131d7c309a90a4e36b5cb (21:25): Ah, gotcha.  Forgot about the .type global property.",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:25): there's also .value currently",
        "1f8387eb43f131d7c309a90a4e36b5cb (21:25): Which returns what?",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:25): but I'm not sure if that is needed",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:26): when type=string it returns a string when type=color it returns some kind of hexadecimal value I suppose, etc.",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:26): but again, maybe that should be dropped for now as it makes matters complex",
        "edb259c0e0038f38bb200bc20c8cbf7e (21:26): well, more complex than needed for v1",
        "1f8387eb43f131d7c309a90a4e36b5cb (21:26): Hmm, yeah.",
        "8269fc4aca67c69ef320ddd69881d4cc (21:39): What does the selectedOption attribute mean with an &lt;input type=search&gt; ?",
        "65325d50b2e25aca54bc871b89758c9c (21:44): DOM Core needs love"
    ],
    "person_ids": [
        "b8810fee2f4a71f849f3f7409546d1d9",
        "edb259c0e0038f38bb200bc20c8cbf7e",
        "1f8387eb43f131d7c309a90a4e36b5cb",
        "8269fc4aca67c69ef320ddd69881d4cc",
        "65325d50b2e25aca54bc871b89758c9c"
    ]
}