{
    "id": "5bd3fdbd7f94d5fdee566b0c6d36e330",
    "messages": [
        "2466054b396284f05e6f6e4e7d3c806d (16:10): I love what people come up with:",
        "2466054b396284f05e6f6e4e7d3c806d (16:11): http://www.bramstein.com/projects/typeset/",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:14): I rather wish browser didn't compete on perf so much on desktop and dared to implement more expensive line breaking algorithms",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:15): or at least did it for justified text",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:15): justified text probably doesn't show up of perf benchmarks too much",
        "2466054b396284f05e6f6e4e7d3c806d (16:17): b8810fee2f4a71f849f3f7409546d1d9: I'm sure we can push some people's buttons to add that ;)",
        "1f8387eb43f131d7c309a90a4e36b5cb (16:17): That's pretty cool.  We need more effort on good typography.",
        "2466054b396284f05e6f6e4e7d3c806d (16:18): 1f8387eb43f131d7c309a90a4e36b5cb: Agreed.",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:18): (that is, I appreciate competition on perf as long as rendering beauty isn't stifled by perf concern)",
        "1f8387eb43f131d7c309a90a4e36b5cb (16:18): I mean, how often do perf tests measure justified text anyway?  I would *love* to see this justification algorithm in.  I implement justified text generally across my company's site, but it has less-than-pretty effects in some places.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (16:19): b8810fee2f4a71f849f3f7409546d1d9: Which in the case of justified text, it normally is",
        "1f8387eb43f131d7c309a90a4e36b5cb (16:19): Also, the quality of that shape-filling justification is just wonderful.",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:19): would love to see the (La?)TeX hyphenation algorithm in browsers, too",
        "1f8387eb43f131d7c309a90a4e36b5cb (16:20): I think &quot;We make the web more beautiful&quot; could be a successful advertising point to counter perf losses.",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:21): the #1 beauty problem is Windows font rasterization though",
        "1f8387eb43f131d7c309a90a4e36b5cb (16:21): This is true.",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:21): and the Ubuntu/Fedora FreeType defaults, too",
        "2466054b396284f05e6f6e4e7d3c806d (16:22): b8810fee2f4a71f849f3f7409546d1d9: How's that? I don't know that background.",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:23): 2466054b396284f05e6f6e4e7d3c806d: Windows XP doesn't have even ClearType on by default",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:23): 2466054b396284f05e6f6e4e7d3c806d: and ClearType is very ugly compared to Quartz or FreeType",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:23): worse, the Windows rasterizers use legacy TrueType hinting",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:24): designed for low-res non-AA rasterization",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:24): which has the side effect that fonts that aren't hinted with Windows in mind can look nice on Mac and Linux but totally, totally horrible on Windows",
        "2466054b396284f05e6f6e4e7d3c806d (16:25): Mmm, wonder if that's still the case on 7",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:25): it was on 7 beta",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:26): I doubt they've changed the rasterizer since then",
        "2466054b396284f05e6f6e4e7d3c806d (16:28): Indeed doubtful.",
        "ab7faae5d7b250ea8606486575f8f79c (16:30): a11aabeeceeae6b8cb5d12ea06b56554: /proc/$PID/status gives easier-to-parse memory stats, on Linux",
        "ab7faae5d7b250ea8606486575f8f79c (16:30): (Easier than top)",
        "ab7faae5d7b250ea8606486575f8f79c (16:31): Doesn't seem to make much sense to have a system-independent memory usage thing, because the concept of &quot;memory usage&quot; is itself system-dependent",
        "a9b326df4e6da61c5b6f5e1058be83a2 (16:32): b8810fee2f4a71f849f3f7409546d1d9: very short page for you to review if you have a couple minutes",
        "a9b326df4e6da61c5b6f5e1058be83a2 (16:32): http://pastebin.ca/1802736",
        "a9b326df4e6da61c5b6f5e1058be83a2 (16:32): this is pretty much the same as the earlier page-template patch",
        "a9b326df4e6da61c5b6f5e1058be83a2 (16:32): it just does the same for the form part of the page",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:33): a9b326df4e6da61c5b6f5e1058be83a2: assuming the page emitter works, I trust this does the same thing for another file",
        "a9b326df4e6da61c5b6f5e1058be83a2 (16:34): OK",
        "a9b326df4e6da61c5b6f5e1058be83a2 (16:36): b8810fee2f4a71f849f3f7409546d1d9: btw, do you think it would make sense to change the build so that it does actually generate the Java code from the (default/existing) page templates?",
        "a9b326df4e6da61c5b6f5e1058be83a2 (16:37): that is, have the SaxCompiler actually generate the validator/src/nu/validator/servlet/PageEmitter.java file as part of the build",
        "a9b326df4e6da61c5b6f5e1058be83a2 (16:38): from the default validator/xml-src/PageEmitter.xml file",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:38): a9b326df4e6da61c5b6f5e1058be83a2: that would be ok as long as the generated file goes into the current location for convenient access from Eclipse",
        "a9b326df4e6da61c5b6f5e1058be83a2 (16:39): OK, yeah, it would definitely go in the same location",
        "a9b326df4e6da61c5b6f5e1058be83a2 (16:39): I will write up a patch for it later"
    ],
    "person_ids": [
        "2466054b396284f05e6f6e4e7d3c806d",
        "b8810fee2f4a71f849f3f7409546d1d9",
        "1f8387eb43f131d7c309a90a4e36b5cb",
        "a11aabeeceeae6b8cb5d12ea06b56554",
        "ab7faae5d7b250ea8606486575f8f79c",
        "a9b326df4e6da61c5b6f5e1058be83a2"
    ]
}