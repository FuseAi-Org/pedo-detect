{
    "id": "69f1210ef90212ad9ab5546e967e815d",
    "messages": [
        "b8810fee2f4a71f849f3f7409546d1d9 (15:16): a9b326df4e6da61c5b6f5e1058be83a2: It's a bit scary that I managed to dogfood HTML5 parsing for nearly two weeks while the case of file under 512 bytes with no encoding declaration was completely, utterly broken",
        "b25b6b77a0087ff8385941e5545d32ea (15:19): b8810fee2f4a71f849f3f7409546d1d9: Don't you get test results from the try servers? Or are you ignoring thm because there is too much noise?",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:20): b25b6b77a0087ff8385941e5545d32ea: I was aware that all wasn't well with tryserver tests but I had no idea what the problem was and all my real browsing worked fine...",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:20): apparently, the real world is over 512 bytes or has a declared charset",
        "a9b326df4e6da61c5b6f5e1058be83a2 (15:20): b8810fee2f4a71f849f3f7409546d1d9: right",
        "a9b326df4e6da61c5b6f5e1058be83a2 (15:21): I don't think files with under 512 bytes are typical",
        "a9b326df4e6da61c5b6f5e1058be83a2 (15:22): anyway, I have a natural talent for breaking stuff without even trying",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:22): a9b326df4e6da61c5b6f5e1058be83a2: thanks for finding this.",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:25): of course, all the usual small test case runs happen though Hixie's live dom viewer, which runs through different IO code",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:25): since the input is UTF-16 string rather than a byte stream",
        "a9b326df4e6da61c5b6f5e1058be83a2 (15:26): b8810fee2f4a71f849f3f7409546d1d9: thank you for making it possible to do real-world testing with an HTML5 parser in an actual browser",
        "a9b326df4e6da61c5b6f5e1058be83a2 (15:26): I'm somebody else would have found that bug relatively soon too anyway",
        "b25b6b77a0087ff8385941e5545d32ea (15:28): This channel has become very mutually congratulatory all of a sudden :)",
        "a9b326df4e6da61c5b6f5e1058be83a2 (15:29): b25b6b77a0087ff8385941e5545d32ea: true. very astute observation on your part!",
        "a9b326df4e6da61c5b6f5e1058be83a2 (15:29): we clearly need some more acrimony here",
        "b25b6b77a0087ff8385941e5545d32ea (15:33): Hey laser lips! Your mother was a snow blower!",
        "b25b6b77a0087ff8385941e5545d32ea (15:36): is clearly regressing to his childhood",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:36): when did Hixie first put the parsing algorithm in the spec?",
        "3f2e2531201cfbf853f16f668132eaf2 (15:37): is too polite to know any insults other than the ones he learned from Monkey Island games",
        "3f2e2531201cfbf853f16f668132eaf2 (15:39): b8810fee2f4a71f849f3f7409546d1d9: There was a parsing algorithm in r1 from SVN",
        "b8810fee2f4a71f849f3f7409546d1d9 (15:39): 3f2e2531201cfbf853f16f668132eaf2: thanks",
        "3f2e2531201cfbf853f16f668132eaf2 (15:39): which was 2006-03-02",
        "b25b6b77a0087ff8385941e5545d32ea (15:40): I think Hixie said that the parsing bit wasn't started untill 2006",
        "b25b6b77a0087ff8385941e5545d32ea (15:41): On 5/11/2005 he said &quot;The HTML5 parsing section will cover this in detail&quot;",
        "3f2e2531201cfbf853f16f668132eaf2 (15:41): r1 says &quot;TIMELINE: january, february - parsing ...&quot;",
        "0a39f78bcb297ab0ebe8a29c28bfed89 (15:59): planet: More Web Workers in Action &lt;http://feedproxy.google.com/~r/ajaxian/~3/Y4qbVp0xqOs/more-web-workers-in-action&gt;",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:09): anyone got a timeline for Opera's &lt;p&gt;&lt;table&gt; behavior?",
        "3f2e2531201cfbf853f16f668132eaf2 (16:18): b8810fee2f4a71f849f3f7409546d1d9: It was apparently fixed in &quot;build 7586&quot;, around 2005-05-09",
        "3f2e2531201cfbf853f16f668132eaf2 (16:19): which http://snapshot.opera.com/windows/ seems to indicate was just before Opera 8.01",
        "0a39f78bcb297ab0ebe8a29c28bfed89 (16:19): Title: Opera for Windows - Previews and Betas (at snapshot.opera.com)",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:19): 3f2e2531201cfbf853f16f668132eaf2: thanks",
        "3f2e2531201cfbf853f16f668132eaf2 (16:19): b8810fee2f4a71f849f3f7409546d1d9: (but I haven't tested it myself)",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:20): 3f2e2531201cfbf853f16f668132eaf2: what's your source?",
        "3f2e2531201cfbf853f16f668132eaf2 (16:20): b8810fee2f4a71f849f3f7409546d1d9: The Opera bug database",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:20): 3f2e2531201cfbf853f16f668132eaf2: thanks",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:21): 3f2e2531201cfbf853f16f668132eaf2: do you work for Opera now?",
        "3f2e2531201cfbf853f16f668132eaf2 (16:21): b8810fee2f4a71f849f3f7409546d1d9: No",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:44): ok. blogged: http:/ b8810fee2f4a71f849f3f7409546d1d9.iki.fi/last-html-quirk/",
        "0a39f78bcb297ab0ebe8a29c28bfed89 (16:44): Title: The Last of the Parsing Quirks (at b8810fee2f4a71f849f3f7409546d1d9.iki.fi)",
        "a9b326df4e6da61c5b6f5e1058be83a2 (16:46): b8810fee2f4a71f849f3f7409546d1d9: great title",
        "a9b326df4e6da61c5b6f5e1058be83a2 (16:47): b8810fee2f4a71f849f3f7409546d1d9: btw, your site has a really interesting way of progressively rendering in Webkit",
        "99d799105c5630cb16b3a7b54e6ae26e (16:48): sees underlines",
        "99d799105c5630cb16b3a7b54e6ae26e (16:48): has got the content :)",
        "b8810fee2f4a71f849f3f7409546d1d9 (16:49): https://bugs.webkit.org/show_bug.cgi?id=25207 is still UNCONFIRMED",
        "0a39f78bcb297ab0ebe8a29c28bfed89 (16:49): Title: Bug 25207 - Text not visible while extenal font downloading (at bugs.webkit.org)",
        "a9b326df4e6da61c5b6f5e1058be83a2 (16:52): http://ajaxian.com/archives/mypatterns-xslt-regex-for-js-objects",
        "0a39f78bcb297ab0ebe8a29c28bfed89 (16:52): Title: Ajaxian \u00aa myPatterns: XSLT / RegEx for JS Objects (at ajaxian.com)",
        "a9b326df4e6da61c5b6f5e1058be83a2 (16:53): I'm baffled by that title",
        "3f2e2531201cfbf853f16f668132eaf2 (16:54): Looks like pattern matching from functional programming languages",
        "3f2e2531201cfbf853f16f668132eaf2 (16:54): (but without the strong typing)",
        "a9b326df4e6da61c5b6f5e1058be83a2 (16:55): http://mypatterns.free.fr/more.html explains a little more",
        "0a39f78bcb297ab0ebe8a29c28bfed89 (16:55): Title: more on custom notations (at mypatterns.free.fr)",
        "3f2e2531201cfbf853f16f668132eaf2 (16:57): has written fun pattern-matching code like &quot;match (state.c0, state.currentToken) with Some c, Some (TagToken ({ attributes = (an, av)::attrs } as t)) -&gt; { state with currentToken = Some (TagToken { t with attributes = (c::an, av)::attrs }) } | _ -&gt; raise BrokenAlgorithm&quot;",
        "3f2e2531201cfbf853f16f668132eaf2 (16:59): The destructuring assignment in JavaScript 1.6(? or 1.7 or something?) is basically the same thing",
        "3f2e2531201cfbf853f16f668132eaf2 (16:59): https://developer.mozilla.org/en/New_in_JavaScript_1.7#Destructuring_assignment",
        "0a39f78bcb297ab0ebe8a29c28bfed89 (16:59): Title: New in JavaScript 1.7 - MDC (at developer.mozilla.org)",
        "3f2e2531201cfbf853f16f668132eaf2 (17:00): Actually that's pretty much exactly what myPatterns is doing, it looks like",
        "3f2e2531201cfbf853f16f668132eaf2 (17:00): &quot;for each (let {name: n, family: { father: f } } in people) { document.write (&quot;Name: &quot; + n + &quot;, Father: &quot; + f + &quot;&lt;br&gt;\\n&quot;); } &quot; etc",
        "a9b326df4e6da61c5b6f5e1058be83a2 (17:01): interesting",
        "3f2e2531201cfbf853f16f668132eaf2 (17:18): b8810fee2f4a71f849f3f7409546d1d9: http://philip.html5.org/misc/p-table-ie1.png might be better evidence for IE's behaviour than the IRC logs",
        "3f2e2531201cfbf853f16f668132eaf2 (17:18): Also it provides an opportunity to marvel at the UI design",
        "3f2e2531201cfbf853f16f668132eaf2 (17:19): Oh, there's an address bar but it's disabled by default",
        "3f2e2531201cfbf853f16f668132eaf2 (17:22): updates the screenshot",
        "3f2e2531201cfbf853f16f668132eaf2 (17:23): (Those are not genuine Win95 window decorations)"
    ],
    "person_ids": [
        "b8810fee2f4a71f849f3f7409546d1d9",
        "b25b6b77a0087ff8385941e5545d32ea",
        "a9b326df4e6da61c5b6f5e1058be83a2",
        "3f2e2531201cfbf853f16f668132eaf2",
        "0a39f78bcb297ab0ebe8a29c28bfed89",
        "99d799105c5630cb16b3a7b54e6ae26e"
    ]
}