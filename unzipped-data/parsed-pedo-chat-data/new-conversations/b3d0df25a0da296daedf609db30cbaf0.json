{
    "id": "b3d0df25a0da296daedf609db30cbaf0",
    "messages": [
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:50): 69b0d3dfe919a6b860a9fac82de52a7e: what's a character not defined by unicode? from the document conformance section, it seems that not all non-characters are",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:50): yeah, but some of them are defined to be permanently undefined",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:50): whereas others are merely not yet defined",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:51): oh, wait.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:51): I realise what I'm mistaking.",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:51): i'm so sorry for anne. he's somehow ended up editing a spec with multiple phone calls per week trying to tell him what the spec should say",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:51): sure am glad i dumped xmlhttprequest now though :-D",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:52): xxFFFE is the only code point that's always a non-character, as FDD0 to FDEF are only exactly that",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:52): that's what confused me",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:52): eh?",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:52): there are lots of non-character characters",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:52): FFFF",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:52): FFFE",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:52): U+03FFFE",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:52): etc",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:52): see the list i just put in the spec, in fact :-)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:53): I thought it was wrong, that's the only point :)",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:53): ok :-)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:53): but as I said, I'm being silly",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:53): well i just copied it from xml 1.0",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:53): so...",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:53): I think FFFF is legal",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:54): it's not",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:54): &quot;Noncharacters consist of the values U+nFFFE and",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:54): U+nFFFF (where n is from 0 to 1016) and the values U+FDD0..U+FDEF.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:54): &quot;",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:54): OK, I'm wrong again (and so is my implementation, then)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:54): realises his implementation is just too smart for himself",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:54): my implementation _is_ right.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:55): `($codepoint &amp; 0xFFFE) === 0xFFFE` does match FFFF",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:56): or rather, it does match it",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:56): but yes",
        "69b0d3dfe919a6b860a9fac82de52a7e (21:56): that's a fine check",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:56): If you aren't too tired to misread it :)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:56): (that's from my PHP impl., FWIW)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:57): Or rather, It only is if you aren't too tired to understand it",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:57): ergh.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:57): I can't even do English :)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (21:57): gives up, and shuts up",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:02): knowing when to shut up is a good skill to have :-)",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:02): 69b0d3dfe919a6b860a9fac82de52a7e: I would rather the bit about when to throw a parse error to be clearer. Surrogates _are_ defined by Unicode (they just have no character assignments), for example",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:02): there are no surrogate characters",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:02): unless i'm misunderstanding you",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:02): what is unclear about the spec?",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:03): ah. true. if you take it of the actual meaning of character, yeah.",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:03): was thinking of a character as being any code-point, but of course with non-characters that's dumb",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:03): shuts up, again",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:04): U+.... is the character, not the value as it was in the original byte stream",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:04): so if you are decoding as UTF-16, you can never end up seeing a U+.... character from the surrogate blocks",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:04): yeah, that's true",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:04): needs to wake up",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:04): and if you do it as UTF-8, and you see one of those characters, it's not actually a surrogate character, it's a non-character",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:04): (or, alternatively, just go to bed)",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:04): but anyway",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:05): where is the part fo the spec that says not to put encoding declarations in the file?",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:05): can't find it",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:05): didn't know the spec said that",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:05): apparently people want me to remove it",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:05): which i'm fine with",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:05): but i can't find it...",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:06): latest revision to the spec could cause some documents to cause a heckuva lot of parse error, me thinks. but people manage to create a heckuva lot of parse errors anyway.",
        "ab7faae5d7b250ea8606486575f8f79c (22:07): 69b0d3dfe919a6b860a9fac82de52a7e: s/occurances/occurrences/ in a recent edit",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:07): hate that word",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:07): thanks",
        "6905646aa63b96d6bdfbd256603fa58e (22:08): 69b0d3dfe919a6b860a9fac82de52a7e: by &quot;encoding declarations in the file&quot;, could people be referring to &quot;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;",
        "6905646aa63b96d6bdfbd256603fa58e (22:08): &quot; ?",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:08): 6905646aa63b96d6bdfbd256603fa58e: yes",
        "a11aabeeceeae6b8cb5d12ea06b56554 (22:08): on the subject of English, how is the spec both en-gb-x-hixie and en-us-x-hixie at once?",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:08): a11aabeeceeae6b8cb5d12ea06b56554: it's mostly -us-, i just haven't fixed the declarations yet",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:08): they're in a different file",
        "6905646aa63b96d6bdfbd256603fa58e (22:08): are people confusing that being allowed with that being required?",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:09): 6905646aa63b96d6bdfbd256603fa58e: no, i'm pretty sure i once wrote that people should use Content-Type headers instead",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:09): but i can't find it anymore",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:10): well, can't find it",
        "69b0d3dfe919a6b860a9fac82de52a7e (22:10): oh well"
    ],
    "person_ids": [
        "a11aabeeceeae6b8cb5d12ea06b56554",
        "69b0d3dfe919a6b860a9fac82de52a7e",
        "ab7faae5d7b250ea8606486575f8f79c",
        "6905646aa63b96d6bdfbd256603fa58e"
    ]
}